# [[double-brackets]] - with VECTORS

# Intro to using [[double-brackets]] WITH VECTORS      ####

```{r}
#############################################################################.
#
# USING [single-brackets] and [[double-brackets]] WITH VECTORS      ####
#
# Some introductory comments:
#
#     We will start by first understanding what [[double-brackets]] mean when
#     used with vectors. However, practically speaking, [[dobuble-brackets]] 
#     are used with LISTS very often but are HARDLY EVER USED WITH VECTORS.
#     You'll soon understand why. Nevertheless, it helps if you understand
#     how [[double-brackets]] work with vectors. In addition, I think it makes
#     learning the concepts of how to use [[double-brackets]] with lists easier
#     if we first learn about how to use [[double-brackets]] with vectors.
#
# If you keep the following idea in mind, a lot of the rules become 
# easier to remember:
#
#   - [single-brackets] are intended to allow you to identify MULTIPLE objects. ####
#
#   - [[double-brackets]] are intended to allow you to identify A SINGLE object. ####
#
#
# The following summarize what [[double-brackets]] may and may not contain:
#
#   - with VECTORS [[double-brackets] should ONLY contain a SINGLE positive position number  ####
#
#   - with LISTS [[double-brackets] may contain SEVERAL positive position numbers  ####
#     (This is known as "recursive indexing" - a topic which is covered below.)
#
#   - DO NOT USE negative position numbers with [[double-brackets]]
#     [[double-brackets]] are NOT designed to use negative position numbers
#
#   - DO NOT USE logical values (TRUE/FALSE) with [[double-brackets]]
#     [[double-brackets]] are NOT designed to use logical values (TRUE/FALSE)  ####
#
#   - NOTE: Later we will cover something called "named vectors" and "named lists" 
#      for named vectors and lists, [[double-brackets]] may contain a single "name" ####
#############################################################################.
```

##   someVector[[1]] is the same as someVector[1]                                 

```{r}
# Setup some data for the examples

nums = c(100,200,300,400)

#-----------------------------------------------------------------------------.
# USING [SINGLE-BRACKETS] and [[DOUBLE-BRACKETS]] WITH VECTORS (continued ...)
#
# If the [[double-brackets]] contains a SINGLE POSITIVE NUMBER you get the 
# exact same result as if you had used [single-brackets].
#
# EXAMPLE:
#   someVector[[1]] is the same as someVector[1]                                 
#
# You may NOT use more than ONE POSITIVE NUMBER between the [[double-brackets]]. 
#
#-----------------------------------------------------------------------------.

nums[3]     # 300  - [single-brackets] - you know this already

nums[[3]]   # 300  - [[double-brackets]] - same results 
```

## someVector[[c(1,2)]]   # ERROR - DON'T USE more than ONE POSITIVE NUMBER 

```{r}
# With [single-brackets] you MAY use more than one positive number

nums[c(1,3)]    # 100 300 - [single-brackets] allows more than one number

# BUT DON'T use more than one positive number with [[double-brackets]]
# That is an ERROR!
#
# Remember - [[double-brackets]] are designed to retrieve EXACTLY ONE object.

nums[[c(1,3)]]  #  ERROR - [[double-brackets]] does NOT allow more than one number
```

## DO NOT USE negative numbers or logical values in [[double-brackets]]    ####

```{r}
#-----------------------------------------------------------------------------.
# Don't use negative numbers in [[double-brackets]]    ####
#
# Don't use logical values in [[double-brackets]]      ####
#-----------------------------------------------------------------------------.

nums                                  # 100 200 300 400 
nums[[-1]]                            # ERROR
nums[[c(-1,-2.-3)]]                   # ERROR
nums[[c(TRUE, FALSE, FALSE, FALSE)]]  # ERROR


# There is ONE exception:
#
# Why do you think this happens? - see the next question.

nums[[TRUE]]   # 100  

#-----------------------------------------------------------------------------.
# USING [[DOUBLE-BRACKETS]] WITH VECTORS (continued ...)
#
# QUESTION:
#
# Why do the following commands produce different results?
# Explain each one. Think about it ...
#
#   > nums = c(100,200,300,400)
#
#   > nums[TRUE]
#   [1] 100 200 300 400
#
#   > nums[[TRUE]]
#   [1] 100
#
#   > nums[[FALSE]]    
#   ERROR 
#-----------------------------------------------------------------------------.

# setup some data
nums = c(100,200,300,400)

# EXPLAIN WHY YOU GET THE RESULTS YOU DO FOR EACH OF THESE COMMANDS

nums[TRUE]     # 100 200 300 400

nums[[TRUE]]   # 100

nums[[FALSE]]  # ERROR 


#############.
# ANSWER
#############.
nums[TRUE]    # recycling rule = nums[c(TRUE,TRUE,TRUE,TRUE)]
nums[[TRUE]]  # 100 - TRUE gets implicitly converted to 1
nums[[FALSE]] # ERROR - FALSE gets implicitly converted to 0
```

