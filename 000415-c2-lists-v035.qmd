---
execute: 
  error: true
  warning: true
number-depth: 4
---

# [[double-brackets]]

```{r}
###############################################################################.
###############################################################################.
## 
## INTRODUCING [[double-bracket]] NOTATION FOR INDEXING LISTS (and also vectors)
##
## A new notation that we have not seen yet for indexing both vectors and lists
## is to use [[double-brackets]] to contain the index information instead
## of [single-brackets]. For example
##
##    someObject[3]     # [single-bracket] notation
##    someObject[[3]]   # [[double-bracket]] notation
##
## [[double-brackets]] have a slightly different meaning from [single-brackets].
##
## [[double-brackets]] work a little differently with vectors and with lists.
##
###############################################################################.
###############################################################################.
```


```{r}
#----------------------------------------------------------------------.
# USING [[double-brackets]] WITH LISTS 
#
# Using [[double-brackets]] to index into a LIST is similar to using 
# double-brackets to index into a vector in the following way:
#
#     - You CAN use POSITIVE NUMBERS numbers in the [[double-brackets]]
#       With a LIST you MAY specify more than one POSITIVE number in the
#       [[double-brackets]]. (With vectors you are only able to specify
#       one positive number). We'll discuss below exactly how this works.
#
#  HOWEVER 
#
#     - You CANNOT use negative numbers in the [[double-brackets]]
#
#     - You CANNOT use logical values in the [[double-brackets]]
#
#----------------------------------------------------------------------.

# setup a list to work with

gradebook = list( c("bob", "charlie", "frank"), # student names
                  c(70,80,90),                  # grades from first test
                  c(75,85,88),                  # grades from second test
                  c(TRUE, FALSE,FALSE))         # TRUE for honors students

gradebook

# The following are ERRORS!

gradebook[[-1]]    # ERROR - don't use negative values in the [[double-brackets]]

gradebook[[c(TRUE,FALSE)]] # ERROR - don't use logicals in [[double-brackets]]
```

## someList[1]   vs   someList[[1]]                                  ####

```{r}
#............................................................................
# QUESTION
#
# Take a minute to CAREFULLY NOTICE the difference between the following 
# two commands. 
# 
# What is the difference??? 
#
#      > gradebook[1]
#      [[1]]
#      [1] "bob"     "charlie" "frank"  
#
#
#      > gradebook[[1]]
#      [1] "bob" "charlie" "frank"
#
#............................................................................

gradebook[1]  # return value is shown below

# > gradebook[1]
# [[1]]
# [1] "bob"     "charlie" "frank"  


gradebook[[1]]  # return value is shown below

# > gradebook[[1]]
# [1] "bob" "charlie" "frank"



#............................................................................
# ANSWER TO QUESTION
#
#    gradebook[1]    # returns a LIST of that contains ONE VECTOR
#
#    gradebook[[1]]  # returns ONE VECTOR
#............................................................................

mode( gradebook [1])   # returns a list

mode( gradebook [[1]]) # returns a character vector


# Similarly for other positions ....

gradebook[[2]]      # 70 80 90

mode( gradebook [2])   # list
mode( gradebook [[2]]) # numeric
```

## USING [single-brackets] TO INDEX INTO A LIST USING MORE THAN ONE POSITIVE NUMBER

```{r}
#---------------------------------------------------------------------.
# USING [single-brackets] TO INDEX INTO A LIST 
# USING MORE THAN ONE POSITIVE NUMBER
# is conceptually similar to using more than one positive number in single brackets
# with VECTORS.
#
# When indexing into a VECTOR you get back just the specified values in a new VECTOR.
#
# When indexing into a LIST  you get back just the specified values in a new LIST.
#---------------------------------------------------------------------.

gradebook[ c(1,2) ]   # a list of 2 items, i.e. the names and the test1 grades
mode(gradebook[c(1,2)])  # list
```

## USING [[double-brackets]] TO INDEX INTO A LIST USING MORE THAN ONE POSITIVE NUMBER

```{r}
#---------------------------------------------------------------------.
# RECURSIVE INDEXING
#
# WITH LISTS YOU CAN USE THE [[double-brackets]] with more than
# one position number - it applies the position numbers to the items
# you get back one at a time. This is known as "recursive indexing".
#---------------------------------------------------------------------.

gradebook[[c(1,2)]] # "charlie" - ie. from the 1st item in the list get the 2nd item


gradebook[[c(3,3)]] # 88 - i.e. from the 3rd item in the list get the 3rd item

gradebook[[c(3,2)]] # 85 - i.e. from the 3rd item in the list get the 2nd item





gradebook[[3]]      # 75 85 95

gradebook[[4]]      # TRUE FALSE FALSE
```

## Using the length function with lists (it can be tricky)

```{r}
#--------------------------------------------.
# length( SOME_LIST )
#    returns the number of objects in the list
#
#     vs
# 
# length( SOME_LIST[[1]] )
#    returns the number of items in the first object in the list
#
#    vs
#
# length( SOME_LIST[1] )
#    DONT DO THIS - IT ALWAYS RETURNS 1  - WHY?
#------------------------------------------------

rm(list=ls()) # Start from scratch
gradebook = list( c("bob", "charlie", "frank"), # student names
                  c(70,80,90),                  # grades from first test
                  c(75,85,88),                  # grades from second test
                  c(TRUE, FALSE,FALSE))         # TRUE for honors students


##############################################.
# Let's see the lengths of the following ...
##############################################.
length(gradebook)       # 4 - i.e. four objects in the list 

length(gradebook[[1]])  # 3 - i.e. three student names in the first object of the list

# Be careful - if you use single brackets you will get back a "list". 
# Therefore the following all return a list of length 1.
length(gradebook[1])    # 1 - i.e. this is a LIST that contains one vector

#############################.
# Let's see the actual values
#############################.

# The full gradebook
gradebook       

# The first item in the list (i.e. a full vector)
gradebook[[1]]  

# A new list that contains just the 1st item of the original list vector)
gradebook[1]    

#etc
```

## Summary - [single-brackets] vs [[double-brackets]]

```{r}
###############################################################################.
#
# If you keep the following idea in mind, a lot of the rules become 
# easier to remember:
#
#   - [single-brackets] are intended to allow you to identify MULTIPLE objects
#     in a list (and in a vector).
#
#   - [[double-brackets]] are intended to allow you to identify A SINGLE object
#     in a list (and in a vector too - we'll see this later). However, when
#     using a list, a SINGLE object might be a complete vector (or even 
#     a complete list)
###############################################################################.

```

## --- Practice --- 

```{r}
#########################################################.
# Use the following to answer the questions below
#########################################################.
rm(list=ls()) # Start from scratch
gradebook = list( c("bob", "charlie", "frank", "sam"),# student names
                  c(70,     80,        90,      100), # grades from 1st test
                  c(75,     85,        88,      92),  # grades from 2nd test
                  c(TRUE,   FALSE,     FALSE,   TRUE))# TRUE for honors students
```

::: {.callout-note icon=false collapse="true"}
### Analyze the gradeook object - click here {.unnumbered}
```{r}
str(gradebook)  # see the structure
gradebook # (see the actual values)
# View(gradebooks)  # see the structure - try this command yourself
```
:::


::: {.callout-note icon=false collapse="true"}
### Click here for questions 

::: {.callout-note icon=false collapse="true"}
### QUESTION - average on 1st exam (click for more info)

```{r}
##########################################################################.
# QUESTION
#
# NOTE that many R commands and functions require a vector, not a list.
# Therefore in these situations you will need to retrieve a vector
# from the list using [[double-brackets]]
#
# Given the gradebook data shown above, write a command to calculate
# the average on the 1st exam.
##########################################################################.
```

::: {.callout-note icon=false collapse="true"}
##### click here for answer
```{r}
###########.
# ANSWER
###########.

# Use [[double-brackets]] to get the data for the first exam
# and take the mean.

mean(gradebook[[2]])

##############################.
# THE FOLLOWING IS WRONG!!!!
##############################.

# Note that the following does NOT produce the correct results
# since gradebook[2] is a LIST and you cannot take the mean of a list.

mean(gradebook[2])  # WRONG - gradebook[2] is a LIST - you need a VECTOR
```
:::

:::

::: {.callout-note icon=false collapse="true"}
### QUESTION - name of students who got above avg on 1st test (click for more info)

```{r}
##########################################################################.
# QUESTION
#
# Notice that the data in the list above is a set of parallel vectors.
# Write a command to show the name of the students who got above average
# on the 1st test.
##########################################################################.
```

::: {.callout-note icon=false collapse="true"}
##### click here for answer
```{r}
#####################################.
# ANSWER (using a few lines of code)
#####################################.

students = gradebook[[1]]
test1 = gradebook[[2]]

students [ test1 > mean(test1) ]  # show the students names

#####################################.
# ANSWER (in one line of code)
#####################################.

gradebook[[1]] [  gradebook[[2]] > mean(gradebook[[2]])  ]

```
:::

:::

::: {.callout-note icon=false collapse="true"}
### QUESTION - vector of test1 and test2 grades for 3rd student

```{r}
#############################################################################.
# QUESTION 
# Write a command to return a vector that contains both the test1 and test2 
# grades for the 3rd student
#############################################################################.
```

::: {.callout-note icon=false collapse="true"}
##### click here for answer
```{r}
###########.
# ANSWER
###########.
c( gradebook[[c(2,3)]] , gradebook[[c(3,3)]] )
```
:::

:::

:::

## --- Practice --- 

```{r}
#########################################################.
# Use the following to answer the questions below
#########################################################.
rm(list=ls())  # start from scratch

gradebooks = list( 
                    c("Intro to IDS", "Prof. Jones"),
                    list( "Fall 2023",
                          c("bob", "charlie", "frank"), # student names
                          c(70,80,90),                  # grades from first test
                          c(75,85,88),                  # grades from second test
                          c(TRUE, FALSE,FALSE)),         # TRUE for honors students
                    list("Spring 2024",
                          c("bob", "charlie", "frank"), # student names
                          c(70,80,90),                  # grades from first test
                          c(75,85,88),                  # grades from second test
                          c(TRUE, FALSE,FALSE))         # TRUE for honors students
             )
```

::: {.callout-note icon=false collapse="true"}
### Analyze the gradeooks object - click here {.unnumbered}
```{r}
str(gradebooks)  # see the structure
gradebooks # (see the actual values)
# View(gradebooks)  # see the structure - try this command yourself
```
:::

::: {.callout-note icon=false collapse="true"}
### Questions to WRITE CODE - click here for questions - click question for answer


::: {.callout-note icon=false collapse="true"}
### Write code to calculate the average of the first test from the Fall 2023 class.
```{r}
mean( gradebooks[[2]][[3]] )
```
:::


::: {.callout-note icon=false collapse="true"}
### Write code to calculate the highest grade from all of the test grades from the Fall 2023 class.
```{r}
max( gradebooks[[2]][[3]], gradebooks[[2]][[4]] )
```
:::

:::


::: {.callout-note icon=false collapse="true"}
### Questions to READ CODE - click here for questions - click question for answer

::: {.callout-note icon=false collapse="true"}
#### length(gradebooks)  
```{r}
length(gradebooks)
```
:::

::: {.callout-note icon=false collapse="true"}
#### length(gradebooks[c(1,2)]) 
```{r}
length(gradebooks[c(1,2)])  
```
:::

::: {.callout-note icon=false collapse="true"}
#### gradebooks[c(1,2)] 
```{r}
gradebooks[c(1,2)]
```
:::


::: {.callout-note icon=false collapse="true"}
#### str(gradebooks[c(1,2)])
```{r}
str(gradebooks[c(1,2)])
```
:::


::: {.callout-note icon=false collapse="true"}
#### gradebooks[c(1,3)]
```{r}
gradebooks[c(1,3)]
```
:::


::: {.callout-note icon=false collapse="true"}
#### str(gradebooks[c(1,3)])
```{r}
str(gradebooks[c(1,3)])
```
:::


::: {.callout-note icon=false collapse="true"}
#### length(gradebooks[[c(1,2)]])
```{r}
length(gradebooks[[c(1,2)]])
```
:::


::: {.callout-note icon=false collapse="true"}
#### gradebooks[[c(1,2)]]
```{r}
gradebooks[[c(1,2)]]
```
:::


::: {.callout-note icon=false collapse="true"}
#### str(gradebooks[[c(1,2)]])
```{r}
str(gradebooks[[c(1,2)]])
```
:::


::: {.callout-note icon=false collapse="true"}
#### length(gradebooks[[2]])
```{r}
length(gradebooks[[2]])
```
:::


::: {.callout-note icon=false collapse="true"}
#### gradebooks[[2]][3]
```{r}
gradebooks[[2]][3]
```
:::


::: {.callout-note icon=false collapse="true"}
#### mode( gradebooks[[2]][3] )
```{r}
mode( gradebooks[[2]][3] )
```
:::


::: {.callout-note icon=false collapse="true"}
#### length( gradebooks[[2]][3] )
```{r}
length( gradebooks[[2]][3] )
```
:::


::: {.callout-note icon=false collapse="true"}
#### gradebooks[[2]][[3]]  
```{r}
gradebooks[[2]][[3]]  
```
:::


::: {.callout-note icon=false collapse="true"}
#### mode( gradebooks[[2]][[3]] )  
```{r}
mode( gradebooks[[2]][[3]] )  
```
:::


::: {.callout-note icon=false collapse="true"}
#### length( gradebooks[[2]][3] )
```{r}
length( gradebooks[[2]][3] )  
```
:::

:::





<!-- 
##########################################################################

# IGNORE THE MATERIAL BELOW. I PLAN TO ADD THIS TO THE QUESTIONS ABOVE WHEN I GET A CHANCE.


```{r}
# QUESTION
# ADD "mike" to the vector of student names in the 1st object of the list

gradebook[[c(1,4)]] = "mike"
gradebook

# Do it another way. This time add "frank"

gradebook[[1]] = c( gradebook[[1]] , "frank" )
gradebook

# Do it another way. This time add "abie"

gradebook[[1]][6] = "abie"
gradebook

# add "simcha" and "shalom" 
gradebook [[1]][c(7,8)] = c("simcha","shalom")
gradebook

# add "gabriel"
gradebook[[1]][ length(gradebook[[1]])+1  ] = "gabriel"
gradebook

# The follwoing doesn't work (TODO - explain in notes)
gradebook[1][10] = "Jonah"
gradebook
```

## WORKING WITH OBJECTS IN A LIST

```{r}
#---------------------------------------------------------------.
# WORKING WITH OBJECTS IN A LIST
#---------------------------------------------------------------.

# let's recreate all of the data
rm(list= ls())

gradebook = list(c("bob", "charlie", "frank"), 
                 c(70,80,90), 
                 c(75,85,88), 
                 c(TRUE, FALSE,FALSE))


# You can use [[double-brackets]] to access objects in a list 
#
# In the following command, 
#
# Step 1: gradebook[[1]] directly accesses the item at the 1st position in the list.
# 
# Step 2: gradebook[[1]][2] = "zeke"
#         directly sets the value at the 2nd position in the first item in the list to "zeke".
#
# Notice that in step 2, the [[1]] uses double brackets because this
#                        is directly accessing a value from the list
#                        but the [2] uses [single-brackets] because this
#                        is accessing a value in a vector.
# 
# The following is the actual vector that is in the first position in the list.
#
#                 > gradebook[[1]]
#                 [1] "bob" "charlie" "frank"
#
# You can now use that vector as you would use any other vector. For example
# the following gets the 2nd value from this vector:
#
#                 > gradebook[[1]][2]
#                 [1] "charlie"

gradebook[[1]][2]    # "charlie"    - same as gradebook[[c(1,2)]]

gradebook[[1]][2] = "zeke"  # set 2nd students name to "zeke"

gradebook  # "zeke" is now the 2nd student


```

-->