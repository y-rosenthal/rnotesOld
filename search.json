[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "r notes",
    "section": "",
    "text": "About This Website\nThis website is for the use of my students at YU.\nI started to transfer all of the in class notes that we’ve been working on in the .R files to my personal website - yrosenthal.com. To get to the notes, navigate your browser to http://yrosenthal.com/rnotes.\nThe menu on the left lists the “chapters” in the “book”. Each “chapter” roughly correlates to one of the .R files that we were working on in class. When you click on a “chapter” from the left hand menu, you should see another menu appear on the right hand side of the screen. The menu on the right side contains links to sections in that chapter. It’s not perfect, but I’m working on improving the links.\nOne of the many nice things about this website is that the output of all R code is shown below the actual R code (see the website to see what I mean). The output is actually generated by R. Therefore, if there is a difference between my comments and the output shown below the code, then I must have made a typo in my comments. You can trust the results displayed below the code more than the #comments that I wrote.\nFYI - I created this website by using “Quarto” which is the new version of what has for years been called “R Markdown”. Quarto simplifies the publishing this type of content online, or in a PDF, or an ebook, etc.\n-Prof. Rosenthal\n\n\nUpdates to this website\nI’ll be updating this and improving it on a regular basis. If you are interested. I will list the updates below.\n-Prof. Rosenthal\nAdded suggested answers to the Vectors1 practice problems.\n\n\n\n\n\n\n\n11/05/2023\nAdded suggested answers to the Vectors1 practice problems.\nAdded missing entry “Logical vectors, relational (AKA logical) operators, ifelse” We covered this in class and it was on Canvas but it had been inadvertantly not included on the website.\nFixed a few typos.\nFixed PDF file.\n\n\n10/31/2023\nAdded more chapters to the website.\n\n\n10/26/2023\nOriginal website.",
    "crumbs": [
      "About This Website"
    ]
  },
  {
    "objectID": "000065-quartoBook_part1_midterm2023-v001.html",
    "href": "000065-quartoBook_part1_midterm2023-v001.html",
    "title": "Midterm Topics (Fall 2023)",
    "section": "",
    "text": "The material in this section is\non the midterm (Fall 2023).\nSee the section below entitled “Midterm Practice” for practice questions.",
    "crumbs": [
      "Midterm Topics (Fall 2023)"
    ]
  },
  {
    "objectID": "000100-a-installingAndUsingR-v011-afterClass.html",
    "href": "000100-a-installingAndUsingR-v011-afterClass.html",
    "title": "1  Installing and using R",
    "section": "",
    "text": "1.1 Getting access to the R software",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and using R</span>"
    ]
  },
  {
    "objectID": "000100-a-installingAndUsingR-v011-afterClass.html#getting-access-to-the-r-software",
    "href": "000100-a-installingAndUsingR-v011-afterClass.html#getting-access-to-the-r-software",
    "title": "1  Installing and using R",
    "section": "",
    "text": "Option 1: Installing R and RStudio on your computer\nIn order to install the software on your personal computer, you should install two different software products. The basic “R” software is installed first. The “base R” (i.e. R) is usable by itself but RStudio adds many features that makes using R much easier to use. I therefore recommend that you also install R Studio and use it for all of your work.\nThe “R Studio” program requires that the “R” program already be installed on your computer. Therefore it is important that you install these products in the following order.\n\ninstall R first\nInstall RStudio next\n\nFor the specifics of how to install these products, see instructions on Canvas or see this webpage: https://rstudio-education.github.io/hopr/starting.html\n\nWARNING - DON’T run two copies of RStudio at the same time (this might have been fixed)\n\n#--------------------------------------------------------------------------.\n#\n# DON'T run two copies of RStudio at the same time (this might have been fixed) ####\n#\n#    This issue only applies to the version of RStudio that you install on\n#    your personal machine. \n#\n#    This does NOT apply to the online version of RStudio - \n#\n#--------------------------------------------------------------------------.\n# Running two copies of RStudio at the same time can sometimes\n# lead to problems. These problems are often not obvious. Therefore it is\n# highly recommended that you do NOT run two copies of RStudio at the same\n# time. If you notice strange things happening in RStudio, your first thing\n# to check is that you don't have two copies of RStudio running\n# simultaneously. If you do then shutdown one or both of them and see if the\n# problem goes away.\n#\n# NOTE - this used to be a problem prior to 2023. However, I've noticed\n# recently that it doesn't seem to be a problem anymore. However, if you notice\n# that something weird is happening with RStudio, just make sure that you're\n# not running RStudio in two different windows at the same time.\n\n\n\n\nOption 2: Using the online version of the software, i.e. https://posit.cloud/\nhttps://posit.cloud hosts an online version of the RStudio program. You can get started simply with the “free” plan. It should be pretty easy to figure out how to do that by navigating to https://posit.cloud\nWhen you login to posit.cloud you should create a “New RStudio Project”. You can then use that project for all of your R work.\nposit.cloud also has several tutorials (i.e. “primers”). You can get to these by clicking the “primers” button. The first primer is called “The Basics”. “The Basics” primer is divided into “Visualization Basics” and “Programming Basics”. This class will focus on programming, not visualization. To get a better feel for R, you may optionally go throught the “programming basics” section of “The Basics” primer on posit.cloud",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and using R</span>"
    ]
  },
  {
    "objectID": "000100-a-installingAndUsingR-v011-afterClass.html#using-rstudio---window-panes-arrow-keys-esc-key-etc",
    "href": "000100-a-installingAndUsingR-v011-afterClass.html#using-rstudio---window-panes-arrow-keys-esc-key-etc",
    "title": "1  Installing and using R",
    "section": "1.2 Using RStudio - window panes, arrow keys, ESC key, etc",
    "text": "1.2 Using RStudio - window panes, arrow keys, ESC key, etc\n\nWhat are RStudio “panes”\n\n#-----------------------------------------------------------.\n#\n# RStudio \"panes\" ####\n#\n#-----------------------------------------------------------.\n\n# RStudio's \"window panes\" - R Studio has 4 sections on the screen. \n# When you first install RStudio the window panes are in the following\n# configuration (this can be changed).\n#\n#   upper left: source - use this to write commands that you want to save\n#   lower left: console - this is where all commands are acutally \"run\"\n#   upper right: environment, history - (more about this later)\n#   lower right: files, plots, help - (more about this later)\n#\n# If you don't see all the \"panes\" choose the following from the RStudio menu:\n#      View --&gt; Panes --&gt; Show All Panes\n#\n# You can change which info appears in which pane with the following RStudio menu:\n#      View --&gt; Panes --&gt; Pane Layout\n#      (I recommend that you don't change this until you get more experience with R).\n\n\n\nThe “console” pane\n\n#-----------------------------------------------------------.\n#\n# The \"console\" pane ####\n#\n#-----------------------------------------------------------.\n\n# To write code you can type it directly in the \"console\" (lower left pane).\n# You'll see the answer immediately. For example, if you type\n# 3+2 into the console, you will see the answer 5.\n3+2\n\n[1] 5\n\n\n\n\nModifying previous commands (use the arrow keys)\n\n#-----------------------------------------------------------.\n#\n# Modifying previous commands (use the arrow keys) ####\n#\n#-----------------------------------------------------------.\n\n# If you want to modify a command that you previously typed, you can use the\n# up-arrow and down-arrow to search for commands that you previously typed.\n# When you find the command that you want, you can\n# (a) either press ENTER to run it again\n# (b) or use the left-arrow, right-arrow, backspace, delete (windows) keys to edit the command.\n#\n# For example, in the console,\n# (1) use the up arrow, and change 3+2 to 4+2 then hit ENTER to get the new value.\n# (2) use the up-arrow and down-arrow to see your history of commands.\n#\n# You can also see all of your previous commands in the \"history\" pane (which is by default\n# in the upper right hand corner of your screen). You can double-click any command to show\n# it in the console.\n\n\n\ninsert key (on Windows)\n\n#-----------------------------------------------------------.\n#\n# insert key (on Windows) ####\n#\n#-----------------------------------------------------------.\n\n# On Windows, the \"insert\" key will switch between \"overstrike\" mode and \"insert\" mode.\n# If you see that you are \"typing over\" existing text instead of inserting new text\n# then press the \"insert key\" to switch to \"insert mode\".\n\n\n\nErasing commands - ESC key\n\n#-----------------------------------------------------------.\n# Erasing commands - ESC key ####\n# \n# Clearing the console - ctrl-L (windows) or  cmd-L (mac)\n#\n#-----------------------------------------------------------.\n\n# If you type a long line that you want to erase, press the ESC key.\n\n# If you want to clear the entire console window, press ctrl-L (windows) or cmd-L (mac)\n\n\n\nThe “source” pane - for saving code\n\n#-----------------------------------------------------------.\n#\n# The \"source\" pane - for saving code   ####\n#\n#-----------------------------------------------------------.\n\n# To write code that you want to save you need to create a new \"R Script\" file.\n# Choose the following menu choice:\n#    File --&gt; New File --&gt; R Script\n#\n# This will open a new file in the \"source\" pane (which is by default in\n# the upper-left corner of the screen).\n# \n# You can type any commands in this file.\n#\n# You can run any command that is in a script file in the following ways:\n# (a) place your cursor on the line you want to executed and then\n#     press ctrl-ENTER (on Windows) or cmd-ENTER (on Mac)\n#\n# (b) to run several commands, select all of the lines you want to execute\n#     then press ctrl-ENTER (windows) or cmd-ENTER (mac)\n#\n# (c) you can even select just PART of a line to execute JUST THAT PART.\n#     For example, if the script contains the line:\n#         3+4*5-1\n#     and you highlight JUST the 4*5 and press ctrl-ENTER/cmd-ENTER you will see the answer 20.\n#     This even works with code in a comment. Try it with the line 3+4*5-1 above.\n#\n# (d) press ctrl-a (windows) or cmd-a (mac) to select all of the code\n#     then press ctrl-ENTER (windows) or cmd-ENTER (mac) to run all of the code.\n\n\n# To save changes you make to the file - press ctrl-s (windows) or cmd-s (mac)\n#\n# These files are saved with a .R (captial \"R\") filename extension.\n# If you don't know what a filename extension is, watch these videos\n# (or search for other videos or explanations ...)\n# Windows Filename Extensions: https://www.youtube.com/watch?v=m58rkfVRDlc\n# Mac Filename Extensions: https://www.youtube.com/watch?v=mYNchWitkyg\n#\n# If you double-click on the file, it should open up RStudio to display the file.\n\n\n\nOther RStudio features\n\n# Other RStudio features \n#\n# There are many different RStudio features. You can explore the various\n# menus and tabs to learn more. Don't be afraid to try things. Search online\n# for explanations.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and using R</span>"
    ]
  },
  {
    "objectID": "000100-a-installingAndUsingR-v011-afterClass.html#do-not-use-word-or-similar-programs-to-type-your-commands",
    "href": "000100-a-installingAndUsingR-v011-afterClass.html#do-not-use-word-or-similar-programs-to-type-your-commands",
    "title": "1  Installing and using R",
    "section": "1.3 Do NOT use Word (or similar programs) to type your commands",
    "text": "1.3 Do NOT use Word (or similar programs) to type your commands\n\n###########################################################################.\n###########################################################################.\n#\n# Do NOT use Word (or similar programs) to type your commands ####\n#\n###########################################################################.\n###########################################################################.\n\n# It is important to note that Microsoft Word and other similar programs will\n# sometimes replace minus signs (i.e. \"-\") with \"long dash\" characters (these\n# look like minus signs but are a little longer). Word also may quotes (\")\n# with \"smart quote\" characters. All of these changes will make a command\n# that \"looks\" correct, not work when you paste the code into R.\n#\n# The moral of the story is NEVER USE WORD to type R code.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and using R</span>"
    ]
  },
  {
    "objectID": "000100-a-installingAndUsingR-v011-afterClass.html#using-r-to-do-basic-arithmetic",
    "href": "000100-a-installingAndUsingR-v011-afterClass.html#using-r-to-do-basic-arithmetic",
    "title": "1  Installing and using R",
    "section": "1.4 Using R to do basic arithmetic",
    "text": "1.4 Using R to do basic arithmetic\n\n############################################################.\n############################################################.\n#\n# Using R to do basic arithmetic      ####\n#\n############################################################.\n############################################################.\n\n# R can be used as a simple \"calculator\"\n\n3 + 2    # This will show 5. The part after the # is a \"comment\" that is ignored.\n\n[1] 5\n\n# In general, extra spaces are meaningless. They can be added to improve readability of your code.\n# The following two command will produce the exact same answers.\n3+2-100+50             # you don't need spaces\n\n[1] -45\n\n   3 + 2 -   100 + 50  # but spaces do not change the result\n\n[1] -45\n\n# Exponents are written using the caret character, ^ (above the 6 on most keyboards).\n   \n2^3   # ie. \"2 to the power of 3\", i.e. 8\n\n[1] 8\n\n# Division is done using the FORWARD SLASH (i.e. /)\n# (The backslash (i.e. \"\\\" will NOT work for division)\n\n10/4   # this will show 2.5\n\n[1] 2.5\n\n#10\\4   # ERROR - don't use a backslash!\n\n\nOrder of operations\n\n# R follows the \"order of operations\" in math (i.e. PEMDAS), specifically ...\n# FIRST:  All parentheses are done first\n# SECOND: All exponents are done next\n# THIRD:  All multiplications and divisions are done next (starting from the\n#                                                     leftmost * or / and working to the right)\n# FOURTH: All additions and subtractions are done (from left to right)\n\n# Examples\n3+2*5   # 13, not 30, i.e. the * is done before the +\n\n[1] 13\n\n# In the following command: 100-12/3*4/2+10\n# the answer is 102.\n# It gets calculated as follows:\n#\n# original                     --&gt; 100-12/3*4/2+10\n#\n# first step: 12/3 becomes 4   --&gt; 100-(4)*4/2+10\n#\n# second step: 4*4 becomes 16  --&gt; 100-(16)/2+10\n#\n# third step: 16/2 becomes 8   --&gt; 100-(8)+10\n#\n# fourth step: 100-8 become 92 --&gt; (92)+10\n#\n# last step: 92+10 becomes 102 --&gt; 102\n\n100-12/3*4/2+10   # This becomes 102 (see explanation in comments above)\n\n[1] 102\n\n\n\n\nDo NOT use commas, dollar signs, etc in numbers\n\n#-----------------------------------------------------------.\n# \n# Do NOT use commas, dollar signs, etc in numbers ####\n#\n#-----------------------------------------------------------.\n\n# R does NOT recognize commas, dollar signs, etc as part of numbers.\n\n3.25 + 2.00   # 5.25\n\n[1] 5.25\n\n# $3.25 + $2.00  # ERROR\n\n50000 + 20000   # 70000\n\n[1] 70000\n\n# 50,000 + 20,000 # ERROR",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and using R</span>"
    ]
  },
  {
    "objectID": "000100-a-installingAndUsingR-v011-afterClass.html#r-prompts-you-with-signs-if-it-expects-you-to-type-more",
    "href": "000100-a-installingAndUsingR-v011-afterClass.html#r-prompts-you-with-signs-if-it-expects-you-to-type-more",
    "title": "1  Installing and using R",
    "section": "1.5 R prompts you with “+” signs if it expects you to type more",
    "text": "1.5 R prompts you with “+” signs if it expects you to type more\n\n####################################################################.\n# R prompts you with \"+\" signs if it expects you to type more ... ####\n####################################################################.\n#\n# If you write a line of code in the Console window\n# and press ENTER before you finish typing a full command, \n# R will display a \"+\" sign to indicate\n# that R is expecting you to enter more info. For example\n#\n#    &gt; 100 /  \n#    + 4\n#    [1] 25\n#\n# These \"+\" signs do NOT have anything to do with \"addition\".\n# They are just prompts to indicate that you need to enter more information.\n###########################################################.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and using R</span>"
    ]
  },
  {
    "objectID": "000100-a-installingAndUsingR-v011-afterClass.html#press-esc-to-cancel-a-command",
    "href": "000100-a-installingAndUsingR-v011-afterClass.html#press-esc-to-cancel-a-command",
    "title": "1  Installing and using R",
    "section": "1.6 PRESS ESC TO CANCEL A COMMAND",
    "text": "1.6 PRESS ESC TO CANCEL A COMMAND\n\n####################################################################.\n# PRESS ESC TO CANCEL A COMMAND (and get the \"&gt; prompt\" back)\n####################################################################.\n# If you keep pressing ENTER, without finishing the command you will \n# simply get more \"+ sign prompts\" (since R is still waiting for you \n# to finish the command). If you press the ESC key the command will be \n# cancelled and you will once again get the \"&gt;\" prompt so that you can continue.\n# EXAMPLE: \n#\n#    &gt; 100 /       # pressed ENTER\n#    +             # pressed ENTER\n#    +             # pressed ENTER\n#    +             # pressed ENTER\n#    +             # etc.\n#    +\n#    +             # pressed ESC  (this cancels the command)\n#    &gt;\n#\n# This works for any line of code.\n# If you press ESC in the Console window while you are typing a line\n# of code, the line of code is \"cancelled\". For example:\n#\n#    &gt; 3+2*123/5-7 (press ESC)   # NOTHING HAPPENS - LINE IS ERASED\n#    &gt;\n####################################################################.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and using R</span>"
    ]
  },
  {
    "objectID": "000100-a-installingAndUsingR-v011-afterClass.html#r-studio-hotkeys---script-window",
    "href": "000100-a-installingAndUsingR-v011-afterClass.html#r-studio-hotkeys---script-window",
    "title": "1  Installing and using R",
    "section": "1.7 R Studio HotKeys - SCRIPT window",
    "text": "1.7 R Studio HotKeys - SCRIPT window\nPressing ctrl-ENTER (win) or cmd-ENTER (mac) runs all code that is currently highlighted in the Script window. The output will appear in the console window. (also see shift-arrow-keys below). If no code is highlighted then this runs just the line of code where the cursor is in the script window.\nPressing shift-arrow-keys in the script window extends the highlight in the direction of the arrow key. This is a very quick way to highlight a few lines of code. Press shift while holding the down arrow (or up arrow) to highlight just a few lines of code. Then if you press ctrl-ENTER (win) or cmd-ENTER (mac) you can run just those lines of code.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and using R</span>"
    ]
  },
  {
    "objectID": "000100-a-installingAndUsingR-v011-afterClass.html#r-studio-hotkeys---console-window",
    "href": "000100-a-installingAndUsingR-v011-afterClass.html#r-studio-hotkeys---console-window",
    "title": "1  Installing and using R",
    "section": "1.8 R Studio HotKeys - CONSOLE window",
    "text": "1.8 R Studio HotKeys - CONSOLE window\nPressing ctrl-L clears the “console” window.\nPressing ESC in the console window clears the current command that you typed. Use this if you typed a long command and you want to erase it before pressing ENTER.\nPressing the left/right arrows move in the console window moves left/right in the current line of code. This allows you to edit the line.\nPressint the up/down arrows in the console windows brings back commands that were typed earlier/later. This allows you to quickly rerun commands that you have typed earlier or to modify earlier commands. (Also see the ““history” tab in the upper right window pane.)",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and using R</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html",
    "title": "2  variables, integer division and remainder operators",
    "section": "",
    "text": "2.1 %/% for integer division     %% for remainder (AKA modulus)\n# Symbols such as +, -, *, /, ^ and (parentheses) are known as \"operators\"\n# since they perform \"operations\". For example, the + performs the \"addition operation\"\n# and \"*\" performs the \"multiplication operation\".\n\n# R has additional operators that go beyond regular math. For example\n# Some operators consist of two percent signs with possibly something in between ...\n\n# Integer division is done using %/%. This gives the whole number result of dividing a\n# number by another number. Any numbers after a decimal point are removed.\n13 %/% 4  # answer: 3\n\n[1] 3\n\n# Remainder (also known as, AKA, \"modulus\") is done using just two %% signs. This is the\n# \"remainder\" of dividing the first number by the 2nd number. For example, 15 %% 4, is 1\n# since 4 goes into 15 3 times with 1 left over (3*4 is only 12, but 13 is 1 more than that)\n13 %% 4   # answer: 1\n\n[1] 1\n\n# remember 13/4 is regular division, i.e. 3.25\n13/4\n\n[1] 3.25",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#practice--",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#practice--",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.2 ———- PRACTICE ———-",
    "text": "2.2 ———- PRACTICE ———-\n\n# Use the following variables while answering the questions below.\n#\n# Your answers to the questions should work even if these variables \n# would have been assigned different values (i.e. different numbers).\n\nnumberOfCandies = 27\nnumberOfChildren = 5\n\n#-----------------------------------------------------------------------------.\n# QUESTION: \n# \n# Write R code to figure out the following ...\n#\n# If there are numberOfCandies, pieces of candy in a package and numberOfChildren\n# children, what is the maximum number of\n# candies we can give each child so that all the children get the same number of candies?\n#-----------------------------------------------------------------------------.\n\n# ANSWER\nnumberOfCandies %/% numberOfChildren  \n\n[1] 5\n\n#-----------------------------------------------------------------------------.\n# QUESTION: \n#\n# (see the information in the previous question)\n# How many candies will be left over after we give out the candies to the children?\n#-----------------------------------------------------------------------------.\n\n# ANSWER\nnumberOfCandies %% numberOfChildren   \n\n[1] 2",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#variables-and-assignment-statements",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#variables-and-assignment-statements",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.3 Variables and “assignment statements”",
    "text": "2.3 Variables and “assignment statements”\n\n# You can use \"variables\" to represent values in R.\n# A variable has a \"variable name\" and a \"value\". For example, suppose Joe's salary\n# is 50 thousand dollars. You can represent that as follows:\n\njoesSalary = 50000    # notice that \"Salary\" has a capital \"S\" to make it easy to read.\n\n# The \"name\" of the variable (i.e. joesSalary) is on the left hand side of the = sign and \n# the \"value\" of the variable (i.e. 50000) is on the right hand side of the = sign.\n\n# You may NOT include spaces in variable names!\n\n# To see the value of joesSalaray, you can simply type the word joesSalary\njoesSalary\n\n[1] 50000\n\n# The line above, \"joesSalary=50000\", is known as an \"assignment statement. It assigns\n# a value to a variable name. The left hand side of the \"=\" sign is a single\n# variable name. The right hand side could be any \"expression\". For example\n\npriceOfApple = 1.99\n\n# Suppose a person buys 5 apples and hands the cashier a $20 bill. Write a command\n# that assigns the amount of change the person gets back into the variable change.\n\nchange = 20 - priceOfApple * 5\n\n# Show the change\nchange\n\n[1] 10.05",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#rules-for-variable-names",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#rules-for-variable-names",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.4 rules for variable names",
    "text": "2.4 rules for variable names\n\nVariable names may NOT start with a number\n\noneOrange = 1.50    # good\n\n# 1Banana = 1.25      # ERROR\n\nprice1 = 50.00    # good\n\n\n\nVariable names may ONLY include letters, numbers, underscores “_” and periods “.”\n\nthis.is.a.good.variable.name = 100\n\nthis_is_also_a_good_variable_name = 200\n\n# this$is$not = 300    # ERROR - bad variable name\n\n\n\nVariable names are case sensitive.\n\n# The following are TWO DIFFERENT VARIBLES\nLettuce = 0.99\nlettuce = 3.50\n\n# Show the values of each variable\nLettuce\n\n[1] 0.99\n\nlettuce\n\n[1] 3.5",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#managing-your-variables",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#managing-your-variables",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.5 Managing your variables:",
    "text": "2.5 Managing your variables:\n\nEnvironment window\nYou can see the values of all variables in the “Environment” window in R Studio By default, the “Environment” window is in the upper right hand corner of your screen.\n\n\nls()\n\n# To see the names of all your existing variables you can run the ls() command  ####\n\nls()    # you MUST include the (parentheses)\n\n [1] \"change\"                            \"joesSalary\"                       \n [3] \"lettuce\"                           \"Lettuce\"                          \n [5] \"numberOfCandies\"                   \"numberOfChildren\"                 \n [7] \"oneOrange\"                         \"price1\"                           \n [9] \"priceOfApple\"                      \"this.is.a.good.variable.name\"     \n[11] \"this_is_also_a_good_variable_name\"\n\n\n\n# Don't forget the parentheses!\n\n\n\nDon’t forget the parentheses! ls() NOT ls\n\n# Uf you forget to type the parentheses, you will see a bunch of stuff that is\n# way beyond the scope of what we are talking about today (we'll get to that \n# later in the course)\n\nls\n\nfunction (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, \n    pattern, sorted = TRUE) \n{\n    if (!missing(name)) {\n        pos &lt;- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name &lt;- substitute(name)\n            if (!is.character(name)) \n                name &lt;- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos &lt;- name\n        }\n    }\n    all.names &lt;- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll &lt;- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern &lt;- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[&lt;-\", pattern))) {\n                pattern &lt;- sub(\"\\\\[&lt;-\", \"\\\\\\\\\\\\[&lt;-\", pattern)\n                warning(\"replaced '[&lt;-' by '\\\\\\\\[&lt;-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\n&lt;bytecode: 0x000002947497f928&gt;\n&lt;environment: namespace:base&gt;\n\n\n\n\nrm(SOME_VARIABLE)\n\n# Use the rm() command to remove a variable from R's memory\n#\n# You can include the variable name in \"quotes\" or not include it in quotes.\n# For example:\n\n# show all defined variables\nls()\n\n [1] \"change\"                            \"joesSalary\"                       \n [3] \"lettuce\"                           \"Lettuce\"                          \n [5] \"numberOfCandies\"                   \"numberOfChildren\"                 \n [7] \"oneOrange\"                         \"price1\"                           \n [9] \"priceOfApple\"                      \"this.is.a.good.variable.name\"     \n[11] \"this_is_also_a_good_variable_name\"\n\n# Remove the lettuce variable\nrm(lettuce)\n\n# show that lettuce is no longer defined - or just look at the Environment window\nls()\n\n [1] \"change\"                            \"joesSalary\"                       \n [3] \"Lettuce\"                           \"numberOfCandies\"                  \n [5] \"numberOfChildren\"                  \"oneOrange\"                        \n [7] \"price1\"                            \"priceOfApple\"                     \n [9] \"this.is.a.good.variable.name\"      \"this_is_also_a_good_variable_name\"\n\n# In quotes also works \nrm(\"change\")\n\n\n\nrm( list=ls() )\n\n# To remove ALL of your variables, type the following command:\nrm( list=ls() )\n\n# When there are no variables at all, the ls() command will display \"character(0)\".  ####\n# This may be confusing. We'll explain why you get this confusing result a\n# little later in the course.\n\n\n# There are no more variables - character(0)\nls()    # you will see \"character(0)\" if there are no variables.\n\ncharacter(0)",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#practice---1",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#practice---1",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.6 ———- PRACTICE ———-",
    "text": "2.6 ———- PRACTICE ———-\n\n#-----------------------------------------------------------.\n# QUESTION:\n#\n# The price of an apple is $1.50. Create a variable named priceOfApple that contains that value.\n#-----------------------------------------------------------.\n\n# ANSWER: \npriceOfApple = 1.50   # ANSWER\n\n\n\n#-----------------------------------------------------------.\n# QUESTION:\n#\n# Given the information below, write a command that creates a variable\n# named \"costOfPie\" that stores the amount of money it takes to create a\n# single apple pie. (do not use $ signs):\n#\n#   - The price of an apple is stored in the variable priceOfApple\n#   - The price of a prepared pie crust is $7.50\n#   - It takes 10 apples and one pie crust to make an apple pie.\n#-----------------------------------------------------------.\n\n# ANSWER: \ncostOfPie = priceOfApple * 10 + 7.50    # ANSWER\n\n\n\n#-----------------------------------------------------------.\n# QUESTION    ####\n#\n# ( see the information in the previous question )\n# Write a command that stores the amount of money it takes to make 3 apple pies\n# in the variable named totalAmount\n#-----------------------------------------------------------.\n\n# ANSWER: \ntotalAmount = costOfPie * 3   # ANSWER",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#changing-the-value-of-a-variable-eg.-x-x-5",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#changing-the-value-of-a-variable-eg.-x-x-5",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.7 Changing the value of a variable, eg. x = x + 5",
    "text": "2.7 Changing the value of a variable, eg. x = x + 5\n\n# Let's get back to Joe's salary.\njoesSalary = 50000\n\n\n# if Sue's salary is 70000 you can store that information in another variable\nsuesSalary = 70000\n\n# You can show the total salary for the company by adding together the two salaries\njoesSalary + suesSalary\n\n[1] 120000\n\n# notice that joesSalary didn't change\njoesSalary\n\n[1] 50000\n\n# suesSalary didn't change either\nsuesSalary\n\n[1] 70000\n\n# to figure out the total salary you can type the same comamnd again\njoesSalary + suesSalary\n\n[1] 120000\n\n# But typing the same commands over and over is not very efficient.\n# Instead, you can create a new variable, e.g. totalSalary, that contains the result of\n# adding together the two salaries.\ntotalSalary = joesSalary + suesSalary\n\n# notice that when we type the above command that the \"answer\" isn't displayed. The command\n# simply saves the result in the variable named, totalSalary. To see the result, you can\n# type the variable name:\ntotalSalary\n\n[1] 120000\n\n# if want to give Joe a 10% raise. We can calculate the new Salary as follows:\njoesSalary * 1.10\n\n[1] 55000\n\n# However, that still didn't actually change joesSalary\njoesSalary\n\n[1] 50000\n\n# To actually change joesSalary, we can use an assignment statement as follows.\n# The first step is that the value on the right hand side of the = sign is calculated using\n# whatever values we already know. The 2nd step is that the variable on the left hand\n# side of the = sign gets this new value.\njoesSalary = joesSalary * 1.10\n\n# Now let's see what joesSalary became\njoesSalary\n\n[1] 55000\n\n# Notice that the totalSalary did NOT change.\ntotalSalary\n\n[1] 120000\n\n# To change the totalSalary, we would have to calculate it again.\ntotalSalary = joesSalary + suesSalary\n\n# show the new totalSalary\ntotalSalary\n\n[1] 125000",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#practice---2",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#practice---2",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.8 ———- PRACTICE ———-",
    "text": "2.8 ———- PRACTICE ———-\n\n# QUESTION:   \n#\n# There are 5 children. \n# Each package of candy costs $3.50 and contains 23 pieces.\n# What is the maximum number of candies could we give to each child if we only have $15.00 to spend? \n# How much money will be left over? \n# How many candies will be left over?\n#\n# HINTS: \n# - create a variable, numPackages that contains the # of packages we can buy with $15.00\n# - create a variable, totalCandies, that contains the total # of candies we will have\n# - calculate the number of candies for each child\n# - calculate the amount of money left over\n# - calculate the number of candies left over\n\nrm(list=ls())  # lets start with a clean slate     # ANSWER\nnumberOfChildren = 5                               # ANSWER\npriceOfPackage = 3.50                               # ANSWER\ncandiesInPackage = 23                               # ANSWER\nmoneyToSpend = 15                               # ANSWER\n\nnumPackages = moneyToSpend %/% priceOfPackage        # ANSWER\n\ntotalCandies = numPackages * candiesInPackage        # ANSWER\ncandiesPerChild = totalCandies %/% numberOfChildren  # ANSWER\nmoneyLeftOver = moneyToSpend - priceOfPackage * numPackages # ANSWER",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#beren-fall-2023---up-to-here---after-day-1",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#beren-fall-2023---up-to-here---after-day-1",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.9 *** BEREN (FALL 2023) - UP TO HERE - AFTER DAY 1",
    "text": "2.9 *** BEREN (FALL 2023) - UP TO HERE - AFTER DAY 1",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#other-ways-of-assigning-variables----",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#other-ways-of-assigning-variables----",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.10 Other ways of assigning variables     =    <-     ->",
    "text": "2.10 Other ways of assigning variables     =    &lt;-     -&gt;\n\n#-------------------------------------------------------------.\n# Other ways of assigning variables     =   &lt;-  -&gt;     ####\n#\n#    variable = value\n#\n#    variable &lt;- value\n#\n#    value -&gt; variable\n#-------------------------------------------------------------.\n\n# R allows an assignment statement to be written in 3 different ways. These all\n# produce the exact same results.\n\n# OPTION 1 - use an = sign\n# This is what we've been doing all along up until now. Example:\n\nnumStudents = 32\n\n# OPTION 2 - same as above but use \"&lt;-\" instead of an = sign. The &lt;- looks like\n# an arrow. It consists of a less than sign followed by a minus sign. There may NOT\n# be any spaces between the \"&lt;\" and the \"-\"\n\nnumProfessors &lt;- numStudents %/% 6\n\n# OPTION 3 - same as above but the name of the varible goes on the right hand side\n# and the \"arrow\" faces right ... e.g.\n\nnumProfessors - 1 -&gt; numDeans\n\n# show the variables values\nnumStudents\n\n[1] 32\n\nnumProfessors\n\n[1] 5\n\nnumDeans\n\n[1] 4",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#wilf-fall-2023---up-to-here---after-day-1",
    "href": "000100-b-variables_intDivision_remainder_ls_rm-v011-afterClass.html#wilf-fall-2023---up-to-here---after-day-1",
    "title": "2  variables, integer division and remainder operators",
    "section": "2.11 *** WILF (FALL 2023) - UP TO HERE - AFTER DAY 1",
    "text": "2.11 *** WILF (FALL 2023) - UP TO HERE - AFTER DAY 1",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>variables, integer division and remainder operators</span>"
    ]
  },
  {
    "objectID": "000150-orderOfOperationsInR-v002.html",
    "href": "000150-orderOfOperationsInR-v002.html",
    "title": "3  Order of Operations in R",
    "section": "",
    "text": "NOTE: The contents of this document was adapted from https://www.datamentor.io/r-programming/precedence-associativity/\nR Operator Precedence and Associativity in R\nStandard numeric operators, i.e. + - * / ^\nR recognizes the “order of operations” of the standard mathematical operators, (+ - * / ^). Many students are familiar with the acronym “PEMDAS” order of operations for the standard arithmetic operators (+ - * / ^). This stands for:\nFirst: Parentheses\nSecond: Exponents\nThird: Multiplication and Division (in the order that they appear)\nFourth: Addition and Subtraction (in the order that they appear)\n&gt; 2 + 6 * 5     # 6*5 is done first\n[1] 32\n\n&gt; (2 + 6) * 5   # 2+6 is done first\n[1] 40\nAdditional operators in R\nIn addition to the standard mathematical operators, R recognizes numerous other “operators”.   For example:\n                82 %/% 10 is 8 as the %/% operator performs integer division and\n                82 %% 10 is 2 as the %% operator results in the “remainder” of a division.\nAs you learn R you will become familiar with many additional operators.\nR defines an “order of operations” that goes beyond PEMDAS. R’s complete order of operations includes all of R’s operators. This “order of operations” is summarized in the table on the next page. Operators that appear higher in the table have a “higher precedence” (i.e. they are done before operators that appear lower in the table).\nFor example, you can see that the ^ operator appears before the other arithmetic operators. Similarly, * and / appear above + and -.\nHowever, note that %/% and %% appear above * and /. This would explain why code below produces the output that it does (read the code and the #comments)\n&gt; 100 / 25 %% 2    # 25 %% 2 is done first (remember %% is remainder - so 25 %% 2 is 1 and 100/1 is 100)\n[1] 100\n\n&gt; (100 / 25) %% 2    # 100 / 25 is done first  (remember %% is remainder - so 100/25 is 4 and 4 %% 2 is 0)\n [1] 0\nOperator Associativity\nIt is possible to have multiple operators of same precedence in an expression. In this case the order of execution is determined through associativity. The associativity of operators is given in the table below. We can see that most of them have left to right associativity.\nExample 2: Operator Associativity in R\nIn the above below, 6 / 3 / 2 is evaluated as (6 / 3) / 2 due to left to right associativity of the / operator.\nHowever, 2 ^ 1 ^ 3  is evaluated as 2 ^ (1 ^ 3)  due to right to left associativity of the ^ operator.\n\n\n\n&gt; 6 / 3 / 2   # / is left to right associative\n[1] 1\n\n&gt; 2 ^ 1 ^ 3   # ^ is right to left associative\n[1] 2\nHowever, these defaults can be changed by using parentheses ().\n&gt; 6 / (3 / 2)\n[1] 4\n\n&gt; (2 ^ 1) ^ 3\n[1] 8\n\nPrecedence and Associativity of different operators in R from highest to lowest\nThe list of operators below contains the basic operators but is not 100% complete. For the full list, see the official documentation\nby typing ?Syntax in RStudio\nor at this webpage: https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/Syntax\n\n\n\n\n\n\n\n\n\nOperator Precedence in R\n\n\n\nOperator\nDescription\n\n\n^\nExponent\n\n\n-x, +x\nUnary minus, Unary plus\n\n\n%%,  %/%, (and any other %% operator)\nModulus (AKA Remainder),\nInteger Division\n\n\n*, /\nMultiplication, Division\n\n\n+, –\nAddition, Subtraction\n\n\n&lt;, &gt;, &lt;=, &gt;=, ==, !=\nComparisons\n\n\n!\nLogical NOT\n\n\n&, &&\nLogical AND\n\n\n|, ||\nLogical OR\n\n\n-&gt;, -&gt;&gt;\nRightward assignment\n\n\n&lt;-, &lt;&lt;-\nLeftward assignment\n\n\n=\nLeftward assignment",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Order of Operations in R</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html",
    "href": "000300-usingSomeBuiltinFunctions-v028.html",
    "title": "4  Using some built-in functions",
    "section": "",
    "text": "4.1 rm(list=ls())\n##################################################################.\n##################################################################.\n##\n##  TOPICS\n##\n## - functions: sqrt abs max min ceiling floor sum mean\n##              trunc round\n##\n## - vector arithmetic and recycling rule\n##\n## - combining vectors with c function\n##\n## - functions:  c  length  sum   rep  seq  range\n##\n## - colon operator (e.g.   3:5   5:-3)\n##\n##################################################################.\n##################################################################.\n\n# We will start most days by removing all variables that we may have stored\n# from the last time we used R. This prevents confusion in case you may have\n# a variable from last time.\n\nrm( list=ls() )    # see notes from last class for an explanation",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#sqrt-abs-nan-nesting-function-calls",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#sqrt-abs-nan-nesting-function-calls",
    "title": "4  Using some built-in functions",
    "section": "4.2 sqrt()    abs()    NaN    nesting function calls",
    "text": "4.2 sqrt()    abs()    NaN    nesting function calls\n\n############################################################.\n############################################################.\n##\n## Intro to functions\n##\n## Intro to R vectors\n##\n############################################################.\n############################################################.\n\n#-----------------------------------------------------------.\n# sqrt function - eg. sqrt(49)                ####\n#\n# abs function  - eg. abs(-49)                ####\n#\n# NaN is \"not a number\" - eg. sqrt(-49)       ####\n#\n# nesting function calls - eg. sqrt(abs(-49)) ####\n#----------------------------------------------------------.\n\n# To take the square-root of a number in R, use the sqrt function\n# For example:\n\nsqrt(25)    # get the square root of 25\n\n[1] 5\n\nsqrt(10)    # get the square root of 10\n\n[1] 3.162278\n\nsqrt(-5)    # square roots of negative numbers return NaN (i.e. \"not a number\")\n\nWarning in sqrt(-5): NaNs produced\n\n\n[1] NaN\n\n# sqrt is an example of a \"function\". \n# A function takes some information as input (e.g. 25)\n# and returns a value as output, (e.g. 5)\n\n?sqrt       # show the help page for sqrt     ####\n\nstarting httpd help server ... done\n\n# Some R help pages show information for mulitple functions. \n# The help page for sqrt also show information about function, abs.\n#\n# abs gives you the absolute value of a number (i.e. the positive version of the number)\nabs(2)      # 2\n\n[1] 2\n\nabs(-2)     # 2 \n\n[1] 2\n\n# We can \"nest\" one function call inside another function call. \n# \n# When we do so the value that is \"returned\" by the \"inner\" function call\n# is then \"passed\" to the \"outer\" function call.\nsqrt(-49)   # NaN\n\nWarning in sqrt(-49): NaNs produced\n\n\n[1] NaN\n\nsqrt(abs(-49))   # 7\n\n[1] 7",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#terminology-related-to-functions",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#terminology-related-to-functions",
    "title": "4  Using some built-in functions",
    "section": "4.3 terminology related to functions",
    "text": "4.3 terminology related to functions\n\n#----------------------------------------------------------.\n# Terminology: \n#\n#   function call\n#\n#   return value\n#\n#   arguments (AKA parameters)\n#\n#   \"passing\" arguments to a function\n#\n#----------------------------------------------------------.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#function-call",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#function-call",
    "title": "4  Using some built-in functions",
    "section": "4.4 function call",
    "text": "4.4 function call\n\n#.......................................................................\n# A particular use of a function is known as a \"function call\"    ####\n#.......................................................................\n\nsqrt(100) # this is a function call of the sqrt function\n\n[1] 10\n\nsqrt(64)  # this is a different function call of the sqrt function\n\n[1] 8",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#return-value",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#return-value",
    "title": "4  Using some built-in functions",
    "section": "4.5 return value",
    "text": "4.5 return value\n\n#.......................................................................\n# The output of a function is known as the \"return value\" of the function.   ####\n#.......................................................................\n\nsqrt(64)  # The \"return value\" of this \"function call\" is 8\n\n[1] 8",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#max-min-ceiling-floor-sum",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#max-min-ceiling-floor-sum",
    "title": "4  Using some built-in functions",
    "section": "4.6 max() min() ceiling() floor() sum()",
    "text": "4.6 max() min() ceiling() floor() sum()\n\n# Some functions can take more than one argument.\n# However, all functions return exactly one item.\n# (we will describe an exception to this later).\n#\n# max and min functions return the maximum and minimum value of all of their arguments. ####\n# For example:\n\nmax(4,10,2,5)   # four arguments, 4,10,2,5 - one return value, i.e. 10\n\n[1] 10\n\nmin(4,10,2,5)   # four arguments, 4,10,2,5 - one return value, i.e. 2\n\n[1] 2\n\n# another example\njoesSalary &lt;- 50\nsuesSalary &lt;- 70\nbobsSalary &lt;- 60\n\n# three arguments - joesSalary, suesSalary, bobsSalary\n# one return value, i.e. 70\n\nmax(joesSalary, suesSalary, bobsSalary)   \n\n[1] 70",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#arguments-aka-parameters",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#arguments-aka-parameters",
    "title": "4  Using some built-in functions",
    "section": "4.7 arguments (AKA parameters)",
    "text": "4.7 arguments (AKA parameters)\n\n#.......................................................................\n# The input values to a function are known as the argument(s) or the parameter(s) of \n# a function. (Some people/books may draw a distinction between the word argument\n# and the word parameter but for our purposes they mean the same thing.)\n#.......................................................................\n\n# In the following code:\n# 36 is an argument (or parameter), i.e. 36 is \"passed\" to the sqrt function.\n# the return value is 6 \nsqrt(36)   \n\n[1] 6",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#passing-values-to-a-function",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#passing-values-to-a-function",
    "title": "4  Using some built-in functions",
    "section": "4.8 “passing values” to a function",
    "text": "4.8 “passing values” to a function\n\n#.......................................................................\n# Specifying a value as an argument to a function is known as \"passing\" that value to the function. ####\n#.......................................................................\n\nsqrt(36)   # 36 is being \"passed\" to the sqrt function.\n\n[1] 6\n\n#.......................................................................\n# The arguments to a function may be expressions, not just  single value. ####\n#.......................................................................\n\n2 * max ( pi ^ 2 , pi * 2)     # 1st argument: pi^2 , 2nd argument: pi*2\n\n[1] 19.73921\n\n#------------------------------------.\n# Other functions\n#------------------------------------.\n\nceiling(3.2)   # ceiling rounds up to next higher number    ####\n\n[1] 4\n\nceiling(-3.2)  # ... be careful with negatives    \n\n[1] -3\n\nfloor (3.2)    # floor rounds down to nearest whole number   ####\n\n[1] 3\n\nfloor(-3.2)    # ... be careful with negatives\n\n[1] -4\n\n## sum() and R help pages \n\nsum(2,10,4)    # sum returns the sum of its arguments      ####\n\n[1] 16\n\n# we will speak about averages, or the \"mean function\" later ...",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#rs-help-system-somefunction-anyword",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#rs-help-system-somefunction-anyword",
    "title": "4  Using some built-in functions",
    "section": "4.9 R’s “help” system    ?someFunction    ??anyWord",
    "text": "4.9 R’s “help” system    ?someFunction    ??anyWord\n\n########################################################.\n#\n# R's \"help\" system    ####\n#\n########################################################.\n\n# To get more information about a particular function, you \n# use the \"help\" function. You must put the name of the R function you \n# want help with in \"quotes\". The \"help page\" or \"manual page\" for \n# that function (or group of functions) will appear in the \"help\" \n# window.\n\nhelp(\"sum\") # show the R documentation page for the sum function.\n\nhelp(sum)   # same thing - you don't need the quotes\n\n?sum        # same thing - ? is shorthand for the help function\n\n?help       # you can even get help on the help function\n \n??max       # The double question mark ?? searches for a particular word in any help page.  ####\n\n\n\n# Some help pages describe several different R functions in single page\n\n?ceiling   # this describes ceiling, floor and several other functions all in one help page\n\n?floor     # this shows the same thing\n\n# NOTE: \n#\n# In posit.cloud you press F1 when the cursor is on the name of a function ####\n# (this only works in the \"script\" window)",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#pi",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#pi",
    "title": "4  Using some built-in functions",
    "section": "4.10 pi",
    "text": "4.10 pi\n\n# pi is a built-in variable that contains the first few digits of the value of pi\n\npi       # value of pi\n\n[1] 3.141593\n\npi * 2   # pi times 2\n\n[1] 6.283185\n\npi ^ 2   # pi quared\n\n[1] 9.869604",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#trunc",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#trunc",
    "title": "4  Using some built-in functions",
    "section": "4.11 trunc()",
    "text": "4.11 trunc()\n\n#-----------------------------------------------------------------------------.\n# trunc function  ####\n# \n# trunc stands for \"truncate\" which means to \"shorten\" or to \"chop off\"\n# The trunc function \"chops off\" the values after the deicmal point.\n#-----------------------------------------------------------------------------.\n\ntrunc(3.2)    # chops off the decimal points\n\n[1] 3\n\ntrunc(-3.2)   # compare this with \"floor and ceiling\" ... how are they different? \n\n[1] -3",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#round-function-1",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#round-function-1",
    "title": "4  Using some built-in functions",
    "section": "4.12 round() function",
    "text": "4.12 round() function\n\n#-----------------------------------------------------------------------------.\n# round function   ####\n#\n# first arugment - value to round\n# second argument - which position to round\n#-----------------------------------------------------------------------------.\n\n# round a value to a particular number of decimal places\nround(1.129, 2) # 1.13\n\n[1] 1.13\n\nround(1.129, 1) # 1.1\n\n[1] 1.1\n\npi              # display the value of pi    ####\n\n[1] 3.141593\n\nround(pi, 2)    # round a value to a particular number of dcimal places\n\n[1] 3.14\n\nround(pi, 3)    # round a value to a particular number of dcimal places\n\n[1] 3.142\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# if 2nd argument is 0, the number is rounded to the closest whole number\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\nround(pi, 0)    # round pi to the closest whole number\n\n[1] 3\n\n#..........................................................................\n# You can also supply a negative value for digits\n#..........................................................................\nround(1939, -1)  # negative values are allowed, e.g. round to closest multiple of 10\n\n[1] 1940\n\nround(1939, -2)  # round to closest multiple of 100\n\n[1] 1900\n\nround(1939.1598, 2)   # 1939.16\n\n[1] 1939.16\n\nround(1939.1598, -2)   # 1900\n\n[1] 1900\n\n#.................................................................\n# Default value for the digits argument of the round function\n#.................................................................\n\n# Some arguments for some functions have a \"default value\". \n# The default value is used when the argument does not appear in the function call. \n# For example, 0 is the \"default value\" for the digits argument of the round function.\n#\n# This is described in the Usage section on the help page for the round function (?round)\n# The usage section includes the following information:\n#\n#     USAGE: \n#        round(x, digits = 0)\n#\n# \"digits = 0\"   means that the defualt value of the\n# digits argument (i.e. the 2nd argument) is 0 (zero).\n#\n\nround(pi)       # answer is 3 because 0 is the default number of digits\n\n[1] 3\n\nround(1.234)    # answer is 1 because 0 is the default number of digits\n\n[1] 1\n\n?round          # view the help page for the round function",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#default-values-for-arguments",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#default-values-for-arguments",
    "title": "4  Using some built-in functions",
    "section": "4.13 Default values for arguments",
    "text": "4.13 Default values for arguments\n\n#--------------------------------------------------------------------------------.\n# NAMES AND DEFAULT VALUES OF ARGUMENTS ARE SHOWN ON THE HELP PAGES    ####\n#\n# The arguments for each function have \"names\"\n#\n# Some arguments have \"default values\". The default value for an argument is \n# used when the function call does NOT specify a value for that argument.\n# (see examples below).\n#--------------------------------------------------------------------------------.\n\n# Every argument for every function in R has a \"name\".\n# SOME arguments for SOME functions have a \"default value\".\n# All of this information is shown in the \"Usage\" section on the help page \n# for the function.\n#\n# FOR EXAMPLE\n#   Look at the help page for the round function (i.e. ?round).\n#   The \"Usage\" section includes the following information:\n#\n#     USAGE: \n#        round(x, digits = 0)\n#\n#   This means \n#\n#    - The name of the 1st argument is \"x\"\n#\n#    - The name of the 2nd argument is \"digits\".\n#      The default value for the \"digits\" function is 0.\n#      This is shown in the documentation as \"digits = 0\".\n#\n#    - Note that the first argument, x, does NOT have a default value.\n#      \n\n?round     # arguments are \"x\" and \"digits\", the default value for digits is 0",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#specifying-arguments-in-function-calls",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#specifying-arguments-in-function-calls",
    "title": "4  Using some built-in functions",
    "section": "4.14 specifying arguments in function calls",
    "text": "4.14 specifying arguments in function calls\n\n# You may specify the names of the arguments when calling a function,\n# but you don't have to (see examples below).\n#\n# Specifying the names of the arguments allows you to:\n#\n#   (a) type the arguments out of order (see below) and/or\n#\n#   (b) skip some arguments  (examples of this to be shown later ...)\n\n\n# The following function call will round 12345 to the\n# nearest hundred (i.e. the 2nd argument is -2) to result in 12300.\n#\n# The arguments must be specified in same order as specified on the help page\n# (see ?round). i.e. first the number to be rounded (12345 in this case)\n# and then the position to round it to (-2 in this case).\n\nround( 12345, -2)   # round 12345 to the nearest hundred\n\n[1] 12300\n\n# You don't have to but you may specify the names of the arguments if you like.\n\nround ( x=12345, digits=-2 )\n\n[1] 12300\n\n# If you specify the names of the arguments (see below), then you \n# may write the arguments out of order.\n#\n# Otherwise, the arguments must be typed in the same order as they appear\n# in the \"Usage\" section on the help page.\n# \n# In the following command the arguments are not in the order as specified\n# on the help page. However, that is OK since we specified the names of the\n# arguments.\n\nround( digits = -2, x=12345)   # specify arguments out of order, same result as above\n\n[1] 12300\n\n# You may omit the names of the first few arguments in a function call.\n# If you do so then the first few arguments, without names in the function call,\n# are assumed to be the first few arguments as specified on the help page. \n#\n# For example, in the following command the first argument, 12345,\n# does not include a name. Since this is the first argument in the function\n# call, it is assumed to be the \"x\" argument (which is the first argument\n# specified in the help page (?round)).\n\nround (12345, digits = -2) # you can specify names for some args but not others\n\n[1] 12300\n\n# If you want to, you MAY always specify the names of the arguments\n# However, it is not necessary to type the names of the arguments as long as\n# you type the arguments in the expected order (as defined in the help pages).\n#\n# Many R programmers choose to leave out names for the first argument or\n# two and then specify names for the subsequent arguments,\n# e.g. seq(2, 10, by=2) (this returns 2 4 6 8 10 - see ?seq). \n#\n# The reason for this is that the first argument or two\n# of most functions are obvious as to their meaning. After that, it becomes\n# less clear as to what the additional arguments mean. By specifying the names\n# of these additional arguments it becomes easier to read the code.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#beren---up-to-here---after-day-2",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#beren---up-to-here---after-day-2",
    "title": "4  Using some built-in functions",
    "section": "4.15 — 2023 BEREN - UP TO HERE - AFTER DAY 2",
    "text": "4.15 — 2023 BEREN - UP TO HERE - AFTER DAY 2",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#whats-a-vector-the-is.vector-function.",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#whats-a-vector-the-is.vector-function.",
    "title": "4  Using some built-in functions",
    "section": "4.16 What’s a vector?    The is.vector() function.",
    "text": "4.16 What’s a vector?    The is.vector() function.\n\n###############################################.\n#\n# VECTORS\n#\n###############################################.\n\n#-----------------------------------------------------------------------.\n# A \"vector\" is a collection of values that can be processed as a group. ####\n#-----------------------------------------------------------------------.\n\n#-----------------------------------------------------------------------.\n# The is.vector function returns TRUE if its argument is a vector ####\n# and FALSE otherwise.\n#-----------------------------------------------------------------------.\n\n#-----------------------------------------------------------------------.\n# The simplest vector is just a single value ... ####\n# (it is technically a collection of just one value).\n#-----------------------------------------------------------------------.\n\n?is.vector\n\nis.vector ( 3 )\n\n[1] TRUE\n\nis.vector( 99923141.32412431 )\n\n[1] TRUE\n\n# A variable that contains a vector is a vector   ####\n\npriceOfApple = 1.99\nis.vector(priceOfApple)   # TRUE\n\n[1] TRUE\n\n# The c() function is used to combine multiple values into a single vector. ####\n#\n# You can think of the \"c\" as standing for the word \"combine\".\n# \"c\" actually stands for the word \"concatenate\" which \n# is a technical fancy shmancy word for \"combine things together\".\n\n# The following is a vector with mutliple values. \n# The c function combines (i.e. \"concatenates\") the multiple values into a \n# single \"vector\"\nc(100,200,300, 50, -2, 25)\n\n[1] 100 200 300  50  -2  25\n\nis.vector(c(100,200,300, 50, -2, 25))    # this works\n\n[1] TRUE\n\nis.vector(100,200,300, 50, -2, 25) # ERROR: use c() to tie together different values\n\nError in is.vector(100, 200, 300, 50, -2, 25): unused arguments (300, 50, -2, 25)\n\nsomeNumbers = c(100,200,300, 50, -2, 25) # combine (or concatenate) values into one vector\nsomeNumbers\n\n[1] 100 200 300  50  -2  25\n\nis.vector(someNumbers)   # TRUE\n\n[1] TRUE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#range-function",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#range-function",
    "title": "4  Using some built-in functions",
    "section": "4.17 range() function",
    "text": "4.17 range() function\n\n#-----------------------------------------------------.\n# Other functions can also create vectors.\n#-----------------------------------------------------.\n\n#.............................................................................\n# The range function returns a vector\n#\n# The range function returns the minimum and maximum values that are in a vector ####\n#.............................................................................\n\n\nrange(someNumbers)\n\n[1]  -2 300\n\nis.vector(range(someNumbers))\n\n[1] TRUE\n\n# You can also capture the result in  a variable\nlowestAndHighest = range(someNumbers)\nlowestAndHighest   # -2  300\n\n[1]  -2 300\n\nis.vector(lowestAndHighest)   # TRUE\n\n[1] TRUE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#seq-function",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#seq-function",
    "title": "4  Using some built-in functions",
    "section": "4.18 seq() function",
    "text": "4.18 seq() function\n\n#.............................................................................\n# The seq function returns a vector. In its simplest use, \n# seq returns the sequence starting with the 1st argument, ending with the 2nd argument ####\n#\n# NOTE - we will come back to the seq function to learn about \n#        much more complex ways of using it.\n#.............................................................................\n\n# Example 1\nseq(5,10)                  # 5 6 7 8 9 10\n\n[1]  5  6  7  8  9 10\n\nis.vector( seq(5, 10) )    # TRUE\n\n[1] TRUE\n\n# Example 2\nseq(10,5)                  # 10 9 8 7 6 5\n\n[1] 10  9  8  7  6  5\n\nis.vector( seq(10,5) )     # TRUE\n\n[1] TRUE\n\n# Example 3\nseq(0.5, 2.5)              # 0.5   1.5   2.5\n\n[1] 0.5 1.5 2.5\n\nis.vector( seq(0.5, 2.5) ) # TRUE\n\n[1] TRUE\n\n# We can also capture the results in variables\nexample1 = seq(5,10)\nexample1               # 5  6  7  8  9  10\n\n[1]  5  6  7  8  9 10\n\nis.vector(example1)    # TRUE\n\n[1] TRUE\n\nexample2 = seq(10,5)   \nexample2               # 10  9  8  7  6  5 \n\n[1] 10  9  8  7  6  5\n\nis.vector(example2)    # TRUE\n\n[1] TRUE\n\nexample3 = seq(.5, 2.5)  \nexample3               # 0.5  1.5  2.5\n\n[1] 0.5 1.5 2.5\n\nis.vector(example3)    # TRUE\n\n[1] TRUE\n\nseq(0.5, 3)\n\n[1] 0.5 1.5 2.5",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#rep-function-1",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#rep-function-1",
    "title": "4  Using some built-in functions",
    "section": "4.19 rep() function",
    "text": "4.19 rep() function\n\n#.............................................................................\n# The rep function returns a vector   ####\n#\n# In its simplest use, the rep function returns a vector of it's first\n# argument repeated the number of times specified by its 2nd argument.\n#\n# NOTE - we will come back to the rep function to learn about \n#        more complex ways of using it.\n#.............................................................................\n\nrep(100,3)        # 100  100  100\n\n[1] 100 100 100\n\nrep(  seq(1,3)  ,   2)  # 1  2  3  1  2  3\n\n[1] 1 2 3 1 2 3\n\n# QUESTION \n# Create a vector that has the numbers 1 3 1 3 1 3 etc. for a total\n# of 20 numbers. Store the resulting vector into a variable named nums.\n\nnums = rep( c(1,3) , 10)   # ANSWER",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#use-c-to-combine-vectors",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#use-c-to-combine-vectors",
    "title": "4  Using some built-in functions",
    "section": "4.20 Use c() to combine vectors",
    "text": "4.20 Use c() to combine vectors\n\n#-------------------------------------------------------------------------------------.\n# DO NOT WRITE INDIVIDUAL VALUES WITHOUT COMBINING THEM TOGETHER WITH A FUNCTION CALL!\n#-------------------------------------------------------------------------------------.\n\n100,200,300    # ERROR - individual values separated by commas are meaningless to R  ####\n\n\n# REMEMBER - if no other function call is being used, you can use the\n#            c function to combine individual values\n\nc(100,200,300)    # 100  200 300 (no error)\n\n#-------------------------------------------------------------.\n#\n# More about the c function  ####\n#\n#-------------------------------------------------------------.\n\n#..............................................................................\n# If you \"nest\" calls to \"c\", ie. if you combine one vector inside of another\n# vector by using the c function, the result is a single vector\n#..............................................................................\n\nc(100, 200, c(30, 20, 10), 600)   # same as c(100,200,300,400,500,600)\n\nc(100, 200, 30, 20, 10, 600) # same thing\n\n\n#..............................................................................\n# You can use the c function to combine multiple vectors into a single vector.\n#..............................................................................\n\nx &lt;- c(10,20,30)\ny &lt;- c(40, 50)\nz &lt;- c(x, y)      # combine the values from x and y into z\nz\n\nz &lt;- x, y         # ERROR - use the c function to combine vectors into a single vector\n\n\n# QUESTION ####\n# Find the sum of all the values that are in x and y, without using z\n\n# ANSWER\nsum(c(x,y))   # This works\nsum(x,y)      # This works too - sum will allow mulitple vectors to be summed\n\n# QUESTION  ####\n#\n# Find the average (i.e. mean) of all the values that are in x and y,\n# without using z\n\n# ANSWER\nmean(c(x,y))      #This works\nmean(x,y)         # ERROR\n\n# QUESTION\n# Why did we get an error in the last example?\n\n# ANSWER \n#\n# From the documentation for sum and mean (i.e. ?sum and ?mean) we can \n# see that the sum function allows multiple vectors that contain the numbers to be\n# to be passed as separate arguments. However, the mean function requires\n# all of the numbers to be averaged to be in a single vector that is passed \n# to the argument named x. It's true that one might expect these functions\n# to be more similar in how they are called. However, the designers of the \n# language decided otherwise. The underlying reasons for the difference in\n# the design of these functions is irrelevant - bottom line is you\n# need to know how to call the functions. The place to learn this is \n# in the documentation for the functions (i.e. ?sum and ?mean)\n#\n# Look at the documentation for sum and for mean (i.e. ?sum and ?mean).\n# The \"Usage\" section shows the names of the arguments and their default values.\n# The \"Arguments\" section explains what each argument is expected to contain.\n# The \"Value\" section explains how the return value for the function is calculated.\n#\n# It takes some time and practice to be proficient at reading R's help pages.\n# However, understanding how to read and interpret R's help pages\n# is a critical skill that allows you to become familiar with R's built in\n# functions.\n#\n# An \"ellipsis\" (i.e. three periods, ... ) in the help pages\n# stands for the ability to type several values in place of the \n# ellipsis. For example, the ... in the help page for sum, indicates\n# the ability to type several different values to be summed. This is\n# described in the ARGUMENTS section where it explains that ... stands\n# for \"numeric or complex or logical vectors\".\n\n?sum    \n\n# USAGE: sum(..., na.rm = FALSE)\n# ARGUMENTS: \n# ...      numeric or complex or logical vectors\n# na.rm    (see the help page)\n\n\n# However, for the mean function, there is a single argument named x that \n# is expected to contain the values to be averaged. The ellipsis shown \n# in the help page for mean is used for a more subtle reason. It shows where\n# additional arguments, not listed on this help page, might be specified \n# (this is an advanced concept that we'll return to later). \n\n?mean   \n\n# USAGE: mean(x, trim = 0, na.rm = FALSE, ...)\n# ARGUMENTS: \n# x        An R object. (i.e. a vector - these are the numbers)\n# trim     (see help page)\n# na.rm    (see help page)\n# ...        further arguments passed to or from other methods.\n\n\n# You can use the c function to combine values from different functions.\n# Make sure that you match parentheses correctly.\n\nc(   rep(100,3)  ,   seq(-5,-7)  )   # 100 100 100 -5 -6 -7\n\n# DON'T FORGET THE c( ... )\n#rep(100,3), seq(-5,-7)      # ERROR\n\n\nrange(   rep(100,3)   , seq(990,1005)  ,  seq(-5,-7)   )   #\n\nrange(   c( rep(100,3)   , seq(990,1005)  ,  seq(-5,-7) )   )\n\nError: &lt;text&gt;:5:4: unexpected ','\n4: \n5: 100,\n      ^",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#beren-wilf---up-to-here---after-day-03",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#beren-wilf---up-to-here---after-day-03",
    "title": "4  Using some built-in functions",
    "section": "4.21 2023 BEREN, WILF - UP TO HERE - AFTER DAY 03",
    "text": "4.21 2023 BEREN, WILF - UP TO HERE - AFTER DAY 03",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#practice",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#practice",
    "title": "4  Using some built-in functions",
    "section": "4.22 — Practice —",
    "text": "4.22 — Practice —\n\n#----------------------------------------------------.\n# QUESTION\n# Write R code that takes the average of the first\n# 200 even numbers.\n#----------------------------------------------------.\n\n# ANSWER:\nmean(seq(from=2, to=400, by=2))\n\n[1] 201",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#non-vectors-later-in-the-course.",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#non-vectors-later-in-the-course.",
    "title": "4  Using some built-in functions",
    "section": "4.23 non-vectors (later in the course).",
    "text": "4.23 non-vectors (later in the course).\n\n#----------------------------------------------------------------------------.\n# Things that aren't vectors (e.g. dataframes, factors, matrices, etc)  ####\n#----------------------------------------------------------------------------.\n\n# A vector is the simplest arrangement of values in R.\n\n# R allows for more complex arrangements of data, which we will learn about\n# later in the course, such as factors, matrices, dataframes, etc.\n\n# These more complex arrangements of data are created from vectors but are \n# technically not vectors themselves. One example of such an arrangement \n# of data is a data.frame.\n# We will cover dataframes later in the course.\n# For now, I just want to demonstrate that R has structures that are NOT vectors.\n\n\n\n# A dataframe is made up of vectors, but it itself is NOT a vector.\nexample = data.frame(students = c(\"joe\", \"sue\", \"bob\"), \n                      test1 = c(71,85,90),\n                      test2 = c(83, 92, 95), stringsAsFactors = FALSE)\nexample\n\n  students test1 test2\n1      joe    71    83\n2      sue    85    92\n3      bob    90    95\n\nis.vector(example)      # FALSE\n\n[1] FALSE\n\nis.data.frame(example)  # TRUE\n\n[1] TRUE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#vector-arithmetic-1",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#vector-arithmetic-1",
    "title": "4  Using some built-in functions",
    "section": "4.24 Vector arithmetic",
    "text": "4.24 Vector arithmetic\n\n#--------------------.\n# Vector arithmetic   ####\n#--------------------.\n\n# When you perform arithmetic with a vector each item in the vector is operated upon\n\nc(100,200,300) + 5    # return a vector that contains c(105, 205, 305)\n\n[1] 105 205 305\n\n# vector arithmetic also respects the order of operations\n# In the following example the multiplication is done before the addition\n# to yield the value c(205, 405, 605)\n\n5 + c(100, 200, 300) * 2   # do the multiplication first\n\n[1] 205 405 605\n\n# This works as follows\n#\n# original:               5 + c(100, 200, 300) * 2\n#\n# do the *:               5 + c(200, 400, 600)\n#\n# then do the +:          c(205, 405, 605)\n#\n# result is displayed as: 205 405 605\n\n# we can change the order of operations with parentheses\n# This yields a different result. \n\n(5 + c(100,200,300)) * 2   # pay close attention to the parenthesis!!!\n\n[1] 210 410 610\n\n# This works follows\n#\n# original:     (5 + c(100, 200, 300)) * 2\n#\n# do the +:     c(105, 205, 305) * 2\n#\n# then do the *: c(210, 410, 610)\n#\n# result is displayed as: 210 410 610\n\n\n###########################################.\n#\n# You may assign a vector to a variable   \n#\n###########################################.\n\ngrades &lt;- c(72,95,79,85)\n\ngrades   # show the values\n\n[1] 72 95 79 85\n\n# QUESTION:\n#\n# Modify the grades variable by adding 2 points to each grade\n\n# ANSWER  ####\ngrades = grades + 2    # you must assign the answer back to grades\ngrades\n\n[1] 74 97 81 87",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#length-some_vector",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#length-some_vector",
    "title": "4  Using some built-in functions",
    "section": "4.25 length( SOME_VECTOR )",
    "text": "4.25 length( SOME_VECTOR )\n\n#-----------------------------------------------------------------------.\n#\n# length(vector)  returns the number of values in the vector ####\n# \n#-----------------------------------------------------------------------.\n\n# Set the value of grades\ngrades &lt;- c(72,95,79,85)\n\n# the length function returns the number of values in a vector\nlength(grades)          #4\n\n[1] 4\n\nlength(c(25, 10))       #2\n\n[1] 2\n\nlength(c(100,200,300))  #3\n\n[1] 3\n\n# A single value is a vector - but it doesn't need to be surrounded with c()\n\nlength(c(100))   # the length of a vector that contains a single item is 1\n\n[1] 1\n\nlength(100)      # ... same thing ... don't use the c - it's not necessary\n\n[1] 1\n\nc(100)  # this is the same as just 100, the \"c\" is not necessary if you have just one value.\n\n[1] 100\n\n100 # same thing - don't use the c for a single value\n\n[1] 100\n\ngrades   # show all grades\n\n[1] 72 95 79 85\n\ngrades + 5   # show what the values would be if we added 5 to each grade\n\n[1]  77 100  84  90\n\ngrades       # however, grades did NOT actually change\n\n[1] 72 95 79 85\n\n# If you want to change the value of grades, you need to \n# use the = sign or the &lt;- or the -&gt;. For example:\ngrades     # show grades\n\n[1] 72 95 79 85\n\ngrades &lt;- grades + 10   # add 10 to each grade and update grades with the new values\ngrades     # grades now has the new values\n\n[1]  82 105  89  95\n\nprices = c(1.99, 2.99, 3.99)\ndoublePrices = 2 * prices\ndoublePrices\n\n[1] 3.98 5.98 7.98",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#counting-arguments",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#counting-arguments",
    "title": "4  Using some built-in functions",
    "section": "4.26 Counting arguments",
    "text": "4.26 Counting arguments\n\n#############################################################.\n#\n# Arguments (AKA \"parameters\") to a function.   ####\n#\n# It is important to know how many arguments are being passed \n# to a function. The arguments to a function appear in the (parentheses)\n# next to the function name and are separated from each other with commas.\n#\n#########################################################################.\n\n# Remember that the round function takes TWO arguments\n#\n#   x is the values to round\n#\n#   digits is the position to round to\n\nround(100.729, 1)  # 100.7\n\n[1] 100.7\n\nround(100.729, 2)  # 100.73\n\n[1] 100.73\n\nround (100.729)    # 101\n\n[1] 101\n\n# The first argument is allowed to be a vector with multiple values\n\nround (   c(100.729, 200.618)  , 1)  # 100.7  200.6\n\n[1] 100.7 200.6\n\ngrades = c(82, 105, 89, 95)\n\nsum(grades)  # one argument - add up all grades (not very useful for grading ...)\n\n[1] 371\n\nsum(c(82,105,89,95))  # also one argument - same exact thing, sum is given 1 vector\n\n[1] 371\n\nsum(82,105,89,95)     # four arguments - same result, HOWEVER sum is given 4 different vectors - same answer\n\n[1] 371",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#wilf---up-to-here---after-class-2---aug-31-2023",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#wilf---up-to-here---after-class-2---aug-31-2023",
    "title": "4  Using some built-in functions",
    "section": "4.27 2023 WILF - UP TO HERE - AFTER CLASS 2 - Aug 31, 2023",
    "text": "4.27 2023 WILF - UP TO HERE - AFTER CLASS 2 - Aug 31, 2023\n\n# The sum function will sum all of the values in all \n# of its arguments. The following all produce the same\n# result (i.e. 306) but in different ways.\n\nsum( c(100,200) , c(1,2,3))   # 2 arguments\n\n[1] 306\n\nsum( c(100,200,1,2,3) )       # 1 argument\n\n[1] 306\n\nsum( 100,200,1,2,3 )          # 5 arguments\n\n[1] 306\n\n#---------------------------------------------------------------.\n#\n# To get an average use the mean function.  ####\n#\n#---------------------------------------------------------------.\n\n# IMPORTANT: the mean function works a little differently than the sum function.\n#\n# The mean function requires that all values being averaged are passed as a single vector. ####\n\ngrades        # show all the grades\n\n[1]  82 105  89  95\n\ngrades = c(82, 105, 89, 95)  \nmean(grades)  # get the average\n\n[1] 92.75\n\nmean( c(82,105,89,95) )  # same thing - there is ONE vector, ie a vector, c(72,95,79,85)\n\n[1] 92.75\n\nmean(82,105,89,95)    # I didn't use the c() function here - there are 4 vectors!!!\n\n[1] 82\n\n?mean\n\n# Examine the documentation for mean to see why. The Usage section of the \n# documentation includes the following: mean(x, trim = 0, na.rm = FALSE, ...)\n# The \"x\" corresponds to a single vector that contains\n# the values to be averaged. If you pass the values without\n# the c() function, then the 2nd value listed is actually\n# passed to the \"trim\" argument of mean. If you want to know\n# what the \"trim\" argument is used for, see the help\n# page for \"mean\". If you don't specify any value for \"trim\"\n# then \"mean\" will work as you expect.\n# \"x\" \n?mean     # see the documentation for mean\n\n# Arguments passed to mean:\n#\n#  x      - a vector that contains the values to be averaged\n#\n#  trim   - a fraction (0 to 0.5) of observations to be ignored (i.e. trimmed) from the beginning and end of the vector\n#\n#  na.rm  - WE WILL DISCUSS THIS LATER ...\n\n\n\n# Return the average of the numbers in the vector.\n#\n# Return value is 400 , i.e.  (100+200+300+500+900) / 5\nmean(c(100,200,300,500,900))        \n\n[1] 400\n\n# the code above does the same as the next line\nsum(c(100,200,300,500,900)) / 5\n\n[1] 400\n\n# DO NOT DO THE FOLLOWING !!!!  \n# The mean function is being passed a SINGLE value and \n# does nothing meaningful in this case.\n\nmean(sum(100,200,300,500,900) / 5)  # basically same as:  sum(100,200,300,500,900) / 5\n\n[1] 400\n\n# This is because by the time, the mean function\n# starts working the value: sum(100,200,300,500,900) / 5\n# has already been calculated as 400.\n# It would be just as rediculus as running the following code\n# which just returns the number 400 - the mean function does\n# nothing meaningful in this case. \n\nmean ( 400 )   # This is the same as 400 / 1 \n\n[1] 400",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#trim-argument-to-mean",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#trim-argument-to-mean",
    "title": "4  Using some built-in functions",
    "section": "4.28 trim argument to mean",
    "text": "4.28 trim argument to mean\n\n# the \"trim\" argument to mean   ####\n#\n# trim (ie. remove) 0.2 (ie. 1/5) of the values (ie. 1 value) \n# from the beginning and end of the vector\n#\n# Return value is 333.333, ie. mean(c(200,300,500))\nmean(c(100,200,300,500,900), 0.2) \n\n[1] 333.3333\n\nmean(c(200,300,500)) # same result\n\n[1] 333.3333\n\ngrades = c(5, 82, 85, 89, 105)\n\nmean(grades)   # mean ( c(5,82,85,89,105))\n\n[1] 73.2\n\nmean(grades, trim = 0.2)  # mean(c(82,85,89))\n\n[1] 85.33333\n\ngrades\n\n[1]   5  82  85  89 105\n\n# trim (ie. remove) 0.4 (ie. 2/5) of the values (i.e. 2 values)\n# from the beginning and end of the vector\n#\n# Return value is 300, i.e. mean(300) \nmean(c(100,200,300,500,900), 0.4)   # trim 0.4 = 2/5 of the values from the beginning and end\n\n[1] 300\n\nmean(c(500,200,300,900,100), 0.4)   # trim 0.4 = 2/5 of the values from the beginning and end\n\n[1] 300\n\n# In the following the result is 100\n# This is because the arguments are assigned in the following order\n#\n# x, ie. the values to be averaged = first argument = 100\n# trim = second argument = 200\n# na.rm = 3rd argument = 300\n# ... = all other arguments = c(500,900)\n#\n# Other than the x=100, the other arguments are really meaningless so\n# the result is the average of 100, which is 100.\n\nmean(100,200,300,500,900)\n\n[1] 100\n\n# PROBLEM:\n#\n# REMEMBER that mean requires that all values being averaged are in a SINGLE vector\n# Therefore to take the average of the values in x and in y the following WILL NOT WORK:\n\nmean(x, y)   # will not work - will just show the mean of the values in x\n\nError in eval(expr, envir, enclos): object 'x' not found\n\n# SOLUTION:\n#\n# Remember that you can combine multiple vectors into a single vector with \n# the c function.\n\nx &lt;- c(10,20,30)\ny &lt;- c(40, 50)\n\nmean(c(x,y))  # combine x and y into a single vector and take the mean of that vector\n\n[1] 30\n\n#--------------------------------------------------------.\n# QUESTION : ####\n#\n# Grades for class1 and class2 are as shown below. \n# \n#   class1grades &lt;- c(80,90,100)\n#   class2grades &lt;- c(85, 88)\n#\n# (a) get the two averages, one for each class\n# (b) get the average for all the students in both classes\n#--------------------------------------------------------.\n\n\n# ANSWER    \nclass1grades &lt;- c(80,90,100)         # ANSWER   \nclass2grades &lt;- c(85, 88)            # ANSWER   \nclass1average &lt;- mean(class1grades) # ANSWER    \nclass2average &lt;- mean(class2grades) # ANSWER    \nallStudentsAverage &lt;- mean ( c(class1grades, class2grades)) # ANSWER    \nclass1average   # ANSWER    \n\n[1] 90\n\nclass2average   # ANSWER    \n\n[1] 86.5\n\nallStudentsAverage # ANSWER \n\n[1] 88.6\n\n# sum and mean are not consistent in the way they handle multiple arguments\nsum(1,2,3)   # works as expected\n\n[1] 6\n\nmean(1,2,3)  # does not work as most people would expect - answer is 1\n\n[1] 1",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#the-recycling-rule.",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#the-recycling-rule.",
    "title": "4  Using some built-in functions",
    "section": "4.29 The “recycling” rule.",
    "text": "4.29 The “recycling” rule.\n\n#-------------------------------------------------------------.\n# \n# VECTOR ARITHMETIC WITH TWO VECTORS\n# \n# RECYCLING RULE - used in vector arithmetic with TWO vectors when vecors are different lengths\n#\n#-------------------------------------------------------------.\n\n# when you perform arithmetic between two vectors and they are the same length\n# then you view each correpsonding set of values as being operated on. \n# For example\n\nc(100,200,300) + c(1, 2, 3)   # 101  202  303\n\n[1] 101 202 303\n\nc(100 + 1 , 200 + 2 , 300 + 3) # ... same thing\n\n[1] 101 202 303\n\n# Another example : remember the order of operations\n\nc(40, 20, 30) - c(4,5,6) * c(1, 2, 3)  # remember the order of operations!\n\n[1] 36 10 12\n\n# original :              c(40, 20, 30) - c(4,5,6) * c(1, 2, 3)\n# do the * :              c(40, 20, 30) - c(4*1,5*2,6*3) \n#          :              c(40, 20, 30) - c(4,10,18)\n# do the - :              c(40-4, 20-10, 30-18) \n#          :              c(36 , 10, 12) \n\n\n# if one vector is shorter than the other then ...\n# \n# step 1: In R's memory (you don't see this) the values from the \n#         shorter vector are repeated over and over until the shorter vector\n#         is the same length as the longer vector. \n#\n# Step 2: The math happens ...\n#\n# For example the following \n\nc(10,20,30,40) + c(1,7)  # same as c(10,20,30,40)+c(1,7,1,7) ... ie. 11  27  31  47\n\n[1] 11 27 31 47\n\n# Original:       c(10,20,30,40) + c(1,7) \n# Recycling rule: c(10,20,30,40) + c(1,7,1,7)\n# addition:       c(10+1,20+7,30+1,40+7)\n# final result:   c(11, 27, 31, 47)\n\n\n# It doesn't matter if the shorter vector is first or last\nc(1,7) + c(10,20,30,40)  # same as c(1,7,1,7)+c(10,20,30,40) ... i.e. 11  27  31  47\n\n[1] 11 27 31 47\n\n# Doing math with a vector that contains a single value is just a special case of\n# this rule. Example:\n\n3 * c(2,3,4)    # same as c(3,3,3) * c(2,3,4)\n\n[1]  6  9 12\n\n# original:       3 * c(2,3,4)\n# recycling rule: c(3,3,3) * c(2,3,4)\n# multiplication: c(3*2, 3*3, 3*4)\n# final answer:   c(6,9,12)\n\n\n# REMEMBER THE ORDER OF OPERATIONS!!!\n\nc(1,2) + 3 * c(10,20,30,40)    # 31  62  91  122\n\n[1]  31  62  91 122\n\n# original :      c(1,2) + 3 * c(10,20,30,40) \n# do the * :      c(1,2) + c(3,3,3,3) * c(10,20,30,40)\n#          :      c(1,2) + c(3*10 , 3*20, 3*30, 3*40)\n#          :      c(1,2) + c(30 , 60, 90, 120)\n# do the + :      c(1,2,1,2) + c(30 , 60, 90, 120)\n#          :      c(1+30 , 2+60 , 1+90 , 2+120)\n#          :      c(31, 62, 91, 122)\n\n\nc(1,2) + 3 * sum(10,20,30,40)\n\n[1] 301 302\n\n# orignal       : c(1,2) + 3 * sum(10,20,30,40)\n# sum function  : c(1,2) + 3 * 100\n# multiplication: c(1,2) + 300\n# addition      : c(1+300 , 2+300)\n#               : c(301, 302)\n\n\n\nc(1,2) + 3 * sum(2 ^ 3 , 3-4*5)\n\n[1] -26 -25\n\n# original: c(1,2) + 3 * sum(2 ^ 3 , 3-4*5)\n# figure out the values of the arguments:  c(1,2) + 3 * sum( 8 , -17)\n# do the sum function:                     c(1,2) + 3 * -9\n# do the * :                               c(1,2) + -27\n# recycling rule:                          c(1,2) + c(-27,-27)\n# final answer:                            c(1 + -27 , 2 + -27)\n# final answer:                            c( -26 , -25)\n# If the length of the longer vector is not a multiple of the length of\n# the shorter vector, it WILL work, but you will get a WARNING. \n#\n# The warning is to alert you to the fact that you might have done something\n# that you didn't intend to, however, it will still work.\n#\n# The recycling will continue as usual for the full length of the longer\n# vector.\n# Example:\n\nc(1,2) + c(100,200,300,400,500, 600) # 101 202 301 402 501 602\n\n[1] 101 202 301 402 501 602\n\nc(1,2) + c(100,200,300,400,500)      # 101 202 301 402 501  (with a warning)\n\nWarning in c(1, 2) + c(100, 200, 300, 400, 500): longer object length is not a\nmultiple of shorter object length\n\n\n[1] 101 202 301 402 501\n\n# The above command is processed as follows\n# original: c(1,2) + c(100,200,300,400,500) \n# recycling rule: c(1,2,1,2,1) + c(100,200,300,400,500)\n# final answer  : c (101, 202, 301, 402, 501)\n# \n# Because the first vector was recycled a non-whole-number of times\n# R displays a warning.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#wilf---up-to-here---after-day-03",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#wilf---up-to-here---after-day-03",
    "title": "4  Using some built-in functions",
    "section": "4.30 2023 WILF - UP TO HERE - AFTER DAY 03",
    "text": "4.30 2023 WILF - UP TO HERE - AFTER DAY 03",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#beren---up-to-here---after-class-04",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#beren---up-to-here---after-class-04",
    "title": "4  Using some built-in functions",
    "section": "4.31 2023 BEREN - UP TO HERE - AFTER CLASS 04",
    "text": "4.31 2023 BEREN - UP TO HERE - AFTER CLASS 04",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#errors-vs-warnings-1",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#errors-vs-warnings-1",
    "title": "4  Using some built-in functions",
    "section": "4.32 ERRORs vs WARNINGs",
    "text": "4.32 ERRORs vs WARNINGs\n\n# When you get an ERROR, the command doesn't have ANY effect. ####\n#\n# When you have an error, the command ends at the time the error happens.\n# Therefore, in the following command no value is assigned to the variable.\n#\n# NOTE - just in case you have a variable, x, that was already created, we\n# will \"remove\" that variable on the next line. This helps us to prove our point.\n# this is here just to prove a point. \n\nx = 100\n\nx + 5\n\n[1] 105\n\nrm(x)  # remove x (just in case it already exists) to help us prove our point\n\nx + 5     # ERROR - x doesn't exist  (GOOD - that's what we wanted)\n\nError in eval(expr, envir, enclos): object 'x' not found\n\nx = combine_stuff(10,20,30) + c(1,2,3)    # ERROR - the function combine_stuff doesn't exist\n\nError in combine_stuff(10, 20, 30): could not find function \"combine_stuff\"\n\nx      # ERROR - x still doesn't exist, i.e. the above command did NOTHING\n\nError in eval(expr, envir, enclos): object 'x' not found\n\n# When you get a WARNING, the command DOES have an effect. ####\n#\n# If you assign the result of something that produces a warning the assignment\n# will happen and you can use that value without getting anymore warnings.\n\nrm(nums)\nnums\n\nError in eval(expr, envir, enclos): object 'nums' not found\n\nnums &lt;- c(1,2) + c(100,200,300,400,500)    # 101 202 301 402 501  (with a warning)\n\nWarning in c(1, 2) + c(100, 200, 300, 400, 500): longer object length is not a\nmultiple of shorter object length\n\nnums\n\n[1] 101 202 301 402 501\n\n# The value of nums was still assigned and can be used normally\nnums   # this will NOT generate a warning\n\n[1] 101 202 301 402 501\n\nnums - 50   # this will NOT generate a warning\n\n[1]  51 152 251 352 451",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#practice-1",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#practice-1",
    "title": "4  Using some built-in functions",
    "section": "4.33 — PRACTICE —",
    "text": "4.33 — PRACTICE —\n\n#----------------------------------------------------------------------------.\n# QUESTION\n#\n# Use the recycling rule to generate the first ten multiples of 5 in a single\n# command.\n# The result should be as shown below. \n#\n#    &gt; YOUR COMMAND GOES HERE     # replace this line with your command\n#\n#   [1] 5 10 15 20 25 30 35 40 45 50\n#----------------------------------------------------------------------------.\n\n\n#----------------------------------------------------------------------------.\n# QUESTION\n# \n# numValues is a variable that contains a number.\n# Write code that produces numValues of the 5 times table. \n#\n# EXAMPLE 1\n#  &gt; numValues = 3\n#  &gt; YOUR CODE GOES HERE\n#  [1] 5 10 15\n#\n# EXAMPLE 2\n#  &gt; numValues = 7\n#  &gt; YOUR CODE GOES HERE\n#  [1] 5 10 15 20 25 30 35\n#----------------------------------------------------------------------------.\n\n# THINK ABOUT THIS - to answer the question you need ONE command that will \n# use the numValues variable to create the following results \n5 * c(1,2,3)          # when numValues is 3\n\n[1]  5 10 15\n\n5 * c(1,2,3,4,5,6,7) # when numValues is 7\n\n[1]  5 10 15 20 25 30 35\n\n#----------------------------------------------------------------------------.\n# QUESTION   ####\n#\n# Use the recycling rule to generate the first five multiples \n# of 2 and 100 using a single command. The result should be as shown below. \n#\n# &gt; YOUR COMMAND GOES HERE     # replace this line with your command\n#\n# [1] 2 100 4 200 6 300 8 400 10 500\n#----------------------------------------------------------------------------.\n\n# ANSWER\nx = 100                                           # ANSWER\nrep(c(2,100), times=x) * rep(seq(1,x), each=2)    # ANSWER\n\n  [1]     2   100     4   200     6   300     8   400    10   500    12   600\n [13]    14   700    16   800    18   900    20  1000    22  1100    24  1200\n [25]    26  1300    28  1400    30  1500    32  1600    34  1700    36  1800\n [37]    38  1900    40  2000    42  2100    44  2200    46  2300    48  2400\n [49]    50  2500    52  2600    54  2700    56  2800    58  2900    60  3000\n [61]    62  3100    64  3200    66  3300    68  3400    70  3500    72  3600\n [73]    74  3700    76  3800    78  3900    80  4000    82  4100    84  4200\n [85]    86  4300    88  4400    90  4500    92  4600    94  4700    96  4800\n [97]    98  4900   100  5000   102  5100   104  5200   106  5300   108  5400\n[109]   110  5500   112  5600   114  5700   116  5800   118  5900   120  6000\n[121]   122  6100   124  6200   126  6300   128  6400   130  6500   132  6600\n[133]   134  6700   136  6800   138  6900   140  7000   142  7100   144  7200\n[145]   146  7300   148  7400   150  7500   152  7600   154  7700   156  7800\n[157]   158  7900   160  8000   162  8100   164  8200   166  8300   168  8400\n[169]   170  8500   172  8600   174  8700   176  8800   178  8900   180  9000\n[181]   182  9100   184  9200   186  9300   188  9400   190  9500   192  9600\n[193]   194  9700   196  9800   198  9900   200 10000\n\n#----------------------------------------------------------------------------.\n# QUESTION   ####\n#\n# Use the recycling rule to generate the first five multiples \n# of 2 and 100 using a single command. The result should be as shown below. \n# Write the command using the least amount of typing.\n#\n#   &gt; YOUR COMMAND GOES HERE     # replace this line with your command\n#   [1] 2 4 6 8 10 100 200 300 400 500\n#\n# The following is NOT the answer but helps you to think about how to generate\n# the same thing using shorter code.\n# c( 2 * 1 , 2 * 2 , 2*3 , 2*4 , 2*5 , 100 * 1 , 100 * 2 , 100 * 3 , 100 * 4, 100*5) \n#----------------------------------------------------------------------------.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#more-about-the-rep-function.",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#more-about-the-rep-function.",
    "title": "4  Using some built-in functions",
    "section": "4.34 More about the rep function.",
    "text": "4.34 More about the rep function.\n\n###########################################################.\n#\n# More about the rep function.\n#\n###########################################################.\n\n# The rep function can be used in several ways.\n# In the simplest use of the rep function, rep returns a vector\n# that contains the values from the first argument to the function\n# repeated the number of times specified in the 2nd argument. \n# Examples:\n\n# Repeat the number 3 five times\nrep(3, 5)\n\n[1] 3 3 3 3 3\n\n# repeat the number 5 three times:\nrep(5, 3)\n\n[1] 5 5 5\n\n?rep    # see the documentation for rep function\n\n# since the rep function returns a vector, you can do anything with the\n# return value that you can do with any other vector\n\nthreeFives &lt;- rep(5,3)\nthreeFives\n\n[1] 5 5 5\n\nthreeFives * 10\n\n[1] 50 50 50\n\n# The default value for the number of repetitions is 1 (i.e. one)\nrep(100)   # same as 100 ... why would you do this ??? you probably wouldn't ... yet ...\n\n[1] 100\n\n?rep\n\n# You can use rep to repeat entire vectors\nnums &lt;- c(10,20,30,40)\nrep(nums, 2)   # 10 20 30 40 10 20 30 40\n\n[1] 10 20 30 40 10 20 30 40",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#times-argument",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#times-argument",
    "title": "4  Using some built-in functions",
    "section": "4.35 times argument",
    "text": "4.35 times argument\n\n########################################################################.\n# Other arguments of the rep function.\n#\n# The \"Details\" section of the rep documentation shows the \n# following:\n#\n#     rep(x, times = 1, length.out = NA, each = 1)\n#\n# See the \"Arguments\" section of the rep documentation for\n# an explanation of what each of the arguments mean.\n########################################################################.\n\n# Let's start with some data:\n\nnums &lt;- c(10,20)\nnums               # show the value in nums\n\n[1] 10 20\n\n# The rep documentation shows the following:\n#\n#     rep(x, times = 1, length.out = NA, each = 1)\n#\n# \"x\" is the first argument - \"x\" is the vector that will be repeated.\n# \"times\" is the 2nd argument - \"times\" is the number of times to repeat \"x\" (default is 1 time)\n#\n# Therefore the following are the same thing:\n\nrep(nums, 5)       # 5 is the value of 2nd argument to rep\n\n [1] 10 20 10 20 10 20 10 20 10 20\n\nrep(x=nums, times=5) # same thing - specify 5 as the value of the \"times\" argument\n\n [1] 10 20 10 20 10 20 10 20 10 20\n\nrep(times=5, x=nums) # same thing - specify 5 as the value of the \"times\" argument\n\n [1] 10 20 10 20 10 20 10 20 10 20\n\n\n\nlength.out argument\n\n#--------------------------------------------------------.\n# rep ( SOME_VECTOR, length.out=SOME_NUMBER )\n#\n#    is the same as\n#\n# rep_len ( SOME_VECTOR, SOME_NUMBER )\n#--------------------------------------------------------.\n\n# The length.out argument causes the values in the x argument, i.e. the 1st argument, to be repeated to the specified length.  ####\nnums                     # nums didn't change\n\n[1] 10 20\n\nrep(nums, length.out=5)  # repeat the values in nums to a length of 5\n\n[1] 10 20 10 20 10\n\n# The rep_len is just a shorthand for using the length.out argument in the rep function   ####\n# to accomplish the same thing\nnums                     # show the values in nums\n\n[1] 10 20\n\nrep(nums, length.out=5)  # repeat the values in nums to a length of 5\n\n[1] 10 20 10 20 10\n\nrep_len(nums,5)          # same thing, another way\n\n[1] 10 20 10 20 10\n\nrep(nums, length.out=15)  # repeat the values in nums to a length of 15\n\n [1] 10 20 10 20 10 20 10 20 10 20 10 20 10 20 10\n\nrep_len(nums,15)          # same thing, another way\n\n [1] 10 20 10 20 10 20 10 20 10 20 10 20 10 20 10",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#each-argument",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#each-argument",
    "title": "4  Using some built-in functions",
    "section": "4.36 each argument",
    "text": "4.36 each argument\n\n#-----------------------------------------------------------.\n# rep ( SOME_VECTOR, each = SOME_NUMBER )\n#-----------------------------------------------------------.\n\n# The each argument causes each value the x argument to be repeated sequentially the specified number of times   ####\n\nnums               # show the values in nums\n\n[1] 10 20\n\nrep(nums, each=5)  # repeat each value of nums 5 times       ####\n\n [1] 10 10 10 10 10 20 20 20 20 20\n\n#-----------------------------------------------------------------------------------------.\n# Sometimes it's hard to know what a function will do. The help page\n# doesn't really explain what will happen for all the different possible combinations of \n# the arguments, times, length.out and each.\n#\n# We can experiment to find out ...\n#-----------------------------------------------------------------------------------------.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#times-and-each",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#times-and-each",
    "title": "4  Using some built-in functions",
    "section": "4.37 times and each",
    "text": "4.37 times and each\n\n# rep with times and each\nnums\n\n[1] 10 20\n\nrep(nums, times=2, each=3)  # 10 10 10 20 20 20 10 10 10 20 20 20    ####\n\n [1] 10 10 10 20 20 20 10 10 10 20 20 20",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#length.out-and-each",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#length.out-and-each",
    "title": "4  Using some built-in functions",
    "section": "4.38 length.out and each",
    "text": "4.38 length.out and each\n\n# rep with length.out and each\nnums\n\n[1] 10 20\n\nrep(nums, length.out=8, each=3)  # 10 10 10 20 20 20 10 10   ####\n\n[1] 10 10 10 20 20 20 10 10\n\nrep(nums, each=3, length.out=8 )  # same results : 10 10 10 20 20 20 10 10\n\n[1] 10 10 10 20 20 20 10 10",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#times-length.out-each",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#times-length.out-each",
    "title": "4  Using some built-in functions",
    "section": "4.39 times, length.out, each",
    "text": "4.39 times, length.out, each\n\n# rep with times, length.out and each\nnums\n\n[1] 10 20\n\nrep(nums, times=2, length.out=5, each=3)  # 10 10 10 20 20   ####\n\n[1] 10 10 10 20 20\n\n# Look at the help file for specifics ...\n?rep",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#understanding-rs-help-files-1",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#understanding-rs-help-files-1",
    "title": "4  Using some built-in functions",
    "section": "4.40 Understanding R’s help files",
    "text": "4.40 Understanding R’s help files\n\n#######################################################################################.\n# Understanding R's help files   ####\n#\n# R functions can be used in many many different ways. You must become familiar with \n# the R help files in order to understand how each function can be used. \n#\n# Pay attention to the following in the R help files\n#\n# - what arguments can be specified\n#\n# - what are the names of the arguments\n#\n# - what are the default values (if any) of the arguments. The default values of\n#   an argument appear after an = sign next to the argument in the help file.\n#\n# - how the function works when different arguments are specified\n#######################################################################################.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#sort-function-1",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#sort-function-1",
    "title": "4  Using some built-in functions",
    "section": "4.41 sort function",
    "text": "4.41 sort function\n\n############################################################################.\n#\n# sort( SOME_VECTOR )                    # returns the vector sorted in increasing oder ####\n#\n# sort( SOME_VECTOR, decreasing=TRUE )   # returns the vector sorted in decreasing order  ####\n#\n############################################################################.\n\ngrades = c(93, 76 , 69, 83, 77, 98, 100, 25, 89, 92, 91, 52)\ngrades\n\n [1]  93  76  69  83  77  98 100  25  89  92  91  52\n\nsort(grades) # show the grades in sorted order, i.e. 25  52  69  76 ... etc\n\n [1]  25  52  69  76  77  83  89  91  92  93  98 100\n\n# The variable grades is still in the original order\ngrades       # the variable grades is still in the original order\n\n [1]  93  76  69  83  77  98 100  25  89  92  91  52\n\n# REMEMBER - as always, if you want to change a variable, you MUST use an\n#            assignment statement.\n#\n# If you want to change the value of the grades variable, then you must\n# assign the result back to the grades variable. \n\ngrades= sort(grades)  # now the variable grades contains the sorted values\ngrades\n\n [1]  25  52  69  76  77  83  89  91  92  93  98 100\n\n#---------------------------------------------------------------------.\n# The decreasing argument may be TRUE or FALSE (default is FALSE) ####\n#---------------------------------------------------------------------.\n\nsort(grades, decreasing = FALSE)  # same thing  (default for decreasing is FALSE)\n\n [1]  25  52  69  76  77  83  89  91  92  93  98 100\n\nsort(grades, decreasing = TRUE)\n\n [1] 100  98  93  92  91  89  83  77  76  69  52  25\n\n# See the help page for advanced options that can be used with sort\n?sort",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#more-about-the-seq-function.-1",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#more-about-the-seq-function.-1",
    "title": "4  Using some built-in functions",
    "section": "4.42 More about the seq function.",
    "text": "4.42 More about the seq function.\n\n############################################################################.\n#\n# More about the seq function.   ####\n#\n############################################################################.\n\n# Review of the basic use of seq\n# We already covered the following:\n\n?seq   # see the help page for seq\n\nseq(from=8, to=10)   # 8 9 10     count up  \n\n[1]  8  9 10\n\nseq(from=10, to=8)   # 10 9 8     count down\n\n[1] 10  9  8\n\nseq(10,8)   # 10 9 8 - same thing - the names aren't necessary if you write the arguments in the expected order\n\n[1] 10  9  8\n\n# ... seq can also accept other arguments:\n\n#-----------------------------------------------------------------------------.\n# seq( ...   by=SOME_POSITIVE_OR_NEGATIVE_NUMBER   .... )  ####\n#\n#   The by argument tells seq what number to \"count by\". (by can be positive or negative)    ####\n#\n#   1st value in the output vector is the   \"from\" value.\n#   2nd value in the output vector is       \"from\" + \"by\"\n#   3rd value in the output vector is       \"from\" + \"by\" + \"by\"\n#   4th value in the output vector is       \"from\" + \"by\" + \"by\" + \"by\"\n#   etc ...\n#\n# By default, the value of by is 1.\n#\n# See examples below.  \n#-----------------------------------------------------------------------------.\n\n# count by threes ... up until but not past the to value\nseq(from=20, to=30, by=3)   #  20  23  26  29\n\n[1] 20 23 26 29\n\n# To count down by any number other than 1 you must use a negative value for by.\n# \n# In the following command we count down\n# from 10 to 3 by threes, so by must be MINUS three (i.e. by = -3)\n\nseq(from=30, to=20, by=-3)  # 30  27  24  21  count down by threes \n\n[1] 30 27 24 21\n\n# if you use the wrong sign (+ or -) for by you'll get an error\n\n#seq(from=30, to=20, by=3)   # ERROR - counting down - must have negative value for by\n\n#seq(from=20, to=30, by=-3)  # ERROR - counting up - must have positive value for by\n\n\n#-----------------------------------------------------------------------------.\n#   The return value of seq always starts with the \"from\" value and goes no further than the \"to\" value.  ####\n#\n#   NOTE that the result might not actually include the \"to\" value if the \"to\" value\n#   doesn't naturally arise from the implied sequence.\n#\n#   See the examples below.\n#-----------------------------------------------------------------------------.\n\nseq( from = 10  ,  to = 20, by=4 ) # 10 14 18  - result does NOT include 20.\n\n[1] 10 14 18\n\n#-----------------------------------------------------------------------------.\n#\n#   the arguments \"from\" and \"to\" do NOT have to be whole numbers  ####\n#\n#-----------------------------------------------------------------------------.\n\nseq( from = .5, to = 3.5)  # 0.5  1.5  2.5  3.5     \n\n[1] 0.5 1.5 2.5 3.5\n\nseq( from = 0.75  ,  to = 3 ) # 0.75  1.75  2.75  - result does NOT include 3.   ####\n\n[1] 0.75 1.75 2.75",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#practice-2",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#practice-2",
    "title": "4  Using some built-in functions",
    "section": "4.43 — PRACTICE —",
    "text": "4.43 — PRACTICE —\n\n#########################################################################.\n# QUESTION ####\n#########################################################################.\n# Write code to generate the number -5 until -200 but no further. Count down by 5's\n# The code should produce\n# -5 -10 -15 .... -200\n#########################################################################.\n\n# ANSWER\nseq(from=-5, to=-200, by=-5)   # ANSWER\n\n [1]   -5  -10  -15  -20  -25  -30  -35  -40  -45  -50  -55  -60  -65  -70  -75\n[16]  -80  -85  -90  -95 -100 -105 -110 -115 -120 -125 -130 -135 -140 -145 -150\n[31] -155 -160 -165 -170 -175 -180 -185 -190 -195 -200\n\n#########################################################################.\n# QUESTION ####\n#########################################################################.\n# \n# Based on the documentation for seq, what will the following command display?\n#\n# &gt; seq()   # what will this display???\n# \n# How did you figure out your answer from the documentation?\n#########################################################################.\n\n# ANSWER - just try it - it shows 1 - can you understand why? \n# See the documentation ?seq\nseq()\n\n[1] 1",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#even-more-about-the-seq-function.",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#even-more-about-the-seq-function.",
    "title": "4  Using some built-in functions",
    "section": "4.44 Even more about the seq function.",
    "text": "4.44 Even more about the seq function.\n\n#-----------------------------------------------------------------------------.\n# Other arguments:\n#\n#   length.out - total length of the resulting vector\n#\n#   along.with - specify a vector whose length should be used as the length of the result\n#\n# See examples below\n#-----------------------------------------------------------------------------.\n\n?seq\n\n\n# from,to,length.out (without by) - start with from, end with to, total of 5 numbers\nseq( from=1, to=2, length.out=5)    # \n\n[1] 1.00 1.25 1.50 1.75 2.00\n\n# from,by,length.out (without to) - start with from, keep adding by, for a total of length.out numbers\nseq(from=2, by=3, length.out=20)  # start from 2, add 3 each time until you get 20 numbers\n\n [1]  2  5  8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59\n\n#-----------------------------------------------------------------------------.\n# QUESTION: What will the following produce ? \n#\n# I guess you can run it to find out but you should know how to answer this \n# WIHTOUT needing to run the code.\n#-----------------------------------------------------------------------------.\n\nseq(2, 3, length.out=20)\n\n [1] 2.000000 2.052632 2.105263 2.157895 2.210526 2.263158 2.315789 2.368421\n [9] 2.421053 2.473684 2.526316 2.578947 2.631579 2.684211 2.736842 2.789474\n[17] 2.842105 2.894737 2.947368 3.000000\n\n# to,by,length.out   (without from)\nseq(to=100, by=3, length.out=4)  # generate 4 numbers each one 3 greater than the next until you get to 100\n\n[1]  91  94  97 100\n\n#-----------------------------------------------------------------------------.\n# QUESTION: What will the following produce ? \n#\n# See if you can figure out what each of the following will\n# display BEFORE running the command\n#-----------------------------------------------------------------------------.\n\nseq(from=2, to=3, by=0.2)\n\n[1] 2.0 2.2 2.4 2.6 2.8 3.0\n\nseq(from=1, to=3, length.out=6)\n\n[1] 1.0 1.4 1.8 2.2 2.6 3.0\n\nseq(from=0.5, to=1, by=.05)\n\n [1] 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00\n\nlength( seq(from=0.5, to=1, by=.05) )\n\n[1] 11\n\nseq(10, 1000, by=10)\n\n  [1]   10   20   30   40   50   60   70   80   90  100  110  120  130  140  150\n [16]  160  170  180  190  200  210  220  230  240  250  260  270  280  290  300\n [31]  310  320  330  340  350  360  370  380  390  400  410  420  430  440  450\n [46]  460  470  480  490  500  510  520  530  540  550  560  570  580  590  600\n [61]  610  620  630  640  650  660  670  680  690  700  710  720  730  740  750\n [76]  760  770  780  790  800  810  820  830  840  850  860  870  880  890  900\n [91]  910  920  930  940  950  960  970  980  990 1000\n\n#--------------------------------------------------------------------.\n#\n# length.out argument                 ####\n#\n#--------------------------------------------------------------------.\n\n# length.out is similar to the length.out for the rep function.\n# If you specify length.out you do not have to specify the to argument\n\nseq(3, length.out=7, by=-1)   # 3  2   1   0  -1  -2  -3\n\n[1]  3  2  1  0 -1 -2 -3\n\nseq(3, length.out=7)          # 3  4  5  6  7  8  9\n\n[1] 3 4 5 6 7 8 9\n\nseq(3, length.out=7, by=-2)   # 3  1  -1  -3  -5  -7  -9\n\n[1]  3  1 -1 -3 -5 -7 -9\n\nseq(3, length.out=7, by=10)   # 3  13  23  33  43  53  63\n\n[1]  3 13 23 33 43 53 63\n\n#--------------------------------------------------------------------.\n#\n# along.with=SOME_VECTOR               ####\n#\n# This argument is the same as     length.out=length(SOME_VECTOR)\n#\n# see examples below\n#--------------------------------------------------------------------.\n\n# Example: suppose a professor wanted to give a curve so that people\n# with lower grades got a higher curve.\n# \n# The professor could do the following:\n\n# Here are the original grades\ngrades = c(98,77,64,79,76, 84, 92, 78)\ngrades\n\n[1] 98 77 64 79 76 84 92 78\n\nlength(grades)   # how many grades are there?\n\n[1] 8\n\n# Sort the grades in decreasing order\nsortedGrades = sort(grades, decreasing=TRUE)\nsortedGrades\n\n[1] 98 92 84 79 78 77 76 64\n\n# Generate a vector with the amount to curve each grade.\n# Highest grade has a curve of 1 point, 2nd highest grade has a curve\n# of 2 points, etc.\n\ncurveAmounts = seq(from=1, along.with=sortedGrades)\ncurveAmounts\n\n[1] 1 2 3 4 5 6 7 8\n\ncurvedGrades = sortedGrades + curveAmounts\n\nsortedGrades # original grades\n\n[1] 98 92 84 79 78 77 76 64\n\ncurvedGrades  # curved grades\n\n[1] 99 94 87 83 83 83 83 72",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#skipping-arguments",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#skipping-arguments",
    "title": "4  Using some built-in functions",
    "section": "4.45 Skipping arguments",
    "text": "4.45 Skipping arguments\n\n#############################################################################.\n# You can skip an argument by repeating commas.\n# This works but it is not usually how R programmers write code. Therefore\n# others might not understand your code if you do this. You should know \n# that it works but I recommend that you don't do it in practice. \n#############################################################################.\n\n# value of 1st argument (ie. \"from\") is 2\n# value of 2nd argument (ie. \"to\") is 3\nseq(2, 3, length.out=20)\n\n [1] 2.000000 2.052632 2.105263 2.157895 2.210526 2.263158 2.315789 2.368421\n [9] 2.421053 2.473684 2.526316 2.578947 2.631579 2.684211 2.736842 2.789474\n[17] 2.842105 2.894737 2.947368 3.000000\n\n# value of 1st argument (ie. \"from\") is 2\n# value of 2nd argument (ie. \"to\") is blank - i.e. the default is used\n# value of 3rd argument (ie. \"by\") is 3 - i.e. the default is used\n\nseq(2, , 3, length.out=20)   # now the 3 is being passed to 3rd argument, ie. by\n\n [1]  2  5  8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#practice-3",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#practice-3",
    "title": "4  Using some built-in functions",
    "section": "4.46 — PRACTICE —",
    "text": "4.46 — PRACTICE —\n\n#######################################################.\n# QUESTION ####\n#\n# A professor wants to curve the grades of his students. \n# The grades are in the variable named grades.\n#\n# The highest grade should get a 1 point curve, \n# ... the next lower grade a 3 point curve\n# ... the next lower grade a 5 point curve\n#     etc.\n#\n# Write R code to store the curved grades in a variable named curvedGrades.\n# Your code should work unchanged no matter what values are stored in\n# the grades vector.\n#\n# EXAMPLE 1\n#   &gt; grades = c(98,77,64,79,76, 84, 92, 78)\n#   &gt; # YOUR CODE GOES HERE\n#   &gt; curvedGrades\n#   [1] 99 95 89 86 87 88 89 79\n#\n# EXAMPLE 2\n#   &gt; grades = c(70, 90, 60, 80)\n#   &gt; # YOUR CODE GOES HERE\n#   &gt; curvedGrades\n#   [1] 91 83 75 67\n#######################################################.\n\n\n# ANSWER\n# Start by thinking about the answer this way:       # ANSWER\n# 1. Sort the grades into decreasing order       # ANSWER\n# 2. Generate the sequence 1,3,5,... etc       # ANSWER\n# 3. Now add part (1) to part (2) to get the answer       # ANSWER\n#\n# The following is not the answer yet, but shows how we want to        # ANSWER\n# build up to the final answer.        # ANSWER\ngrades = c(98,77,64,79,76, 84, 92, 78)         # ANSWER\ngrades = sort(grades, decreasing=TRUE)       # ANSWER\ncurvedGrades = grades + c(1,3,5,7,9,11,13,15)       # ANSWER\ncurvedGrades       # ANSWER\n\n[1] 99 95 89 86 87 88 89 79\n\n# The previous code works if you know exactly how many grades there are. # ANSWER\n# However, your code should work, unchanged, for any value of the grades # ANSWER \n# vector.                                                                # ANSWER\n\n# Use the seq function to generate the c(1,2,3 ... etc) vector   # ANSWER\n# This can be done in two different ways.          # ANSWER\n# (a) with the along.with argument of seq    # ANSWER\n# (b) with the along.with length.out argument seq and length function   # ANSWER\n\n# This is the code for (a)        # ANSWER\ngrades = c(98,77,64,79,76, 84, 92, 78)       # ANSWER\ngrades = sort(grades, decreasing=TRUE)       # ANSWER\ncurvedGrades = grades + seq(from=1, by=2, along.with=grades)       # ANSWER\ncurvedGrades       # ANSWER\n\n[1] 99 95 89 86 87 88 89 79\n\n# This is the code for (b)        # ANSWER\ngrades = c(98,77,64,79,76, 84, 92, 78)       # ANSWER\ngrades = sort(grades, decreasing=TRUE)       # ANSWER\ncurvedGrades = grades + seq(from=1, by=2, length.out=length(grades))       # ANSWER\ncurvedGrades       # ANSWER\n\n[1] 99 95 89 86 87 88 89 79\n\n#######################################################.\n# QUESTION ####\n#\n# Do the same as the previous question, however, this time\n# the professor wants to give the highest 25% of the class no curve.\n# The first grade below the highest 25% of the class a 1 point curve, \n# ... the next lower grade a 3 point curve\n# ... the next lower grade a 5 point curve\n#       etc.\n#\n# EXAMPLE 1 \n#    &gt; grades = c(98,77,64,79,76, 84, 92, 78)\n#    &gt; # YOUR CODE GOES HERE\n#    [1] 98 92 85 82 83 84 85 75\n#\n# EXAMPLE 2\n#    &gt; grades = c(70, 90, 60, 80)\n#    &gt; # YOUR CODE GOES HERE\n#    [1] 90 81 73 65\n#\n#######################################################.\n\n# ANSWER\n# Start with some data                    # ANSWER\ngrades = c(98,77,64,79,76, 84, 92, 78)    # ANSWER\n\n# Think about it this way - we need to curve the following                 # ANSWER\n# grades in the following way:                                           # ANSWER\n#\n#    SORTED GRADES: 98 92 84 79 78 77 76 64\n#    CURVE:          0  0  1  3  5  7  9 11\n\n# We can accomplish this with the following code:                    # ANSWER\ngrades = c(98,77,64,79,76, 84, 92, 78)                # ANSWER\ngrades = sort(grades, decreasing=TRUE)                # ANSWER\ngrades                # ANSWER\n\n[1] 98 92 84 79 78 77 76 64\n\nzeros = rep(0, times=length(grades) * 0.25)                # ANSWER\nzeros                # ANSWER\n\n[1] 0 0\n\ncurves = seq(from=1, by=2, length.out=length(grades) - length(grades)*.25 )                # ANSWER\ncurves                # ANSWER\n\n[1]  1  3  5  7  9 11\n\ncurvedGrades = grades + c(zeros, curves)                # ANSWER\ncurvedGrades                # ANSWER\n\n[1] 98 92 85 82 83 84 85 75\n\n# Some people, might write the code all in one line.                     # ANSWER\n# I don't recommend that in this case - it's too confusing.                 # ANSWER\n# However, you should be able to READ code like this                 # ANSWER\n# as you WILL SEE code like this written by others.                # ANSWER\n# To help you understand the code you can highlight                # ANSWER\n# portions of the line and press ctrl-ENTER or cmd-ENTER                 # ANSWER\n# to run just those portions of the code.                 # ANSWER\n# Practice on the following to make sure you understand                # ANSWER\n# how to read code like this and understand it.                # ANSWER\ngrades = c(98,77,64,79,76, 84, 92, 78)\ngrades = sort(grades, decreasing=TRUE)\ngrades\n\n[1] 98 92 84 79 78 77 76 64\n\ncurvedGrades = grades + c(rep(0, times=length(grades) * 0.25)  , seq(from=1, by=2, length.out=length(grades) - length(grades)*.25 ))\ncurvedGrades\n\n[1] 98 92 85 82 83 84 85 75\n\n#################################################################.\n# QUESTION  ####\n# \n# This time make the curve amounts the square root of 100-grade for each \n# person's grade. All students should get this curve.\n#\n# EXAMPLE 1\n#   &gt; grades = c(100, 99, 96, 91, 86, 75, 19, 0)\n#   # YOUR CODE GOES HERE\n#   [1] 100 100  98  94  88  80  28  10\n#\n#\n# EXAMPLE 2\n#   &gt; grades = c(98,77,64,79,76, 84, 92, 78)\n#   # YOUR CODE GOES HERE\n#   [1] 99.41421 81.79583 70.00000 83.58258 80.89898 88.00000 94.82843 82.69042\n#################################################################.\n\n# ANSWER\ngrades = c(100, 99, 96, 91, 84, 75, 19, 0)    # ANSWER\ncurves = sqrt(100-grades)    # ANSWER\ncurvedGrades = grades + curves    # ANSWER\ncurvedGrades    # ANSWER\n\n[1] 100 100  98  94  88  80  28  10\n\n# ANSWER\n# (this answer is all in one line of code)    # ANSWER\ngrades = c(98,77,64,79,76, 84, 92, 78)    # ANSWER\ncurvedGrades = grades + sqrt(100-grades)    # ANSWER\ncurvedGrades    # ANSWER\n\n[1] 99.41421 81.79583 70.00000 83.58258 80.89898 88.00000 94.82843 82.69042",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#practice-with-nesting-functions-one-inside-the-other",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#practice-with-nesting-functions-one-inside-the-other",
    "title": "4  Using some built-in functions",
    "section": "4.47 Practice with NESTING functions one inside the other",
    "text": "4.47 Practice with NESTING functions one inside the other\n\n#################################################################.\n# QUESTION  ####\n#\n# create a vector that contains the even #rs from 2 through 30 followed by \n# the odd #rs from from 1 through 30. Write your command using the least amount\n# of typing possible.\n#\n# The result should be as shown below. \n#\n#      &gt; # YOUR COMMAND GOES HERE\n#\n#      [1] 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29\n#################################################################.\n\n\n\n\n#################################################################.\n# QUESTION  ####\n#\n# Use R's functions that we learned about to \n# create a vector of the evens from 2 through 10 repeated to a length of 27\n# DO NOT SIMPLY JUST TYPE THE NUMBERS IN A c(). One or more functions other than just c().\n#\n# The result should be as shown below. \n#\n#      &gt; # YOUR COMMAND GOES HERE\n#\n#      [1] 2 4 6 8 10 2 4 6 8 10 2 4 6 8 10 2 4 6 8 10 2 4 6 8 10 2 4\n#################################################################.\n\n\n\n\n\n#################################################################.\n# QUESTION  ####\n#\n# Generate a vector that contains the even #rs from 1 through 10 \n#                      followed by the odd #rs from 1 through 10.\n# All of these numbers should be repeated 3 times\n# \n# The output should look like this:\n#\n#   &gt; # YOUR COMMAND GOES HERE\n#\n#    [1]  2  4  6  8 10  1  3  5  7  9  2  4  6\n#   [14]  8 10  1  3  5  7  9  2  4  6  8 10  1\n#   [27]  3  5  7  9\n#\n# MAKE SURE YOU\n# - use the c function when necessary to combine the evens and odds into a single vector\n# - put the commas in the correct place\n# - put all parentheses in the correct places\n#################################################################.\n\n\n\n\n\n#################################################################.\n# QUESTION  ####\n#\n# Create vector that has the numbers 0.3, 0.6, 0.9, 1.2, 1.5 ... for a total of 300 values\n#################################################################.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#order-of-operations-in-r-1",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#order-of-operations-in-r-1",
    "title": "4  Using some built-in functions",
    "section": "5.1 Order of operations in R",
    "text": "5.1 Order of operations in R\n\n###########################################################################.\n# Order of operations in R    ####\n#\n# To see the full list of the order of operations for R (or \"operator precedence\")\n# type the following (notice the CAPITAL \"S\" in ?Syntax).\n#\n#   ?Syntax     #  Operators that appear higher in the list are done first.  ####\n#\n# or see the following webpage:\n#\n#   https://stat.ethz.ch/R-manual/R-devel/library/base/html/Syntax.html\n###########################################################################.\n\n# Let's look at the complete order of operations for R's operators.\n# as mentioned above operators that appear higher in the list are done \n# before operators that appear lower in the list. \n\n?Syntax\n\n# Notice that the colon operator is done  AFTER exponentiation but\n# BEFORE multiplication, division, addition and subtraction are done!\n#\n# Be careful of the order of operations!\n# The colon operator is done BEFORE the subtraction operator\n\n15-4:2   # result is 11 12 13  (might not be what you would have thought) \n\n[1] 11 12 13\n\n#original:         15-4:2\n# colon is first:  15-c(4,3,2)\n# minus is next:   c(15-4, 15-3, 15-2)\n#                  c(11, 12, 13)\n\n\n\n(15-4):2 # this is different\n\n [1] 11 10  9  8  7  6  5  4  3  2\n\n#original:    (15-4):2\n# minus first: 11:2\n# colon is next: c(11,10,9,8,7,6,54,4,3,2)\n\n?Syntax",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#beren---up-to-here---after-class-5",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#beren---up-to-here---after-class-5",
    "title": "4  Using some built-in functions",
    "section": "5.2 2023 - BEREN - UP TO HERE - AFTER CLASS 5",
    "text": "5.2 2023 - BEREN - UP TO HERE - AFTER CLASS 5",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000300-usingSomeBuiltinFunctions-v028.html#help-pages-for-rs-operators",
    "href": "000300-usingSomeBuiltinFunctions-v028.html#help-pages-for-rs-operators",
    "title": "4  Using some built-in functions",
    "section": "5.3 Help pages for R’s operators",
    "text": "5.3 Help pages for R’s operators\n\n#------------------------------------------------------------------.\n#\n#   ?`:`   # type this to see the help page for the colon operator (e..g 3:5)   ####\n# \n#------------------------------------------------------------------.\n\n# To get more info about the colon operator, \n# you can read the R help documentation for the : operator.\n#\n# To do so, you must enclose the colon in `backticks` (also known as `grave accents`).\n# The backtick (or grave accent) character is on most USA keyboards\n# in the upper left hand corner under the ESC key.\n# It is on the same key as the \"~\" (tilde) character. \n\n?`:`    # You must enclose the colon in `backticks` (also known as `grave accents`) ####\n\nhelp(`:`)   # this does the same thing\n\n\n\n# If you leave out the `backticks` (AKA `grave accents`) you will get an error.\n# Note the red \"x\" in the left margin in RStudio next to the following command.\n\n#?:    # ERROR\n\n    \n\n# You can also use backticks for help topics that contain other symbols or spaces\n\n?`+`      # Shows help topic for + (and other arithmetic operators)\n\n\n\n#############################################################################.\n# The following was added in 2022\n# NOTE - in recent versions of R, in addition to `backticks`\n#        'single quotes' (i.e. 'apostrophes')\n#        and \"double quotes\" (i.e. \"quotes\")\n#        also work.\n#############################################################################.\n\n# as of 2022, 'single quotes' \"double quotes\" and `backticks` all work\n\n?':'    # single quotes\n?\":\"    # double quotes\n?`:`    # backticks\n\n?'+'    # single quotes\n?\"+\"    # double quotes\n?`+`    # backticks",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Using some built-in functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html",
    "href": "000350-b_b-userDefinedFunctions-v060.html",
    "title": "5  User defined functions",
    "section": "",
    "text": "5.1 Type function definitions in the SCRIPT window\n# YOU SHOULD TYPE FUNCTION DEFINITIONS IN THE SCRIPT WINDOW ####\n# (NOT IN THE CONSOLE WINDOW)\n#----------------------------------------------------------------------------.\n# Since function definitions tend to be rather long and span multiple lines,\n# it's not very convenient to type them in the Console window.\n# Rather type them in RStudio's script window and then run the code\n# To run the code, put your cursor on the first \n# line of the function definition in RStudio's \"script window\"\n# (or highlight the complete function definition) and then\n# press ctrl-ENTER (windows) or cmd-ENTER (Mac). After you run the \n# code, you will see the name of the function\n# appear in RStudios \"Environment\" window. You can also see the name of the \n# function in the output of the ls() command.\n#\n# To get R to recognize that this new function exists, \n# you MUST run the function definition - i.e. put your cursor on the first \n# line of the function definition (or highlight the complete function definition)\n# in the script window and then press ctrl-ENTER (windows) or cmd-ENTER (Mac).\n#\n# It's very important to realize that it's not enough to just type the code\n# in the script window. Don't forget to run the code for the function definition \n# (many newbies forget this part).\n#\n# When you run the code for the function definition, all that appears to happen is \n# that you will see the code displayed in the console window. Nothing else\n# appears to have happened. For example:\n#\n#        &gt; doubleIt &lt;- function(nums) {    \n#        +   return(2 * nums)\n#        + }\n#\n# The \"+\" signs at the beginning of the line are NOT part of the code. \n# They simply mean that your function definition spans multiple lines of code. \n#---------------------------------------------------------------------------",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#run-the-definition-before-using-the-function",
    "href": "000350-b_b-userDefinedFunctions-v060.html#run-the-definition-before-using-the-function",
    "title": "5  User defined functions",
    "section": "5.2 Run the definition before using the function",
    "text": "5.2 Run the definition before using the function\n\n#----------------------------------------------------------------------------.\n# USING YOUR NEW FUNCTION\n#----------------------------------------------------------------------------.\n# Once you've run the code for the function definition (see above)\n# you can then use the new function with any values that you wish. For example:\n#\n#         &gt; doubleIt(7)\n#         [1] 14\n#\n#         &gt; doubleIt( c(10,20,30) )\n#         [1] 20 40 60\n#\n#         &gt; doubleIt( c( 1:3 , rep(5,6) ) )\n#         [1]  2  4  6 10 10 10 10 10 10\n#----------------------------------------------------------------------------.\n\n# define a new function  \n#\n# DON'T FORGET TO RUN THE CODE FOR THE FUNCTION DEFINITION  ####\n# i.e. put your cursor on the first line and \n#      press ctrl-ENTER (win) or cmd-ENTER (mac)\n\ndoubleIt &lt;- function(nums) {    \n  return(2 * nums)\n}\n\n# We can now use the doubleIt function with many different values similar\n# to the way you can use R's built-in functions.\n#\n# Before running the following lines of code you must make sure that you've\n# run the function definition above.\n\ndoubleIt(3)             # 6\n\n[1] 6\n\ndoubleIt(c(10,20,30))   # 20 40 60\n\n[1] 20 40 60\n\ndoubleIt( nums = c(100,500))  # you can specify the name of the argument in the function call\n\n[1]  200 1000\n\ndoubleIt(c(100,500)) # same thing\n\n[1]  200 1000\n\n# In general you can now work with the user-defined-functions\n# the same way you would work with built in functions.\n\naBigNumber = doubleIt(1000) + 210\naBigNumber\n\n[1] 2210\n\n# As with all functions, you must figure out the value of the arguments\n# before the function is actually called.\n\ndoubleIt( seq(1,3) )\n\n[1] 2 4 6\n\n# original:        doubleIt( seq(1,3) )\n# seq:             doubleIt( c(1,2,3) )\n# doubleIt:        2 4 6\n\n\ndoubleIt( 1 + seq(1,3) )\n\n[1] 4 6 8\n\n# original:        doubleIt( 1 + seq(1,3) )\n# seq:             doubleIt( 1 + c(1,2,3) )\n# addition:        doubleIt( c(2,3,4) )\n# doubleIt:        4 6 8\n\n\ndoubleIt( c( 1:3 , rep(5,6) ) )\n\n[1]  2  4  6 10 10 10 10 10 10\n\n# original:              doubleIt( c(    1:3    ,    rep(5,6)    ) )\n# expand 1:3:            doubleIt( c( c(1,2,3) , rep(5,6) )\n# rep function:          doubleIt( c( c(1,2,3) , c(5,5,5,5,5,5) ) )\n# outermost c function:  doubleIt( c(1,2,3,5,5,5,5,5,5) ) \n# doubleIt:              2  4  6 10 10 10 10 10 10",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#local-variables",
    "href": "000350-b_b-userDefinedFunctions-v060.html#local-variables",
    "title": "5  User defined functions",
    "section": "5.3 “Local” variables",
    "text": "5.3 “Local” variables\n\n##################################################################.\n#\n# The code inside a function definition may consist of several lines \n#\n# You may use \"local variables\" in a function definition.\n#\n##################################################################.\n\n# Below we defined the function, trippleIt, that tripples the values\n# in the argument, nums.\n#\n# We wrote trippleIt using a slightly different approach than we used\n# for doubleIt. Instead of simply multiplying by 3, we \n# used a variable named total to store the \n# value that will be returned. Every line of the function\n# adds another multiple of the values in nums to the total.\n# The last line of the function returns the total.\n#\n# This seems unnecessarily complex. It is. We could have very easily written\n# trippleIt the same way that we wrote doubleIt, i.e. by simply \n# multiplying by 3. That would work just fine.\n# We used this alternative approach simply to demonstrate some concepts:\n# \n# (a) a function definition can contain multiple lines of code\n#\n# (b) You may define \"local variables\" inside a function definition.\n#     A \"local variable\" is a variable that is created inside a \n#     function definition to help perform the calculations for \n#     the function. We'll discuss more about local variables later below.\n#\n\n# Define the function\ntrippleIt &lt;- function(nums) {    \n  return(3 * nums)\n}\n\n# call the function\ntrippleIt(c(5,6,7))\n\n[1] 15 18 21\n\n# A differnt version of trippleIt that returns the same values as the\n# original version above. The purpose of writing the following version of \n# trippleIt is simply to demonstrate that a function can have multiple lines\n# of code.\n# \n# This will also be helpful to demonstrate R's \"debugger\" (which we will\n# see soon)\n\n\ntrippleIt = function( nums ){\n  total = nums\n  total = total + nums\n  total = total + nums\n  return (total)\n}\n\ntrippleIt(3)            # 9\n\n[1] 9\n\ntrippleIt(c(10,20,30))  # 30  60  90\n\n[1] 30 60 90\n\n# to use the debugger for a function, you need to call the debugonce function\n# to tell the debugger to debug the specified function the next time it is called.\n\ntrippleIt(c(10,20,30))\n\n[1] 30 60 90\n\n# You can use the trippleIt and doubleIt functions together. \n\ntrippleIt(doubleIt(3))\n\n[1] 18\n\n2 ^ doubleIt(c(1, 1.5, 2))\n\n[1]  4  8 16\n\ntrippleIt( 2 ^ doubleIt(c(1, 1.5, 2)) )\n\n[1] 12 24 48\n\n#----------------------------------------------------------------.\n# \"LOCAL VARIABLES\" AND \"SCOPE OF VARIABLES\"   ####\n#----------------------------------------------------------------.\n# Note that variables that are created inside the definition of \n# a user-defined-function are only \"known\" inside of that function\n# definition. When the trippleIt function above finishes executing, the variable \n# total does NOT appear in the variables in the environment.\n# For example ls() will not show the total variable.\n#\n# A variable that can only be used inside of a particular function definition ====\n# is known as a \"local variable\" for that function. We say that the           ====\n# variable has \"local scope\".                                                 ====\n#\n# We will discuss much more about local variables and \n# the \"scope\" of a variable a little later (below).\n#----------------------------------------------------------------.\n\nls()   # show all variables - note that total isn't in the list.\n\n[1] \"aBigNumber\" \"doubleIt\"   \"trippleIt\" \n\n# We will return to discuss these issues more in depth a little later.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#last-value-of-the-function-is-returned",
    "href": "000350-b_b-userDefinedFunctions-v060.html#last-value-of-the-function-is-returned",
    "title": "5  User defined functions",
    "section": "5.4 Last value of the function is returned",
    "text": "5.4 Last value of the function is returned\n\n#######################################################################.\n# If you don't write the word \"return\" then\n# the final value of the function is returned as the value of the function. ####\n#######################################################################.\n\n# We could have written the definition of trippleIt without the return.\n# By default, if there is no return statement then\n# the last value of the function is what is returned.\n# The following is an equivalent definition of the trippleIt function.\n# Even though we left out the \"return\" the last value is still returned\n# as the value of the function.\n\ntrippleIt = function( nums ){\n  total = nums\n  total = total + nums\n  total = total + nums\n  total                    # we took out the word return, it still works\n}\n\n# This still works\n\ntrippleIt(3)            # 9\n\n[1] 9\n\ntrippleIt(c(10,20,30))  # 20  40  60\n\n[1] 30 60 90",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#dont-return-an-assignment-statement",
    "href": "000350-b_b-userDefinedFunctions-v060.html#dont-return-an-assignment-statement",
    "title": "5  User defined functions",
    "section": "5.5 Don’t return an assignment statement",
    "text": "5.5 Don’t return an assignment statement\n\n# BE CAREFUL - don't return the value of an assignment statement ####\n#\n# If we take out the last line of the trippleIt function entirely\n# (e.g. by commenting it out) then the last command of the function\n# becomes an assignment statement. \n#\n# However, remember that when you run an assignment statement no value \n# is actually displayed to the screen. For example, if you run \n#\n#     &gt; x = 5\n#     &gt; \n#\n# Nothing is displayed as the result of the command. In a similar way, if you\n# final command of the function is an assignment statement, nothing\n# will be displayed when you run the function.\n\n\ntrippleIt_returningAnAssignment = function( nums ){\n  total = nums\n  total = total + nums\n  total = total + nums\n  # total     # if we remove this entire line, the function does not work the same way\n}\n\n# Now since the last command to be executed in trippleIt is an assignment \n# statement, the following lines do NOT display any values.\n\ntrippleIt_returningAnAssignment (3)            # nothing is displayed\ntrippleIt_returningAnAssignment (c(10,20,30))  # nothing is displayed\n\n# As a general rule, you should return the value of an assignment statement\n# or have an assignment statement as the last value of a function\n# whose job it is to return a value.\n\n###########################################################################.\n# 2023 - WILF - UP TO HERE - AFTER CLASS 5 ####\n###########################################################################.\n\n###########################################################################.\n# 2023 - BEREN - UP TO HERE - AFTER CLASS 6 ####\n###########################################################################.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#invisible-return-values",
    "href": "000350-b_b-userDefinedFunctions-v060.html#invisible-return-values",
    "title": "5  User defined functions",
    "section": "5.6 “invisible” return values",
    "text": "5.6 “invisible” return values\n\n#--------------------------------------------------------------------------.\n# Note about \"invisible\" return values ####\n#--------------------------------------------------------------------------.\n\n# What is very strange is that even though in it's current form, the \n# trippleIt function does NOT display anything when you call it, if you \n# assign the result of the function to a variable, the variable WILL \n# contain the value!!! This may be very surprising.\n\ntrippleIt_returningAnAssignment (3)      # nothing is displayed\n\nx = trippleIt_returningAnAssignment (3)\nx   # 9\n\n[1] 9\n\n# The \"value\" of an assignment statement is an \"invisible\" value. ####\n# (\"invisible\" is an little known R concept that many people don't understand).\n# Invisible values can be captured to a variable, but by default they are not displayed. ####\n#\n# This is a somewhat advanced topic so we will not discuss it more now.\n# However, you should avoid ending a function with an assignment\n# statement if the purpose of the function is to return a value \n# that needs to be displayed.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#dont-pass-too-many-arguments",
    "href": "000350-b_b-userDefinedFunctions-v060.html#dont-pass-too-many-arguments",
    "title": "5  User defined functions",
    "section": "5.7 don’t pass too many arguments",
    "text": "5.7 don’t pass too many arguments\n\n#------------------------------------------------------------------.\n# Be careful - don't pass too many arguments  ####\n#\n# The following will generate an error since you are trying to pass\n# three different  values to trippleIt but trippleIt is only\n# defined to take a single argument, nums.\n#------------------------------------------------------------------.\n\ntrippleIt( 100, 200, 300 )  # ERROR - trippleIt only allows for one argument, nums\n\nError in trippleIt(100, 200, 300): unused arguments (200, 300)\n\n# This fixes the problem since c(100,200,300) is a single vector.\n# The vector c(100,200,300) is passed to nums.\n\ntrippleIt( c( 100, 200, 300) )  # 200 400 600\n\n[1] 300 600 900",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#function-name-without-parentheses-shows-definition-code",
    "href": "000350-b_b-userDefinedFunctions-v060.html#function-name-without-parentheses-shows-definition-code",
    "title": "5  User defined functions",
    "section": "5.8 Function name without parentheses() shows definition code",
    "text": "5.8 Function name without parentheses() shows definition code\n\n##############################################################################.\n# A function's name without any parentheses, shows the definition of the function. ####\n##############################################################################.\n\ndoubleIt   # show the definition of doubleIt\n\nfunction(nums) {    \n  return(2 * nums)\n}\n&lt;bytecode: 0x0000020816522e68&gt;",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#practice",
    "href": "000350-b_b-userDefinedFunctions-v060.html#practice",
    "title": "5  User defined functions",
    "section": "5.9 — Practice —",
    "text": "5.9 — Practice —\n\n##################################################.\n# QUESTION - part (a)   ####\n#\n# A professor gives 3 tests.\n# The first test is worth 25% of the grade,\n# the 2nd test is worth 30% of the grade and the third test is worth 45% of the grade.\n# A student in the class got the following test grades are 80, 90 and 100.\n# Use the variables, weights and grades, shown below to calculate the student's \n# overall \"weighted average\".\n##################################################.\n\nweights = c(0.25, 0.3, 0.45)\ntests = c(80,90,100)\n\n# ANSWER\n\nsum(weights * tests)   # ANSWER\n\n[1] 92\n\n##################################################.\n# QUESTION - part (b)   ####\n#\n# Write a function named, weightedAvg, that takes\n# two arguments, weights and tests. The function\n# should work as shown below.\n#\n#     &gt; WRITE THE FUNCTION DEFINITION HERE\n#\n#     # Now you can use the function\n#     &gt; weightedAvg( c(0.25, 0.3, 0.45) , c(80,90,100) )   # result should be 92\n#     [1] 92\n#\n#     &gt; weightedAvg( c(0.25, 0.3, 0.45) , c(70,85,50) )   # result should be 65.5\n#     [1] 65.5\n#\n# i. Write the function with the return statement\n#\n# ii. Write the function without the return statement\n#     (should produce the same results)\n##################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\n# step 1 - define the function\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\n\nweightedAvg = function (grades, weights){          # ANSWER\n  return( sum(grades * weights) )     # ANSWER\n}\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\n# step 2 - you must RUN the function definition.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\n\n# As with all code that you write in the script window, to run it\n# simply, put your cursor on the first line of the function definition and\n# press ctrl-ENTER (win) or cmd-ENTER (mac).\n#\n# After you run the function definition you should see the \n# name of the function appear in the Environment tab (by default\n# it's found in the upper right hand corner of the RStudio window)\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\n# step 3 - use the new function to perform some calculations\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\n\n# Call the function by just supplying the values for \n# the tests and the weights. You do not have to type the argument names\n# as long as you supply the values in the proper order.\nweightedAvg( c(80,90,100), c(0.25, 0.3, 0.45))     # ANSWER\n\n[1] 92\n\n# Just as with the built in functions you may also supply the \n# argument names when you call the function. This makes the code\n# more clear but it is NOT necessary as long as you supply\n# the values in the correct order. \nweightedAvg( grades=c(80,90,100), weights=c(0.25, 0.3, 0.45))     # ANSWER\n\n[1] 92\n\n# You can also pass the values of the arguments as variables.\n# Note that the variable names do NOT have to be the same as the\n# argument names. The variable names simply represent the values that \n# were assigned to them. For example:\nt = c(80,90,100)         # these are the test grades      \nw = c(0.25, 0.3, 0.45)   # these are the weights\n\nweightedAvg(t, w)                    # this works\n\n[1] 92\n\nweightedAvg(grades=t, weights=w)     # this also works\n\n[1] 92\n\n# Just as with built-in functions, if you type the names of the arguments, \n# you can write the arguments in a different order.\n\nweightedAvg(weights=w, grades=t)     # this also works\n\n[1] 92\n\n#--------------------------------------------------------------.\n# ANSWER - Another way - without the return function     \n#---------------------------------------------------------------.\n\n# The answer above used the return() function to \"return\" the final value\n# from the function. We'll see later that sometimes it is necessary to \n# use the return() function. However, with simple functions (as these are)\n# by default the R function will return whatever value is the last value\n# to be executed inside of the function.\n\nweightedAvg = function (grades, weights){     # ANSWER\n  \n  # In this version there is no \"return\" function call\n  # Since the following is the last line this is automatically returned.\n  \n  sum(grades * weights)      # same as      return(sum(grades * weights))\n}   \n\n\n# This still works\nweightedAvg( c(80,90,100), c(0.25, 0.3, 0.45))\n\n[1] 92",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#default-argument-values",
    "href": "000350-b_b-userDefinedFunctions-v060.html#default-argument-values",
    "title": "5  User defined functions",
    "section": "5.10 Default argument values",
    "text": "5.10 Default argument values\n\n###########################################################################.\n#\n# Default argument values.    ####\n#\n###########################################################################.\n\n# If the function definition specifies a value for an argument then that\n# value will be used as the default argument if the call to the function\n# doesn't specify that argument. \n\n# For example, the following function returns the volume of a cylinder\n# (e.g. a soda can) that has a specific height and a specific radius.\n# \n# The \"defualt value\" for the height is 1 and the default value of the\n# radius is specified as 0.5 (i.e. a diameter of 1).\n\n\nvolumeOfCylinder = function( radius=0.5, height=1){\n  return( pi * radius^2 * height )\n}\n\nvolume2(1,5)      # volume of a cylinder with radius = 1 and height = 5\n\nError in volume2(1, 5): could not find function \"volume2\"\n\nvolumeOfCylinder(1,5)      # volume of a cylinder with radius = 1 and height = 5\n\n[1] 15.70796\n\nvolumeOfCylinder(2)        # volume of a cylinder with radius = 2 and height = 1\n\n[1] 12.56637\n\nvolumeOfCylinder()         # volume of a cylinder with radius = 0.5 and height = 1\n\n[1] 0.7853982\n\nvolumeOfCylinder(0.5, 1)   # same thing\n\n[1] 0.7853982\n\nvolumeOfCylinder(radius=0.5, height=1)   # same thing\n\n[1] 0.7853982\n\nvolumeOfCylinder( height = 6)   # radius is 0.5  height is 6\n\n[1] 4.712389\n\n# Note that you can refer to the other arguemnts when defining the \n# default values. This is shown in the following QUESTION/ANSWER.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#practice-1",
    "href": "000350-b_b-userDefinedFunctions-v060.html#practice-1",
    "title": "5  User defined functions",
    "section": "5.11 — Practice —",
    "text": "5.11 — Practice —\n\n##################################################.\n# QUESTION - part (c)   ####\n#\n# Create the weightedAvg function described in the previous question\n# so that if a value for weights is not supplied in the function call\n# then equal weight should be given to each grade.\n#\n# Call the function weightedAvg_newVersion so that it doesn't \n# replace the original weightedAvg function\n##################################################.\n\n# ANSWER \n#\n# Notice the default value of weights argument that appears on the first line.\n# It is set so that the weight is evenly distributed among the grades.\n\nweightedAvg_newVersion = function (grades, weights=1/length(grades)){     # ANSWER\n  return( sum(grades * weights) )     # ANSWER\n}     # ANSWER\n\n\n# Using the new function - with the default weights\nweightedAvg_newVersion(c(80,90,100))     # ANSWER\n\n[1] 90\n\n# Using the new function by specifying our own weights\nweightedAvg_newVersion(c(80,90,100), c(0.25, 0.25, 0.5))     # ANSWER\n\n[1] 92.5\n\nweightedAvg_newVersion(c(80,90,100), 1/3)     # ANSWER\n\n[1] 90\n\n# The original function required that you specify all the arguments\n# The following call to the original function will generate the following errror:\n#\n#      Error in weightedAvg(c(80, 90, 100)) : \n#        argument \"weights\" is missing, with no default\n\nweightedAvg(c(80,90,100))   # ERROR - missing argument\n\nError in weightedAvg(c(80, 90, 100)): argument \"weights\" is missing, with no default",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#wilf---up-to-here---after-class-6-also-covered-debugger",
    "href": "000350-b_b-userDefinedFunctions-v060.html#wilf---up-to-here---after-class-6-also-covered-debugger",
    "title": "5  User defined functions",
    "section": "5.12 2023 - WILF - UP TO HERE - AFTER CLASS 6 (also covered debugger)",
    "text": "5.12 2023 - WILF - UP TO HERE - AFTER CLASS 6 (also covered debugger)",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#beren---up-to-here---after-class-7-also-covered-debugger",
    "href": "000350-b_b-userDefinedFunctions-v060.html#beren---up-to-here---after-class-7-also-covered-debugger",
    "title": "5  User defined functions",
    "section": "5.13 2023 - BEREN - UP TO HERE - AFTER CLASS 7 (also covered debugger)",
    "text": "5.13 2023 - BEREN - UP TO HERE - AFTER CLASS 7 (also covered debugger)",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#calculations-in-middle-of-function-definition-are-not-displayed",
    "href": "000350-b_b-userDefinedFunctions-v060.html#calculations-in-middle-of-function-definition-are-not-displayed",
    "title": "5  User defined functions",
    "section": "5.14 Calculations in middle of function definition are NOT displayed",
    "text": "5.14 Calculations in middle of function definition are NOT displayed\n\n##########################################################################.\n# Code in a function definition is DIFFERENT than code that is run \n# directly in the console window:\n#\n# If you type a simple calculation IN THE CONSOLE the result is DISPLAYED.\n# For example: \n#      &gt; 10 + rep(1,3)\n#      [1] 11 11 11\n#\n# If you type a simple calculation IN A FUNCTION DEFINITION the result is IGNORED. ####\n# See the examples below.\n##########################################################################.\n\n# A calculation typed in the console that would display a value has \n# absolutely no effect on the code of a function.\n\nf = function( stuff ){\n  3*10        # this line is ignored (it is not displayed)\n  5+7         # this line is ignored (it is not displayed)\n  stuff + 5   # this line is ignored (it is not displayed)\n  2           # the function always returns 2\n}\n\nf(10)               # 2\n\n[1] 2\n\nf(c(100,200,300))   # 2\n\n[1] 2\n\nf(6547654.4356543)  # 2\n\n[1] 2\n\n# You can save the value of the calculation in a variable and then\n# continue to use the value by referring to the variable.\n# e.g. see the following code (including the comments).\n\ncalculateBill = function( charge, tip ){\n  tax = 0.0875 * charge        # you can save this calculation in a variable\n  return (charge + tax + tip)  # now you can use the tax variable in this line\n}\n\ncalculateBill(100, 10)\n\n[1] 118.75",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-b_b-userDefinedFunctions-v060.html#practice-2",
    "href": "000350-b_b-userDefinedFunctions-v060.html#practice-2",
    "title": "5  User defined functions",
    "section": "5.15 — Practice —",
    "text": "5.15 — Practice —\n\n##################################################.\n# QUESTION\n#\n# Write a function named, gpa, to calculate a GPA.\n# Feel free to use \"local\" variables to make your function\n# easier to read.\n# \n# ARGUMENTS:\n#   credits - a vector that contains the number of credits for each course\n#   grades - a vector that contains the grades for each course (0 for F, 1 for D, 2 for C, 3 for B, 4 for A)\n#\n# e.g.  \n# &gt; getGpa (credits = c(4,3,3),  grades=c(2, 3, 4))    # i.e. (4*2 + 3*3 + 3*4) / (4+3+3)\n# [1] 2.9       \n#\n#\n# *****************************************************************\n# ** READ THE FOLLOWING IF YOU DON'T KNOW HOW TO CALCULATE A GPA **\n# *****************************************************************\n#\n# A GPA is a weighted average.\n#\n# Letter grades are treated as numbers, i.e. A is 4, B is 3, C is 2, D is 1, F is 0\n#\n# To calculate a GPA you determine what percent of your overall \n# college average is attributed to a specific class, then you multiply\n# the grade for that class by that number, i.e. \n#     (credits_for_a_class / total_credits_taken) * grade_for_the_class\n# Finally, you add up the results for all of the classes.\n#\n# EXAMPLE: physics 4 credits, grade is B\n#          data analytics 3 credits, grade is A\n#          gym 0.5 credits, grade is B\n#\n# total creidts is  4 + 3 + 0.5\n# percent of total that is attributed to physics is 4 / 7.5\n# Portion of GPA attributed to physics is (4/7.5) * 3   # remember B is 3\n#\n# Do this for all classes to get that the GPA is 3.4 calculated as follows\n#\n#    (4/7.5)*3 + (3/7.5)*4 + (0.5/7.5)*3   which is   3.4\n#\n##################################################.\n\n# ANSWER \n\n# (You need to do this)\n\n\n\n# AFTER YOU RUN YOUR CODE, CHECK YOUR ANSWER:\ngpa( credits=c(4,3,0.5)   ,   grades=c(3,4,3))    # 3.4 (if you wrote the code correctly)\n\nError in gpa(credits = c(4, 3, 0.5), grades = c(3, 4, 3)): could not find function \"gpa\"\n\ngpa( c(4,3,0.5)   ,   c(3,4,3))    # 3.4 (if you wrote the code correctly)\n\nError in gpa(c(4, 3, 0.5), c(3, 4, 3)): could not find function \"gpa\"\n\n#######################################################################.\n# QUESTION - use the gpa function that you defined above to \n# calculate Joe's GPA. Joe took 4 classes. The credits and grades were as follows\n#   4 credit class - got a C\n#   3 credit class - got an A\n#   3 credit class - got a B\n#   2 credit Class - got a A\n#######################################################################.\n\n# ANSWER\ngpa( credits = c(4,3,3,2), grades = c(2, 4, 3, 4))\n\nError in gpa(credits = c(4, 3, 3, 2), grades = c(2, 4, 3, 4)): could not find function \"gpa\"\n\n##################################################.\n# QUESTION\n#\n# Rewrite the definition of the gpa function, call it gpa2.\n# This time, use the weightedAvg function inside\n# your definition of the gpa function.\n###################################################.\n\n# ANSWER\n\ngpa2 &lt;- function (credits, grades) {                               # **ANSWER**\n  # **ANSWER**\n  totalCredits = sum(credits)                                      # **ANSWER**\n  weights = credits / totalCredits                                 # **ANSWER**\n  # **ANSWER**\n  # Instead of writing                                             # **ANSWER**\n  #                                                                # **ANSWER**\n  #   sum(weights * grades)                                        # **ANSWER**\n  #                                                                # **ANSWER**\n  # as we did in the gpa function above, we can make use of the    # **ANSWER**\n  # weightedAvg function that we defined earlier.                  # **ANSWER**\n  #                                                                # **ANSWER**\n  # Remember that we defined the weightedAvg function above as:    # **ANSWER**\n  #                                                                # **ANSWER**\n  #   weightedAvg = function(weights, tests) {                     # **ANSWER**\n  #      sum ( weights * tests )                                   # **ANSWER**\n  #   }                                                            # **ANSWER**\n  #                                                                # **ANSWER**\n  # NOTE that the weightedAvg function definition uses the         # **ANSWER**\n  # argument names weights and tests                               # **ANSWER**\n  # In this function we want the weightedAvg of weights and grades. # **ANSWER**\n  # The following function call uses the weightedAvg function.     # **ANSWER**\n  # The function all passes the weights variable that is local     # **ANSWER**\n  # to the gpa2 function to the weights variable that              # **ANSWER**\n  # is local to the weightedAvg function. However, the grades      # **ANSWER**\n  #  variable in this function is being passed to the              # **ANSWER**\n  # \"tests\" variable in the weightedAvg function.                  # **ANSWER**\n  # **ANSWER**\n  weightedAvg( weights , grades )                                  # **ANSWER**\n}                                                                  # **ANSWER**\n\n\n# calculate Joe's GPA. Joe took 4 classes. The credits and grades were as follows\n#   4 credit class - got a C\n#   3 credit class - got an A\n#   3 credit class - got a B\n#   2 credit Class - got a A\ngpa2( credits = c(4,3,3,2), grades = c(2, 4, 3, 4))\n\n[1] 3.083333\n\n# CHECK YOUR ANSWER\n# If you wrote the code correctly you should get the following results.\n\n# Show that the gpa and the gpa2 functions both return the same results\ngpa( credits=c(4,3,0.5)   ,   grades=c(3,4,3))    # 3.4\n\nError in gpa(credits = c(4, 3, 0.5), grades = c(3, 4, 3)): could not find function \"gpa\"\n\ngpa2( credits=c(4,3,0.5)   ,   grades=c(3,4,3))   # 3.4\n\n[1] 3.4\n\n# Show that the gpa and the gpa2 functions both return the same results\ngpa ( c(4,3,3,2) ,  c(2,4,3,4) )     # 3.08333\n\nError in gpa(c(4, 3, 3, 2), c(2, 4, 3, 4)): could not find function \"gpa\"\n\ngpa2 ( c(4,3,3,2) ,  c(2,4,3,4) )    # 3.08333\n\n[1] 3.083333",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>User defined functions</span>"
    ]
  },
  {
    "objectID": "000350-c_h-introToTheDebugger-v060.html",
    "href": "000350-c_h-introToTheDebugger-v060.html",
    "title": "6  deubugger (also known as the “browser”)",
    "section": "",
    "text": "##################################################.\n##################################################.\n#\n# deubugger   (also known as the \"browser\")\n#\n##################################################.\n##################################################.\n\n# R's \"debugger\" feature can help you to understand what exactly is happening \n# as a function is running. Exactly what this means and how this works is \n# described below. Many programming languages contain a \"debugger\" feature.\n# R's documentation sometimes refers to R's debugger as a \"browser\".\n\n# The following function will help us to demonstrate these concepts\n\nlongestSeq = function(nums) {\n  lowest = min(nums)\n  highest = max(nums)\n  lowest:highest\n}\n\n# Example of using the function\nlongestSeq( c(5, 7, 3, 4) )   # 3 4 5 6 7\n\n###\n### IMPORTANT!!!!\n###\n### READ EACH COMMENT BELOW BEFORE YOU RUN THE CODE!!!\n###\n\n# To \"debug\" a function, you can run the command \"debugonce( SOME_FUNCTION )\"\n# This command doesn't initially appear to do anything. However, it tells R\n# that the next time the function SOME_FUNCTION is run, R should start the \n# \"debugger\". \n\ndebugonce(longestSeq)\n\n# When we eventually call longestSeq, we will NOT immediately see the results\n# of the function. Rather, because we had previously called debugonce(longestSeq) the \n# \"debugger\" (or \"browser\") will start. You will see the following:\n#\n#    1. In RStudio, a new tab will open in the \"source\" window pane.\n#       The new tab will contain just the code for the function, longestSeq.\n#       The code for the function will be highlighed in YELLOW.\n#\n#    2. The contents of the \"Environment\" window pane will change. The variables that\n#       were previously displayed in the \"Environment\" window will no longer\n#       be visible. Instead, only the arguments to the function will initially be visible.\n#\n#    3. The \"prompt\" in the console window will change from \"&gt;\" to \"Browse[2]&gt;\".\n#       (Don't worry about the number 2 for now).\n#\n#    4. In RStudio, several buttons will be added to the top of the Console window pane.\n#       The first button says \"Next\" and the last button says \"Stop\". There are a \n#       few other buttons but for now we will only focus on \"Next\" and \"Stop\".\n#\n#    5. In RStudio a new window-pane entitled \"Traceback\" will open.\n#       (If you don't see the \"Traceback\" window pane, you can choose the following\n#       menu choices:  \"View | Panes | Show All Panes\" )\n#\n# When you are using the debugger, the code that is highlighted in YELLOW line does\n# not actually do anything until you type the \"n\" command (or equivalently until you\n# press the \"next\" button that appears at the top of the \"console\" window).\n# When you type the \"n\" command (\"n\" stands for \"next\"), the debugger will cause\n# only one line of code from the function to run. To execute the next line of code\n# you can type the \"n\" command again (or press the \"Next\" button again). You can\n# keep doing this to move through the function's code.\n#\n# As you proceed through the code one line at a time (by using the \"n\" command),\n# you will see the variables in the \"Environment\" window\n# change to show the current values of the arguments and the local variables in the \n# function. You will not see the values of the \"global\" variables in the \n# Environment window.\n#\n# While you are running the function one line at a time (by pressing \"n\" or the \"Next\" button)\n# you can type any code you like in the Console window pane. You can type code in\n# the Console that refers to local variables and arguments in the function. \n# This technique is very useful to figure out what is going on inside a function as\n# the function is running. \n# \n# If you keep typing the \"n\" command (or pressing the \"Next\" button) you will eventually\n# come to the end of the function. At that point, the function will \"return\" and\n# the debugger will stop.\n#\n# If at any point while using the debugger, you want to exit the debugger you can\n# type the \"Q\" command to quit the debugger (note that the command is CAPITAL \"Q\",\n# a lowercase \"q\" will not work). You can also press the \"Stop\" button to accomplish\n# the same thing.\n#\n# We will discuss other features and commands of the debugger later in the course.\n\nlongestSeq( c(6, 2, 5, 8) ) # this starts the debugger\n\n\n\n# If you run longestSeq again, the debugger will NOT start.\n\nlongestSeq( c(100, 98, 103) ) # this will NOT start the debugger\n\n# If you want to start the debugger again, you need to run the \n# debugonce command again.\n\ndebugonce(longestSeq)\n\nlongestSeq( c( 8, 5, 7) )   # this DOES run the debugger.\n\n\n# Another option - the \"debug\" and \"undebug\" commands:\n# \n# Note that in addition to the \"debugonce\" command, there is a \"debug\" command\n# If you run the command \"debug(longestSeq)\" then EVERY TIME you call the \n# longestSeq function the debugger will start. This can become confusing.\n# In order to stop the debugger from starting every time, you can run the \n# command \"undebug(longestSeq)\". However, until you get used to using these\n# commands I highly recommend that you only use the debugonce command and do \n# not use the debug command.\n\n\n\n\n###############################################################################.\n# NOTE - another option is the browser() function.\n###############################################################################.\n# The browswer() function presents another useful technique to help you\n# activate the debugger.\n#\n# We will not cover it now (maybe later). If you're curious, you can search online\n# for a tutorial on using the browser function in R. Section 22.4 of this page\n# addresses it but you might find better explanations online ...\n#\n#     https://adv-r.hadley.nz/debugging.html\n#\n###############################################################################.\n\n\n###############################################################################.\n# Practice using the debugger\n###############################################################################.\n# QUESTION - part a  ####\n# \n#   On a test, a student was asked to write a function named, swapFirstAndLast, \n#   that swaps the first value in a vector with the last value in the vector.\n#   For example:\n#     \n#     &gt; swapFirstAndLast(c(10,20,30,40,50))\n#     [1]  50  20  30  40  10\n#\n#   The student tried to write the function but it does NOT work correctly.\n#   Use the debugger to find and fix the problem with the student's code.\n#   To answer this question correctly, you\n#   MUST EXPLAIN WHY the function did not work as written.\n#\n#     swapFirstAndLast = function(vec) {\n#        vec[1] = vec[length(vec)]\n#        vec[length(vec)] = vec[1]\n#        return(vec)\n#     }\n#   \n###############################################################################.\n\n# Fix this function so it works correctly\n# Use the debugger to help you find the problem.\n# \n# You must ALSO EXPLAIN WHY the function as written didn't work correctly.\n\nswapFirstAndLast = function(vec) {\n  vec[1] = vec[length(vec)]\n  vec[length(vec)] = vec[1]\n  return(vec)\n}\n\n# The following SHOULD return :              50 20 30 40 10\n# However the function as coded now returns: 50 20 30 40 50\n# Use the debugger to help find the bug.\n# Then rewrite the code to fix the bug.\nswapFirstAndLast(c(10,20,30,40,50)) \n\n###############################################################################.\n# Practice using the debugger \n###############################################################################.\n# QUESTION  - part b ####\n# \n# When the student couldn't get the function to work, he took\n# a second, different approach, to writing the function.\n# However, this ALSO didn't work.\n#\n# Use the debugger to find the problem with this version of the function.\n# To answer this question correctly, you\n# MUST EXPLAIN WHY the function did not work as written.\n#############################################################################.\n\n# Fix this function so it works correctly\n# Use the debugger to help you find the problem.\n# \n# You must ALSO EXPLAIN WHY the function as written didn't work correctly.\n\nswapFirstAndLast = function(vec) {\n  first = vec[1]\n  middle = vec[2:length(vec)-1]\n  last = vec[ length(vec) ]\n  answer = c(last,middle,first)\n  answer\n}\n\n#-------------------------------------------------------------------------.\n# The following are \"test cases\" that could help you debug your function.\n# Use the debugger to try to figure out why the function is returning \n# the wrong answer.\n# Then, try to fix the code so that it returns the correct answer.\n# Make as few changes to the current code as possible.\n#-------------------------------------------------------------------------.\n\n# The following SHOULD return :              50 20 30 40 10\n# However the function as coded now returns: 50 10 20 30 40 10\n# Use the debugger to help find the bug.\nswapFirstAndLast(c(10,20,30,40,50)) \n\n# The following SHOULD return :              80 20 30 40 50 60 70 10\n# However the function as coded now returns: 80 10 20 30 40 50 60 70 10\n# Use the debugger to help find the bug.\nswapFirstAndLast(c(10,20,30,40,50,60,70,80)) \n\n#----------------------------------------------------------------.\n# Explain WHY the function as written didn't work correctly.\n# What was your fix?\n#----------------------------------------------------------------.\n\n# YOUR ANSWER GOES HERE\n\n\n\n\n#-------------------------------------------------------------------------.\n# The following \"test cases\" also don't return what they should.\n#\n# By using the debugger, it's not so hard to figure out why they are\n# returning the wrong values. However, fixing the function so that \n# it works for all of these test cases is a little more difficult.\n# \n# When you try to fix the function, you can try to use the following \n# to help you (a) the length function (b) the ifelse() function\n# (c) you can write a new function to help you get this one to work\n# The new function can be called from the swapFirstAndLast function.\n#-------------------------------------------------------------------------.\n\n# The following SHOULD return:                10\n# However, the function as coded now returns: 10 10 10 \nswapFirstAndLast(10)\n\n# The following SHOULD return:                20 10\n# However, the function as coded now returns: 20 10 10 \nswapFirstAndLast(c(10,20))\n\n\n#----------------------------------------------------------------.\n# Explain WHY the function as written didn't work correctly.\n# What was your fix?\n#----------------------------------------------------------------.\n\n# YOUR ANSWER GOES HERE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>deubugger   (also known as the \"browser\")</span>"
    ]
  },
  {
    "objectID": "000350-d_d-modesOfData_numeric_logical_character-v060.html",
    "href": "000350-d_d-modesOfData_numeric_logical_character-v060.html",
    "title": "7  modes of data: “numeric”,“logical”,“character”,etc.",
    "section": "",
    "text": "7.1 mode ( SOME_VECTOR )\n############################################################################.\n# mode ( SOME_VECTOR )\n#\n# NOTE: \n# typeof ( SOME_VECTOR )  is very similar to mode( SOME_VECTOR ) ####\n# In our class, we will tend to use the mode function instead of typeof.\n# See this for more info : https://stackoverflow.com/questions/35445112/what-is-the-difference-between-mode-and-class-in-r#:~:text=mode%20are%20basically%20the%20same,(mode%20%22function%22).\n#\n############################################################################.\n\n#---------------------------------------------------------------------------.\n# The \"mode\" function returns the type of data in a vector (e.g. \"numeric\", \"logical\", etc)\n#---------------------------------------------------------------------------.\n\nmode( c(100,200,300) )   # \"numeric\"\n\n[1] \"numeric\"\n\nmode ( c(TRUE, FALSE, TRUE, TRUE) ) # \"logical\"\n\n[1] \"logical\"\n\nmode ( c(\"apple\",\"orange\",\"pear\") ) # \"character\"\n\n[1] \"character\"",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>modes of data: \"numeric\",\"logical\",\"character\",etc.</span>"
    ]
  },
  {
    "objectID": "000350-d_d-modesOfData_numeric_logical_character-v060.html#the-modes-numeric-logical-character-list-complex-raw",
    "href": "000350-d_d-modesOfData_numeric_logical_character-v060.html#the-modes-numeric-logical-character-list-complex-raw",
    "title": "7  modes of data: “numeric”,“logical”,“character”,etc.",
    "section": "7.2 The modes: numeric, logical, character, list, complex, raw",
    "text": "7.2 The modes: numeric, logical, character, list, complex, raw\n\n#--------------------------------------------------------------------------.\n# R HAS SIX MODES OF DATA : numeric, logical, character, list, complex, raw ####\n#\n# So far we learned about two modes of data, i.e. \"numeric\" and \"logical\".\n# R also has several other \"modes\". The ones that we will cover\n# in this course are:\n# \n#    \"numeric\"     (for numbers)\n#    \"logical\"     (for TRUE/FALSE values)\n#    \"character\"   (we will cover this soon)\n#    \"list\"        (we will cover this soon)\n#\n# R also has the following modes of data that we will not cover this semester:\n#\n#    \"complex\"     (for \"complex\" numbers - we will not cover this)\n#    \"raw\"         (for \"binary\" data - we will not cover this)\n#--------------------------------------------------------------------------.\n\n#--------------------------------------------------------------------------.\n# ONE MODE PER VECTOR\n#\n# A single vector can only contain one \"mode\" of data.\n# If you attempt to put data of different modes in the same vector, \n# R automatically converts all of the data in a vector to the same mode. ####\n#\n# For example, if you mix logical and numeric data in a single vector,\n# R converts all of the data into numeric data.\n# The TRUE's are converted to 1's and the FALSE's are converted to 0's.\n#--------------------------------------------------------------------------.\n\n# You CANNOT mix logical values and numbers in a single vector. \n# If you try to mix numbers with TRUE/FALSE's the TRUEs become 1's and the FALSEs become 0's. ####\n\nmixedVector = c(100, TRUE, FALSE, -20)\n\nmixedVector   # 100 1 0 -20        TRUE changes to 1 and FALSE to 0\n\n[1] 100   1   0 -20",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>modes of data: \"numeric\",\"logical\",\"character\",etc.</span>"
    ]
  },
  {
    "objectID": "000350-d_d-modesOfData_numeric_logical_character-v060.html#wilf---up-to-here---after-class-7",
    "href": "000350-d_d-modesOfData_numeric_logical_character-v060.html#wilf---up-to-here---after-class-7",
    "title": "7  modes of data: “numeric”,“logical”,“character”,etc.",
    "section": "7.3 2023 - WILF - UP TO HERE - AFTER CLASS 7",
    "text": "7.3 2023 - WILF - UP TO HERE - AFTER CLASS 7",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>modes of data: \"numeric\",\"logical\",\"character\",etc.</span>"
    ]
  },
  {
    "objectID": "000350-e_e-NA_is.na_na.rm-v060.html",
    "href": "000350-e_e-NA_is.na_na.rm-v060.html",
    "title": "8  NA    is.na()    na.rm argument",
    "section": "",
    "text": "##########################################################.\n##########################################################.\n##\n## NA is used for data that is \"Not Available\"       ####\n##\n##########################################################.\n##########################################################.\n\n\n# NA is a special value in R that represents values that are \"not available\" ####\n# Do NOT put quotes around NA ####\n# (see more info below)\n\n# EXAMPLE: grades is a vector that contains the grades that the students in a\n# class received on a test. Some students didn't take the test yet so their\n# grades are recorded as NA (i.e. \"not available\").\n\ngrades = c(NA, 72, NA, 98, 83)\n\n# A variable can be set to NA, i.e. a vector of 1 element that just contains\n# the value, NA.\n\nx = NA\n\n#-----------------------------------------------------------------------------.\n# Arithmetic and logical expressions that include even one NA result in NA. ====\n#\n# This is because if even one value in an expression is \"not available\",\n# you simply cannot know the value of the entire expression.\n#-----------------------------------------------------------------------------.\n\n# EXAMPLES:\n\n3 + NA      # NA\n\n[1] NA\n\n3 &gt; NA      # NA\n\n[1] NA\n\n100 + 15 - NA * 2 &gt; 2^4 * 7    # NA\n\n[1] NA\n\njoesSalary = 50\nannesSalary = NA\nannesSalary + 5            # NA\n\n[1] NA\n\njoesSalary &gt; annesSalary   # NA\n\n[1] NA\n\ngrades = c(NA, 72, NA, 98, 83)\n\ngrades &lt; 80   # NA TRUE NA FALSE FALSE\n\n[1]    NA  TRUE    NA FALSE FALSE\n\n# original command:              grades &lt; 80\n# replace variable name:         c(NA, 72, NA, 98, 83) &lt; 80\n# recycling rule:                c(NA, 72, NA, 98, 83) &lt; c(80, 80, 80, 80, 80)\n#                                c(NA&lt;80 , 72&lt;80 , NA&lt;80 , 98&lt;80 , 83&lt;80)\n# expressions with NA become NA: c( NA   , TRUE  ,  NA   , FALSE , FALSE)\n# displayed on screen:           NA TRUE NA FALSE FALSE\n\n#-----------------------------------------------------------------------------.\n# A more \"typical\" example\n#-----------------------------------------------------------------------------.\n\njoesSalary &lt;- 50\nsuesSalary &lt;- 70\nannesSalary &lt;- NA\nmikesSalary &lt;- NA \n\njoesSalary &gt;= suesSalary   # FALSE\n\n[1] FALSE\n\njoesSalary &gt;= annesSalary  # NA\n\n[1] NA\n\nannesSalary == joesSalary  # NA\n\n[1] NA\n\nannesSalary != joesSalary  # NA\n\n[1] NA\n\njoesSalary + 5   # 55\n\n[1] 55\n\nannesSalary + 5  # NA\n\n[1] NA\n\nsuesSalary &gt;= 5 + max(joesSalary, annesSalary)   # NA\n\n[1] NA\n\n#-------------------------------------------------------------------------.\n# As shown above, if an expression includes even one NA the value of the entire\n# expression is NA. The most confusing part of this rule is the following:\n#\n# The value of NA == NA  is NA.   ####\n#\n#         Similarly:\n#\n# The value of NA != NA  is NA    ####\n#\n# To test to see if a value is NA, use the function is.na( SOME_VECTOR )  ####\n#-------------------------------------------------------------------------.\n\n# DO NOT TEST FOR NAs with == OR WITH !=\n\nNA == NA    # NA      \n\n[1] NA\n\nNA != NA    # NA          \n\n[1] NA\n\nannesSalary = NA\nannesSalary == NA    # NA\n\n[1] NA\n\nannesSalary != NA    # NA\n\n[1] NA\n\n# To test is a value is NA or not use is.na(SOME_VALUE)  ####\nis.na(NA)   # TRUE\n\n[1] TRUE\n\nis.na(123)  # FALSE\n\n[1] FALSE\n\njoesSalary = 50\nannesSalary = NA\nis.na(joesSalary)   # FALSE\n\n[1] FALSE\n\nis.na(annesSalary)  # TRUE\n\n[1] TRUE\n\n# To test is a value is not NA or not use !is.na(SOME_VALUE)  ####\n# (i.e. put an exclamation point (the \"not\" operator) before is.na)\n\n!is.na(NA)   # FALSE\n\n[1] FALSE\n\n!is.na(123)  # TRUE\n\n[1] TRUE\n\njoesSalary = 50\nannesSalary = NA\n!is.na(joesSalary)   # TRUE\n\n[1] TRUE\n\n!is.na(annesSalary)  # FALSE\n\n[1] FALSE\n\n#-----------------------------------------------------------------.\n# Check values for NA with the is.na(SOME_VECTOR) function ####\n#-----------------------------------------------------------------.\n\nannesSalary = NA     # assign NA to annesSalary\nmikesSalary = 50\n\n# DON'T DO THIS\nannesSalary == NA    # NA\n\n[1] NA\n\nannesSalary != NA    # NA\n\n[1] NA\n\n# DO THIS\nis.na(annesSalary)   # TRUE\n\n[1] TRUE\n\nis.na(mikesSalary)   # FALSE\n\n[1] FALSE\n\nannesSalary == mikesSalary  #NA\n\n[1] NA\n\nannesSalary != mikesSalary  #NA\n\n[1] NA\n\n#----------------------------------------------------------------.\n# is.na works with vectors that contains several values ====\n#----------------------------------------------------------------.\n\n# Test for NAs with is.na( SOME_VECTOR )\n\nis.na(c(100,NA,NA,200))       # FALSE TRUE TRUE FALSE\n\n[1] FALSE  TRUE  TRUE FALSE\n\n# Test for values that are NOT NA with !is.na( SOME_VECTOR )\n\n!is.na(c(100,NA,NA,200))      # TRUE FALSE FALSE TRUE\n\n[1]  TRUE FALSE FALSE  TRUE\n\n#----------------------------------------------------------------------.\n# is.na works with vectors of any mode. ====\n#----------------------------------------------------------------------.\n\n# The following uses a vector of logical values that includes some NAs\n# (make sure you understand this)\n\nis.na(c(TRUE, NA, NA, FALSE)) # FALSE TRUE TRUE FALSE\n\n[1] FALSE  TRUE  TRUE FALSE\n\n#----------------------------------------------------------------------.\n# NEVER test for NA using == or !=\n#----------------------------------------------------------------------.\n\n# DON'T DO THIS !!!\n\nc(100, NA, NA, 200)  == NA    # NA NA NA NA           \n\n[1] NA NA NA NA\n\nc(100, NA, NA, 200)  != NA    # NA NA NA NA           \n\n[1] NA NA NA NA\n\n#############################################################################\n# 2023 - BEREN - UP TO HERE - AFTER CLASS 8 ####\n#############################################################################\n\n\n#---------------------------------------------------------------------.\n# The length of vectors that contain NAs INCLUDE the NA values.\n#---------------------------------------------------------------------.\n\n# The length of the following vector includes the NA values\n\nlength( c ( 100, NA, NA, 200) )   # 4\n\n[1] 4\n\n# The na.rm argument in the sum and mean functions allow\n# you to \"remove\" (i.e. ignore) the NA values for purpose\n# of the sum or the mean.\n\nnums = c(NA, 10, 5, NA, 20)\n\n#--------------------------------------------------------------------------\n# The na.rm argument in the sum and mean functions:\n#\n#    sum( ...  , na.rm=FALSE)\n#    mean (x, trim=0, na.rm=FALSE, ...)\n#\n# The sum and mean functions include an argument named na.rm\n# If na.rm is TRUE then the NA's are ignored for the purpose of the function call\n#--------------------------------------------------------------------------\n\n\n\nsum(nums)   # NA\n\n[1] NA\n\nsum(nums, na.rm=FALSE) # NA, same as mean(nums)\n\n[1] NA\n\nsum(nums, na.rm=TRUE) # 35\n\n[1] 35\n\nnums\n\n[1] NA 10  5 NA 20\n\nmean(nums) # NA\n\n[1] NA\n\nmean(nums, na.rm=FALSE) # NA, same as mean(nums)\n\n[1] NA\n\nmean(nums, na.rm = TRUE) # 11.667\n\n[1] 11.66667",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NA &nbsp;&nbsp; is.na() &nbsp;&nbsp; na.rm argument</span>"
    ]
  },
  {
    "objectID": "000350-f_f-indexingWithPositiveNumbers-v060.html",
    "href": "000350-f_f-indexingWithPositiveNumbers-v060.html",
    "title": "9  Indexing with positive numbers",
    "section": "",
    "text": "###############################################.\n###############################################.\n## INDEXING (i.e. SUBSCRIPTING) A VECTOR\n###############################################.\n###############################################.\n\n# There are several terms that come up in this section\n# that will be defined below (e.g. \"element\", \"index\", \"subscript\").\n# \n# These terms are not actually typed in R commands.\n# Rather these terms are used to describe features that are common to many\n# programming languages (including R) but they are not actually R commands. \n# For example, you would never type the word \"element\" or \"index\" at an R prompt.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# DEFINITION:   an \"element\" of a vector   ####\n#\n# An \"element\" of a vector is a single item in the vector. For example, \n# a single number or a single TRUE or FALSE value. For example given \n# the code:\n#\n#    &gt; x = c(100,200,300) \n#\n# We can say that: \n#   100 is an element of the vector x.\n#   200 is also an element of the vector x.\n#   300 is the third, and final element of x.\n#\n# Similarly, given the following code, we can say that 50, 60, 70 and 80 are\n# all elements of the vector y.\n# \n#    &gt; y = seq(50, length.out=4, by=10)\n#    &gt; y\n#    [1] 50 60 70 80\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# DEFINITION: \"indexing\" a vector   ####\n#\n# \"Indexing a vector\" means writing code that retrieves specific\n# elements from the vector. For example the following code  \n# retrieves the 2nd element from the vector, stuff.\n#\n#   &gt; stuff = c(10,20,30)\n#\n#   &gt; stuff[2]\n#   [1] 20\n#\n#   &gt; 10 * stuff[2} + 7\n#   [1] 207\n#\n# Using positive position numbers is just one way to index a vector. There are\n# actually four different ways to index a vector e.g. using\n# \"negative position numbers\" to identify the values you \"don't want\". \n# All of the ways to index a vector will be explained in more detail below.\n#\n#\n# DEFINITION: \"subscript\"\n#\n# In general, to index a vector you type the name of the vector followed\n# by [square brackets] that contain information that identifies which elements\n# of the vector to retrieve.\n#\n# The information that appears between the [square brackets] when indexing\n# a vector is known as a \"subscript\". For example, in the code above,\n# stuff[2], the number 2 is a subscript. Some programmers refer to \n# the act of \"indexing a vector\" as \"subscripting the vector\".\n# When speaking casually, programmers will often refer to code such \n# as \"stuff[2]\" as \"stuff sub two\".\n#\n#\n# There are several alternative ways to \"index\" a vector in R.\n# These include the following ways and will be described in \n# much more detail below:\n# \n# WAYS TO INDEX (AKA to subscript) A VECTOR\n#   - indexing a vector with positive numbers\n#   - index with negative numbers to identify the elements you don't want\n#   - indexing with TRUE/FALSE values \n#   - indexing \"named vectors\" with the \"names\" of the elements (we'll cover this later)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n#########################################################.\n# Indexing with positive position numbers (AKA \"index\" numbers)  ####\n# (this was shown above, but will be elaborated on in more detail here)\n#\n# e.g.   stuff[2] \n#        stuff[c(2,5)]\n#        stuff[c(5,2,5,2,5,2)]\n#########################################################.\n\n#-----------------------------------------------------------------------------.\n# To identify specific parts of a vector, type [square brackets].\n# Inside the [square brackets] type A SINGLE VECTOR that identifies the\n# values that you want. R has four different ways to specify which values you\n# want. We will learn all of them soon. For now, we will focus on the first\n# way ...\n# \n# The first way is to specify the values you want is by identifying the \n# position numbers (AKA \"index\" numbers)  of the specific elements you\n# are interested in.\n#\n# EXMAMPLE\n#    &gt; stuff = c(10,20,30,40)    \n#    &gt; stuff[2]               # get 2nd element - NOTE, 2 is a vector\n#    [1] 20\n#\n#    &gt; stuff[ c(2,4) ]        # get the 2nd,4th elements - NOTE the c(2,5) is a SINGLE VECTOR\n#    [1] 20  40\n#-----------------------------------------------------------------------------.\n\nstuff &lt;- c(10,20,30,40,50)\nstuff\n\n[1] 10 20 30 40 50\n\nstuff[2]       # 20                i.e. the 2nd value\n\n[1] 20\n\nstuff          # 10 20 30 40 50    i.e. stuff didn't change\n\n[1] 10 20 30 40 50\n\nstuff [c(2,5)] # 20 50             i.e. 2nd and 5th values\n\n[1] 20 50\n\nstuff\n\n[1] 10 20 30 40 50\n\n# MAKE SURE that there is a JUST ONE vector in the [brackets]  ####\nstuff[2,5]     # ERROR - 2,5 is TWO VECTORS! \n\nError in stuff[2, 5]: incorrect number of dimensions\n\n#-------------------------------------------------------.\n# You may repeat the same index numbers more than once     ####\n#-------------------------------------------------------.\n\nstuff[c(2,2,2,2)]  # 20 20 20 20\n\n[1] 20 20 20 20\n\nstuff   # 10 20 30 40 50  (stuff didn't change)\n\n[1] 10 20 30 40 50\n\nstuff[c(5,2,5,2)]  # 50 20 50 20   (you can repeat values)\n\n[1] 50 20 50 20\n\n#------------------------------------------------------------.\n# QUESTION  - part a\n# \n# Write a command to change the vector named stuff.\n# After your command runs, the vector should only contain the\n# first 3 elements that were originally in stuff. \n# For example:\n#\n# EXAMPLE 1\n#   &gt; stuff = c(10,20,30,40,50)\n#   &gt; YOUR COMMAND GOES HERE\n#   &gt; stuff\n#   [1] 10 20 30\n#\n# EXAMPLE 2\n#   &gt; stuff = c(92, 100, 75, 63, 59, 95)\n#   &gt; YOUR COMMAND\n#   &gt; stuff\n#   [1] 92 100 75\n#------------------------------------------------------------.\n\n# ANSWER\n\n# EXAMPLE 1\n# setup some data\nstuff = c(10,20,30,40,50)\n\n#.....................\n# YOUR CODE GOES HERE\n#.....................\nstuff = stuff[1:3]       # **ANSWER**\n\nstuff # 10 20 30         # **ANSWER**\n\n[1] 10 20 30\n\n# EXAMPLE 2\n\n# set up some data\nstuff = seq(10, 20, by=2)\nstuff     # 10 12 14 16 18 20\n\n[1] 10 12 14 16 18 20\n\n#.........................\n# YOUR COMMAND GOES HERE (must be the same code as EXAMPLE 1)\n#.........................\nstuff = stuff[1:3]       # **ANSWER**\n\nstuff # 10 12 14         # **ANSWER**\n\n[1] 10 12 14\n\n#------------------------------------------------------------.\n# QUESTION  - part b\n# \n# Define a function named, firstThreePlus1 that takes a single argument \n# named, vec that is expected to be a vector. The function should return\n# a vector that contains just the first 3 elements of the vec argument.\n#\n# The values of the elements that are returned should be one more than\n# the values of the elements that were in the argument, vec.\n#\n# FOR EXAMPLE:\n#\n#   &gt; stuff = c(10,20,30,40,50)\n#   &gt; firstThreePlus1(stuff)\n#   [1] 11 21 31\n#\n#   &gt; grades = c(92,100,67,85,93,81)\n#   &gt; firstThreePlus1(vec = grades)        # \"vec=\" isn't necessary, but should work\n#   [1] 93 101 68\n#\n#   &gt; firstThreePlus1 ( seq(5, 100, by=5) )\n#   [1] 6 11 16\n#------------------------------------------------------------.\n\n\n# ANSWER\n\nfirstThreePlus1 = function( vec ) {   # **ANSWER**\n  vec[1:3] + 1                        # **ANSWER**\n}                                     # **ANSWER**\n\n#.......................\n# YOUR CODE GOES HERE\n#.......................\n\n# Check your answer:\nstuff = c(10,20,30,40,50)\nfirstThreePlus1(stuff)           # 11 21 31\n\n[1] 11 21 31\n\ngrades = c(92,100,67,85,93,81)   # 93 101 68\nfirstThreePlus1(vec=grades)         \n\n[1]  93 101  68\n\nfirstThreePlus1 ( seq(5, 100, by=5) )  \n\n[1]  6 11 16\n\n#----------------------------------------------------------------------------.\n# Any code that generates a vector can be specified inside the brackets.####\n# This includes function calls and nested function calls.\n#----------------------------------------------------------------------------.\n\n# You can use any mechanism to generate the vector inside the brackets\nstuff = c(10,20,30,40,50)\n\nstuff[rep(2,5)]  # 20 20 20 20 20      i.e. stuff[c(2,2,2,2,2)]   \n\n[1] 20 20 20 20 20\n\nstuff[ c( rep( seq(3,1) , 2 ) , 5 )]  # 30 20 10 30 20 10 50     see below for explanation\n\n[1] 30 20 10 30 20 10 50\n\n# original:           stuff[ c( rep( seq(3,1) , 2 ) , 5 )]\n# do seq(3,1) :       stuff[ c( rep( c(3,2,1) , 2 ) , 5 ) ]\n# do rep(c(3,2,1),2)  stuff[ c( c(3,2,1,3,2,1)      , 5 )]\n#                     stuff[ c(   3,2,1,3,2,1,        5 )]\n# final answer:       30 20 10 30 20 10 50\n\n#------------------------------------------------------------.\n# If you try to access information past the end of a vector\n# you will get NA, i.e. the information is Not Available\n#------------------------------------------------------------.\nstuff\n\n[1] 10 20 30 40 50\n\nstuff[7]   # NA (7th value is Not Available)\n\n[1] NA\n\nlength(stuff)\n\n[1] 5\n\nstuff[3:8] # 30 40 50 NA NA NA\n\n[1] 30 40 50 NA NA NA\n\n#------------------------------------------------------.\n# Index the target of an assignment to assign values to specific positions ####\n#------------------------------------------------------.\n\nstuff &lt;- c(10,20,30,40,50)\nstuff\n\n[1] 10 20 30 40 50\n\nstuff[2] &lt;- 999   # put 999 into the 2nd position in stuff ####\nstuff\n\n[1]  10 999  30  40  50\n\n#-----------------------------------------------------------------------------.\n# If the target of the assignment includes [brackets] the assignment happens element by element   ####\n# (see example below)\n#-----------------------------------------------------------------------------.\n\nstuff &lt;- c(10,20,30,40,50)\nstuff  # 10 20  30 40  50\n\n[1] 10 20 30 40 50\n\nstuff[c(2,5)] &lt;- c(999, 888)   # put 999 in position 2 and 888 in position 5 ####\nstuff  # 10 999 30 40 888\n\n[1]  10 999  30  40 888\n\n#-----------------------------------------------------------------------------.\n# This happens as long as TARGET of the assignment uses [square brackets].\n# This works even if the values being assigned do not use [brackets]\n#-----------------------------------------------------------------------------.\n\nnewstuff &lt;- c(999,888)\nnewstuff\n\n[1] 999 888\n\nstuff &lt;- c(10,20,30,40,50)\nstuff[ c(2,5) ] = newstuff # same thing, even though there newstuff has no brackets\nstuff  # 10 999 30 40 888\n\n[1]  10 999  30  40 888\n\n#-----------------------------------------------------------------------------.\n# The left hand side of an assignment that uses brackets (i.e. an index)\n# must specify a variable that ALREADY EXISTS\n#-----------------------------------------------------------------------------.\n\nthisDoesntExist [c(2,5)] &lt;- c(999,888)  # ERROR since thisDoesntExist doesn't exist\n\nError: object 'thisDoesntExist' not found\n\n#-----------------------------------------------------------------------------.\n# Assigning a value to a position much past the end of a vector inserts NAs prior to that value.\n# (see the example)\n#-----------------------------------------------------------------------------.\n\ngrades = 100\ngrades      # 100\n\n[1] 100\n\ngrades[2]   # NA\n\n[1] NA\n\ngrades[5]   # NA\n\n[1] NA\n\ngrades[c(2,5)] &lt;- c(90, 80)  # assign 90 to 2nd position, 80 to 5th position\ngrades      # 100 90 NA NA 80\n\n[1] 100  90  NA  NA  80\n\n#-----------------------------------------------------------.\n# Assignment uses the recycling rule ####\n# \n# If there are more values on the left of the = sign than\n# on the right, R uses the recycling rule to recycle values\n# from the vector on the right hand side of the = sign.\n#-----------------------------------------------------------.\n\n#........................................\n# EXAMPLE 1 - recycling a single value \n#........................................\n\nstuff = c(10,20,30,40,50)\nstuff\n\n[1] 10 20 30 40 50\n\nstuff[c(1,3,5)] = 999        # same as  stuff[c(1,3,5)] = c(999,999,999)\nstuff  # 999 20 999 40 999\n\n[1] 999  20 999  40 999\n\n# original :       stuff[c(1,3,5)] = 999\n# recycling rule:  stuff[c(1,3,5)] = c(999, 999, 999)\n\n\n#........................................\n# EXAMPLE 2 - recycling multiple values\n#........................................\n\nlongerStuff = c(10,20,30,40,50,60,70,80)\nlongerStuff\n\n[1] 10 20 30 40 50 60 70 80\n\nlongerStuff[1:8] = c(888,999)  # uses the recycling rule (see below)\nlongerStuff   # 888 999 888 999 888 999 888 999 \n\n[1] 888 999 888 999 888 999 888 999\n\n# original       : longerStuff[1:8] = c(888,999) \n# colon operator : longerStuff[c(1,2,3,4,5,6,7,8)] = c(888,999)\n# recycling rule : longerStuff[c(1,2,3,4,5,6,7,8)] = c(888,999,888,999,888,999,888,999)\n\n\n#.................................................................\n# EXAMPLE 3 - left hand side accesses past the end of a vector \n#.................................................................\nlongerStuff = c(10,20,30)\nlongerStuff\n\n[1] 10 20 30\n\n# In the following line the brackets on the \"left hand side\" (LHS)\n# contains 1:6, however prior to this line executing, the length of\n# the vector was only 3, ie. 10,20,30\n# That's fine.\n\nlongerStuff[1:6] = c(888,999) \n\nlongerStuff   # 888 999 888 999 888 999\n\n[1] 888 999 888 999 888 999\n\n#.......................................................\n# EXAMPLE 4 - WARNING - recycling two vectors where length of\n# longer is not a mutliple of length of shorter one. \n# This warning will appear whenever the recylcing rule is used, not just in \n# assignments.\n#.......................................................\n\nx = c(10,20,30)\nx\n\n[1] 10 20 30\n\nx[1:3] = c(888,999)  # WARNING - vector lengths are not multiples\n\nWarning in x[1:3] = c(888, 999): number of items to replace is not a multiple\nof replacement length\n\nx    # 888 999 888 - even though we got a \"warning\" it still works.\n\n[1] 888 999 888\n\n#.......................................................\n# EXAMPLE 5 - same as above happens with empty brackets\n#.......................................................\nx = c(10,20,30)\nx\n\n[1] 10 20 30\n\nx[] = c(888,999)  # WARNING - same reason as previous example\n\nWarning in x[] = c(888, 999): number of items to replace is not a multiple of\nreplacement length\n\nx    # 888 999 888 - even though we got a \"warning\" it still works.\n\n[1] 888 999 888\n\n#.......................................................\n# EXAMPLE 6 - complex expression in the brackets\n#.......................................................\n\nlongerStuff = c(10,20,30,40,50,60,70,80)\n\n# The [brackets] in the following command contain a complex expression. That's fine.\nlongerStuff[seq(2,length(longerStuff),by=2)] = c(888,999) # 10 888 30 999 50 888 70 999\n\nlongerStuff  # 10 888 30 999 50 888 70 999\n\n[1]  10 888  30 999  50 888  70 999\n\n# original       : longerStuff[seq(2,length(longerStuff),by=2)] = c(888,999)\n#\n# length function: longerStuff[seq(2,8,by=2)] = c(888,999)\n#\n# seq function   : longerStuff[c(2,4,6,8)] = c(888,999)\n#\n# recycling rule : longerStuff[c(2,4,6,8)] = c(888,999,888,999)\n#\n# final result   : 10 888 30 999 50 888 70 999\n\n#.......................................................................................\n# EXAMPLE 7 - entire vector is replaced since target of assignment doesn't use [brackets]\n#\n# This should be obvious! Just remember this and don't get confused ...\n# If the left hand side of the = sign is just a variable name without \n# any indexes then the entire contents of the variable is replaced.\n#.......................................................................................\n\n# The code below just replaces the entire variable longerStuff with c(888,999).\n# Specifically in 3rd line of code, ie.\n#\n#         longerStuff = c(888,999)              # entire vector is replaced\n#\n# Compare this with EXAMPLE 2 above and compare with the following code.\n# This is the only line of code that differs between the following example and EXAMPLE 2.\n# In EXAMPLE2 the code was:\n#\n#         longerStuff[1:8] = c(888,999)  \n#\n# The extra brackets in EXAMPLE 2 caused the assignment to happen element by \n# element, rather than replacing the entire vector as in the example below.\n\nlongerStuff &lt;- c(10,20,30,40,50,60,70,80)\nlongerStuff   \n\n[1] 10 20 30 40 50 60 70 80\n\nlongerStuff = c(888,999)  # no [brackets] in target of assignment - entire vector is replaced\nlongerStuff   # 888 999\n\n[1] 888 999\n\n##################################################.\n# 2023 - WILF - UP TO HERE - AFTER CLASS 8\n##################################################.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Indexing with positive numbers</span>"
    ]
  },
  {
    "objectID": "000350-g_g-indexingWithNegativeNumbers-v060.html",
    "href": "000350-g_g-indexingWithNegativeNumbers-v060.html",
    "title": "10  Indexing with NEGATIVE numbers",
    "section": "",
    "text": "##################################################.\n# Indexing with NEGATIVE numbers\n# e.g. \n#      stuff[-3]\n#      stuff[c(-3,-5)]\n#      stuff[-c(3,5)]\n#      stuff[-seq(1,length(stuff),by=3)]\n##################################################.\n\n#-------------------------------------------------------------------------.\n# If the index is a negative number or a vector of negative numbers, \n# all except those positions will be accessed.                       \n#-------------------------------------------------------------------------.\n\nstuff &lt;- c(10,20,30,40,50,60)\n\nstuff\n\n[1] 10 20 30 40 50 60\n\nstuff[-2]   # 10 30 40 50 60 (all except for 2nd value)\n\n[1] 10 30 40 50 60\n\nstuff       # 10 20 30 40 50 60 (stuff didn't change)\n\n[1] 10 20 30 40 50 60\n\nstuff[c(-2,-4)] # 10 30 50 60  (all except 2nd and 4th values)   ####\n\n[1] 10 30 50 60\n\nstuff \n\n[1] 10 20 30 40 50 60\n\nstuff[-c(2,4)]  # 10 30 50 60  (same result)    ####\n\n[1] 10 30 50 60\n\nstuff[ - seq(3, length(stuff), by=3) ] # 10 20 40 50  (all except every 3rd value)\n\n[1] 10 20 40 50\n\nstuff[ seq(-3, -length(stuff), by=-3) ] # same result\n\n[1] 10 20 40 50\n\n##################################################################.\n# QUESTION - part a\n#\n# Write a command that displays the entire vector, x, except\n# for the first and last values of x.\n#\n# EXAMPLE 1\n#   &gt; x = c(10,20,30,40,50)\n#   &gt; YOUR CODE GOES HERE\n#   [1] 20 30 40\n#\n# EXAMPLE 2\n#   &gt; x = c(100,30,999)\n#   &gt; YOUR CODE GOES HERE\n#   [1] 30\n##################################################################.\n\n#...........................................\n# DO THE ANSWER TWO DIFFERENT WAYS\n#\n# - ONCE WITH POSITIVE INDEX NUMBERS\n#\n# - ONCE WITH NEGATIVE INDEX NUMBERS\n#...........................................\n\n\n# ANSWER : Positive index value\n# Example 1\nx =    # ANSWER\n  x = x[2:(length(x)-1)]\n\nError in eval(expr, envir, enclos): object 'x' not found\n\nx\n\nError in eval(expr, envir, enclos): object 'x' not found\n\nx = c(100,90,57,88)\nx = x[2:(length(x)-1)]\nx\n\n[1] 90 57\n\n# Negative index value\nx = c(10,20,30,40,50,60,70,80,90,100)\nx = x[c(-1,-length(x))]\nx\n\n[1] 20 30 40 50 60 70 80 90\n\nx = c(100,90,57,88)\nx = x[c(-1,-length(x))]\nx\n\n[1] 90 57\n\n##################################################################.\n# QUESTION - part b\n#\n# Similar to previous question. However, this time, \n# define a FUNCTION named removeFirstAndLast that takes a single\n# argument named vec. The function should return the values in \n# vec but without the first and last values.\n#\n# EXAMPLES\n#   &gt; removeFirstAndLast ( c(10,20,30,40,50) )\n#   [1] 20 30 40\n#\n#   &gt; removeFirstAndLast() c(100,30,999) )\n#   [1] 30\n##################################################################.\n\n# Using positive index numbers\n\nremoveFirstAndLast = function ( vec ){\n  \n  vec [ 2 : (length(vec) - 1)   ] \n}\n\n\nremoveFirstAndLast ( c(10,20,30,40,50) )   # 20 30 40\n\n[1] 20 30 40\n\nremoveFirstAndLast( c(100,30,999) )        # 30 \n\n[1] 30\n\n# Using negative index numbers\n\nremoveFirstAndLast = function ( vec ){\n  \n  vec [ c( -1 , - length(vec) ) ]  \n}\n\nremoveFirstAndLast ( c(10,20,30,40,50) )   # 20 30 40\n\n[1] 20 30 40\n\nremoveFirstAndLast( c(100,30,999) )        # 30 \n\n[1] 30\n\n##################################################################.\n# QUESTION - part c\n#\n# Define a function named removeFirstLastFew that takes the following arguments\n#\n# ARGUMENTS \n#    vec - a vector that is expected to contain a few values\n#    amount - the number of values to trim from the beginning and end of vec\n#\n#    You may assume that length(vec) is greater than or equal to amount * 2.\n#\n#\n# EXAMPLE A\n#   &gt; removeFirstLastFew ( vec = c(10,20,30,40,50,60,70), amount = 2)\n#   [1] 30 40 50  \n#\n# EXAMPLE B\n#   &gt; removeFirstLastFew ( vec = c(90,100,80,65,92), amount = 1)\n#   [1] 100 80 65  \n#\n# EXAMPLE C\n#   &gt; removeFirstLastFew ( vec = c(10,20,30,40,50,60,70), amount = 3)\n#   [1] 40  \n#\n##################################################################.\n\n\n#...................................\n# DO THE ANSWER TWO DIFFERENT WAYS\n#\n# - ONCE WITH POSITIVE INDEX NUMBERS\n# - ONCE WITH NEGATIVE INDEX NUMBERS\n#...................................\n\n# Using positive index numbers\nremoveFirstLastFew = function( vec, amount) {\n  startingPosition = amount + 1\n  endingPosition = length(vec) - amount\n  vec[ startingPosition:endingPosition]\n}\n\n\nremoveFirstLastFew(c(10,20,30,40,50,60,70), 3)\n\n[1] 40\n\nremoveFirstLastFew(c(10,20,30,40,50,60,70), 2)\n\n[1] 30 40 50\n\nremoveFirstLastFew(c(10,20,30,40,50,60,70), 1)\n\n[1] 20 30 40 50 60\n\nremoveFirstLastFew(c(10,20,30,40,50,60,70), 4)\n\n[1] 50 40 30\n\n##################################################################.\n# QUESTION - part a\n#\n# Write a command that returns the contents of the vector, x,\n# in reverse order. Write the command so that it works\n# no matter how many elements the vector contains.\n#\n# Your command must work UNCHANGED for both examples\n# (and all other examples that are not shown below).\n#\n# EXAMPLE 1\n#   &gt; x = c(10,20,30,40,50)\n#   &gt; YOUR CODE GOES HERE\n#   [1] 50 40 30 20 10\n#\n# EXAMPLE 2\n#   &gt; x = c(100,30,999)\n#   &gt; YOUR CODE GOES HERE\n#   [1] 999 30 100\n##################################################################.\n\n# EXAMPLE 1 - Set up some values\nx = c(10,20,30,40,50)     # **ANSWER**\n\n#....................\n# YOUR CODE GOES HERE\n#....................\n\nx[length(x):1]            # **ANSWER**\n\n[1] 50 40 30 20 10\n\n# EXAMPLE 2 - Set up some values\n\nx = c(100,30,999)\n\n#....................\n# YOUR CODE GOES HERE\n#....................\n\nx[length(x):1]          # **ANSWER**\n\n[1] 999  30 100\n\n##################################################################.\n# QUESTION - part b\n# \n# Same as above but this time make a function named myrev.\n# The myrev function should take a single argument named x.\n# The function return the reverse of x.\n#\n# Note - there is a function in R named rev that does this. \n# your code should create a function named myrev that does the \n# same thing as the built in rev function.\n#\n# HINTS \n#   - your answer should use the length function\n#   - your answer should use the : operator or the seq function\n#\n# EXAMPLE 1\n#   &gt; myrev ( c(10,20,30,40,50) )\n#   [1] 50 40 30 20 10\n#\n# EXAMPLE 2\n#   &gt; myrev ( x=c(100,30,999) )\n#   [1] 999 30 100\n##################################################################.\n\n#...........................\n# Your code goes HERE\n#...........................\n\n# ANY OF THE FOLLOWING FUNCITON DEFINTIONS WILL WORK JUST FINE.  # **ANSWER**\nmyrev = function( x ){  # **ANSWER**\n  x[length(x):1]        # **ANSWER**\n}                       # **ANSWER**\n\nmyrev = function( x ){   # **ANSWER**\n  return(x[length(x):1]) # **ANSWER**\n}                        # **ANSWER**\n\n\nmyrev = function( x ){      # **ANSWER**\n  answer = x[length(x):1]   # **ANSWER**\n  return(answer)            # **ANSWER**\n}                           # **ANSWER**\n\nmyrev = function( x ){    # **ANSWER**\n  answer = x[length(x):1] # **ANSWER**\n  answer                  # **ANSWER**\n}                         # **ANSWER**\n\n# EXAMPLE 1\nmyrev ( c(10,20,30,40,50) ) # 50 40 30 20 10\n\n[1] 50 40 30 20 10\n\n# EXAMPLE 2\nmyrev ( x=c(100,30,999) ) # 999 30 100\n\n[1] 999  30 100\n\n# DONT DO THIS!!!!\n# DO NOT RETURN THE VALUE OF AN ASSIGNMENT STATEMENT.\n# THE VALUE OF AN ASSIGNMENT STATEMENT IS \"INVISIBLE\"\n\nmyrev = function( x ){         # **ANSWER** - DON'T DO THIS\n  answer = x[length(x):1]      # **ANSWER** - DON'T DO THIS\n}                              # **ANSWER** - DON'T DO THIS\n\nmyrev ( c(10,20,30,40,50) ) # no results are displayed  # **ANSWER** - DON'T DO THIS  \n\nmyrev ( x=c(100,30,999) ) #  no results are displayed   # **ANSWER** - DON'T DO THIS\n\n\n##########################################################################.\n# QUESTION - part a\n# \n# Write code that displays every other value of x.\n# The same code should work for all values of x.\n#\n# HINTS: \n#   - Use the length function to make it work no matter how many values\n#     are in x.\n#\n#   - use the seq function\n#\n# EXMPLE 1\n#\n#    &gt; x = c(100,200,300,400)\n#    &gt; YOUR CODE GOES HERE (must be same code as for EXAMPLE 2)\n#    [1] 100 300\n#\n# EXMPLE 2\n#\n#    &gt; x = c(83,99,82,67,85,100,89)\n#    &gt; YOUR CODE GOES HERE (must be same code as for EXAMPLE 1)\n#    [1] 83 82 85 89\n#\n##########################################################################.\n\n###########.\n# ANSWER \n###########.\n\n# EXAMPLE 1\n\nx = c(100,200,300,400)\n\n#...........................................................\n# YOUR CODE GOES HERE (must be same code as for EXAMPLE 2)\n#...........................................................\n\nx [ seq(1, length(x), by=2) ]     # **ANSWER**\n\n[1] 100 300\n\n# EXAMPLE 2\n\nx = c(83,99,82,67,85,100,89)\n\n#...........................................................\n# YOUR CODE GOES HERE (must be same code as for EXAMPLE 1)\n#...........................................................\n\nx [ seq(1, length(x), by=2) ]     # **ANSWER**\n\n[1] 83 82 85 89\n\n##################################################################.\n# QUESTION - part b\n#\n# Write a command that returns two copies of every other element \n# that is in x, starting with the 1st. Write the command so that it will work\n# correctly no matter how many elements the vector contains.\n#\n# HINTS \n#   - Build on your from the previous part of this question\n#\n#   - You answer should use the rep function\n#\n#\n# EXAMPLE 1\n#   &gt; x = c(10, 20, 30, 40, 50)\n#   &gt; # YOUR CODE GOES HERE\n#   [1] 10 10  30 30 50 50 \n#\n# EXAMPLE 2\n#   &gt; x = c(92, 100, 79)\n#   &gt; # YOUR CODE GOES HERE\n#   [1] 92 92  79 79\n##################################################################.\n\n###########.\n# ANSWER \n###########.\n\n# EXAMPLE 1\n\nx = c(10, 20, 30, 40, 50)\n\n#................................................................\n# YOUR CODE GOES HERE (must be the same code as for EXAMPLE 2)\n#................................................................\n\nrep(x[ seq(1, length(x), by=2) ], each=2)    # 10 10 30 30 50 50   # **ANSWER**\n\n[1] 10 10 30 30 50 50\n\n# EXAMPLE 2\n\nx = c(92, 100, 79)\n\n#................................................................\n# YOUR CODE GOES HERE  ( must be same code as above)\n#................................................................\n\nrep(x[ seq(1, length(x), by=2) ], each=2)    # 92 92 79 79      # **ANSWER**\n\n[1] 92 92 79 79\n\n#########################################################.\n# WILF - UP TO HERE - AFTER CLASS 7  ####\n#########################################################.\n\n\n#-----------------------------------------------------------------.\n# REMEMBER - 2 ways we learned about (so far) to \"index a vector\"\n#            (i.e. to identify specific values in the vector)\n#\n#-----------------------------------------------------------------.\n\n# FIRST WAY - use a vector in [brackets] that specifies the positions you want\n\nbigNumbers = c(1000,2000,3000,4000,5000)\n\nbigNumbers [ c( 1, 3) ]    # 1000 3000\n\n[1] 1000 3000\n\n# SECOND WAY - use negative numbers to indicate the positions you DON'T want\n\nbigNumbers [ c(-1, -4, -5)]   # 2000 3000\n\n[1] 2000 3000\n\n# the same thing ...\n\nbigNumbers [ - c(1, 4, 5)]   # 2000 3000\n\n[1] 2000 3000\n\n################################################################.\n# don't mix positive index numbers with negative index numbers ####\n################################################################.\n\nstuff = c(10,20,30,40,50)\n\nstuff[c(2,3)]\n\n[1] 20 30\n\nstuff[c(-2,-3)]\n\n[1] 10 40 50\n\nstuff[c(-2,3)]   # ERROR\n\nError in stuff[c(-2, 3)]: only 0's may be mixed with negative subscripts\n\n#########################################################.\n# BEREN - UP TO HERE - AFTER CLASS 7  ####\n#########################################################.\n\n\n\n##############################################################.\n# QUESTION\n#\n# Write a function, longestSeq that takes a single argument named nums.\n# The function should return the sequence counting\n# by ones, starting from the smallest value in nums to the largest value\n# in nums.\n#\n# HINT - you can use the functions min and max in your answer\n#\n# EXAMPLE 1\n#       &gt; longestSeq( c ( 3, 9, 4, 2, 5, 5, 4, 8 ))\n#       [1] 2 3 4 5 6 7 8 9\n#\n# EXAMPLE 2\n#       &gt; longestSeq( c(100, 99, 103, 100))\n#       [1] 99  100  101  102  103\n##############################################################.\n\n# ANSWER \n\n#...................................\n# YOUR CODE GOES HERE\n#...................................\n\nlongestSeq = function(nums) {   # **ANSWER**\n  min(nums):max(nums)            # **ANSWER**\n}                               # **ANSWER**\n\n# ANOTHER ANSWER                 # **ANSWER**\nlongestSeq = function(nums) {    # **ANSWER**\n  sorted = sort(nums)             # **ANSWER**\n  sorted[1]:sorted[length(nums)]  # **ANSWER**\n}                                # **ANSWER**\n\n# YET ANOTHER ANSWER           # **ANSWER**\nlongestSeq = function(nums) {  # **ANSWER**\n  lowest = min(nums)            # **ANSWER**\n  highest = max(nums)           # **ANSWER**\n  lowest:highest                # **ANSWER**\n}                              # **ANSWER**\n\n# EVEN YET ONE MORE ANSWER    # **ANSWER**\nlongestSeq = function(nums) { # **ANSWER**\n  lowest = min(nums)           # **ANSWER**\n  highest = max(nums)          # **ANSWER**\n  answer = lowest:highest      # **ANSWER**\n  answer                       # **ANSWER**\n}                             # **ANSWER**\n\n# EXAMPLE 1\nlongestSeq( c ( 3, 9, 4, 2, 5, 5, 4, 8 ))   # 2 3 4 5 6 7 8 9\n\n[1] 2 3 4 5 6 7 8 9\n\n# EXAMPLE 2\nlongestSeq( c(100, 99, 103, 100))  # 99  100  101  102  103\n\n[1]  99 100 101 102 103\n\n###############################################################################.\n# QUESTION    TOPICS:  indexing with numbers ####\n# \n# Write a function named squish, that takes a single argument named nums.\n# The function should \n#\n#   add together the first value with the 2nd value\n#   add together the 2nd value with the 3rd value\n#   etc.\n#\n# EXAMPLE 1:\n#   &gt; squish( c(10,20,30,40) )\n#   [1] 30 50 70\n#\n# EXAMPLE 2:\n#   &gt; squish( c(100,50,30,200,150,10) )\n#   [1] 150 80 230 350 160\n#\n#\n# PART A - write the answer by indexing with POSITIVE numbers\n# PART B - write the answer by indexing with NEGATIVE numbers\n#############################################################################.\n\n#------------.\n# ANSWER\n#------------.\n\n# First think about the problem. It often is useful to start thinking\n# about the problem with a simple example.\n#\n# In the example, we are given the vector c(10,20,30,40)\n# For this example, adding together \n#    the 1st number with the 2nd number, \n#    the 2nd number with the 3rd number, \n#    etc\n# \n# Is the same as adding together the following two vectors:\n#    c(10,20,30) + c(20,30,40)\n#\n# The 1st vector, c(10,20,30) is the original vector without the last number.\n# The 2nd vector, c(20,30,40) is the original vector without the first number.\n# \n# Therefore our function needs to calculate these two vectors and then add them.\n# We can do this with either POSITIVE index numbers or NEGATIVE index numbers\n# as shown below.\n\n#--------------------------------------------------------------.\n# PART A - write the answer by indexing with POSITIVE numbers\n#--------------------------------------------------------------.\nsquish = function (vec) {\n  allButLast = vec[1:(length(vec)-1)]\n  allButFirst = vec[2:length(vec)]\n  \n  answer = allButLast + allButFirst\n  \n  return(answer)\n}\n\n# Make sure both examples work\nsquish(c(10,20,30,40))\n\n[1] 30 50 70\n\nsquish( c(100,50,30,200,150,10) )\n\n[1] 150  80 230 350 160\n\n#--------------------------------------------------------------.\n# PART A - write the answer by indexing with POSITIVE numbers\n#--------------------------------------------------------------.\nsquish = function (vec) {\n  allButLast = vec[-length(vec)]\n  allButFirst = vec[-1]\n  \n  answer = allButLast + allButFirst\n  \n  return(answer)\n}\n\n# Make sure both examples work\nsquish(c(10,20,30,40))\n\n[1] 30 50 70\n\nsquish( c(100,50,30,200,150,10) )\n\n[1] 150  80 230 350 160",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Indexing with NEGATIVE numbers</span>"
    ]
  },
  {
    "objectID": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html",
    "href": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html",
    "title": "11  Logical vectors, relational (AKA logical) operators, ifelse",
    "section": "",
    "text": "11.1 Logical value - TRUE and FALSE\n# R has two \"logical values\", i.e. TRUE and FALSE.\n#\n# These values are NOT variables.\n#\n# They are \"logical values\"\n#\n# We will understand more about why they are special and how to use them.\n# Keep reading ...\nTRUE\n\n[1] TRUE\n\nFALSE\n\n[1] FALSE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Logical vectors, relational (AKA logical) operators, ifelse</span>"
    ]
  },
  {
    "objectID": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#relational-operators-e.g.-result-in-true-or-false",
    "href": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#relational-operators-e.g.-result-in-true-or-false",
    "title": "11  Logical vectors, relational (AKA logical) operators, ifelse",
    "section": "11.2 Relational operators ( e.g. > ) result in TRUE or FALSE",
    "text": "11.2 Relational operators ( e.g. &gt; ) result in TRUE or FALSE\n\n#--------------------------------------------------------------------------.\n# Using logical operators ( e.g. &gt; ) results in TRUE or FALSE ####\n#--------------------------------------------------------------------------.\n\n3 &gt; 2     # TRUE\n\n[1] TRUE\n\n2 &gt; 3     # FALSE\n\n[1] FALSE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Logical vectors, relational (AKA logical) operators, ifelse</span>"
    ]
  },
  {
    "objectID": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#multiple-answers-for-longer-vectors-recycling-rule",
    "href": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#multiple-answers-for-longer-vectors-recycling-rule",
    "title": "11  Logical vectors, relational (AKA logical) operators, ifelse",
    "section": "11.3 multiple answers for longer vectors, recycling rule",
    "text": "11.3 multiple answers for longer vectors, recycling rule\n\n#--------------------------------------------------------------------------.\n# Using logical operators ( e.g. &gt; ) with vectors of many values results in many TRUE/FALSE values ####\n#--------------------------------------------------------------------------.\nc(10,20,30,40) &gt; 25      # FALSE FALSE TRUE TRUE\n\n[1] FALSE FALSE  TRUE  TRUE\n\n# Values are compared position by position\nc(10,20,30,40) &gt; c(100, 1, 1, 100)      # FALSE TRUE TRUE FALSE\n\n[1] FALSE  TRUE  TRUE FALSE\n\n# Recycling rule works\nc(10,20,30,40) &gt; c(1, 100)      # TRUE FALSE TRUE FALSE\n\n[1]  TRUE FALSE  TRUE FALSE\n\n# original: c(10,20,30,40) &gt; c(1, 100)\n#\n# recycle:  c(10,20,30,40) &gt; c(1, 100, 1, 100)\n# \n# &gt;      :  c(10&gt;1, 20&gt;100, 30&gt;1, 40&gt;100) \n#\n# Final:    TRUE    FALSE   TRUE  FALSE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Logical vectors, relational (AKA logical) operators, ifelse</span>"
    ]
  },
  {
    "objectID": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#the-and-operators",
    "href": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#the-and-operators",
    "title": "11  Logical vectors, relational (AKA logical) operators, ifelse",
    "section": "11.4 The == and != operators",
    "text": "11.4 The == and != operators\n\n#------------------------------------------------------------.\n# USE == (i.e. double == signs) to test for equality.   \n#\n# USE != to test for \"not equal to\"   \n#------------------------------------------------------------.\n\n# REMEMBER - test for equality uses two == signs  (assignment uses one = sign) \n\n# Use double == to test the TRUTH of an expression\n10+2 == 4*3  # TRUE\n\n[1] TRUE\n\n10+2 = 4*3   # Error - single = sign is for assignment to a variable or specifying an argument value\n\nError in 10 + 2 = 4 * 3: target of assignment expands to non-language object\n\n# Test for not-equals using !=\n10+2 != 4*4   # TRUE, i.e. 10+2 is NOT EQUAL to 4*4\n\n[1] TRUE\n\n10+2 != 4*3   # FALSE\n\n[1] FALSE\n\n10+2 == 4*4   # FALSE\n\n[1] FALSE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Logical vectors, relational (AKA logical) operators, ifelse</span>"
    ]
  },
  {
    "objectID": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#type-to-get-help-on-relational-operators",
    "href": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#type-to-get-help-on-relational-operators",
    "title": "11  Logical vectors, relational (AKA logical) operators, ifelse",
    "section": "11.5 Type ?“>” to get help on relational operators",
    "text": "11.5 Type ?“&gt;” to get help on relational operators\n\n# To get help for the relational operators, type ?`&gt;`       ####\n?\"&gt;\"\n\nstarting httpd help server ... done\n\n# Relational operators (i.e. &gt; &lt; &gt;= &lt;= == !=) also use vector operations and the recycling rule. ####\n\nc(10, 20, 30, 40) &gt; c(5, 25, 28, 100)\n\n[1]  TRUE FALSE  TRUE FALSE\n\n# original       : c(10, 20, 30, 40) &gt; c(5, 25, 28, 100)\n#                : c(10&gt;5 , 20&gt;25 , 30&gt;28 , 40&gt;100)\n#                : c(TRUE , FALSE , TRUE  , FALSE)\n\n\nc( rep(10,4), rep(20, 4)) &gt; c(5,25,28,100)\n\n[1]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE\n\n# original:        c( rep(10,4), rep(20, 4)) &gt; c(5,25,28,100)\n# do the rep's:    c(c(10,10,10,10), c(20,20,20,20) )  &gt; c(5, 25, 28, 100)\n# combine the c's : c( 10,10,10,10,20,20,20,20) &gt; c(5,25,28,100)\n# recycling:      :c(10,10,10,10,20,20,20,20) &gt; c(5,25,28,100,5,25,28,100)\n# final answer    : TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE\n\n\n\n# The following uses the recycling rule \nc(10, 20) &gt; c(5, 25, 30, 12)\n\n[1]  TRUE FALSE FALSE  TRUE\n\n# original      : c(10, 20)         &gt; c(5, 25, 30, 12)\n# recycling rule: c(10, 20, 10, 20) &gt; c(5, 25, 30, 12)\n#               : c(10&gt;5 , 20&gt;25, 10&gt;30 , 20&gt;12)\n#               : c(TRUE , FALSE,  FALSE, TRUE)\n\n\n# You can store logical values (i.e. TRUE and FALSE) in a vector.\n# A vector may only contain one \"mode\" or \"type\" of data, e.g. numeric or logical.  ####\n\nsomeLogicalValues = c(TRUE,FALSE, TRUE, TRUE)\n\nsomeLogicalValues\n\n[1]  TRUE FALSE  TRUE  TRUE\n\nsomeNumbers = c(100,200,300)\n\nsomeNumbers\n\n[1] 100 200 300\n\n# Soon, we'll learn much more about logical values and how they \n# are used in R ...",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Logical vectors, relational (AKA logical) operators, ifelse</span>"
    ]
  },
  {
    "objectID": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#practice",
    "href": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#practice",
    "title": "11  Logical vectors, relational (AKA logical) operators, ifelse",
    "section": "11.6 — Practice",
    "text": "11.6 — Practice\n\n############################################################################.\n# QUESTION:\n# \n# Write a function with the following \"signature\" (the signature of a \n# function includes the name of the function and the names of the arguments\n# for the function)\n# \n#     isEven = function( nums )\n#\n# nums is expected to be a numeric vector. The function should return \n# TRUE values for the even values in nums and FALSE values for the odd\n# values in nums.\n#\n# EXAMPLE:\n#      &gt; isEven( c(2,5,10,20,23) )\n#      [1] TRUE FALSE TRUE TRUE FALSE\n#\n# HINT: Even numbers have a remainder of zero when they are divided by two.\n############################################################################.\n\n# ANSWER\n\nisEven = function( nums ){\n  \n  nums %% 2 == 0\n  \n}\n\n# Test cases:\nisEven( c(2,5,10,20,23) )  # should return TRUE FALSE TRUE TRUE FALSE\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\nisEven( 11 )  # should return FALSE\n\n[1] FALSE\n\nisEven( -8 )  # should return TRUE\n\n[1] TRUE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Logical vectors, relational (AKA logical) operators, ifelse</span>"
    ]
  },
  {
    "objectID": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#ifelse-logical_vector-some_vector-another_vector",
    "href": "000350-h_c-IntroToLogicalVectorsAndOperators_ifelseFunction-v060.html#ifelse-logical_vector-some_vector-another_vector",
    "title": "11  Logical vectors, relational (AKA logical) operators, ifelse",
    "section": "11.7 ifelse( LOGICAL_VECTOR , SOME_VECTOR , ANOTHER_VECTOR )",
    "text": "11.7 ifelse( LOGICAL_VECTOR , SOME_VECTOR , ANOTHER_VECTOR )\n\n###########################################################################.\n# ifelse( LOGICAL_VECTOR , SOME_VECTOR , ANOTHER_VECTOR )\n#\n# NOTE: R's ifelse function, works similarly to Excel's \"if\" function. \n#       However, R's version is \"vectorized\" (see below for examples)\n############################################################################.\n\n?ifelse\n\n# Example:\n\n# In the following example we explicitly write TRUE, FALSE, TRUE just to make\n# it more obvious how the ifelse function works. Obviously you would\n# not write code like this.\nifelse(c(TRUE, FALSE, TRUE), c(5, 10 , 15) , c(100, 200, 300))   # 5 200 15\n\n[1]   5 200  15\n\n# Rather, the following is more like what you might see. However, this wouldn't\n# appear in real code either since everyone knows that 10&gt;2 is TRUE - why would \n# we need to write that.\nifelse(c(10&gt;2, 100&gt;99999, 5==3+2), c(5, 10 , 15) , c(100, 200, 300))   # 5 200 15\n\n[1]   5 200  15\n\n# In \"real life code\" there would be variables that are part of the code (see\n# examples below.)\n\n\n# Display the word \"even\" for the even numbers and \"odd\" for the odd numbers:\nnums = c(2, 5, 10, 21, 23, 30)\nifelse( nums %% 2 == 0,\"even\",\"odd\") # \"even\" \"odd\"  \"even\" \"odd\"  \"odd\"  \"even\"\n\n[1] \"even\" \"odd\"  \"even\" \"odd\"  \"odd\"  \"even\"\n\n# original: ifelse( nums %% 2 == 0,\"even\",\"odd\")\n#\n# expand logical expression: ifelse(c(TRUE FALSE  TRUE FALSE FALSE  TRUE), \"even\", \"odd\")\n#\n# recyle the \"even\" and \"odd\" values into vectors of lenghth 6 to match the lenght\n# of the logical vector.\n#      ifelse(c(TRUE FALSE  TRUE FALSE FALSE  TRUE), \n#             c(\"even\", \"even\", \"even\", \"even\", \"even\", \"even\"),\n#             c(\"odd\",   \"odd\",   \"odd\",   \"odd\",   \"odd\",   \"odd\"))\n#\n# result:    \"even\" \"odd\"  \"even\" \"odd\"  \"odd\"  \"even\"\n\n\n\n\n\n# If the function isEven exists already then the above code could be\n# rewriten as follows:\nifelse(isEven(nums), \"even\",\"odd\") # \"even\" \"odd\"  \"even\" \"odd\"  \"odd\"  \"even\"\n\n[1] \"even\" \"odd\"  \"even\" \"odd\"  \"odd\"  \"even\"",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Logical vectors, relational (AKA logical) operators, ifelse</span>"
    ]
  },
  {
    "objectID": "000350-j_j-indexingWithLogicalValues_notOperator-v060.html",
    "href": "000350-j_j-indexingWithLogicalValues_notOperator-v060.html",
    "title": "12  Indexing a vector using LOGICAL values",
    "section": "",
    "text": "12.1 — Practice —\n###############################################################.\n# QUESTION: grades is a vector that contains student grades.\n# Write a command that will only show those grades that are \n# an even multiple of 10 (i.e. that end in zero).\n# HINT - think about using the %% operator.\n###############################################################.\n\ngrades &lt;- c(70, 72, 80, 85, 88, 95)\n\ngrades %% 10\n\ngrades [ grades %% 10 = 0    ]   # ERROR - remember - use == for comparisons\n\ngrades [ grades %% 10 == 0    ]\n\ngrades [ grades %% 10 != 0    ]\n\n# How to think through the problem\n# step 1: You need to get some values from the grades vector. Therefore the command\n#         needs to specify \n#                    grades[ SOME_VECTOR ]   \n#         You need a vector in the [brackets] that identifies which grades you want.\n#\n#         Exactly which values you need does not depend on position numbers. Rather\n#         the grades that you want depends on a particular condition, ie. those\n#         grades that are evenly divisable by 10. Therefore formulate the command\n#         in the following way:\n# \n#             grades[ LOGICAL-VECTOR-THAT-HAS-TRUEs-AND-FALSEs-IN-THE-RIGHT-PLACES ]\n#\n# step 2: REMEMBER - the %% operator gets you a remainder so\n#                   42 %% 10 is 2\n#                       but\n#                   40 %% 10 is 0\n#                   70 %% 10 is also 0\n#                   0 %% 0   is also 0\n#         The condition we are looking for is the grade%%10 is 0 (i.e. the grade is divisible by 10)\n#         The condition we are looking for is    :    grades %% 10 == 0\n#\n# step 3: put it all together\n#           grades [ grades %% 10 == 0]\n\n# show all the grades\ngrades\n\n# show the grades that are an even multiple of 10\ngrades [  grades %% 10 == 0]\n\n# original                   : grades [  grades %% 10 == 0]\n# expand grades inside the []: grades [ c(70,72,80,85,88,95) %% 10 == 0]\n# apply the %% to each grade : grades [ c(70%%10,72%%10,80%%10,85%%10,88%%10,95%%10) == 0]\n#                            : grades [ c(0     ,2     ,0     ,5     ,8     ,5     ) == 0]\n# apply the == to each value : grades [ c(0==0,2==0,0==0,5==0,8==0,5==0) ]\n#                            : grades [ c(TRUE,FALSE,TRUE,FALSE,FALSE,FALSE) ]\n# pull out the values of grades that are in the TRUE positions: 70 80 \n\n\n\n\n\n\n\n###########################################################################.\n# QUESTION: Write a command to display the values in the grades vector \n#           that are at least 5 points above average\n#########################################################################.\n\n# EXAMPLE 1: \ngrades &lt;- c(70, 72, 80, 85, 88, 95)  # average is 81.6667\n# YOUR CODE GOES HERE     #  88 95\n\n\n# EXAMPLE 2:\ngrades &lt;- c(50, 70, 72, 80, 85, 88, 95)  # average is 77.143\n# YOUR CODE GOES HERE     #  85 88 95\n\n\n#---------.\n# ANSWER\n#---------.\ngrades &lt;- c(70, 72, 80, 85, 88, 95)  # average is 81.6667\ngrades [ grades &gt;= mean(grades) + 5 ]\n\n\n#########################################################################.\n# QUESTION: Show grades that are within 5 points of the highest grade\n# HINT: use max function and a little math\n#########################################################################.\n\n# EXAMPLE 1: \ngrades &lt;- c(70, 72, 80, 85, 91, 93, 93, 95)\n# YOUR CODE GOES HERE     #  91 93 93 95\n\n# EXAMPLE 2: \ngrades &lt;- c(95, 92, 89, 89, 88, 80, 75)\n# YOUR CODE GOES HERE     #  95 92\n\n# EXAMPLE 3: \ngrades &lt;- c(95, 89, 89, 88, 80, 75)\n# YOUR CODE GOES HERE     #  95\n\n\n#---------.\n# ANSWER\n#---------.\ngrades &lt;- c(70, 72, 80, 85, 91, 93, 93, 95)\ngrades[ grades &gt;= max(grades) - 5]\n\n\n\n#########################################################################.\n#########################################################################.\n##\n## sum ( LOGICAL_VECTOR )      # the number of values that are TRUE\n##\n##     &gt; sum ( c( TRUE, FALSE, TRUE, TRUE) )\n##     [1] 3\n##\n## mean ( LOGICAL_VECTOR)       # the percent of values that are TRUE\n##\n##     &gt; mean ( c( TRUE, FALSE, TRUE, TRUE) )\n##     [1] 0.75\n##   \n#########################################################################.\n#########################################################################.\n\n# If you try to use a logical vector where a number is expected, the TRUE\n# values will become 1 and the FALSE values will become 0\n\nTRUE + 5      # 6    since TRUE + 5 becomes   1+5\n3 * TRUE      # 3    since 3*TRUE becomes 3*1\n\nFALSE + 5      # 5    since FALSE + 5 becomes   0+5\n3 * FALSE      # 0    since 3*FALSE becomes 3*0\n\nc( TRUE, 999, FALSE ) # 1 999 0    you cannot mix logical values and numbers in a vector, TRUE becomes 1 and FALSE becomes 0\n\nsum(c(TRUE, FALSE, TRUE, TRUE))  # 3  since you cannot sum logicals so they become numbers\n\nmean(c(TRUE, FALSE, TRUE, TRUE))  # 0.75    same as mean(c(1,0,1,1))\n\n\n# Indexing can be either done with numbers or with logical values (i.e. TRUE/FALSE values)\n# Therefore, TRUE / FALSE vectors will NOT be converted to 1's and 0's in an index.\ngrades = c(70,80,90,100)\ngrades[c(TRUE, FALSE, FALSE, TRUE)]  # 70 100\n\n\n# What's going to be displayed by the following? Why?\ngrades[c(1, 0, 0, 1)]     # 70 70\n\ngrades[c(1, FALSE, FALSE, TRUE)]   # 70 70\n\nError: &lt;text&gt;:12:23: unexpected '='\n11: \n12: grades [ grades %% 10 =\n                          ^",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Indexing a vector using LOGICAL values</span>"
    ]
  },
  {
    "objectID": "000350-j_j-indexingWithLogicalValues_notOperator-v060.html#practice",
    "href": "000350-j_j-indexingWithLogicalValues_notOperator-v060.html#practice",
    "title": "12  Indexing a vector using LOGICAL values",
    "section": "",
    "text": "WILF - UP TO HERE - AFTER CLASS 8\n\n##########################################################################.\n# QUESTION: grades is a vector that contains grades of students on a test.\n#\n#           (a) write a command to show the number of students who got an 80 or above.\n#\n#           (b) write a command to show the percent of the class who got an 80 or above\n# \n#           (c) show the grades that were 80 or above\n##########################################################################.\n\n#           (a) write a command to show the number of students who got an 80 or above.\n\n# EXAMPLE 1\ngrades = c(85, 80, 79, 65, 55, 72, 90, 95)\nsum ( grades &gt;= 80 )\n\n[1] 4\n\n# Original:  sum ( grades &gt;= 80 )\n#         :  sum ( c(85, 80, 79, 65, 55, 72, 90, 95) &gt;= 80 )\n#         :  sum ( c(85&gt;=80, 80&gt;=80, 79&gt;=80, 65&gt;=80, 55&gt;=80, 72&gt;=80, 90&gt;=80, 95&gt;=80))\n#         :  sum ( c(TRUE, TRUE, FALSE,  FALSE,  FALSE,  FALSE, TRUE, TRUE))\n#         :  sum ( c(1,1,0,0,0,0,1,1))\n#            4\n\n\n\n# EXAMPLE 2\ngrades = c(45, 78, 78, 85, 88)   \nsum ( grades &gt;= 80 )\n\n[1] 2\n\n#           (b) write a command to show the percent of the class who got an 80 or above\n\n# EXAMPLE 1\ngrades = c(85, 80, 79, 65, 55, 72, 90, 95)\n# YOUR CODE GOES HERE       # 0.5\n\n# ONE WAY\nmean( grades &gt;= 80 )\n\n[1] 0.5\n\n# Original:  mean ( grades &gt;= 80 )\n#         :  mean ( c(85, 80, 79, 65, 55, 72, 90, 95) &gt;= 80 )\n#         :  mean ( c(85&gt;=80, 80&gt;=80, 79&gt;=80, 65&gt;=80, 55&gt;=80, 72&gt;=80, 90&gt;=80, 95&gt;=80))\n#         :  mean ( c(TRUE, TRUE, FALSE,  FALSE,  FALSE,  FALSE, TRUE, TRUE))\n#         :  mean ( c(1,1,0,0,0,0,1,1))\n#            0.5\n\n\n# ANOTHER WAY\n\nsum( grades&gt;= 80) / length(grades)\n\n[1] 0.5\n\n# EXAMPLE 2\ngrades = c(45, 78, 78, 85, 88)   \n# YOUR CODE GOES HERE       # 0.4\n\n\n#           (c) show the grades that were 80 or above\n\n# EXAMPLE 1\ngrades = c(85, 80, 79, 65, 55, 72, 90, 95)\n# YOUR CODE GOES HERE       # 85 80 90 95\ngrades[grades&gt;=80]\n\n[1] 85 80 90 95\n\n# Original:   grades[grades&gt;=80]\n#             grades[c(85, 80, 79, 65, 55, 72, 90, 95)&gt;=80]\n#             grades[c(85&gt;=80, 80&gt;=80, 79&gt;=80, 65&gt;=80, 55&gt;=80, 72&gt;=80, 90&gt;=80, 95&gt;=80)]\n#             grades[c(85&gt;=80, 80&gt;=80, 79&gt;=80, 65&gt;=80, 55&gt;=80, 72&gt;=80, 90&gt;=80, 95&gt;=80)]\n#         :   grades[c(TRUE, TRUE, FALSE,  FALSE,  FALSE,  FALSE, TRUE, TRUE)]\n#             85 80 90 95\n\n# EXAMPLE 2\ngrades = c(45, 78, 78, 85, 88)   \n# YOUR CODE GOES HERE       # 85 88\n\n\n\n##########################################################################.\n# QUESTION: Add up the grades that are above 80\n##########################################################################.\n\ngrades = c(45, 78, 78, 85, 88)   \n\n# ANSWER\nsum ( grades[grades&gt;=80] )\n\n[1] 173\n\n#########################################################################.\n#########################################################################.\n#\n# USING THE EXCLAMATION POINT (i.e \"not\") OPERATOR\n#\n#   ! SOME_LOGICAL_VECTOR    # (i.e. exclamation point before a logical vector)\n#\n# The ! (exclamation point) is known as the \"not\" operator. \n# It flips TRUEs and FALSEs.  (i.e. changes TRUE to FALSE and changes FALSE to TRUE)\n#########################################################################.\n#########################################################################.\n\nlogicalValues &lt;- c(TRUE, FALSE, TRUE, TRUE)\nlogicalValues\n\n[1]  TRUE FALSE  TRUE  TRUE\n\n!logicalValues    # change TRUE to FALSE and change FALSE to TRUE\n\n[1] FALSE  TRUE FALSE FALSE\n\nlogicalValues    # the original vector didn't change\n\n[1]  TRUE FALSE  TRUE  TRUE\n\n\n\n\nBEREN - UP TO HERE - AFTER CLASS 8\n\n#########################################################################.\n#########################################################################.\n#\n# is.na\n#\n# is.na ( someVector ) tests to see if the values are NA.\n# is.na returns a logical vector. Example:\n# \n#   &gt; is.na(c(10,NA,20,30,NA))\n#   [1] FALSE TRUE FALSE FALSE TRUE\n#\n#########################################################################.\n#########################################################################.\n\n# EXAMPLES\n\n#---------------------------------------------------------------------------.\n# QUESTION: A teacher recorded grades of her students on a test in the vector grades.\n# Some students didn't take the test yet. For those students she recorded a grade of \n# NA. (see the questions below)\n#---------------------------------------------------------------------------.\n\ngrades = c(NA,85,NA,90,88)   # NA is used for students who didn't take the test yet.\ngrades\n\n[1] NA 85 NA 90 88\n\nmean(grades)    # NA\n\n[1] NA\n\n?mean\n\nstarting httpd help server ... done\n\nmean(grades, na.rm=TRUE)  # 87.6667\n\n[1] 87.66667\n\ngrades == NA   # NA NA NA NA NA\n\n[1] NA NA NA NA NA\n\n# original:    grades == NA\n#              c(NA,85,NA,90,88) == NA\n#              c(NA==NA,85==NA,NA==NA,90==NA,88==NA) \n#              NA NA NA NA NA \n\n\ngrades != NA   # NA NA NA NA NA\n\n[1] NA NA NA NA NA\n\n# Show a logical vector that indicates which grades are NAs\n\nis.na(grades)     # TRUE FALSE TRUE FALSE FALSE\n\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n# Show the actual NAs\n\ngrades[ is.na(grades) ]   # NA NA \n\n[1] NA NA\n\n# original:    grades[ is.na(grades) ]\n#              grades[ is.na(c(NA,85,NA,90,88)) ]\n#              grades[ c(TRUE,FALSE,TRUE,FALSE,FALSE) ]\n#              NA NA\n\n\n# Show the just the grades that are NOT NA grades\n# REMEMBER (see above) that the ! will flip TRUE to FALSE and FALSE to TRUE\n\n\ngrades [ !is.na(grades) ]   # 85 90 88\n\n[1] 85 90 88\n\n# original:    grades[ !is.na(grades) ]\n#              grades[ !is.na(c(NA,85,NA,90,88)) ]\n#              grades[ c(FALSE,TRUE,FALSE,TRUE,TRUE) ]\n#              85 90 88\n\n\n# How many students did not take the test yet (i.e. grade is NA)\nsum( is.na(grades) )\n\n[1] 2\n\n# what percent of the class DID take the test already?\nmean( !is.na(grades) )               # one answer (this is the best answer)\n\n[1] 0.6\n\n1 - mean (is.na(grades))             # another answer\n\n[1] 0.6\n\nsum(!is.na(grades)) / length(grades) # a third answer\n\n[1] 0.6\n\n\n\n\n2023 - BEREN - UP TO HERE - AFTER CLASS 9\n\n\n2023 - WILF - UP TO HERE - AFTER CLASS 9\n\n\n2023 - BEREN - UP TO HERE - AFTER CLASS 10 (worked on practice problems)\n\n\n2023 - WILF - UP TO HERE - AFTER CLASS 10 (worked on practice problems)",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Indexing a vector using LOGICAL values</span>"
    ]
  },
  {
    "objectID": "000350-j_j-indexingWithLogicalValues_notOperator-v060.html#practice-1",
    "href": "000350-j_j-indexingWithLogicalValues_notOperator-v060.html#practice-1",
    "title": "12  Indexing a vector using LOGICAL values",
    "section": "12.2 — Practice —",
    "text": "12.2 — Practice —\n\n#########################################################.\n# QUESTION\n#\n# Write a function with the following signature\n#\n#    positionsOfMin = function( vec ){\n#        # YOUR CODE GOES HERE\n#    }\n#\n# The function should return a vector with the positions\n# of the minimum value in the vector.\n#\n# EXAMPLE 1:\n#    &gt; positionsOfMin(c(10, 5, 2, 100, 2, 35))\n#    [1] 3 5\n#\n# EXAMPLE 2:\n#    &gt; positionsOfMin(c(40, 30, 20, 10))\n#    [1] 4\n#########################################################.\n\n# ANSWER 1 - this version is somewhat longer than it needs to be.\n#            The code is spread out on multiple lines so that you can follow\n#            along with the debugger to understand how everything works.\n\npositionsOfMin = function( vec ){\n\n    allPositions = 1:length(vec)\n    smallest = min(vec)\n    tf = vec == smallest\n    allPositions[tf]\n}\n\n# check the examples\npositionsOfMin(c(10, 5, 2, 100, 2, 35))   # 3 5\n\n[1] 3 5\n\npositionsOfMin(c(40, 30, 20, 10)) # 4\n\n[1] 4\n\n# ANSWER 2 - this version is more concise but results in the same values.\npositionsOfMin = function( vec ){\n  (1:length(vec)) [vec == min(vec)]\n}\n\n# check the examples\npositionsOfMin(c(10, 5, 2, 100, 2, 35))   # 3 5\n\n[1] 3 5\n\npositionsOfMin(c(40, 30, 20, 10)) # 4\n\n[1] 4\n\n#########################################################.\n# QUESTION\n#\n# Write a function with the following signature\n#\n#    addToMinValues = function( nums , value ){\n#        # YOUR CODE GOES HERE\n#    }\n#\n# nums is expected to be a numeric vector\n#\n# value is expected to be a single number\n#\n# The return value should be the same as nums with the value\n# added to the minimum values in nums.\n#\n# HINT - feel free to use the positionsOfMin function that \n# you defined in the previous question as part of the answer.\n#\n# EXAMPLE 1:\n#    &gt; addToMinValues(c(10, 5, 2, 100, 2, 35) , 100)\n#    [1] 10 5 102 100 102 35\n#\n# EXAMPLE 2:\n#    &gt; positionsOfMin(c(40, 30, 20, 10), 200)\n#    [1] 40 30 20 210\n#########################################################.\n\n\naddToMinValues = function( nums, value ) {\n  positions = positionsOfMin(nums)\n  nums[positions] = nums[positions] + value\n  return(nums)\n}\n\n# check the examples\naddToMinValues(c(10, 5, 2, 100, 2, 35), 100)   \n\n[1]  10   5 102 100 102  35\n\naddToMinValues(c(40, 30, 20, 10), 200) \n\n[1]  40  30  20 210",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Indexing a vector using LOGICAL values</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "",
    "text": "13.1 “double-quotes” vs ‘single-quotes’\n# character data MUST be surrounded by \"quotes\" or 'apostrophes' \n# (they basically do the exact same thing in R)\n#\n# \"quotes\" are often called \"double quotes\"  (i.e. there are 2 lines for each quote)\n# 'apostrophes' are often called 'single quotes' (i.e. there is 1 line for each apostrophe)\n\nrep(\"hello\", 5)   # \"hello\" is a character value, 5 is a numeric value\n\n[1] \"hello\" \"hello\" \"hello\" \"hello\" \"hello\"\n\nrep('hello', 5)   # 'hello' is a character value, 5 is a numeric value\n\n[1] \"hello\" \"hello\" \"hello\" \"hello\" \"hello\"\n\n# If you leave off the quotes, R will assume hello is a variable name\nrep(hello, 5)   # ERROR - variable hello doesn't exist.\n\nError in eval(expr, envir, enclos): object 'hello' not found",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#r-always-displays-character-data-surrounded-with-double-quotes",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#r-always-displays-character-data-surrounded-with-double-quotes",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.2 R always displays character data surrounded with “double-quotes”",
    "text": "13.2 R always displays character data surrounded with “double-quotes”\n\n#------------------------------------------------------------------------------.\n# Even if you use 'single quotes' to create a character vector, R will display\n# the information with \"double quotes\". That is fine. Remember, 'single quotes'\n# and \"double quotes\" are basically the same to R.\n#------------------------------------------------------------------------------.\nfruit = c(\"apple\", \"banana\", \"pear\") # \"double-quotes\"\n\nfruit      # no surprises:    \"apple\" \"banana\" \"pear\"\n\n[1] \"apple\"  \"banana\" \"pear\"  \n\nvegetables = c('potato', 'carrot')   # assigned with 'single-quotes'\n\nvegetables # but displays with \"double-quotes\", i.e. \"potato\" \"carrot\"\n\n[1] \"potato\" \"carrot\"",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#many-functions-e.g.-length-rep-etc-work-with-all-types-of-vectors",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#many-functions-e.g.-length-rep-etc-work-with-all-types-of-vectors",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.3 Many functions (e.g. length, rep, etc) work with all types of vectors",
    "text": "13.3 Many functions (e.g. length, rep, etc) work with all types of vectors\n\n#-------------------------------------------------------------------.\n# Many functions that you already know (e.g. length, rep)\n# work with any type of vector (numeric, logical, character).\n#-------------------------------------------------------------------.\n\npeople &lt;- c(\"joe\", \"sue\", \"sam\", \"alice\")   # \"double quotes\"\npeople\n\n[1] \"joe\"   \"sue\"   \"sam\"   \"alice\"\n\nlength(people)  # 4\n\n[1] 4\n\nrep(people, 2)  # \"joe\" \"sue\" \"sam\" \"alice\" \"joe\" \"sue\" \"sam\" \"alice\" \n\n[1] \"joe\"   \"sue\"   \"sam\"   \"alice\" \"joe\"   \"sue\"   \"sam\"   \"alice\"\n\npeople          # people didn't change\n\n[1] \"joe\"   \"sue\"   \"sam\"   \"alice\"\n\n# As with numeric values, you don't need an actual variable.\n# You can type the character values directly in wherever you want \n# to use it. You can use the c() function to create a vector with \n# more than one value.\n\nrep(c(\"bob\", \"anne\"), 2) # \"bob\" \"anne\" \"bob\" \"anne\"\n\n[1] \"bob\"  \"anne\" \"bob\"  \"anne\"",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#surround-data-containing-quotes-with-apostrophes-and-vice-versa",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#surround-data-containing-quotes-with-apostrophes-and-vice-versa",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.4 Surround data containing quotes with apostrophes (and vice versa)",
    "text": "13.4 Surround data containing quotes with apostrophes (and vice versa)\n\n#-----------------------------------------------------------------------.\n# Mixing \"double quotes\" and 'single quotes'\n#\n# Don't place 'apostrophes' inside of 'apostrophes' and\n# don't place \"quotes\" inside of \"quotes\"\n# unless ... (keep reading)\n#\n#-----------------------------------------------------------------------.\n\n# You may type apostrophes inside of quotes (e.g. \"How's it going?\")\n# and quotes inside of apostrophes (e.g. 'He said \"Hello\" to Sue').\n\nsaying &lt;- c(\"What's up?\")              # apostrophe inside quotes - that's fine\nsaying\n\n[1] \"What's up?\"\n\nsentence &lt;- 'He said \"Hello\" to Sue.'  # \"quotes\" inside apostrophes is fine too\n\n# When you display information that has a \"quote\" inside of a character value\n# R will display the quotes that are inside of the value with a\n# backslash before the quote, i.e. \\\"\n\nsentence   # \"He said \\\"Hello\\\" to Sue.\"\n\n[1] \"He said \\\"Hello\\\" to Sue.\"\n\n# BACKSLASH      \\   (used to \"escape\" quotes or apostrophes)\n# FORWARD SLASH  /   (used for division, e.g. 3/4)",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#quoting-text-that-contains-the-same-type-of-quote-leads-to-errors.",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#quoting-text-that-contains-the-same-type-of-quote-leads-to-errors.",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.5 Quoting text that contains the same type of quote leads to errors.",
    "text": "13.5 Quoting text that contains the same type of quote leads to errors.\n\n#----------------------------------------------------------------------.\n# You will get ERRORS if you you type a quote inside of quotes\n# or an apostrophe inside of apostrophes. R will get confused.\n#\n# You can use \\\" or \\' to place a quote inside of quotes \n# or an apostrophe inside of apostrophes\n#----------------------------------------------------------------------.\n\n# The next line would cause an error since the entire value\n# is surrounded by apostrophes and it also contains an apostrophe\n# in the actual text (i.e. in the word How's).\n# (See below for an explanation of why this causes an error.)\n\nquestion &lt;- c('How's it going?')  # ERROR \n\nError: &lt;text&gt;:14:20: unexpected symbol\n13: \n14: question &lt;- c('How's\n                       ^\n\n\n\n# How does R interpret this line of code?\n# \n#   Step 1: R correctly interprets the 1st apostrophe (i.e. 'How ...)\n#           as the start of the quoted text.\n#\n#   Step 2: R interprets the 2nd apostrophe (ie. the apostrophe that\n#           appears after 'How') as the end of the quoted text.\n#\n#   Step 3: When R sees the 2nd apostrophe it assumes that the quotation\n#           is over and expects to see a closing parentheses. However, instead\n#           of a closing parentheses, the next symbol after the apostrophe\n#           is the letter s. Therefore R gets confused and reports and error.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#use-inside-double-quotes.-use-inside-single-quotes.",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#use-inside-double-quotes.-use-inside-single-quotes.",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.6 Use ” inside double-quotes. Use ’ inside single-quotes.",
    "text": "13.6 Use ” inside double-quotes. Use ’ inside single-quotes.\n\n# FIX 1 - surround with \"double quotes\"\nquestion &lt;- c(\"How's it going?\")  # this is fine\nquestion\n\n[1] \"How's it going?\"\n\n# FIX 2 - use \\' inside the character value\nquestion &lt;- c('How\\'s it going?')  # backslash-apostrophe also works\nquestion                           # \"How's it going?\"  (this is how it is displayed)\n\n[1] \"How's it going?\"",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#backslash-vs-forward-slash",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#backslash-vs-forward-slash",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.7 Backslash (\\) vs Forward Slash (/)",
    "text": "13.7 Backslash (\\) vs Forward Slash (/)\n\n# NOTE:\n#   There are two different slashes on most keyboards. \n#\n#   BACKSLASH, \"\\\", IS THE CORRECT SLASH:\n#     The \"backslash\" i.e. \"\\\" slants from the top left and towards the lower right.\n#     This is the slash to use in this situation.\n#\n#   FORWARD SLASH, \"/\", IS THE WRONG SLASH:\n#     The \"forward slash\" i.e. \"/\" slants from the lower left towards the top right.\n#     This is NOT the slash to use in this case. This slash is used for division.\n#\n#   MNEMONIC TO REMEMBER \\BACKSLASH vs /FORWARD SLASH\n#     Imagine that someone is walking along next to the text from left to right.\n#     Think of the slash as that person.\n#     The backslash, i.e. \\ , can be viewed as the person falling backwards.\n#     The forward slash, i.e. / , can be viewed as the person falling forwards.\n#",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#similarly-dont-type-a-double-quote-inside-of-double-quotes.",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#similarly-dont-type-a-double-quote-inside-of-double-quotes.",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.8 Similarly, don’t type a double-quote inside of double-quotes.",
    "text": "13.8 Similarly, don’t type a double-quote inside of double-quotes.\n\n# Don't place quotes inside of quotes.\n#\n# ERROR: (uncomment the next line to see that it is an error)\n\nsentence &lt;- c(\"Joe said \"Hello\" to Sue.\")  # ERROR - \"quote\" inside \"quotes\"\n\nError: &lt;text&gt;:5:26: unexpected symbol\n4: \n5: sentence &lt;- c(\"Joe said \"Hello\n                            ^\n\n\n\n# FIX 1 - surround the entire value with apostrophes (AKA 'single quotes')\nsentence &lt;- c('Joe said \"Hello\" to Sue.')     # this works\n\n# NOTE: When you display a character value that contains quotation marks, R\n# puts a backslash (\\) in front of the quotation mark that is inside the quote.\n# We'll explain more about this below.\nsentence   # \"Joe said \\\"Hello\\\" to Sue.\"     (this is how it is displayed)\n\n[1] \"Joe said \\\"Hello\\\" to Sue.\"\n\n# FIX 2 - use \\\" inside the character value\nsentence &lt;- c(\"Joe said \\\"Hello\\\" to Sue.\")\nsentence\n\n[1] \"Joe said \\\"Hello\\\" to Sue.\"\n\n# The backslashes demonstrate that the quotes with the backslashes are\n# inside of the character value and do not surround (i.e. delimit) the\n# character value.\nsentence   # \"Joe said \\\"Hello\\\" to Sue.\"\n\n[1] \"Joe said \\\"Hello\\\" to Sue.\"\n\n# You can use the cat function to display the sentence in a more readable\n# way. The output of cat doesn't display any quotes \n# around the sentence. cat also doesn't display the backslashes (\\) that\n# precede the quotes inside the sentence. In short, cat is used to \n# display the information in a \"human friendly\" way.\n# We will discuss the cat function in more depth below. However, for now\n# you can use cat to display the text in a more readable manner. \n\ncat(sentence)    # Joe said \"Hello\" to Sue\n\nJoe said \"Hello\" to Sue.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#mixing-single-quotes-and-double-quotes-in-the-same-text.",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#mixing-single-quotes-and-double-quotes-in-the-same-text.",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.9 MIXING ‘single quotes’ and “double quotes” in the same text.",
    "text": "13.9 MIXING ‘single quotes’ and “double quotes” in the same text.\n\n#-----------------------------------------------------------------.\n# MIXING 'single quotes' and \"double quotes\" in the same text.\n#-----------------------------------------------------------------.\n\n# If your data contains both quotation marks and apostrophes, you \n# should surround your data with either type of quote and then \n# use backslashes in front of that type of quote in your data.\n# \n# The following are all valid and all result in the same thing.\n\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# One way - surround with \"double quotes\" (i.e. quotation marks), use \\\" in the data\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\nsaying = \"He's going to ask Sue \\\"Will you marry me\\\". He hopes she says yes.\"\nsaying        # this is what is stored\n\n[1] \"He's going to ask Sue \\\"Will you marry me\\\". He hopes she says yes.\"\n\ncat(saying)   # this is a \"human friendly\" view of your data\n\nHe's going to ask Sue \"Will you marry me\". He hopes she says yes.\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# Another way - surround with 'single quotes' (i.e. apostrophes), use \\' in the data\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nsaying = 'He\\'s going to ask Sue \"Will you marry me\". He hopes she says yes.'\nsaying        # this is what is stored\n\n[1] \"He's going to ask Sue \\\"Will you marry me\\\". He hopes she says yes.\"\n\ncat(saying)   # this is a \"human friendly\" view of your data\n\nHe's going to ask Sue \"Will you marry me\". He hopes she says yes.\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# Yet another way - the backslashes are ok, even if they aren't necessary\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n# The following uses \\' and \\\" in the data. \n# You don't need \\\" since the data is surrounded with 'single quotes'.\n# The \\\" is unnecessary in this case but it doesn't hurt.\n\nsaying = 'He\\'s going to ask Sue \\\"Will you marry me\\\". He hopes she says yes.'\nsaying        # this is what is stored\n\n[1] \"He's going to ask Sue \\\"Will you marry me\\\". He hopes she says yes.\"\n\ncat(saying)   # this is a \"human friendly\" view of your data\n\nHe's going to ask Sue \"Will you marry me\". He hopes she says yes.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#catvalue1-value2-etc.",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#catvalue1-value2-etc.",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.10 cat(value1, value2, etc.)",
    "text": "13.10 cat(value1, value2, etc.)\n\n###########################################################################.\n# cat( value1, value2, etc. )\n#\n# WHAT DOES IT DO\n#\n# The cat function is used to display information to the screen in a \n# user friendly way. The output of cat will NOT include extra backslash characters.\n# The output of cat will also not be surrounded with quotes.\n#\n#\n# YOU CANNOT \"USE\" THE OUTPUT OF CAT (other than to display information)\n#\n# The output of cat iS ONLY used to display information to the screen.\n# You cannot capture the output of cat to a variable or use cat in a\n# larger expression. It is simply used to display information to the screen.\n# See below for an example of what happens if you try to use the output \n# from cat in a larger context (hint ... it doesn't work).\n#\n#\n# SOME TRIVIA - WHY IS IT CALLED CAT? \n#\n# If you're wondering why it's called \"cat\", it is because \"cat\" is short for\n# the English word \"concatenate\". \"concatenate\" means to \"link things together\"\n# - https://www.dictionary.com/browse/concatenate . The cat function can take\n# multiple pieces of info and display them all together to the screen (see \n# the example code below). Incidentally, the \"c()\" function is also short \n# for \"concatenate\" since it \"concatenates\" (or combines) multiple different\n# vectors into a single combined vector.\n#\n# The command \"cat\" predated the creation of R. It originated with the\n# Unix operating system in the 1970's and was carried over to the Linux\n# operating system which is very popular today. As often happens with\n# programming languages and technology, newer languages and technology (e.g. R)\n# inherit many of the features (i.e. cat) that were present in older\n# languages and technology (e.g. Unix). \n###########################################################################.\n\n#----------------------------------------------------------------.\n# cat displays values to the screen in a \"human friendly\" way.\n#----------------------------------------------------------------.\n\n# Set a character value ...\nsentence &lt;- \"Joe said \\\"Hello\\\" to Sue.\"\n\n# Display the results ...\n#\n# To see the actual character value without the backslashes, you can use the cat function.\n# Compare the difference in output of the following two lines.\n# Notice that for cat there are no quotes around the text and no backslashes within the text.\n\nsentence       # \"Joe said \\\"Hello\\\" to Sue.\"\n\n[1] \"Joe said \\\"Hello\\\" to Sue.\"\n\ncat(sentence)  # Joe said \"Hello\" to Sue.  (no backslashes, no \"quotes\" surrounding the data)\n\nJoe said \"Hello\" to Sue.\n\n# You can use cat to output multiple pieces of information to the screen.\n# This includes multiple values within a single vector as well as \n# multiple different vectors.\n# By default all items are separated with spaces.\n\npeople = c(\"joe\", \"sue\", \"bill\")\nfood = c(\"apple\", \"orange\", \"pear\")\ncat(people, food)   # just outputs all values\n\njoe sue bill apple orange pear\n\n# You can change the separator to anything you like by using the sep argument\ncat (people, food, sep=\"-\")      \n\njoe-sue-bill-apple-orange-pear\n\ncat (people, food, sep=\":---:\")  # the separator can be anything, even multiple characters\n\njoe:---:sue:---:bill:---:apple:---:orange:---:pear\n\ncat (people, food, sep=\"\")       # use the \"\" empty string to remove the separator\n\njoesuebillappleorangepear\n\n# another example\ntf = TRUE\ngrade = 100\nperson = \"Bill\"\ncat ( \"It is\", tf, \"that\", person, \"got\", grade, \"on the test!\")\n\nIt is TRUE that Bill got 100 on the test!",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#wilf---up-to-here---after-class-9",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#wilf---up-to-here---after-class-9",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.11 WILF - UP TO HERE - AFTER CLASS 9",
    "text": "13.11 WILF - UP TO HERE - AFTER CLASS 9",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#n-t",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#n-t",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.12 \\n    \\t    \\\\",
    "text": "13.12 \\n    \\t    \\\\\n\n#########################################################.\n# The backslash \\ \n#########################################################.\n\n# The backslash character ( \\ ) is used to change the meaning from \n# the character that follows it. When used before a \"double quote\" (i.e. \\\" ) or\n# a 'single quote' (i.e. \\' ) it takes the special meaning of the quote away.\n# The quote is no longer used to indicate the end of a quotation but becomes intead\n# simply part of the text.\n# \n# In a similar way, the backslash changes the meaning of some other characters.\n# For example\n#    \\n is used for an ENTER (i.e. a \"newline\").\n#    \\t is used for a \"tab\" character\n#    \\\\ is used for an actual backslash character.\n#\n# EXAMPLE\n\ncat(\"This is line 1.\\nThis is line 2.\")   # displayed on two different lines\n\nThis is line 1.\nThis is line 2.\n\ncat(\"This is line 1.\\n\\nWe just skipped a line.\")  # use double \\n\\n to skip a line\n\nThis is line 1.\n\nWe just skipped a line.\n\ncat(\"Hi.\\tI really like pizza.\\n\\tI don't like broccoli.\")  # two lines, notice the tabs\n\nHi. I really like pizza.\n    I don't like broccoli.\n\ncat(\"This ... \\\\ ... is a backslash.\")\n\nThis ... \\ ... is a backslash.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#practice",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#practice",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.13 — Practice —",
    "text": "13.13 — Practice —\n\n#...........................................................................\n# QUESTION   TOPICS: cat, backslash\n#\n# (a) Write a single R command that assigns the following message\n#     to the variable named message.\n#  \n#      The '\\' is known as a \"backslash\". \n#      It's used to escape the meaning of\n#      the character that follows it.\n#\n# (b) display the message variable to the screen by just typing the word, message.\n# (c) Use the cat command to display the message to the screen.\n#...........................................................................\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nmessage = \"\\tThe '\\\\' is known as a \\\"backslash\\\".\\n\\tIt's used to escape the meaning of\\n\\tthe character that follows it.\"\n\nmessage       # this shows the backslashes, ie. \\n   \\t   \\\"   \\'  \n\n[1] \"\\tThe '\\\\' is known as a \\\"backslash\\\".\\n\\tIt's used to escape the meaning of\\n\\tthe character that follows it.\"\n\ncat(message)  # this changes \\n into ENTER, \\t into tab, \\\" into \" and \\' into '\n\n    The '\\' is known as a \"backslash\".\n    It's used to escape the meaning of\n    the character that follows it.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#dont-use-cat-inside-a-larger-expression.",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#dont-use-cat-inside-a-larger-expression.",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.14 DON’T use cat inside a larger expression.",
    "text": "13.14 DON’T use cat inside a larger expression.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Do NOT use the output of cat inside a larger expression.  ####\n# (you CAN use the output of most other functions in a larger expression)\n# \n# See examples below\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#-----------------------------------------------.\n# SETUP SOME DATA TO USE IN THE EXAMPLES BELOW\n#-----------------------------------------------.\n\n# people and food are parallel vectors \n# - i.e. joe's favorite food is apple, sue's favorite food is orange, etc.\n\npeople       = c(\"joe\", \"sue\", \"bill\")    \nfavoriteFood = c(\"apple\", \"orange\", \"pear\")\n\npeople[2] # use the number 2 to get the 2nd person\n\n[1] \"sue\"\n\ncat(2)    # this just uses cat to display the number 2 on the screen\n\n2\n\n# . . . .. . . . . . . . . . . . . . . . . . . . . .. . . \n# ONLY USE cat TO DISPLAY INFO TO THE SCREEN.\n# DON'T USE CAT FOR ANYTHING ELSE!\n# . . . .. . . . . . . . . . . . . . . . . . . . . .. . . \n\n#...........\n# EXAMPLE 1\n#...........\n\n# ONLY USE cat TO DISPLAY INFO TO THE SCREEN.\n# DON'T USE CAT FOR ANYTHING ELSE - THIS DOESN'T WORK\npeople[cat(2)]   # error\n\n2\n\n\ncharacter(0)\n\n# HOWEVER, THIS WORKS - use an expression to display the 2nd person\npeople[ 1 + 1 ]  # sue\n\n[1] \"sue\"\n\n#...........\n# EXAMPLE 2\n#...........\n\n# ONLY USE cat TO DISPLAY INFO TO THE SCREEN.\n# DON'T USE CAT FOR ANYTHING ELSE - THIS DOESN'T WORK\n\ny = cat(people[3])   # \"bill\"\n\nbill\n\ny                    # NULL\n\nNULL\n\n# Set the variable x to the name of the 2nd person\nx = people[2]   # this works\nx\n\n[1] \"sue\"",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#nchar-returns-the-number-of-symbols-letters-digits-spaces-etc-in-a-value.",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#nchar-returns-the-number-of-symbols-letters-digits-spaces-etc-in-a-value.",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.15 nchar returns the number of symbols (letters, digits, spaces, etc) in a value.",
    "text": "13.15 nchar returns the number of symbols (letters, digits, spaces, etc) in a value.\n\n########################################################.\n# a few character functions :    nchar, paste0, paste   \n# (there are many more): \n########################################################.\n\n#---------------------------------------------------------.\n# nchar returns the number of characters in a value.\n# All characters, including spaces and punctuation count as part of the value.\n#---------------------------------------------------------.\n\nnchar(c(\"O.K.\", \"hello\", \"there\", \"hello there\"))    \n\n[1]  4  5  5 11\n\nwierdGreeting = \"hello\\n\\tthere\"\ncat(wierdGreeting)\n\nhello\n    there\n\nnchar(wierdGreeting)\n\n[1] 12",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#paste-and-paste0-combine-character-values-from-different-vectors",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#paste-and-paste0-combine-character-values-from-different-vectors",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.16 paste and paste0 combine character values from different vectors",
    "text": "13.16 paste and paste0 combine character values from different vectors\n\n#-------------------------------------------------------------------.\n# paste and paste0 functions are used to combine character values\n#-------------------------------------------------------------------.\npaste0 ( \"hi\", \"there\")   # paste0 does not leave any space between values\n\n[1] \"hithere\"\n\n# You can capture the output of these functions in a variable\n\ngreeting = paste0(\"hi\",  \"there\", \"joe\")\ngreeting\n\n[1] \"hitherejoe\"\n\nnchar(greeting)\n\n[1] 10\n\n# paste (as opposed to paste0)\npaste(\"hi\", \"there\")\n\n[1] \"hi there\"\n\npaste(\"hi\", \"there\", \"joe\")  # paste by default leaves a space\n\n[1] \"hi there joe\"\n\n# you can change the separator with a sep argument \npaste(\"hi\", \"there\", \"joe\", sep = \"-\")\n\n[1] \"hi-there-joe\"\n\nmessage = paste(\"hi\", \"there\", \"joe\", sep = \"-\")\nmessage\n\n[1] \"hi-there-joe\"\n\nmessage2 = cat(\"hi\", \"there\", \"joe\", sep = \"-\")\n\nhi-there-joe\n\nmessage2\n\nNULL\n\nlength(message)\n\n[1] 1\n\nlength(message2)\n\n[1] 0\n\n# the empty string is \"\" or ''\npaste(\"hi\", \"there\", \"joe\", sep = \"\")   # exact same thing as paste0\n\n[1] \"hitherejoe\"\n\n# Like most functions, paste0 and paste work with the recycling rule\n\nfirstNames = c(\"joe\",\"chaim\",\"juan\")\nfirstNames\n\n[1] \"joe\"   \"chaim\" \"juan\" \n\npaste (\"hello\", firstNames)\n\n[1] \"hello joe\"   \"hello chaim\" \"hello juan\" \n\npaste0 (\"hello\", firstNames)\n\n[1] \"hellojoe\"   \"hellochaim\" \"hellojuan\" \n\n# becomes             paste0(  c(\"hello\",\"hello\",\"hello\"), c(\"joe\",\"chaim\",\"juan\"))\n# vector operations   \"hellojoe\"  \"hellochaim\"  \"hellojuan\"\n\n#...........................................................\n# Using paste with vectors that have more than one value\n#...........................................................\nfirstNames = c(\"joe\",\"chaim\",\"juan\")\nfirstNames\n\n[1] \"joe\"   \"chaim\" \"juan\" \n\nlastNames = c(\"smith\", \"schwartz\", \"rodriguez\")\nlastNames\n\n[1] \"smith\"     \"schwartz\"  \"rodriguez\"\n\nfullNames = paste (firstNames, lastNames)\nfullNames\n\n[1] \"joe smith\"      \"chaim schwartz\" \"juan rodriguez\"\n\nlength(firstNames)\n\n[1] 3\n\nlength(lastNames)\n\n[1] 3\n\nlength(fullNames)\n\n[1] 3\n\n# sep argument is used to separate the values being pasted together\npaste(firstNames, lastNames, sep=\"-\")\n\n[1] \"joe-smith\"      \"chaim-schwartz\" \"juan-rodriguez\"\n\npaste(firstNames, lastNames, sep=\" ...---... \")\n\n[1] \"joe ...---... smith\"      \"chaim ...---... schwartz\"\n[3] \"juan ...---... rodriguez\"\n\npaste(firstNames, lastNames, sep=\"'s last name is \")\n\n[1] \"joe's last name is smith\"      \"chaim's last name is schwartz\"\n[3] \"juan's last name is rodriguez\"\n\npaste(firstNames, lastNames, sep=\"\")   # same as paste0(firstNames, lastNames)\n\n[1] \"joesmith\"      \"chaimschwartz\" \"juanrodriguez\"\n\n# Three (or more) vectors also works\npaste(c(\"abc\",\"def\"), c(\"UVW\",\"XYZ\"), c(\"012\",\"345\"))\n\n[1] \"abc UVW 012\" \"def XYZ 345\"\n\npaste(c(\"abc\",\"def\"), c(\"UVW\",\"XYZ\"), c(\"012\",\"345\"), sep = \"\")  # no more spaces\n\n[1] \"abcUVW012\" \"defXYZ345\"\n\npaste0(c(\"abc\",\"def\"), c(\"UVW\",\"XYZ\"), c(\"012\",\"345\"))  # same thing\n\n[1] \"abcUVW012\" \"defXYZ345\"\n\n?paste\n\nstarting httpd help server ... done\n\n# Recycling rule \npaste(c(\"abc\",\"def\"), c(\"RST\", \"UVW\",\"XYZ\"), sep=\"\")  # \"abcRST\" \"defUVW\" \"abcXYZ\"\n\n[1] \"abcRST\" \"defUVW\" \"abcXYZ\"\n\npaste(c(\"a\",\"b\"), c(\"x\",\"y\",\"z\"), \"somethingElse\", sep=\" \")\n\n[1] \"a x somethingElse\" \"b y somethingElse\" \"a z somethingElse\"\n\n#.....................................................................\n# collapse argument is used to collapse entire output into a \n# vector that contains a single item\n#\n# The value of the collapse argument is used to separate between the different\n# values that are being collapsed.\n#.....................................................................\n\n# example of using collapse\npaste(c(\"abc\",\"def\"), c(\"RST\", \"UVW\",\"XYZ\"), sep=\"\") # without collapse\n\n[1] \"abcRST\" \"defUVW\" \"abcXYZ\"\n\npaste(c(\"abc\",\"def\"), c(\"RST\", \"UVW\",\"XYZ\"), sep=\"\", collapse=\"-\") # with collapse\n\n[1] \"abcRST-defUVW-abcXYZ\"\n\n# another example\nanswer = paste(firstNames, lastNames, sep=\"---\") # without collapse \nanswer\n\n[1] \"joe---smith\"      \"chaim---schwartz\" \"juan---rodriguez\"\n\nlength(answer)\n\n[1] 3\n\nanswer = paste(firstNames, lastNames, sep=\"---\", collapse=\"@@@\") # with collapse\nanswer\n\n[1] \"joe---smith@@@chaim---schwartz@@@juan---rodriguez\"\n\nlength(answer)\n\n[1] 1\n\n# One or both of sep and collapse arguments can be the \"empty string\" (i.e. \"\")\npaste(firstNames, lastNames, sep=\"-\", collapse=\"\")\n\n[1] \"joe-smithchaim-schwartzjuan-rodriguez\"\n\npaste(firstNames, lastNames, sep=\"\", collapse=\"-\")\n\n[1] \"joesmith-chaimschwartz-juanrodriguez\"\n\npaste(firstNames, lastNames, sep=\"\", collapse=\"\")\n\n[1] \"joesmithchaimschwartzjuanrodriguez\"\n\n# student's question\npaste(firstNames, lastNames, sep=\" \", collapse=\"\") # sep is space\n\n[1] \"joe smithchaim schwartzjuan rodriguez\"\n\npaste(firstNames, lastNames, collapse=\"\")  # same thing (default for sep is a space)\n\n[1] \"joe smithchaim schwartzjuan rodriguez\"",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#cant-do-math-with-character-values-1-1-error",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#cant-do-math-with-character-values-1-1-error",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.17 Can’t do math with “character” values: “1” + “1” = ERROR",
    "text": "13.17 Can’t do math with “character” values: “1” + “1” = ERROR\n\n#---------------------------------------------------------------------------.\n# You cannot do math with character data - even if it looks like a number\n#---------------------------------------------------------------------------.\n\n\"5\" * \"3\"   # ERROR\n\nError in \"5\" * \"3\": non-numeric argument to binary operator\n\n5 * 3       # that's better\n\n[1] 15\n\n# Another example\n\ncharNums = c(\"85\", \"19\" ,\"103\",  \"100\", \"22\", \"099\" , \"9\" , \"1000000\", \"2000\")\ncharNums\n\n[1] \"85\"      \"19\"      \"103\"     \"100\"     \"22\"      \"099\"     \"9\"      \n[8] \"1000000\" \"2000\"   \n\nsum(charNums)  # ERROR - no math with character values\n\nError in sum(charNums): invalid 'type' (character) of argument",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#review---sort-function-with-numeric-vectors",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#review---sort-function-with-numeric-vectors",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.18 review - sort function with numeric vectors",
    "text": "13.18 review - sort function with numeric vectors\n\n###########################################################.\n#\n# sort function - how it works with character values\n#\n###########################################################.\n\n#------------------------------------.\n# numeric - numbers sort as you'd expect\n#------------------------------------.\n\nnums = c(85, 19 ,103,  100, 22, 099 , 9 , 1000000, 2000)\n\nsort (nums) # 9  19  22  85  99  100  103  2000  1000000\n\n[1]       9      19      22      85      99     100     103    2000 1000000\n\n# you can sort in decreasing order too\nsort (nums, decreasing=TRUE) # 9  19  22  85  99  100  103  2000  1000000\n\n[1] 1000000    2000     103     100      99      85      22      19       9\n\n?sort  # see the help for more info.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#sort-function-with-logical-i.e.-truefalse-vectors",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#sort-function-with-logical-i.e.-truefalse-vectors",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.19 sort function with logical (i.e. TRUE/FALSE) vectors",
    "text": "13.19 sort function with logical (i.e. TRUE/FALSE) vectors\n\n#------------------------------------.\n# logical - FALSE is less than TRUE\n#------------------------------------.\ntf = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)\nsort (tf)   # FALSE FALSE FALSE TRUE TRUE TRUE\n\n[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE\n\nsort (tf, decreasing = TRUE)   # TRUE TRUE TRUE FALSE FALSE FALSE\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#sort-function-with-character-vectors",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#sort-function-with-character-vectors",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.20 sort function with “character” vectors",
    "text": "13.20 sort function with “character” vectors\n\n#----------------------------------------------------------------------------.\n# sorting character data\n#\n# In general, sort will arrange character data in alphabetical order.\n#\n# The sort order of \"special characters\" (@%#$ etc) spaces, numbers,\n# CAPITALS vs lowercase depends on the \"locale\" of your computer,\n# e.g. USA, Europe, Israel, etc.\n# Discussion of \"locale\" is beyond the scope of this document. \n#----------------------------------------------------------------------------.\n\nstuff = c(\"table\", \"@table\", \"  table\", \"book case\", \"101 dalmations\", \"apple\", \"ape\", \"apex\")\nstuff\n\n[1] \"table\"          \"@table\"         \"  table\"        \"book case\"     \n[5] \"101 dalmations\" \"apple\"          \"ape\"            \"apex\"          \n\nsort (stuff)  # \"  table\"        \"@table\"         \"101 dalmations\" \"ape\"            \"apex\"           \"apple\"          \"book case\"      \"table\"  \n\n[1] \"  table\"        \"@table\"         \"101 dalmations\" \"ape\"           \n[5] \"apex\"           \"apple\"          \"book case\"      \"table\"",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#sorting-character-numbers-eg.-sort2-100-30-100-2-30",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#sorting-character-numbers-eg.-sort2-100-30-100-2-30",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.21 sorting “character” numbers, eg. sort(“2”, “100”, “30”) # “100” “2” “30”",
    "text": "13.21 sorting “character” numbers, eg. sort(“2”, “100”, “30”) # “100” “2” “30”\n\n#.................................................................................\n# If numbers are stored as characters then they will sort as characters do.\n#\n# The first character is the most important character for the sorting order. \n# Only when two of the first characters are the same will the 2nd character be important, etc.\n#.................................................................................\nsort(charNums) # \"099\"  \"100\"  \"1000000\"  \"103\"  \"19\"  \"2000\"  \"22\"  \"85\"  \"9\" \n\n[1] \"099\"     \"100\"     \"1000000\" \"103\"     \"19\"      \"2000\"    \"22\"     \n[8] \"85\"      \"9\"      \n\n# EXPLANATION OF THE SORT ORDER\n#\n# \"099\" sorts first because 0 is the \"earliest\" character in the \n# sequence 0,1,2,3,4,5,6,7,8,9\n#\n# 100 is next because \"1\" is after \"0\" in the sequence 01,2,3,4,5,6,7,8,9\n#\n# 1000000 is next because the first 3 characters, i.e. \"100\" is the same\n# as the previous value, i.e.\"100\" but \"1000000\" is longer than \"100\" in characters\n# so it sorts after \"100\". This is similar to why \"be\" is followed by \"bed\" in the dictionary\n# \"bed\" contains \"be\" but is longer than \"be\".\n#\n# \"103\" is next because the \"10\" is the same as the first two characters of the \n# previous value but the third character, i.e. \"3\" is \"later\" in the list 0,1,2,3,4,5,6,7,8,9\n# than is \"0\", the third character of \"1000000\".\n#\n# \"19\" is next because \"9\" is later than the \"0\" from \"103\"\n#\n# \"2000\" is next because the \"2\" is later than the \"1\" from \"19\"\n#\n# \"22\" is next because the 2nd \"2\" is later then the first \"0\" from \"2000\"\n#\n# \"85\" is next because the \"8\" is later than the first \"2\" from \"22\"\n#\n# \"9\" is last because it has the latest first character from the list 01,2,3,4,5,6,7,8,9 from\n# all of the values being sorted.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#some-functions-automatically-convert-1-to-1",
    "href": "000350-k_k-characterValues_cat_nchar_paste_paste0-v060.html#some-functions-automatically-convert-1-to-1",
    "title": "13  “character” values (also known as “strings”), cat(), nchar(), paste(), paste0()",
    "section": "13.22 Some functions automatically convert “1” to 1",
    "text": "13.22 Some functions automatically convert “1” to 1\n\n##############################################################.\n# Sometimes, R implicitly (i.e. automatically) converts\n# character values into numeric values. See one example\n# shown below with the rep function.\n##############################################################.\n\n# The rep function expects a numeric value as its second argument.\n\nrep(\"hello\", 5)  # \"hello\" is character, 5 is numeric\n\n[1] \"hello\" \"hello\" \"hello\" \"hello\" \"hello\"\n\n# If instead you specify a character value that contains a \n# number, the rep function will convert the character into a \n# number.\n\nrep(\"hello\", \"5\")  #  \"5\" is converted to 5\n\n[1] \"hello\" \"hello\" \"hello\" \"hello\" \"hello\"\n\n# However such conversions are NOT guaranteed to happen for all functions.\n# For example, the 2nd argument to the round function is used to specify \n# to what position to round the number. For example the following line\n# rounds 3.579 to the 1st decimal place\n\nround(3.579, 1)   # 3.6\n\n[1] 3.6\n\n# If you specify the character value \"1\" for the 2nd argument \n# instead of the number 1 you will get an ERROR since the 2nd argument\n# is supposed to be numeric.\n\nround(3.579, \"1\")  # ERROR - \"1\" is a character value, should be a number\n\nError in round(3.579, \"1\"): non-numeric argument to mathematical function\n\n# Bottom line - the functions that are built into R are not consistent\n# in how they handle this issue.",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>\"character\" values (also known as \"strings\"), cat(), nchar(), paste(), paste0()</span>"
    ]
  },
  {
    "objectID": "000350-l_i-usingCatToDebugYourCode-v060.html",
    "href": "000350-l_i-usingCatToDebugYourCode-v060.html",
    "title": "14  Using cat to help debug your code.",
    "section": "",
    "text": "# Sometimes if you write a function and it doesn't work as expected it is\n# helpful to use cat to help figure out what the problem is. This is an\n# alternative to using the debugger. (The \"debugger\" is covered in another\n# section of these notes).\n\n# For example, someone wrote the following function whose intention was\n# to swap the first and last values of a vector. However, it doesn't\n# seem to work correctly. \n\nswapFirstAndLast = function(vec) {\n\n  vec[1] = vec[length(vec)]\n\n  vec[length(vec)] = vec[1]\n  \n  return(vec)\n}\n\n# This doesn't return the correct value. \n# The intention was to return 50 20 30 40 10\n# but instead it returns 50 20 30 40 50\n# It may not be immediately obvious what the problem is.\nswapFirstAndLast(c(10,20,30,40,50)) \n\n[1] 50 20 30 40 50\n\n#--------------------------------------------------------------------.\n# You cannot display information from inside a function without cat.\n#--------------------------------------------------------------------.\n\n# To try to figure out what is going on, it might be tempting to display\n# the value of the variables as the function is being processed. \n# However, this does not work.\n\nswapFirstAndLast = function(vec) {\n  \n  vec    # You will NOT see this on the screen (we're in a function)\n  \n  vec[1] = vec[length(vec)]\n  \n  vec    # You will NOT see this on the screen (we're in a function)\n  \n  vec[length(vec)] = vec[1]\n\n  vec    # You will NOT see this on the screen (we're in a function)\n  \n  return(vec)\n}\n\nswapFirstAndLast(c(10,20,30,40,50)) \n\n[1] 50 20 30 40 50\n\n#--------------------------------------------------------------------.\n# You CAN display information from inside a function WITH cat\n# to help figure out the problem.\n#--------------------------------------------------------------------.\n\n# To help figure out what's going on, we can use cat to display the \n# values of our variables as the function is being executed.\n#\n# If we run the following function, we will see that the \n# at first vec contains exactly what we passed to it, i.e.\n#\n#     Before 1st assignment: 10 20 30 40 50 \n# \n# After the 1st assignment, the first position contains the last number, i.e.\n#\n#     After 1st assignment: 50 10 20 30 40 50 \n#\n# By just seeing this output we should realize our mistake. By the time\n# the 2nd assignment happens, the value that was in the first position\n# of vec is gone. It was overwritten by the value from the last position.\n# Therefore when the 2nd assignment finally runs the first value is the\n# same as the last value.\n\nswapFirstAndLast = function(vec) {\n  \n  cat(\"Before 1st assignment: \" , vec, \"\\n\")    # display the value of vec\n  \n  vec[1] = vec[length(vec)]\n  \n  cat(\"After 1st assignment: \" , vec, \"\\n\")    # display the value of vec\n  \n  vec[length(vec)] = vec[1]\n  \n  cat(\"After 2nd assignment: \" , vec, \"\\n\")    # display the value of vec\n  \n  return(vec)\n}\n\nswapFirstAndLast(c(10,20,30,40,50)) \n\nBefore 1st assignment:  10 20 30 40 50 \nAfter 1st assignment:  50 20 30 40 50 \nAfter 2nd assignment:  50 20 30 40 50 \n\n\n[1] 50 20 30 40 50\n\n#--------------------------------------------------------------------.\n# Once we found the problem, we can fix it.\n# We can then remove the calls to the cat function.\n# In this case, one way to fix this specific problem is to \n# copy both values in the same command.\n#--------------------------------------------------------------------.\n\nswapFirstAndLast = function(vec) {\n  \n  vec[c(1, length(vec))] = vec[c(length(vec),1)]\n  \n  return(vec)\n}\n\nswapFirstAndLast(c(10,20,30,40,50)) \n\n[1] 50 20 30 40 10",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Using cat to help debug your code.</span>"
    ]
  },
  {
    "objectID": "000350-m_l-parallelVectors-v060.html",
    "href": "000350-m_l-parallelVectors-v060.html",
    "title": "15  Parallel vectors",
    "section": "",
    "text": "############################################.\n############################################.\n## \n## Parallel vectors\n##\n############################################.\n############################################.\n\n# Sometimes it is convenient to store multiple different pieces of information\n# in different vectors. For example the four vectors below store information\n# about the names of students in a class, their genders, their year in school\n# and their grades in the class.\n#\n# For example the 1st entry in each array is information about a student named \"joe\".\n# His name is \"joe\", he is male (i.e. \"m\"), he is a \"senior\" and he got an 85 in the class.\n# The 2nd student is \"sue\", she is female (\"f\"), she is a \"freshman\" and got an 82 in the class.\n# etc. \n#\n# Data that is arranged between multiple vectors in this way are often\n# referred to as \"parallel vectors\". It is up to the programmer to make sure that \n# the vectors all have the same number of entries and that data in the vectors \n# remain in the proper order.\n#\n# Note that there are better ways to store this type\n# of information that we have not learned about yet (i.e. dataframes). However\n# parallel vectors are a concept that is also important to understand and \n# will help you to understand dataframes when we get to them.\n\nstudents &lt;- c(\"joe\",    \"sue\",      \"al\",     \"anne\",      \"esther\", \"bob\")\ngender   &lt;- c(\"m\",      \"f\",        \"m\",      \"f\",         \"f\",      \"m\")\nyear     &lt;- c(\"senior\", \"freshman\", \"senior\", \"sophomore\", \"senior\", \"senior\")\ngrades   &lt;- c(85,       65,         70,        95,         93,       65)\nhonors   &lt;- c(TRUE,     FALSE,      FALSE,     TRUE,       FALSE,    FALSE)\nstudents\n\n[1] \"joe\"    \"sue\"    \"al\"     \"anne\"   \"esther\" \"bob\"   \n\ngender\n\n[1] \"m\" \"f\" \"m\" \"f\" \"f\" \"m\"\n\nyear\n\n[1] \"senior\"    \"freshman\"  \"senior\"    \"sophomore\" \"senior\"    \"senior\"   \n\ngrades\n\n[1] 85 65 70 95 93 65\n\nhonors\n\n[1]  TRUE FALSE FALSE  TRUE FALSE FALSE\n\n# Show the grades of 80 and up\ngrades [ grades &gt; 80 ]\n\n[1] 85 95 93\n\n# original      : grades [ grades &gt; 80 ]\n#               : grades [ c(85,65,70,95,93,65) &gt; 80]\n# recycling rule: grades [ c(85,65,70,95,93,65) &gt; c(80,80,80,80,80,80)]\n#               : grades [ c(85&gt;80, 65&gt;80, 70&gt;80, 95&gt;80, 93&gt;80, 65&gt;80) ]\n#               : grades [ c(TRUE, FALSE, FALSE, TRUE, TRUE, FALSE) ]\n#               : 85 95 93\n\n\n# show the names of the students who got those grades\nstudents [ grades &gt; 80 ]\n\n[1] \"joe\"    \"anne\"   \"esther\"\n\n# original      : students [ grades &gt; 80 ]\n#               : students [ c(85,65,70,95,93,65) &gt; 80]\n# recycling rule: students [ c(85,65,70,95,93,65) &gt; c(80,80,80,80,80,80)]\n#               : students [ c(85&gt;80, 65&gt;80, 70&gt;80, 95&gt;80, 93&gt;80, 65&gt;80) ]\n#               : students [ c(TRUE, FALSE, FALSE, TRUE, TRUE, FALSE) ]\n#               : \"joe\" \"anne\" \"esther\"\n\n\n\n\n# show the genders of those students\ngender[ grades &gt; 80]\n\n[1] \"m\" \"f\" \"f\"\n\n# show the years of those students\nyear[ grades &gt; 80]\n\n[1] \"senior\"    \"sophomore\" \"senior\"   \n\n# show the names of the women in the class\n\nstudents [  gender == \"f\" ]\n\n[1] \"sue\"    \"anne\"   \"esther\"\n\n####################################################################.\n# QUESTION - Refer to the data above.  (student, gender, year, grades, honors)\n#\n# (a) Write a command to show the average grade for the seniors in the class\n#\n# (b) Write a command to show the highest grade that a senior got.\n#\n# (c) Show the names of the students who got above the average grade of the seniors in the class\n#\n# (d) Show the names of the seniors who got above the average grade of the seniors in the class\n####################################################################.\n\n\n# (a) Write a command to show the average grade for the seniors in the class\n\n# mean(  THE GRADES FOR THE SENIORS )\n\n# mean(  grades [ year == \"senior\" ]  )\n\n\n# (b) Write a command to show the highest grade that a senior got.\n#\n# max()\n#\nmax ( grades [ year == \"senior\" ]  )\n\n[1] 93\n\n# (c) Show the names of the students who got above the average grade of the seniors in the class\n\n# student [ SOMETHING_HERE ]\n\navgGradeOfSeniors = mean(  grades [ year == \"senior\" ]  )\n\nstudents [ grades &gt; avgGradeOfSeniors ]\n\n[1] \"joe\"    \"anne\"   \"esther\"\n\n# BTW- not all of these students are seniors\nyear [ grades &gt; avgGradeOfSeniors ]\n\n[1] \"senior\"    \"sophomore\" \"senior\"   \n\n# (d) Show the names of the seniors who got above the average grade of the seniors in the class\n\n\n\n\n\n# ANSWER - (a) Write a command to show the average grade for the seniors in the class\nmean( grades [   year == \"senior\"      ] )\n\n[1] 78.25\n\n# ANSWER - (b) Write a command to show the highest grade that a senior got.\nmax ( grades [ year == \"senior\" ] )\n\n[1] 93\n\n# ANSWER - (c) Show the names of the students who got above the average grade of the seniors in the class\n\n# In more than one line\navgGradeOfSeniors = mean( grades [ year == \"senior\" ] )\nstudents[ grades &gt; avgGradeOfSeniors ]\n\n[1] \"joe\"    \"anne\"   \"esther\"\n\n# Same thing all in one line \nstudents [ grades &gt; mean( grades [ year == \"senior\" ] ) ]\n\n[1] \"joe\"    \"anne\"   \"esther\"\n\n# ANSWER - (d) Show the names of the seniors who got above average of the seniors in the class\n\n# Note that this is different from question (c). \n#\n# Question (c) asked for ANY student in the class who scored better than\n# the avg senior. The final answer may show students from ANY year, e.g.\n# freshmen, sophomores, juniors and seniors.\n# Question (d) asks for JUST SENIORS who scored better than the avg senor.\n#\n# There is a way to answer this question in one line of code, but we \n# didn't learn how to do that yet. (we will soon)\n\ngradesOfSeniors = grades [   year == \"senior\"      ]\ngradesOfSeniors\n\n[1] 85 70 93 65\n\navgGradeOfSeniors =     mean( grades [   year == \"senior\"      ] ) \navgGradeOfSeniors\n\n[1] 78.25\n\ngradesOfSeniors &gt; avgGradeOfSeniors\n\n[1]  TRUE FALSE  TRUE FALSE\n\nnamesOfSeniors = students[ year == \"senior\"]\nnamesOfSeniors\n\n[1] \"joe\"    \"al\"     \"esther\" \"bob\"   \n\n# ANSWER\nnamesOfSeniors[ gradesOfSeniors &gt; avgGradeOfSeniors]\n\n[1] \"joe\"    \"esther\"\n\n# all in one command\n\n\n# BEREN - HOLD OFF ON THIS ... WE'LL COME BACK TO EXPLAIN THIS LATER\nstudents[ year == \"senior\"][ grades [   year == \"senior\"      ] &gt; mean( grades [   year == \"senior\"      ] )]\n\n[1] \"joe\"    \"esther\"\n\n####################################################################.\n# QUESTION - Refer to the data above.\n#\n# Write a command to take the average of all grades, but drop the lowest grade.\n#\n# HINT: do NOT use the mean function\n####################################################################.\n\n# You can answer this question using just the material that we learned\n# in the first couple of classes - do this as a practice problem.\n\n# BE CAREFUL:\n# You might be tempted to do the following, but it is not correct:\n\nlowestGrade = min(grades)\nlowestGrade\n\n[1] 65\n\n(sum(grades) - min(grades)) / (length(grades)-1)\n\n[1] 81.6\n\n# Answer without using the mean function\n(sum(grades) - min(grades)) / (length(grades)-1)\n\n[1] 81.6",
    "crumbs": [
      "Midterm Topics (Fall 2023)",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Parallel vectors</span>"
    ]
  },
  {
    "objectID": "000376-quartoBook_part2_afterMidterm2023-v001.html",
    "href": "000376-quartoBook_part2_afterMidterm2023-v001.html",
    "title": "After the midterm",
    "section": "",
    "text": "The material in this part was not on the midterm but will be on the final exam.\nIMPORTANT: The material in this course is naturally cumulative. You must know there earlier material before you can understand the later material. Therefore, you must know all of the material from before the midterm for the final exam as well.",
    "crumbs": [
      "After the midterm"
    ]
  },
  {
    "objectID": "000350-o-in_intersect_setdiff_usingNotIn-v060.html",
    "href": "000350-o-in_intersect_setdiff_usingNotIn-v060.html",
    "title": "16  %in%",
    "section": "",
    "text": "16.1 vector1 %in% vector2\n################################################################.\n################################################################.\n##\n## vector1 %in% vector2\n##\n## Returns a logical vector that is the same length as vector1.\n## For every value in vector1 TRUE indicates that the value\n## is in vector2 and FALSE indicates that it isn't.\n## See examples below.\n##\n################################################################.\n################################################################.\n\nstudents &lt;- c(\"joe\", \"sue\", \"al\", \"anne\")\nstudents\n\n[1] \"joe\"  \"sue\"  \"al\"   \"anne\"\n\n\"sue\" %in% students    # TRUE\n\n[1] TRUE\n\n\"amanda\" %in% students   # FALSE\n\n[1] FALSE\n\nc(\"sue\",\"amanda\") %in% students     # TRUE FALSE\n\n[1]  TRUE FALSE\n\nc(\"sue\",\"amanda\",\"felix\",\"al\",\"joaquin\",\"xavier\",\"zeke\",\"anne\")  %in% students \n\n[1]  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE\n\n# ANSWER :  TRUE FALSE FALSE TRUE FALSE FALSE FALSE TRUE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>%in%</span>"
    ]
  },
  {
    "objectID": "000350-o-in_intersect_setdiff_usingNotIn-v060.html#practice",
    "href": "000350-o-in_intersect_setdiff_usingNotIn-v060.html#practice",
    "title": "16  %in%",
    "section": "16.2 — Practice —",
    "text": "16.2 — Practice —\n\n#---------------------------------------------------------------------.\n# QUESTION\n#\n# The variables mathClass and englishClass contain names of students\n# who are in each respective class.\n#\n# The \"built-in\" intersect function returns the values that are\n# common to two different vectors. ( see ?intersect )\n#\n#   (a) use the intersect function to show those students who are \n#       in both the math and the english class.\n#\n#   (b) do the same as (a) but do NOT use the intersect function,\n#       rather use the %in% operator to accomplish the same result.\n#\n#   (c) write a function name myintersect that does the same\n#       thing as the built-in intersection function - but do not\n#       call the built-in intersection function in the \n#       definition of myintersection.\n#---------------------------------------------------------------------.\n\n# ANSWER\n\n# Let's setup some data to work with\nmathClass   = c(\"alice\", \"mike\", \"sue\", \"bob\", \"amanda\")\nenglishClass = c(\"sue\", \"joe\", \"mike\", \"frank\")\n\n#   (a) use the intersect function to show those students who are \n#       in both the math and the english class.\n\n# Let's look at the R documentation for the intersect function\n?intersect\n\nstarting httpd help server ... done\n\n# Use the function\nintersect(mathClass, englishClass)\n\n[1] \"mike\" \"sue\" \n\n#   (b) do the same as (a) but do NOT use the intersect function,\n#       rather use the %in% operator to accomplish the same result.\n#\n#       HINT - remember that %in% returns logical values (i.e. TRUE/FALSE values)\n#              Use these TRUE/FALSE values to index into the appropriate vector.\n\n\n\n# step 1 - figure out how to get a logical vector to show TRUE for each student\n#          in the math class that is also in the english class\n\nmathClass %in% englishClass\n\n[1] FALSE  TRUE  TRUE FALSE FALSE\n\n# step 2 - use the result from step1 to get the names of those students from the math class\n#          who are also in the english class\n\nmathClass [ mathClass %in% englishClass ]\n\n[1] \"mike\" \"sue\" \n\n# another way ....\n\nenglishClass %in% mathClass\n\n[1]  TRUE FALSE  TRUE FALSE\n\nenglishClass[ englishClass %in% mathClass  ]\n\n[1] \"sue\"  \"mike\"\n\n#############################################################################.\n# DON'T DO THE FOLLOWING! IT IS WRONG!\n#############################################################################.\n# The mathClass variable is used outside the brackets while\n# the expression \"englishClass %in% mathClass\" gives one TRUE/FALSE for \n# each value in the englishClass variable. \n# You must make sure that the variable used outside the [brackets] matches up\n# with the TRUE/FALSE values that are generated inside the [brackets].\n#############################################################################.\n\nmathClass[ englishClass %in% mathClass  ]  # THIS IS WRONG!!!\n\n[1] \"alice\"  \"sue\"    \"amanda\"\n\n# WHAT'S THE PROBLEM - FIGURE OUT WHAT HAPPENED\n#\n# original:           mathClass[ englishClass %in% mathClass  ]\n#\n# replace variables:  mathClass[c(\"sue\",\"joe\",\"mike\",\"frank\") %in% c(\"alice\",\"mike\",\"sue\",\"bob\",\"amanada\")]\n#\n# %in%:               mathClass[c(TRUE, FALSE, TRUE, FALSE) ]\n#\n# recycle T/F values: mathClass[c(TRUE,FALSE,TRUE,FALSE,TRUE)]      \n#\n# final values:       \"alice\" \"sue\" \"amanda\"\n\n\n\n\n#   (c) write a function name myintersect that does the same\n#       thing as the built-in intersect function - but do not\n#       call the built-in intersect function in the \n#       definition of myintersect.\n\nmyintersect = function(vec1, vec2) {\n  \n  vec1 [ vec1 %in% vec2 ]\n  \n}\n\n\nmyintersect( mathClass, englishClass)   # mike sue\n\n[1] \"mike\" \"sue\" \n\nmyintersect( englishClass, mathClass)  # \"sue\" \"mike\"\n\n[1] \"sue\"  \"mike\"\n\nmyintersect( 1:10, 7:1000) # 7 8 9 109\n\n[1]  7  8  9 10\n\n# Other ways ... \n\nmyintersect = function(vec1, vec2) {\n  return ( vec1 [ vec1 %in% vec2 ] )\n}\n\nmyintersect = function(vec1, vec2) {\n  tf = vec1 %in% vec2 \n  vec1 [ tf ]\n}\n\nmyintersect = function(vec1, vec2) {\n  tf = vec1 %in% vec2 \n  return ( vec1 [ tf ] )\n}\n\n\n#---------------------------------------------------------------------.\n# QUESTION  ####\n#\n# The variables mathClass and englishClass contain names of students\n# who are in each respective class.\n#\n# Write a command to show the students who are in the math class but\n# are NOT in the english class\n#\n# (a) use the built-in setdiff function (read the documentation)\n#\n# (b) Do the same thing as (a) but WITHOUT using the setdiff function\n#     HINT: use the ! operator and the %in% operator\n#---------------------------------------------------------------------.\n\nmathClass   = c(\"alice\", \"mike\", \"sue\", \"bob\", \"amanda\")\nenglishClass = c(\"sue\", \"joe\", \"mike\", \"frank\")\n\n# ANSWER\n\n# (a) use the built-in setdiff function (read the documentation)\n\nsetdiff(mathClass, englishClass)\n\n[1] \"alice\"  \"bob\"    \"amanda\"\n\n# (b) Do the same thing as (a) but WITHOUT using the setdiff function\n#\n#     HINT: use the ! operator and the %in% operator\n#           Remember that ! will flip FALSE to TRUE and TRUE to FALSE.\n#\n#           &gt; ! c(TRUE, FALSE, FALSE)\n#           [1] FALSE TRUE TRUE\n\nmathClass  %in% englishClass    # TRUE if someone is in Math and also in English     FALSE if they are just in math\n\n[1] FALSE  TRUE  TRUE FALSE FALSE\n\n! ( mathClass  %in% englishClass )  # FALSE if someone is in Math and also in English   TRUE if they are just in math\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\nmathClass [ ! ( mathClass  %in% englishClass )   ]\n\n[1] \"alice\"  \"bob\"    \"amanda\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>%in%</span>"
    ]
  },
  {
    "objectID": "000350-o-in_intersect_setdiff_usingNotIn-v060.html#some_vector-in-another_vector",
    "href": "000350-o-in_intersect_setdiff_usingNotIn-v060.html#some_vector-in-another_vector",
    "title": "16  %in%",
    "section": "16.3 ! SOME_VECTOR %in% ANOTHER_VECTOR",
    "text": "16.3 ! SOME_VECTOR %in% ANOTHER_VECTOR\n\n####################################################################################.\n# Understand the placement of !  ####\n#\n# ! must immediately precede a logical vector (i.e. a vector of TRUE/FALSE values)\n####################################################################################.\n\n# Correct - ! operates on TRUE/FALSE values (AKA logical vectors)\n! c(TRUE, FALSE)\n\n[1] FALSE  TRUE\n\n# Correct - parentheses contain TRUE/FALSE values\n#           since %in% results in a logical vector\n! ( mathClass  %in% englishClass ) \n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# Correct - same as above - %in% has higher precedence\n#           than ! so you don't need (parentheses)\n!   mathClass  %in% englishClass     \n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# Wrong - ! doesn't work with character values\n! c(\"mike\", \"sue\" )  # ERROR\n\nError in !c(\"mike\", \"sue\"): invalid argument type\n\n\n\n# Wrong - ! is in wrong place\nmathClass ! %in% englishClass  # ERROR\n\nError: &lt;text&gt;:2:11: unexpected '!'\n1: # Wrong - ! is in wrong place\n2: mathClass !\n             ^",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>%in%</span>"
    ]
  },
  {
    "objectID": "000350-o-in_intersect_setdiff_usingNotIn-v060.html#practice-1",
    "href": "000350-o-in_intersect_setdiff_usingNotIn-v060.html#practice-1",
    "title": "16  %in%",
    "section": "16.4 — Practice —",
    "text": "16.4 — Practice —\n\n#---------------------------------------------------------------------.\n# QUESTION\n#\n# The variables mathClass and englishClass contain names of students\n# who are in each respective class.\n#\n# (a) Write a command to show the students who are only in one of the classes.\n#     Do not repeat the same name twice. HINT: use the setdiff function\n#\n# (b) do the same, but this time, do NOT use the setdiff function.\n#---------------------------------------------------------------------.\n\nmathClass   = c(\"alice\", \"mike\", \"sue\", \"bob\", \"amanda\")\nenglishClass = c(\"sue\", \"joe\", \"mike\", \"frank\")\n\n# ANSWER - using the setdiff function and c function\n\nonlyMath = setdiff(mathClass, englishClass)\nonlyEnglish = setdiff(englishClass, mathClass)\nonlyOneClass = c(onlyMath, onlyEnglish)\n\nmathClass\n\n[1] \"alice\"  \"mike\"   \"sue\"    \"bob\"    \"amanda\"\n\nenglishClass\n\n[1] \"sue\"   \"joe\"   \"mike\"  \"frank\"\n\nonlyMath\n\n[1] \"alice\"  \"bob\"    \"amanda\"\n\nonlyEnglish\n\n[1] \"joe\"   \"frank\"\n\nonlyOneClass\n\n[1] \"alice\"  \"bob\"    \"amanda\" \"joe\"    \"frank\" \n\n# all in one line \nc ( setdiff(mathClass, englishClass) , setdiff(englishClass, mathClass))\n\n[1] \"alice\"  \"bob\"    \"amanda\" \"joe\"    \"frank\" \n\n# ANSWER - do NOT use the setdiff function - You can split up the code into\n#          different commands to make it easier to read.\n\nonlyMath = mathClass [ ! mathClass %in% englishClass ]\nonlyEnglish = englishClass [ ! englishClass %in% mathClass ]\nc(onlyMath, onlyEnglish)\n\n[1] \"alice\"  \"bob\"    \"amanda\" \"joe\"    \"frank\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>%in%</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html",
    "href": "000350-p-localVariables_globalVariables-v060.html",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "",
    "text": "17.1 “local” variables\n# This topic is really not hard but can be a little confusing.\n# Therefore, we're going to take it slowly ...\n\n\n##############################################################################.\n# DEFINTION: local variable\n# \n# A \"local\" variable is a variable whose value is assigned inside of a\n# function definition. \n#\n# The value of a local variable can only be referenced inside of the\n# function in which it is assigned a value.\n##############################################################################.\n\n# Let's start with a simple example.\n# Obviously, if a variable doesn't exist, I cannot refer to it.\n# To demonstrate this I will remove all variables from the computer's memory.\n\nrm(list=ls())\n\nx   # ERROR - the variable x doesn't exist\n\nError in eval(expr, envir, enclos): object 'x' not found\n\n# That should be obvious. The following may be less obvious.\n#\n# Below we define a function named f in which we assign x=100.\n# x, has the \"scope\" of the function definition of f,\n# i.e. we can refer to x inside of the function definition for f, \n# but not outside of the function definition.\n\nf = function(){\n  x = 100       # x is assigned a value inside f() \n  return (x)    # so we can refer to it here\n}\n\nf()  # 100 \n\n[1] 100\n\n# We cannot refer to x outside of the function.\n# We say that the variable \"x\" has a \"scope\" that is \"local\" to the\n# function definition of f.\n\nx   # ERROR - we can't refer to x here\n\nError in eval(expr, envir, enclos): object 'x' not found",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html#global-variables",
    "href": "000350-p-localVariables_globalVariables-v060.html#global-variables",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "17.2 “global” variables",
    "text": "17.2 “global” variables\n\n##############################################################################.\n# DEFINTION: global variable\n# \n# A \"global\" variable is a variable that is assigned its value outside of\n# all function definitions.\n#\n# A global variable can be used anywhere in the program. \n# This includes both inside and outside of all function definitions.\n##############################################################################.\n\n# Let's start all over again.\nrm(list=ls())  # remove all variables\n\n# The following variable is a \"global\" variable.\n# i.e. it is assigned a value outside of all function definitions.\nnum = 100\n\n# We can therefore refer to the value of the variable outside of function\n# definitions.\n\nnum   # 100\n\n[1] 100\n\n# ALSO, we can refer to the value of the variable inside function definitions.\n\ng = function(){\n  \n  # Since num was given a value outside of all functions \n  # we can use it inside any function definition.\n  \n  total = num + 10   # This is OK since num is a \"global\" variable.\n  \n  return (total)\n}\n\ng()   # 110\n\n[1] 110\n\nnum # We can refer to num here too since num is a global variable.\n\n[1] 100",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html#giving-a-global-variable-a-value-after-the-function-definition",
    "href": "000350-p-localVariables_globalVariables-v060.html#giving-a-global-variable-a-value-after-the-function-definition",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "17.3 Giving a global variable a value after the function definition",
    "text": "17.3 Giving a global variable a value after the function definition\n\n# It doesn't matter whether the code to set the global variable appears\n# above or below the function definition. What matters is that the \n# code to set the global variable is RUN before the function is CALLED.\n#\n# To demonstrate, let's start all over again ...\n#\n# Below we show the same example from above, however, this time\n# we give a value to the global variable after the function g is\n# already defined.\n\n# start with a \"clean slate\" - remove all variables and functions\nrm(list=ls()) \n\n# The following function g, refers to the variable num\n# even though it doesn't have a value yet. This is OK. \n\ng = function(){\n  \n  # As long as num is given a value before this function is CALLED\n  # everything will be OK. \n  total = num + 10   \n  return (total)\n}\n\n# If we call g() before giving num a value, then we will get an error.\ng()   # ERROR - num has no value\n\nError in g(): object 'num' not found\n\n# Now if we give num a value, the function g() will work.\nnum = 100\n\ng()   # 110\n\n[1] 110",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html#definition-scope-of-a-variable",
    "href": "000350-p-localVariables_globalVariables-v060.html#definition-scope-of-a-variable",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "17.4 Definition: “scope” of a variable",
    "text": "17.4 Definition: “scope” of a variable\n\n##############################################################################.\n# *** DEFINITION: scope of a variable ***\n#\n# The \"scope\" of a variable is the location in the \n# code where the name of the variable can be used to retrieve its value.\n#\n#\n#\n# *** \"GLOBAL SCOPE\"  vs \"LOCAL SCOPE\" ***\n#\n# The \"scope\" of a local variable is the code of the function definition\n# in which the variable is assigned a value.\n#\n# The \"scope\" of a \"global\" variable is the entire program.\n#\n##############################################################################.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html#argumentsparameters-are-similar-to-local-variables",
    "href": "000350-p-localVariables_globalVariables-v060.html#argumentsparameters-are-similar-to-local-variables",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "17.5 Arguments/Parameters are similar to “local” variables",
    "text": "17.5 Arguments/Parameters are similar to “local” variables\n\n#----------------------------------------------------------------------.\n# Some terminology\n#\n# GLOBAL VARIABLE:\n#   A variable that is defined outside of any function is known as a \"global variable\".\n#\n# LOCAL VARIABLE:\n#   A variable that is assigned a value inside of a function is known as a \"local variable\"\n#\n# ARGUMENTS (AKA PARAMETERS):\n#   Arguments in a function definition are similar to a \"local variable\"\n#   in that arguments are also \"local\" to the function in which they appear.\n#----------------------------------------------------------------------.\n\n# GETTING THE TERMINOLOGY RIGHT\n\nx = 5   # \"global\" variable - its value is assigned outside of any function\n\nf=function(start){ # \"start\" is an \"argument\". It's \"local\" to the function\n  end = 2  # \"end\" is a \"local\" variable (it's given a value in the function)\n  return ( start:end )\n}\n\ny = 10   # \"global\" variable - its value is assigned outside of any function\n\n# EXAMPLES\n\nf( x )  #  5 4 3 2\n\n[1] 5 4 3 2\n\nf(y) # 10 9 8 7 6 5 4 3 2\n\n[1] 10  9  8  7  6  5  4  3  2\n\nf(end)   # ERROR - end does not exist in global scope\n\nError in start:end: NA/NaN argument\n\nf(start)  # ERROR - start does not exist in global scope\n\nError in start:end: NA/NaN argument",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html#a-local-variable-hides-a-global-variable-with-the-same-name.",
    "href": "000350-p-localVariables_globalVariables-v060.html#a-local-variable-hides-a-global-variable-with-the-same-name.",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "17.6 A local variable “hides” a global variable with the same name.",
    "text": "17.6 A local variable “hides” a global variable with the same name.\n\n#----------------------------------------------------------------------.\n# Confusion sometimes arises when the name of a local variable or argument \n# is the same as the name of a global variable.\n#\n# It is very important to understand what happens in these situations.\n# See the examples below and read the #comments that explain the examples.\n#----------------------------------------------------------------------.\n\n#.............................................................................\n# EXAMPLE\n# \n# A local variable \"hides\" a global variable with the same name.\n#.............................................................................\n\n# start from scratch\nrm(list=ls())\n\n# Define a function that contains local variables.\n# Values that are assigned to the local variables in the function\n# do NOT interfere with global variables that have the same name.\n\nf2 = function () {\n  first = 98     # local variable with same name as a global variable (see below)\n  last = 100     # local variable with same name as a global variable (see below)\n  return (first:last)\n}\n\n# Define some global variables with the same names as the local variables.\n# Even though these global variables have the same names as the local variables\n# in the function, the values of the global variables are not changed by the function.\n\nfirst = 1   # global variable with same name as a local variable\nlast = 10  # global variable with same name as a local variable\n\n\n# Call the function. The function will use the local variables \n# and NOT the global variables.\n#\n# We say that while a function is executing, the values of\n# local variables in the function \"hide\" the values of global variables\n# with the same name. \n\nf2() # 98 99 100\n\n[1]  98  99 100\n\n# The global variables still maintain the values they had from before\n# the function ran.\nfirst # 1   \n\n[1] 1\n\nlast # 10\n\n[1] 10\n\n#.............................................................................\n# Order doesn't matter\n#.............................................................................\n\n# It makes no difference if the function is defined first or if the global\n# variables are defined first. The effect is exactly the same as above.\n#\n# This example has the same code as the previous example. The only difference\n# is that in this example, the global variables are defined before the \n# function. The result is exactly the same.\n\nfirst = 1   # global variable\nlast = 10  # global variable\n\nf2 = function () {\n  first = 98     # local variable\n  last = 100    # local variable\n  return (first:last)\n}\n\nf2() # 98 99 100\n\n[1]  98  99 100\n\nfirst # 1   \n\n[1] 1\n\nlast # 100\n\n[1] 10",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html#rules-for-arguments-are-the-same-as-for-local-variables",
    "href": "000350-p-localVariables_globalVariables-v060.html#rules-for-arguments-are-the-same-as-for-local-variables",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "17.7 Rules for arguments are the same as for local variables",
    "text": "17.7 Rules for arguments are the same as for local variables\n\n#.............................................................................\n# The rules for arguments are the same as for local variables\n#.............................................................................\n\n# Arguments that have the same name as global variables are similar to \n# local variables - they \"hide\" the global variables while the function is running.\n\nfirst = 1   # global variable\nlast = 10   # global variable\n\nf3 = function (first, last) { # arguments with same names as the global variables\n  \n  # The following code, uses the values of the arguments, not the globals.\n  # \n  # We say that the global variables are \"hidden\" by\n  # arguments or local variables with the same name.\n  \n  return (first:last) \n  \n}\n\nf3(20,23)   # 21 22 23\n\n[1] 20 21 22 23\n\nfirst # 1   \n\n[1] 1\n\nlast # 100\n\n[1] 10",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html#practice",
    "href": "000350-p-localVariables_globalVariables-v060.html#practice",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "17.8 — Practice —",
    "text": "17.8 — Practice —\n\n#############################################################################.\n# QUESTION - see if you can predict what is displayed by the following code.\n#############################################################################.\n\n# See if you understand this example ...\n# There are no new concepts here.\n# It is just a little trickier than before.\n\n\nfirst = 1   # global variable\nlast =  3   # global variable\n\nf = function (first, last) { # arguments hide global variables with same names\n  \n  first = first + 100 # change value of argument (global variable is hidden)\n  last = last + 100   # change value of argument (global variable is hidden)\n  \n  return (first:last)\n}\n\n# The following line is a little tricky.\n#\n# The value of the global variable \"last\" is 5.\n# The value, 5, is copied to the argument named first.\n# \n# The value of the global variable \"first\" is 1\n# The value, 1, is copied to the argument named last.\n# \n# The function then changes the values of the arguments by \n# adding 100 to each argument.\n\nf(last, first) # last,first are globals,i.e. f(3,1). f returns 103 102 101\n\n[1] 103 102 101\n\n# The global variables were not changed even though they \n# had the same names as the arguments.\n\nfirst  # 1\n\n[1] 1\n\nlast   # 5\n\n[1] 3",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html#best-pracrtices---do-not-refer-to-global-variables-inside-a-function",
    "href": "000350-p-localVariables_globalVariables-v060.html#best-pracrtices---do-not-refer-to-global-variables-inside-a-function",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "17.9 BEST PRACRTICES - Do NOT refer to global variables inside a function",
    "text": "17.9 BEST PRACRTICES - Do NOT refer to global variables inside a function\n\n#.............................................................................\n# A function can refer to global variables BUT DON'T DO THIS \n#\n# WARNING!!! - The following example demonstrates the features of how R works\n#              when a function refers to a global variable.\n#              However, it is generally considered a bad practice to refer to\n#              global variables from inside of a function.\n# \n#                                  *** DO NOT DO IT ***\n#\n#              In general, functions should only refer to their arguments or to \n#              variables that were assigned values inside the function\n#              (ie. \"local\" variables).\n#\n#              By using only local variables and arguments in a function\n#              it's possible to understand how the function works by just \n#              examining the code for the function definition. If the function\n#              definition refers to global variables it can be much harder\n#              for programmers to understand the code. \n#              Sometimes, in rare situations, it may be considered \n#              appropriate to refer to global variables from the code inside a\n#              function. However, new programmers should avoid this until they\n#              have become more adept at programming and can better weigh the\n#              pros and cons of each situation.\n#.............................................................................\n\n\n# start from scratch\nrm(list=ls())\n\nf1 = function( ) {\n  # num was never given a value inside this function, f1.\n  # Therefore num on the following line must refer to a global variable.\n  2 * num  \n}\n\n# The following line results in an error since num was never given a value.\nf1()    \n\nError in f1(): object 'num' not found\n\n# If we give a value to a global variable named num, the function will\n# refer to that value.\nnum = 3\nf1()  #  6\n\n[1] 6\n\n# If we change the value of num then the call to f() returns a different value.\nnum = 5\nf1()  #  10\n\n[1] 10\n\n# As you can see the results of calling f1() are different based on the \n# values that are assigned (or are not assigned) to num. \n#\n#     THIS CAN BE CONFUSING\n#\n# Since f() is a very simple function and since we just wrote it we\n# are intimately familiar with it's code. Therefore we understand, why we\n# get different results each time it's called based on the value of num.\n#\n# Practically speaking most R programs are much larger than this one is.\n# In large programs it can be very confusing if the exact same call to a \n# function returns different values. It is much better if the same call to a\n# function always returns the same value. Therefore, in general it is \n# considered very BAD practice for a function definition to refer to \n# global variables.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000350-p-localVariables_globalVariables-v060.html#practice-1",
    "href": "000350-p-localVariables_globalVariables-v060.html#practice-1",
    "title": "17  “GLOBAL VARIABLES” vs “LOCAL VARIABLES”",
    "section": "17.10 — Practice —",
    "text": "17.10 — Practice —\n\n#########################################################.\n# Question - what will the following program display?\n#########################################################.\n\n# start from a clean slate\nrm(list=ls())\n\nf = function(x, y){ # x is an argument. It \"hides\" the global variable x.\n  \n  x = x + 100       # This refers to the argument, x, NOT the global variable, x.\n  \n  z = y + g(200, 300) # z is a local variable since its value was assigned here\n  \n  return(z)\n}\n\ng = function(a, b){ # a,b are arguments. b hides the global variable, b.\n  \n  a = a + x    # a is the argument, x is the global variable x\n  \n  b = 1000     # b refers to the argument b, not the global variable b.\n  \n  return( a )\n}\n\n\nx = 10   # global variable\nb = 20   # global variable\n\n# What does the following display? Why?\n\nf(1, b)    # 230 \n\n[1] 230\n\nx          # 10 - i.e. the global value of x never changed\n\n[1] 10\n\nb          # 20 - i.e. the global value of b never changed\n\n[1] 20",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>\"GLOBAL VARIABLES\" vs \"LOCAL VARIABLES\"</span>"
    ]
  },
  {
    "objectID": "000380-logicalOperators_and_or_not-v013-withAnswers-afterBerenClass.html",
    "href": "000380-logicalOperators_and_or_not-v013-withAnswers-afterBerenClass.html",
    "title": "18  logical operators",
    "section": "",
    "text": "# Comment on sorting\n# see previous file\n\n\"apple\" &lt; \"ball\"    #TRUE\n\n[1] TRUE\n\n\"ball\"  &lt; \"apple\"    #FALSE\n\n[1] FALSE\n\nFALSE &lt; TRUE       #TRUE\n\n[1] TRUE\n\nTRUE &lt; FALSE        #FALSE\n\n[1] FALSE\n\n###########################################################\n###########################################################\n##\n## Logical operators:     !   &   |\n##\n###########################################################\n###########################################################\n\n#------------------------------------------------\n# The ! operator\n#\n# The ! operator (pronounced as \"not\")\n# changes TRUE to FALSE\n# changes FALSE to TRUE\n#\n# \"Truth Table\" - a \"truth table\" shows how a\n#                 logical operator works.\n#\n#      x      !x\n#    -----  -----\n#    TRUE   FALSE\n#    FALSE  TRUE\n#------------------------------------------------\n\n\n!TRUE    # FALSE\n\n[1] FALSE\n\n!FALSE   # TRUE\n\n[1] TRUE\n\n! c(TRUE,FALSE,TRUE,TRUE)   # FALSE TRUE FALSE FALSE\n\n[1] FALSE  TRUE FALSE FALSE\n\n# Example\n\ntests = c(NA, 80, NA, 90, 88)   \nis.na(tests)   # TRUE FALSE TRUE FALSE FALSE\n\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n!is.na(tests)  # FALSE TRUE FALSE TRUE TRUE\n\n[1] FALSE  TRUE FALSE  TRUE  TRUE\n\n#-------------------------------------------------------------------\n# QUESTION - tests and students are parallel vectors.\n# The test grades are recorded in the same order as the student names.\n# i.e. abe did not take the test so he is recorded as NA\n#      bob got an 80\n# etc.\n# Answer the questions below.\n#--------------------------------------------------------------------\n\ntests = c(NA, 80, NA, 90, 88)   \nstudents = c(\"abe\", \"bob\", \"carla\", \"dana\", \"ed\")\n\n# QUESTION - Write a command to\n# show the names of the students who did NOT take the test\n# (i.e. the grade is NA for those students)\nstudents [ is.na(tests) ]\n\n[1] \"abe\"   \"carla\"\n\n# QUESTION - Write a command to\n# show the names of the students who did take the test\n# (i.e. the grade is NOT NA for those students)\nstudents [ !is.na(tests) ]\n\n[1] \"bob\"  \"dana\" \"ed\"  \n\n#-------------------------------------------------------------------\n# QUESTION\n#\n# mathClass contains the names of the students in a math class.\n# committee is the names of the students on the yearbook committee.\n#\n# Answer the questions below.\n#--------------------------------------------------------------------\n\n# Another example\nmathClass = c(\"abe\", \"bob\", \"carla\", \"dana\", \"ed\", \"fran\", \"george\", \"hillary\")\ncommittee = c(\"bob\",\"zoe\",\"abe\",\"victor\")\n\n# QUESTION - write a command to show the names of the students in\n# the math class who are on the yearbook committee. Use the %in% operator.\n\nmathClass[ mathClass %in% committee ]   # one answer\n\n[1] \"abe\" \"bob\"\n\ncommittee[ committee %in% mathClass ]   # another (just as valid) answer\n\n[1] \"bob\" \"abe\"\n\n# QUESTION - write a command to show the names of the students in\n# the math class who are NOT on the yearbook committee. Use the %in% operator.\n\n\nmathClass[ ! mathClass %in% committee ]     # answer\n\n[1] \"carla\"   \"dana\"    \"ed\"      \"fran\"    \"george\"  \"hillary\"\n\n#--------------------------------------------------------\n# The & operator\n#\n# & operator (pronounced \"and\") is used to combine two different conditions.\n# Result is TRUE only when both x and y are TRUE\n# otherwise result is FALSE.\n#\n#  TRUTH TABLE:\n#\n#                       (result)\n#        x       y       x&y\n#      -----   -----    -----\n#      TRUE    TRUE     TRUE\n#      TRUE    FALSE    FALSE\n#      FALSE   TRUE     FALSE\n#      FALSE   FALSE    FALSE\n#--------------------------------------------------------\n\n\nTRUE & TRUE   # TRUE\n\n[1] TRUE\n\nTRUE & FALSE  # FALSE\n\n[1] FALSE\n\nFALSE & TRUE  # FALSE\n\n[1] FALSE\n\nFALSE & FALSE  # FALSE\n\n[1] FALSE\n\n#-----------------------------------------------------------\n# & works in a \"vectorized\" way (as you'd expect from an R operator)\n# i.e. the 1st values of the left and right hand vectors are operated on then \n#      the 2nd values from the left and right hand vectors are operated on, etc.\n#      etc.\n#-----------------------------------------------------------\n\nc(TRUE,FALSE,TRUE,FALSE) & c(FALSE,FALSE,TRUE,TRUE)\n\n[1] FALSE FALSE  TRUE FALSE\n\n# original :   c(TRUE,FALSE,TRUE,FALSE) & c(FALSE,FALSE,TRUE,TRUE)\n# vector operation: c(TRUE&FALSE , FALSE&FALSE , TRUE&TRUE , FALSE&TRUE)\n# final answer:       FALSE        FALSE         TRUE        FALSE\n\n#-----------------------------------------------------------\n# recycling rule\n#\n# as with all vectorized operations the recycling rule is used \n# when one of the two vectors is shorter than the other.\n#-----------------------------------------------------------\n\nc(TRUE, FALSE) & c(FALSE, TRUE, TRUE, TRUE)     # FALSE FALSE TRUE FALSE\n\n[1] FALSE FALSE  TRUE FALSE\n\n# original :        c(TRUE, FALSE) & c(FALSE, TRUE, TRUE, TRUE)\n# recycling:        c(TRUE, FALSE, TRUE, FALSE) & c(FALSE, TRUE, TRUE, TRUE)\n# vector operation: c(TRUE&FALSE , FALSE&TRUE , TRUE&TRUE , FALSE&TRUE)\n# final answer:       FALSE        FALSE         TRUE        FALSE\n\n\n\n\n# You can have many different logical vectors &'ed together \n\nc(TRUE, TRUE) & c(FALSE, TRUE) & c(TRUE, FALSE)   # FALSE FALSE\n\n[1] FALSE FALSE\n\n# original: c(TRUE, TRUE) & c(FALSE, TRUE) & c(TRUE, FALSE)\n# first &:  c(TRUE&FALSE , TRUE&TRUE)      & c(TRUE, FALSE)\n#           c(FALSE      , TRUE)           & c(TRUE, FALSE)\n# 2nd &:              c(FALSE & TRUE , TRUE & FALSE)\n# Final answer:             FALSE         FALSE\n\n\n#-----------------------------------------------------------\n# QUESTION - nums is a vector that contains some numbers. Write a SINGLE COMMAND\n#            that displays only those numbers from nums that are divisible by \n#            BOTH 3 and 5.\n#-----------------------------------------------------------\n\nnums = c(5, 6, 7, 15, 13, 20)   # some numbers\nnums\n\n[1]  5  6  7 15 13 20\n\n# Let's think about how to do each condition separately\n\nnums [nums %% 3 == 0] # 6 15 - numbers that are divisible by 3\n\n[1]  6 15\n\nnums [nums %% 5 == 0] # 5 15 20 - numbers that are divisible by 5\n\n[1]  5 15 20\n\n# When we combine the conditions with & we get the correct result\n\nnums [nums %% 3 == 0  &  nums %% 5 == 0] # 15 - numbers that are divisible by BOTH 3 and 5\n\n[1] 15\n\n#-------------------------------------------\n# WILF - UP TO HERE - AFTER CLASS #10\n#-------------------------------------------\n\n\n#-----------------------------------------------------\n# QUESTION - test1, test2 and students\n# are parallel vectors.\n# Answer the questions below.\n#-----------------------------------------------------\n\ntest1   =  c(90,    88,   87,     84,    92)\ntest2   =  c(70,    80,   90,     94,    100)\nstudents = c(\"abe\",\"bob\",\"carla\",\"dana\",\"ed\")\n\n#.........................................................................\n# QUESTION - Write a command to show the names of the students who got an \n# 85 or above on both tests.\n#.........................................................................\n\n \n# ANSWER\nstudents [  test1 &gt;= 85  &  test2 &gt;= 85       ]   # CORRECT ANSWER\n\n[1] \"carla\" \"ed\"   \n\n# original:    students [  test1 &gt;= 85  &  test2 &gt;= 85       ]\n#              students [  c(TRUE,TRUE,TRUE,FALSE,TRUE)  &  c(FALSE,FALSE,TRUE,TRUE,TRUE)       ]\n#     &:       students [  c(TRUE&FALSE,TRUE&FALSE,TRUE&TRUE,FALSE&TRUE,TRUE&TRUE) \n#              students [  c(FALSE,       FALSE,     TRUE,     FALSE     ,TRUE) ]\n#               \"carla\"  \"ed\"\n\n#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n# NOTE:   When you use numbers in the context of logical operators (i.e. ! & |)\n#\n# zero becomes FALSE\n# anything else become TRUE\n#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n\nas.logical(0)  #FALSE\n\n[1] FALSE\n\nas.logical(99)  #TRUE\n\n[1] TRUE\n\nas.logical(-99.27)  #TRUE\n\n[1] TRUE\n\nas.logical(1)  #TRUE\n\n[1] TRUE\n\n0 & 1  # same as   FALSE & TRUE\n\n[1] FALSE\n\n976.123 & 0  # same as TRUE & FALSE\n\n[1] FALSE\n\n-27.98 & 15   # same as TRUE & TRUE\n\n[1] TRUE\n\n#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n# WARNING\n#\n# You must have an expression that results in a LOGICAL vector on both\n# sides of the &. In the code below, test1 is NOT a logical vector but it\n# appears on the left side of the &. This is WRONG.\n#\n#       # WRONG!\n#       # students [ test1 & test2 &gt;= 85 ]    # WRONG WRONG WRONG !!! DONT DO THIS !!!\n#\n# The right hand side of the & is OK - it is test2&gt;=85 which is a logical vector.\n# The correct way to write this code is as was done above:\n# \n#       students [  test1 &gt;= 85  &  test2 &gt;= 85       ]   # CORRECT ANSWER\n#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n\n\n# CORRECT ANSWER (already shown above)\nstudents[ test1 &gt;= 85 & test2 &gt;= 85 ]\n\n[1] \"carla\" \"ed\"   \n\n# WRONG ANSWER _ DONT DO THIS !!!\nstudents [ test1 & test2 &gt;= 85 ]    # WRONG WRONG WRONG !!! DONT DO THIS !!!\n\n[1] \"carla\" \"dana\"  \"ed\"   \n\n#   original;           students [  test1 & test2 &gt;= 85 ]    # WRONG WRONG WRONG !!! DONT DO THIS !!!\n#   replace values:     students [   c(90,    88,   87,     84,    92) & c(70,    80,   90,     94,    100) &gt;= c(85,85,85,85,85)]    # WRONG WRONG WRONG !!! DONT DO THIS !!!\n#  &gt;=                   students [   c(90,    88,   87,     84,    92) & c(70&gt;=85,80&gt;=85, 90&gt;=85, 94&gt;=85,100&gt;=85)]  \n#                       students [   c(90,    88,   87,     84,    92) & c(FALSE,FALSE,TRUE,TRUE,TRUE)]  \n# convert #rs to logicals: students [   c(TRUE,TRUE,TRUE,TRUE,TRUE) & c(FALSE,FALSE,TRUE,TRUE,TRUE)]  \n#                          students [   c(FALSE,FALSE,TRUE,TRUE,TRUE) ] \n#                          \"carla\" \"dana\" \"ed\"\n\n\n\n#-----------------------------------------------------\n# QUESTION - test1, test2 and students\n# are parallel vectors.\n#-----------------------------------------------------\n\ntest1   =  c(90,    88,   87,     84,    92)\ntest2   =  c(70,    80,   90,     94,    100)\nstudents = c(\"abe\",\"bob\",\"carla\",\"dana\",\"ed\")\n\n\n# QUESTION - Write a command to show the names of the students\n# who got in the 80's on test1.\n\nstudents [ test1 &gt;= 80 & test1 &lt; 90 ]\n\n[1] \"bob\"   \"carla\" \"dana\" \n\n# QUESTION - Write a command to show the names of the students\n# who got in the 80's on test2.\n\nstudents [ test2 &gt;= 80 & test2 &lt; 90 ]\n\n[1] \"bob\"\n\n# QUESTION - Write a command to show the names of the students\n# who got in the 80's on both test1 and on test2.\n\nstudents [ (test1 &gt;= 80 & test1 &lt; 90) & (test2 &gt;= 80 & test2 &lt; 90)]\n\n[1] \"bob\"\n\nstudents [ test1 &gt;= 80 & test1 &lt; 90 & test2 &gt;= 80 & test2 &lt; 90]\n\n[1] \"bob\"\n\nstudents [ test1 &gt;= 80 & (test1 &lt; 90 & test2 &gt;= 80) & test2 &lt; 90]\n\n[1] \"bob\"\n\n#--------------------------------------------------------   \n# The | operator    \n#   \n# |  operator (pronounced \"or\") is used to combine two different conditions.    \n# The symbol is a vertical line or bar (often drawn with a small break in the line) \n# It is found on every standard computer keyboard - just look for it.   \n# On my keyboard it is below the backspace, on the same key as the backslash character. \n#   \n# The symbol is often referred to as a \"pipe character\" by technologists.   \n# (The reason it is called a \"pipe\" by technologists originated with the    \n#  Unix operating system but it beyond the scope of what we are discussing now  \n#  and I don't want to confuse you more than necessary :) ...   \n#   \n# Result is TRUE when either x or y are TRUE or when both are TRUE.     \n# Otherwise, the result is FALSE (i.e. the result is only FALSE when both x and y are FALSE)    \n#   \n#  TRUTH TABLE: \n#   \n#                     (result)  \n#        x       y       x|y    \n#      -----   -----    -----\n#      TRUE    TRUE     TRUE    \n#      TRUE    FALSE    TRUE    \n#      FALSE   TRUE     TRUE    \n#      FALSE   FALSE    FALSE   \n#--------------------------------------------------------\n\nTRUE | TRUE   # TRUE    \n\n[1] TRUE\n\nTRUE | FALSE  # TRUE    \n\n[1] TRUE\n\nFALSE | TRUE  # TRUE    \n\n[1] TRUE\n\nFALSE | FALSE # FALSE\n\n[1] FALSE\n\n# An example with the recycling rule    \n\nc(TRUE, FALSE) | c(FALSE, FALSE, FALSE, TRUE)   \n\n[1]  TRUE FALSE  TRUE  TRUE\n\n# original:     c(TRUE, FALSE) | c(FALSE, FALSE, FALSE, TRUE)   \n# recycling:    c(TRUE, FALSE, TRUE, FALSE) | c(FALSE, FALSE, FALSE, TRUE)  \n#               c(TRUE|FALSE, FALSE|FALSE, TRUE|FALSE, FALSE|TRUE)  \n# final result:     TRUE         FALSE       TRUE        TRUE   \n\n\n\n# This also works with multiple vectors (same as above with addition of a 3rd vector)   \n\nc(TRUE, FALSE) | c(FALSE, FALSE, FALSE, TRUE) | c(FALSE, TRUE, FALSE, FALSE)    \n\n[1] TRUE TRUE TRUE TRUE\n\n# original:     c(TRUE, FALSE) | c(FALSE, FALSE, FALSE, TRUE) | c(FALSE, TRUE, FALSE, FALSE)    \n# recycling:    c(TRUE, FALSE, TRUE, FALSE) | c(FALSE, FALSE, FALSE, TRUE) | c(FALSE, TRUE, FALSE, FALSE)   \n# 1st |:        c(TRUE|FALSE, FALSE|FALSE, TRUE|FALSE, FALSE|TRUE) | c(FALSE, TRUE, FALSE, FALSE)   \n#               c(   TRUE,       FALSE,      TRUE,        TRUE)    | c(FALSE, TRUE, FALSE, FALSE)   \n# 2nd |:        c(TRUE|FALSE, FALSE|TRUE,  TRUE|FALSE,  TRUE|FALSE) \n# final result:     TRUE         TRUE        TRUE          TRUE\n\n\n\n\n#-----------------------------------------------------\n# QUESTION - test1, test2 and students\n# are parallel vectors.\n#-----------------------------------------------------\n\ntest1   =  c(90,    88,   87,     84,    92)\ntest2   =  c(70,    80,   90,     94,    100)\nstudents = c(\"abe\",\"bob\",\"carla\",\"dana\",\"ed\")\n\n\n# QUESTION - Write a command to show the names of the students\n# who did NOT get in the 80's on test1.\n\nstudents [ test1 &lt; 80    |    test1 &gt;= 90  ]\n\n[1] \"abe\" \"ed\" \n\n# THE FOLLOWING IS WRONG\nstudents [ test1 &lt; 80    &    test1 &gt;= 90  ] # WRONG!!! This should be | not & \n\ncharacter(0)\n\n# Even when you get the wrong answer, it is important to be able to \n# work through exactly WHY you got the wrong answer. \n\n#original:           students [ test1 &lt; 80    &    test1 &gt;= 90  ]\n#\n# replace numbers:   students [ c(90,88,87,84,92) &lt; c(80,80,80,80,80)    &    c(90,88,87,84,92) &gt;= c(90,90,90,90,90)  ]\n#\n# replace numbers:   students [ c(90&lt;80,88&lt;80,87&lt;80,84&lt;80,92&lt;80)  &    c(90&gt;=90,88&gt;=90,87&gt;=90,84&gt;=90,92&gt;=90) ]\n#\n# replace numbers:   students [ c(FALSE,FALSE,FALSE,FALSE,FALSE)  &    c(TRUE,FALSE,FALSE,FALSE,TRUE) ]\n#\n# &               :   students [ c(FALSE,FALSE,FALSE,FALSE,FALSE) ]\n#\n# ANSWER - no students :  character(0)\n\n\n\n\n# QUESTION - Write a command to show the names of the students\n# who did NOT get in the 80's on test2.\n\nstudents [ test2 &lt; 80    |    test2 &gt;= 90  ]\n\n[1] \"abe\"   \"carla\" \"dana\"  \"ed\"   \n\n# QUESTION - Write a command to show the names of the students\n# who did NOT get in the 80's - neither on test1 nor on test2.\n\nstudents [ (test1 &lt; 80 | test1 &gt;= 90) &  (test2 &lt; 80 | test2 &gt;= 90) ]\n\n[1] \"abe\" \"ed\" \n\n# EXPLANATION:\n# You can think of the above answer as the following: \n\nTRUE_IF_DIDNT_GET_80s_ON_TEST1 = test1 &lt; 80 | test1 &gt;= 90\nTRUE_IF_DIDNT_GET_80s_ON_TEST1\n\n[1]  TRUE FALSE FALSE FALSE  TRUE\n\nTRUE_IF_DIDNT_GET_80s_ON_TEST2 = test2 &lt; 80 | test2 &gt;= 90\nTRUE_IF_DIDNT_GET_80s_ON_TEST2\n\n[1]  TRUE FALSE  TRUE  TRUE  TRUE\n\nTRUE_IF_DIDNT_GET_80s_ON_EITHER_TEST = TRUE_IF_DIDNT_GET_80s_ON_TEST1   &   TRUE_IF_DIDNT_GET_80s_ON_TEST2\nTRUE_IF_DIDNT_GET_80s_ON_EITHER_TEST\n\n[1]  TRUE FALSE FALSE FALSE  TRUE\n\nstudents\n\n[1] \"abe\"   \"bob\"   \"carla\" \"dana\"  \"ed\"   \n\nstudents [ TRUE_IF_DIDNT_GET_80s_ON_EITHER_TEST ]\n\n[1] \"abe\" \"ed\" \n\n# THE following are WRONG becasue & happens before | based on the order of operations\nstudents [ test1 &lt; 80 | test1 &gt;= 90 &  test2 &lt; 80 | test2 &gt;= 90 ]\n\n[1] \"abe\"   \"carla\" \"dana\"  \"ed\"   \n\nstudents [ test1 &lt; 80 | (test1 &gt;= 90 &  test2 &lt; 80) | test2 &gt;= 90 ]\n\n[1] \"abe\"   \"carla\" \"dana\"  \"ed\"   \n\n#---------------------------------------------------------------------  \n# ORDER OF OPERATIONS   \n#   \n# As always, expressions in (parentheses) are done first. Otherwise,    \n# the order of operations between ! & | operators is    \n#   \n#    first   !    (NOT)     \n#    then    &    (AND) \n#    finally |    (OR)  \n#   \n# As with all order of operations issues, (parentheses) can change what is done first.\n#---------------------------------------------------------------------  \n\n\n# Examples: \nTRUE | FALSE & FALSE     # TRUE   because & is done before |    \n\n[1] TRUE\n\n(TRUE | FALSE) & FALSE   # FALSE  same code but with parentheses    \n\n[1] FALSE\n\nFALSE | TRUE & FALSE     # FALSE    \n\n[1] FALSE\n\n(FALSE | TRUE) & FALSE   # FALSE - parentheses don't change the result here     \n\n[1] FALSE\n\nTRUE | TRUE & FALSE      # TRUE   because & is done before |    \n\n[1] TRUE\n\n(TRUE | TRUE) & FALSE    # FALSE  same code but with parentheses    \n\n[1] FALSE\n\nTRUE | !FALSE & FALSE    # TRUE   first ! then & then | \n\n[1] TRUE\n\n(TRUE | !FALSE) & FALSE  # FALSE  same code but with parentheses    \n\n[1] FALSE\n\n#---------------------------------------------------------------------  \n# Sometimes you have to take into account what is done first    \n# a larger context. The following should be easy enough to remember.    \n#   \n#      1st - parentheses    \n#      2nd - all math   \n#      3rd - all relational operators (i.e. &gt; &lt; &gt;= &lt;= == !=)    \n#      4th - !  \n#      5th - &  \n#      6th - |  \n#      7th - assignment to a variable   \n#   \n# You can also refer back to the complete official documentation for    \n# the complete list of R operator precedence by typing  \n#   \n#    ?Syntax #  (capital \"S\")   \n#   \n# or refer to this url (search for \"r official documentation order of operations\")  \n#   \n#    https://stat.ethz.ch/R-manual/R-devel/library/base/html/Syntax.html    \n#   \n# This list is summarized below for the operators that we have learned so far.  \n#   \n#      ^                exponentiation (right to left)  \n#      - +              unary minus and plus (as in -2 and in +2)   \n#      :                  sequence operator \n#      %%    %/%    %in%   (and operators surrounded by %percents%) \n#      * /              multiply, divide    \n#      + -              add, subtract   \n#      &lt; &gt; &lt;= &gt;= == !=  ordering and comparison \n#      !                negation    \n#      &                  and   \n#      |                or  \n#      -&gt;               rightwards assignment   \n#      &lt;-               assignment (right to left)  \n#      =                  assignment (right to left)    \n#   \n#---------------------------------------------------------------------\n\n#-----------------------------------------------------\n# QUESTION - \n# The following are parallel vectors. They contain information about\n# the opening and closing prices of some stocks yesterday.\n#\n# Answer the following questions by writing a command that calculates\n# the specified information.\n#-----------------------------------------------------\n\ncompany= c(\"JP Chase\", \"citigrp\",\"pfizer\", \"moderna\",\"google\",\"microsoft\",\"facebook\",\"j&j\",     \"goldman sachs\", \"oracle\" )\nsector = c(\"fin\",      \"fin\",    \"pharma\", \"pharma\", \"tech\", \"tech\",      \"tech\",    \"pharma\",  \"fin\",           \"tech\")\nhq     = c(\"ny\",        \"ny\",     \"ny\",    \"ma\",     \"ca\",    \"wa\",       \"ca\",      \"nj\",      \"ny\",            \"tx\" )\nticker = c(\"jpm\",      \"c\",      \"pfe\",    \"mrna\",   \"goog\",  \"msft\",     \"fb\",      \"jnj\",     \"gs\",            \"orcl\")\nceo =    c(\"dimon\",    \"fraser\", \"bourla\",  \"bancel\",\"pichai\",\"nadella\",  \"zuckerberg\",\"gorsky\",\"solomon\",      \"catz\")\nopen =   c(171.00,     101,       93.04,    345.20,   2300,    308.61,     326,       164.06,    414.41,         98.42)\nclose =  c(160,        99,       120.00,    365.20,   2405,    350,        300,       140,       465.50,         104)\n\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# QUESTION\n# (a) Show the names of all \"tech\" companies that are NOT headquartered\n#     in California (i.e. \"ca\")\n#\n# (b) Show their tickers   (another command)\n#\n# (c) Show their headquarters (hq)    (another command)\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n# ANSWER - (a) Show the names of all \"tech\" companies that are NOT headquartered\n#              in California (i.e. \"ca\")\n\ncompany [   sector == \"tech\" & hq != \"ca\"]\n\n[1] \"microsoft\" \"oracle\"   \n\n# ANSWER - (b) Show their tickers   (another command)\nticker [   sector == \"tech\" & hq != \"ca\"]\n\n[1] \"msft\" \"orcl\"\n\n# ANSWER - (c) Show their headquarters (hq)    (another command)\nhq [   sector == \"tech\" & hq != \"ca\"]\n\n[1] \"wa\" \"tx\"\n\n##############################################################################\n# BEREN - UP TO HERE - AFTER CLASS 12\n##############################################################################\n\n##############################################################################\n# WILF - UP TO HERE - AFTER CLASS 12\n##############################################################################\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# QUESTION\n#\n# (a) Show the names of the companies in alphabetical order that are\n#     headquartered in either NY or CA\n#\n# (b) Show their headquarters (hq)    (another command)\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n# ANSWER - (a) Show the names of the companies in alphabetical order that are\n#              headquartered in either NY or CA\n\n# These are the companies\n\ncompany [  hq == \"ny\" | hq == \"ca\" ] \n\n[1] \"JP Chase\"      \"citigrp\"       \"pfizer\"        \"google\"       \n[5] \"facebook\"      \"goldman sachs\"\n\n# Use sort to put them in alphabetical order\n\nsort ( company [  hq == \"ny\" | hq == \"ca\" ] )\n\n[1] \"citigrp\"       \"facebook\"      \"goldman sachs\" \"google\"       \n[5] \"JP Chase\"      \"pfizer\"       \n\n# ANSWER - (b) Show their headquarters (hq)    (another command)\n#\n# NOTE - the headquarters are shown in the original order of the companies,\n# not in the sorted order of the companies - see the answer to part (a).\n# Using what we've learned so far there is no simple way to put\n# the headquarters in the sorted order of the companies.\n# We will soon learn about dataframes which does allow for sorting one variable\n# based upon the values in a different variable.\n\n\ncompany [  hq == \"ny\" | hq == \"ca\" ] \n\n[1] \"JP Chase\"      \"citigrp\"       \"pfizer\"        \"google\"       \n[5] \"facebook\"      \"goldman sachs\"\n\nhq [  hq == \"ny\" | hq == \"ca\" ] \n\n[1] \"ny\" \"ny\" \"ny\" \"ca\" \"ca\" \"ny\"\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# QUESTION\n# (a) Show the names of the tech companies whose stock increased in value\n# (b) Show their open values  (another command)\n# (c) Show their close values   (another command) \n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n# ANSWER - (a) Show the names of the tech companies whose stock increased in value\ncompany[  sector == \"tech\"  &  close &gt; open ]\n\n[1] \"google\"    \"microsoft\" \"oracle\"   \n\n# ANSWER - (b) Show their open values  (another command)\nopen[  sector == \"tech\"  &  close &gt; open ]\n\n[1] 2300.00  308.61   98.42\n\n# (c) Show their close values   (another command) \nclose[  sector == \"tech\"  &  close &gt; open ]\n\n[1] 2405  350  104\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .. . . . . .\n# QUESTION\n# (a) Show the names of the tech companies whose stock increased in value by 10% or more\n# (b) Show their open values  (another command)\n# (c) Show their close values   (another command) \n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n# ANSWER\n\n# (a) Show the names of the tech companies whose stock increased in value by 10% or more\ncompany[  sector == \"tech\"  &  close &gt;= open + open * .1 ]\n\n[1] \"microsoft\"\n\n# (b) Show their open values  (another command)\nopen[  sector == \"tech\"  &  close &gt;= open + open * .1 ]\n\n[1] 308.61\n\n# (c) Show their close values   (another command) \nclose[  sector == \"tech\"  &  close &gt;= open + open * .1 ]\n\n[1] 350\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# QUESTION\n# (a) Show the names of the tech and pharma companies whose stock increased in value by 10% or more\n#\n# (b) Show their sectors   (another command)\n#\n# (c) Show their open values  (another command)\n#\n# (d) Show their close values   (another command) \n#\n# (e) Show the percent increases of the tech and pharma companies whose stock increased in value by 10% or more\n#     HINT: calculate a new vector that calculates the percent increases of all \n#     the stocks. Then use that new vector to get just the percent increases for\n#     the companies we want. You can do this all in one command or in different\n#     commands.\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n# ANSWER\n\n# (a) Show the names of the tech and pharma companies whose stock increased in value by 10% or more\n\ncompany[  ( sector == \"tech\" | sector == \"pharma\" )  &  close &gt;= open + open * .1 ]\n\n[1] \"pfizer\"    \"microsoft\"\n\n# Note - the parentheses above ARE required. \n# \n# This is wrong since the & happens before | due to order of operations, you will get \n# ALL tech companies and not just those who increased in value by 10%\ncompany[  sector == \"tech\" | sector == \"pharma\"  &  close &gt;= open + open * .1 ]  # WRONG\n\n[1] \"pfizer\"    \"google\"    \"microsoft\" \"facebook\"  \"oracle\"   \n\n# This is wrong since the & happens before | due to order of operations, you will get \n# ALL pharma companies and not just those who increased in value by 10%\ncompany[  close &gt;= open + open * .1  &  sector == \"tech\" | sector == \"pharma\"   ]\n\n[1] \"pfizer\"    \"moderna\"   \"microsoft\" \"j&j\"      \n\n# ANSWER - (b) Show their sectors   (another command)\n\nsector[  ( sector == \"tech\" | sector == \"pharma\" )  &  close &gt;= open + open * .1 ]\n\n[1] \"pharma\" \"tech\"  \n\n# ANSWER - (c) Show their open values  (another command)\nopen[  ( sector == \"tech\" | sector == \"pharma\" )  &  close &gt;= open + open * .1 ]\n\n[1]  93.04 308.61\n\n# ANSWER - (d) Show their close values   (another command) \nclose[  ( sector == \"tech\" | sector == \"pharma\" )  &  close &gt;= open + open * .1 ]\n\n[1] 120 350\n\n# ANSWER - (e) Show the percent increases of the tech and pharma companies whose stock increased in value by 10% or more\n#     HINT: calculate a new vector that calculates the percent increases of all \n#     the stocks. Then use that new vector to get just the percent increases for\n#     the companies we want. You can do this all in one command or in different\n#     commands.\n\n\n# One way - in two commands\npctIncreases = ( close - open) / open * 100\npctIncreases\n\n [1]  -6.432749  -1.980198  28.976784   5.793743   4.565217  13.411749\n [7]  -7.975460 -14.665366  12.328370   5.669579\n\npctIncreases[  ( sector == \"tech\" | sector == \"pharma\" )  &  close &gt;= open + open * .1 ]\n\n[1] 28.97678 13.41175\n\n# Another way - all in one command\n\n( ( close - open) / open * 100) [  ( sector == \"tech\" | sector == \"pharma\" )  &  close &gt;= open + open * .1 ]\n\n[1] 28.97678 13.41175\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# QUESTION\n# (a) Show the tickers of \"fin\" and \"tech\" companies whose stock opened or closed over $100\n# (b) Show their sectors   (another command)\n# (c) Show their open values  (another command)\n# (d) Show their close values   (another command) \n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n\n# ANSWER\n\n# (a) Show the tickers of \"fin\" and \"tech\" companies whose stock opened or closed over $100\nticker [ ( sector == \"fin\" | sector == \"tech\") &  ( open &gt;= 100 | close &gt;= 100 )  ]\n\n[1] \"jpm\"  \"c\"    \"goog\" \"msft\" \"fb\"   \"gs\"   \"orcl\"\n\n# (b) Show their sectors   (another command)\nsector [ ( sector == \"fin\" | sector == \"tech\") &  ( open &gt;= 100 | close &gt;= 100 )  ]\n\n[1] \"fin\"  \"fin\"  \"tech\" \"tech\" \"tech\" \"fin\"  \"tech\"\n\n# (c) Show their open values  (another command)\nopen [ ( sector == \"fin\" | sector == \"tech\") &  ( open &gt;= 100 | close &gt;= 100 )  ]\n\n[1]  171.00  101.00 2300.00  308.61  326.00  414.41   98.42\n\n# (d) Show their close values   (another command) \nclose [ ( sector == \"fin\" | sector == \"tech\") &  ( open &gt;= 100 | close &gt;= 100 )  ]\n\n[1]  160.0   99.0 2405.0  350.0  300.0  465.5  104.0",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>logical operators</span>"
    ]
  },
  {
    "objectID": "000390-sciNotation_roundoffError_v005.html",
    "href": "000390-sciNotation_roundoffError_v005.html",
    "title": "19  scientific notation ~(longer version)~",
    "section": "",
    "text": "# remove all varibles\nrm (list = ls())\n\n########################################################\n########################################################\n##\n##  A couple of introductory comments about basic math\n##\n########################################################\n########################################################\n\n#--------------------------------------------\n# how many zeros are there in a power of 10?\n#--------------------------------------------\n\n# The number of zeros (before the decimal point) in a\n# POSITIVE power of 10 is the same as the exponent\n\n10^1    # 10  (one zero)\n\n[1] 10\n\n10^2   # 100  (two zeros)\n\n[1] 100\n\n10^3  # 1000  (three zeros)\n\n[1] 1000\n\n10^4  # 10000  (four zeros)\n\n[1] 10000\n\n# etc ...\n\n# The number of zeros after the decimal point in a\n# NEGATIVE power of 10 is one less than the absolute value of the exponent\n\n10^-1  # 0.1    (no zeros after the decimal point)\n\n[1] 0.1\n\n10^-2  # 0.01   (one zero after the decimal point)\n\n[1] 0.01\n\n10^-3  # 0.001  (two zeros after the decimal point)\n\n[1] 0.001\n\n10^-4  # 0.0001 (three zeros after the decimal point)\n\n[1] 1e-04\n\n# etc ...\n\n#-------------------------------------------------------\n# Intro to Scientific Notation in R\n#\n# Multiplying numbers by powers of 10\n#-------------------------------------------------------\n\n# If you multiply a number by a POSITIVE POWER of 10 the decimal point\n# will move to the RIGHT by the number of positions as expressed by the exponent.\n# Example:\n\n1.234 * 10^0     # 1.234 : 10^0 is 1 so this doesn't change the first number\n\n[1] 1.234\n\n1.234 * 10^1     # 12.34 : 10^1 is 10 so this moves the decimal to the right by 1 position\n\n[1] 12.34\n\n1.234 * 10^2     # 123.4 : 10^2 is 100 so this moves the decimal to the right by 1 position\n\n[1] 123.4\n\n1.234 * 10^3     # 1234.0\n\n[1] 1234\n\n1.234 * 10^4     # 12340.0\n\n[1] 12340\n\n# etc ...\n\n\n# If you multiply a number by a NEGATIVE POWER of 10 the decimal point\n# will move to the LEFT by the number of positions as expressed by the exponent.\n# Example:\n\n123.4 * 10^-1     # 12.34    move decimal point 1 position to the left\n\n[1] 12.34\n\n123.4 * 10^-2     # 1.234    move decimal point 2 positions to the left\n\n[1] 1.234\n\n123.4 * 10^-3     # 0.1234   move decimal point 3 positions to the left\n\n[1] 0.1234\n\n123.4 * 10^-4     # 0.01234  move decimal point 4 positions to the left\n\n[1] 0.01234\n\n# etc ...\n\n# These types of calculations can be used as a shorthand to write very large numbers\n# and very small numbers in a very compact way. For example: \n#\n#   9.234 * 10^100  is shorthand for \n#   the very very large number 9234000000...(total of 97 zeros)...0000\n#   i.e. 97 zeros after the 9234\n#\n#   9.234 * 10^-100 is shorthand for\n#   the very very small number 0.00000......(99 zeros)...0009234\n#   i.e. 99 zeros between the decimal point and the 9234\n#\n# The above calculations are examples of \"Scientific notation\".\n# Scientific notation is used as a shorthand for writing very big numbers\n# (and very small numbers - see below)\n\n#---------------------------------------------------------------------\n# R has a shorthand notation for writing these types of calculations.\n# Instead of writing 1.2345*10^6, you could instead write 1.2345e6\n#\n# The \"e\" in the number stands for \"exponent\". The \"e\" is understood\n# to be read as \"times ten to the power of\". The number after the \"e\"\n# is the exponent for the power of 10.\n# EXAMPLE - all of the following are the same exact number:\n#---------------------------------------------------------------------\n\n1234500            # this is the same\n\n[1] 1234500\n\n1.2345 * 10^6      # this is the same   1234500\n\n[1] 1234500\n\n1.2345e6           # this is the same\n\n[1] 1234500\n\n# By default R will display values in scientific notation if the number is\n# very very big or very small. For example:\n\n# very large number - by default, R shows this value in scientific notation\n12300000000  # 1.23e+10 \n\n[1] 1.23e+10\n\n# very small number - by default, R shows this value in scientific notation\n0.000000123 # 1.23e-07\n\n[1] 1.23e-07\n\n# We can also write scientific notation in our code if we like.\n\n1.23e+9 / 1e+8  # 12.3 , same as  1230000000 / 100000000  but a easier to read :)\n\n[1] 12.3\n\n1.2e-4  # 0.00012\n\n[1] 0.00012\n\n0.0000000000123 == 1.23e-11\n\n[1] TRUE\n\n0.00000000001231 == 1.23e-11\n\n[1] FALSE\n\n# If R returns some very large numbers or some very small numbers in a vector,\n# the ALL of the numbers in the vector will be displayed in scientific notation.\n\n# Some typical arithmetic - nothing surprising.\n\n100 / c(100, 20)         # 1   5  \n\n[1] 1 5\n\n# Same code as above but the last value will be very large so ALL of the\n# results are expressed in scientific notation.\n\n100 / c(100, 20)   # 1  5\n\n[1] 1 5\n\n100 / c(100, 20, 0.001)  # 1e+00  5e+00  1e+05\n\n[1] 1e+00 5e+00 1e+05\n\n# numbers are all low enough to display without scientific notation\n3 ^ (1:5)   # 3  9  27  81  243 \n\n[1]   3   9  27  81 243\n\n# Some of the larger numbers are displayed in scientific notation so\n# R displays ALL of the numbers in scientific notation\n3 ^ (1:30) # 3.00e+00  9.00e+00  2.70e+01  8.10e+01  2.43e+02  etc ...\n\n [1] 3.000000e+00 9.000000e+00 2.700000e+01 8.100000e+01 2.430000e+02\n [6] 7.290000e+02 2.187000e+03 6.561000e+03 1.968300e+04 5.904900e+04\n[11] 1.771470e+05 5.314410e+05 1.594323e+06 4.782969e+06 1.434891e+07\n[16] 4.304672e+07 1.291402e+08 3.874205e+08 1.162261e+09 3.486784e+09\n[21] 1.046035e+10 3.138106e+10 9.414318e+10 2.824295e+11 8.472886e+11\n[26] 2.541866e+12 7.625597e+12 2.287679e+13 6.863038e+13 2.058911e+14\n\n#-----------------------------------------------------\n# MORAL OF THE STORY - don't become alarmed\n#\n# Occasionally, you will see R displaying numbers in \n# scientific notation. Don't become confused. Understand\n# that these are just \"regular numbers\" being displayed in \n# a more concise format. Any math that is done with these\n# numbers is the same as if you did the same math with the \n# equivalent non-scientific-notation format.\n#-----------------------------------------------------\n\n\n\n\n\n#----------------------------------------------------------\n# PRACTICE\n#----------------------------------------------------------\n\n\n# QUESTION - Write the value 4.98e+5 as a \"regular\" number\n\n\n\n# QUESTION - Write the value of 4.98e-3 as a \"regular\" number\n\n\n# what are the values of the following expressions?\n#\n#    1e-2 + 2e-1\n#\n#    9.876e5\n#\n#    5.23e4 + 1000\n#\n#\n# What will R display for the following numbers?\n#\n#    12340000000000 (ten zeros)\n#\n#    0.0000000000123 (ten zeros)\n\n\n\n#########################################################################\n# 2022 - BEREN - ONLY COVERED UP TO HERE IN THIS FILE\n#        YOU ARE NOT RESPONSIBLE FOR THE MATERIAL BELOW THIS POINT IN THIS FILE\n#########################################################################\n\n#########################################################################\n# 2022 - WILF - ONLY COVERED UP TO HERE IN THIS FILE\n#        YOU ARE NOT RESPONSIBLE FOR THE MATERIAL BELOW THIS POINT IN THIS FILE\n#########################################################################\n\n\n\n############################################################\n############################################################\n#\n# Roundoff error in Decimal (base-10) and Binary (base-2)\n#\n############################################################\n############################################################\n\n# The numbers what we humans use every day are made up of 10 different digits i.e 0,1,2 .. 9\n# These numbers are therefore called \"base-10\" numbers or \"decimal\" numbers.\n#\n# It may sound strange, but in order to perform many calculations, computers internally use numbers\n# that only have 1 and 0 as digits. These numbers are known as \"base-2\" or \"binary\" numbers. When computers display numbers to \n# people, the numbers are converted to the \"base-10\" (or \"decimal\") numbers that we are\n# used to seeing.\n#\n\n# Right now we will NOT discuss the intricate details of how \n# computer work with Binary (base-2) numbers.\n# (For more info. you can refer to the powerpoint on Canvas.)\n# HOWEVER, you should understand the following ...\n#\n# The fractions that can be converted to an exact number with a decimal point are \n# different for base-2 (aka binary) numbers and for base-10 (aka decimal) numbers. \n# For binary numbers (i.e. numbers that computers use internally)\n# fractions that can be reduced to have a power of 2 in the denominator\n# can be represented by a terminating decimal point value. \n# Other fractions cannot. \n#\n# This issue leads to \"roundoff\" error very frequently when doing math\n# in computer programming- similar to 1/3 + 1/3 + 1/3 ...\n#\n# R masks this issue by displaying what you might think a number is.\n# However, the actual value for the number might be something else. \n# \n# You can use the print.default (or just print) function with the \n# digits argument to display the ACTUAL value that R stores for a number\n\n0.1\n\n[1] 0.1\n\nprint(0.1, digits=22)\n\n[1] 0.1000000000000000055511\n\n0.3\n\n[1] 0.3\n\nprint(0.3, digits=22)\n\n[1] 0.2999999999999999888978\n\n0.6\n\n[1] 0.6\n\nprint(0.6, digits=22)\n\n[1] 0.5999999999999999777955\n\n1.1\n\n[1] 1.1\n\nprint(1.1, digits=22)\n\n[1] 1.100000000000000088818\n\n# This issue can lead to \"roundoff\" errors. There are ways to deal with \n# this but it can get a little involved for this early in the course.\n# for right now, just accept it. We'll revisit this issue later.\n\n\n\n\n# It is well known that the fraction 1/3 cannot be directly represented by \n# a number with a decimal point. The best we can do is 0.333...  You would need\n# an infinite number of 3's after the decimal point to accurately represent the \n# fraction 1/3. Therefore 0.333 + 0.333 + 0.333 is NOT the same as 1/3 + 1/3 + 1/3.\n# Similarly 1/11 is 0.090909... You cannot represent one eleventh exactly using\n# a finite number of digits.\n\n# In binary (i.e. base-2) a similar problem exists. However, the numbers that cannot\n# be represented exactly are different from those in decimal. For example, if you \n# would convert 1/5 to binary, you would not get an exact representation. \n# Therefore R will not be able to represent the value of 1/5 exactly \n# using standard \"numeric\" values.\n\noneFifth = 1/5\noneFifth                   # R displays a rounded version of the value\n\n[1] 0.2\n\nprint(1/5 , digits=22)     # you can see the actual value stored by specifying the # of digits after the decimal point\n\n[1] 0.2000000000000000111022\n\nprint(1/5 * 1, digits=22)\n\n[1] 0.2000000000000000111022\n\nprint(1/5 * 2, digits=22)\n\n[1] 0.4000000000000000222045\n\nprint(1/5 * 3, digits=22)\n\n[1] 0.6000000000000000888178\n\nprint(1/5 * 4, digits=22)\n\n[1] 0.8000000000000000444089\n\nprint(1/5 * 5, digits=22)\n\n[1] 1\n\n# The same is true for 1/10\n\noneTenth = 1/10\noneTenth\n\n[1] 0.1\n\nprint(oneTenth, digits=22)\n\n[1] 0.1000000000000000055511\n\nprint(oneTenth * 1 , digits =22)\n\n[1] 0.1000000000000000055511\n\nprint(oneTenth * 2 , digits =22)\n\n[1] 0.2000000000000000111022\n\nprint(oneTenth * 3 , digits =22)\n\n[1] 0.3000000000000000444089\n\nprint(oneTenth * 4 , digits =22)\n\n[1] 0.4000000000000000222045\n\nprint(oneTenth * 5 , digits =22)\n\n[1] 0.5\n\nprint(oneTenth * 6 , digits =22)\n\n[1] 0.6000000000000000888178\n\nprint(oneTenth * 7 , digits =22)\n\n[1] 0.7000000000000000666134\n\nprint(oneTenth * 8 , digits =22)\n\n[1] 0.8000000000000000444089\n\nprint(oneTenth * 9 , digits =22)\n\n[1] 0.9000000000000000222045\n\nprint(oneTenth * 10 , digits =22)\n\n[1] 1\n\n######################################################################################\n#######################################################################################\n#\n# EXPLORING R's VARIOUS OPTIONS\n#\n# R has over 80 different options that you can set. For most of the time we will\n# choose to just leave the defaults that are set when R is installed. However, \n# sometimes it is helpful to change some of these options. \n# options()    # see all of R's options and their values\n#\n# When working with roundoff error issues it is helpful sometimes to automatically\n# see more digits after the decimal point when you perform R commands. \n# You can do that through R's options. See the following for more info.\n#\n# options()          # see all of R's options and their values\n#\n# names(options())   # see just the names of the options without their values\n#\n# getOption(\"digits\") # see the value of the digits option (default for new installation is 7)\n#\n# options(digits=22)  # set the number of max # of digits that R will display for a number\n#\n#\n#######################################################################################\n#######################################################################################\n\noptions()    # see all of R's options and their values\n\n$add.smooth\n[1] TRUE\n\n$browserNLdisabled\n[1] FALSE\n\n$callr.condition_handler_cli_message\nfunction (msg) \n{\n    custom_handler &lt;- getOption(\"cli.default_handler\")\n    if (is.function(custom_handler)) {\n        custom_handler(msg)\n    }\n    else {\n        cli_server_default(msg)\n    }\n}\n&lt;bytecode: 0x000002008ca8b340&gt;\n&lt;environment: namespace:cli&gt;\n\n$catch.script.errors\n[1] FALSE\n\n$CBoundsCheck\n[1] FALSE\n\n$check.bounds\n[1] FALSE\n\n$citation.bibtex.max\n[1] 1\n\n$continue\n[1] \"+ \"\n\n$contrasts\n        unordered           ordered \n\"contr.treatment\"      \"contr.poly\" \n\n$defaultPackages\n[1] \"datasets\"  \"utils\"     \"grDevices\" \"graphics\"  \"stats\"     \"methods\"  \n\n$demo.ask\n[1] \"default\"\n\n$deparse.cutoff\n[1] 60\n\n$device\nfunction (width = 7, height = 7, ...) \n{\n    grDevices::pdf(NULL, width, height, ...)\n}\n&lt;bytecode: 0x000002008c51dbc0&gt;\n&lt;environment: namespace:knitr&gt;\n\n$device.ask.default\n[1] FALSE\n\n$digits\n[1] 7\n\n$echo\n[1] FALSE\n\n$editor\n[1] \"notepad\"\n\n$encoding\n[1] \"native.enc\"\n\n$example.ask\n[1] \"default\"\n\n$expressions\n[1] 5000\n\n$help.search.types\n[1] \"vignette\" \"demo\"     \"help\"    \n\n$help.try.all.packages\n[1] FALSE\n\n$help_type\n[1] \"html\"\n\n$htmltools.preserve.raw\n[1] TRUE\n\n$HTTPUserAgent\n[1] \"R (4.4.0 x86_64-w64-mingw32 x86_64 mingw32)\"\n\n$install.packages.compile.from.source\n[1] \"interactive\"\n\n$internet.info\n[1] 2\n\n$keep.parse.data\n[1] TRUE\n\n$keep.parse.data.pkgs\n[1] FALSE\n\n$keep.source\n[1] FALSE\n\n$keep.source.pkgs\n[1] FALSE\n\n$knitr.in.progress\n[1] TRUE\n\n$locatorBell\n[1] TRUE\n\n$mailer\n[1] \"mailto\"\n\n$matprod\n[1] \"default\"\n\n$max.contour.segments\n[1] 25000\n\n$max.print\n[1] 99999\n\n$menu.graphics\n[1] TRUE\n\n$na.action\n[1] \"na.omit\"\n\n$nwarnings\n[1] 50\n\n$OutDec\n[1] \".\"\n\n$pager\n[1] \"internal\"\n\n$papersize\n[1] \"letter\"\n\n$PCRE_limit_recursion\n[1] NA\n\n$PCRE_study\n[1] FALSE\n\n$PCRE_use_JIT\n[1] TRUE\n\n$pdfviewer\n[1] \"C:/PROGRA~1/R/R-44~1.0/bin/x64/open.exe\"\n\n$pkgType\n[1] \"both\"\n\n$prompt\n[1] \"&gt; \"\n\n$repos\n    CRAN \n\"@CRAN@\" \n\n$scipen\n[1] 0\n\n$show.coef.Pvalues\n[1] TRUE\n\n$show.error.messages\n[1] TRUE\n\n$show.signif.stars\n[1] TRUE\n\n$showErrorCalls\n[1] TRUE\n\n$showNCalls\n[1] 50\n\n$showWarnCalls\n[1] FALSE\n\n$str\n$str$strict.width\n[1] \"no\"\n\n$str$digits.d\n[1] 3\n\n$str$vec.len\n[1] 4\n\n$str$list.len\n[1] 99\n\n$str$deparse.lines\nNULL\n\n$str$drop.deparse.attr\n[1] TRUE\n\n$str$formatNum\nfunction (x, ...) \nformat(x, trim = TRUE, drop0trailing = TRUE, ...)\n&lt;environment: 0x000002008c95b228&gt;\n\n\n$str.dendrogram.last\n[1] \"`\"\n\n$tikzMetricsDictionary\n[1] \"000390-sciNotation_roundoffError_v005-tikzDictionary\"\n\n$timeout\n[1] 60\n\n$try.outFile\nA connection with                            \ndescription \"output\"        \nclass       \"textConnection\"\nmode        \"wr\"            \ntext        \"text\"          \nopened      \"opened\"        \ncan read    \"no\"            \ncan write   \"yes\"           \n\n$ts.eps\n[1] 1e-05\n\n$ts.S.compat\n[1] FALSE\n\n$unzip\n[1] \"internal\"\n\n$useFancyQuotes\n[1] FALSE\n\n$verbose\n[1] FALSE\n\n$warn\n[1] 0\n\n$warning.length\n[1] 1000\n\n$warnPartialMatchArgs\n[1] FALSE\n\n$warnPartialMatchAttr\n[1] FALSE\n\n$warnPartialMatchDollar\n[1] FALSE\n\n$width\n[1] 80\n\n$windowsTimeouts\n[1] 100 500\n\n?options     # learn more about the options command\n\nstarting httpd help server ... done\n\nnames(options())   # see just the names of the options without their values\n\n [1] \"add.smooth\"                          \n [2] \"browserNLdisabled\"                   \n [3] \"callr.condition_handler_cli_message\" \n [4] \"catch.script.errors\"                 \n [5] \"CBoundsCheck\"                        \n [6] \"check.bounds\"                        \n [7] \"citation.bibtex.max\"                 \n [8] \"continue\"                            \n [9] \"contrasts\"                           \n[10] \"defaultPackages\"                     \n[11] \"demo.ask\"                            \n[12] \"deparse.cutoff\"                      \n[13] \"device\"                              \n[14] \"device.ask.default\"                  \n[15] \"digits\"                              \n[16] \"echo\"                                \n[17] \"editor\"                              \n[18] \"encoding\"                            \n[19] \"example.ask\"                         \n[20] \"expressions\"                         \n[21] \"help.search.types\"                   \n[22] \"help.try.all.packages\"               \n[23] \"help_type\"                           \n[24] \"htmltools.preserve.raw\"              \n[25] \"HTTPUserAgent\"                       \n[26] \"install.packages.compile.from.source\"\n[27] \"internet.info\"                       \n[28] \"keep.parse.data\"                     \n[29] \"keep.parse.data.pkgs\"                \n[30] \"keep.source\"                         \n[31] \"keep.source.pkgs\"                    \n[32] \"knitr.in.progress\"                   \n[33] \"locatorBell\"                         \n[34] \"mailer\"                              \n[35] \"matprod\"                             \n[36] \"max.contour.segments\"                \n[37] \"max.print\"                           \n[38] \"menu.graphics\"                       \n[39] \"na.action\"                           \n[40] \"nwarnings\"                           \n[41] \"OutDec\"                              \n[42] \"pager\"                               \n[43] \"papersize\"                           \n[44] \"PCRE_limit_recursion\"                \n[45] \"PCRE_study\"                          \n[46] \"PCRE_use_JIT\"                        \n[47] \"pdfviewer\"                           \n[48] \"pkgType\"                             \n[49] \"prompt\"                              \n[50] \"repos\"                               \n[51] \"scipen\"                              \n[52] \"show.coef.Pvalues\"                   \n[53] \"show.error.messages\"                 \n[54] \"show.signif.stars\"                   \n[55] \"showErrorCalls\"                      \n[56] \"showNCalls\"                          \n[57] \"showWarnCalls\"                       \n[58] \"str\"                                 \n[59] \"str.dendrogram.last\"                 \n[60] \"tikzMetricsDictionary\"               \n[61] \"timeout\"                             \n[62] \"try.outFile\"                         \n[63] \"ts.eps\"                              \n[64] \"ts.S.compat\"                         \n[65] \"unzip\"                               \n[66] \"useFancyQuotes\"                      \n[67] \"verbose\"                             \n[68] \"warn\"                                \n[69] \"warning.length\"                      \n[70] \"warnPartialMatchArgs\"                \n[71] \"warnPartialMatchAttr\"                \n[72] \"warnPartialMatchDollar\"              \n[73] \"width\"                               \n[74] \"windowsTimeouts\"                     \n\ngetOption(\"digits\") # see the value of the digits option (default for new installation is 7)\n\n[1] 7\n\noptions(digits=22)  # set the number of max # of digits that R will display for a number\n\n# You can see now that these numbers have roundoff error\n1/5\n\n[1] 0.2000000000000000111022\n\n1/10    \n\n[1] 0.1000000000000000055511\n\n# These numbers do not\n1/2\n\n[1] 0.5\n\n1/4\n\n[1] 0.25\n\n1/8\n\n[1] 0.125\n\n# set digits option back to the default\noptions(digits=7)  # set the number of max # of digits that R will display for a number\n\n# You don't see the roundoff error anymore but it is still there ...\n1/5\n\n[1] 0.2\n\n1/10    \n\n[1] 0.1\n\n# A somewhat more involved explanation ...\n\n#############################################################\n#############################################################\n##\n## Floating point numbers and \"roundoff errors\"\n##\n## (A \"floating point number\" refers to a number that \n##  contains a decimal point. The term \"floating point\" is\n##  a reference to a technique that\n#   computers use to process numbers with decimal points in them.\n##  We will not cover exactly why they\n##  are called \"floating point\" numbers, but the reason is \n##  related to the fact that multiplying a number by a power of 10\n##  simply moves the decimal point.)\n##\n#############################################################\n#############################################################\n\n# Some fractions that we write do not have an exact representation\n# as floating point numbers. For example, many people will write\n# 1/3 as 0.333, however there really should be an infinite number of 3's in the floating point\n# version. 0.333 is just a rough approximation. 0.3333 is closer to 1/3\n# and 0.33333 (five 3's) is even closer. However, you will NEVER get\n# an exact representation of 1/3 unless you write an infinite number\n# of 3's after the decimal point.\n#\n# Therefore 1/3  +  1/3   +  1/3 = 1\n# When converted into floating point numbers becomes, approximately \n#\n#  0.333 + 0.333 + 0.333 = 0.999 (which looks wrong!)\n#\n# Some fractions can be converted exactly, eg.\n#    1/2 is 0.5 exactly\n#    1/4 is 0.25 exactly\n#    1/5 is 0.2 exactly\n#    1/8 is 0.125 exactly\n#    1/10 is 0.1 exactly\n#    1/16 is 0.0625 exactly \n#    1/25 is 0.04 exactly\n#\n# In general if a fraction can be reduced to an equivalent fraction whose\n# denominator is a power of 2 , a power of 5 or a power of 10, then the \n# fraction can be represented by an exact terminating decimal.\n\n\n#------------------------------------------------------------------\n# \n# Base-10 (aka Decimal) numbers vs Base-2 (aka Binary) numbers\n# \n#------------------------------------------------------------------\n\n# Languages such as Hebrew, Arabic and English use different alphabets.\n# However, some languages such as French, Spanish and English use the same\n# alphabet. However, the words they form often mean different things in the \n# different languages. For example the word \"pie\" in English is a tasty treat\n# but \"pie\" in Spanish means a foot. In order to really understand what the word\n# \"pie\" means you need to know if the word is Spanish or English!!!\n\n# In a similiar way, there are different \"numeric languages\". \n# \"Numeric languages\", such as \"Roman numerals\", use different \"alphabets\".\n# For example, the number that we know as one hundred and twenty three, i.e. 123\n# is written in Roman numerals as CXXIII.\n#\n# However, some \"numeric languages\" use the same digits that we recognize but\n# in a different way. The internal workings of computers are designed to use\n# a different \"numeric language\" than the numbers that people are used to seeing.\n# Internally, computers process information using a \"numeric language\" known as\n# \"base-2\" or \"binary\". For example, the number \"one hundred and twenty three\", i.e. 123, \n# can be written in binary (or base-2) as 01111011. Every base-2 (or binary) number\n# is written using just zeros and ones. For example, the binary number\n# 1001100100100101 is the equivalent of the decimal (base-10) number\n# 39205 (i.e. thirty nine thousand two hundred and five).\n#\n# When a computer gets a decimal (base-10) number from a peson, the computer first converts\n# the decimal (base-10) number into a binary (base-2) number. The computer then\n# performs any processing it needs to do. Finally, the result is translated back\n# into the decimal form and displayed to the person.\n\n#----------------------------------------------------------------------------------\n# \n# Decimal (base-10) and binary (base-2) numbers can represent the exact same integers.\n#\n#----------------------------------------------------------------------------------\n\n# Any integer that we can write in base-10 (or decimal) can also be written, in a different\n# form in base-2 (or binary). For example, the following are the decimal and binary\n# equivalents for a few numbers:\n#\n#     DECIMAL (base-10)   BINARY (base-2)\n#                    0                  0  \n#                    1                  1\n#                    2                 10\n#                    3                 11\n#                    4                100\n#                    5                101\n#                    6                110\n#                    7                111\n#                    8               1000\n\n\n#----------------------------------------------------------------------------------\n# \n# Decimal (base-10) can NOT precisely represent some \"real\" numbers (i.e. fractions)\n# and there will be \"roundoff\" error.\n#\n#----------------------------------------------------------------------------------\n\n# In the number system we use every day, some fractions can be perfectly represented\n# by \"real\" numbers (i.e. numbers with decimal points) while others cannot.\n# For EXAMPLE:\n#             1/2 is EXACTLY 0.5\n#             1/4 is EXACTLY 0.25\n#             1/5 is EXACTLY 0.2\n#             1/8 is EXACTLY 0.124\n#             1/10 is EXACTLY 0.1\n#\n# However, the following fractions CANNOT be represented EXACTLY by a number with a decimal point.\n# These fractions lead to \"repeating digits after the decimal point\"\n# EXAMPLE:\n#             1/3 is 0.333...  (the 3's repeat forever)\n#             1/6 is 0.1666...          (the 6's repeat forever)\n#             1/7 is 0.142857142857...  (the 142857's repeat forever)\n#             1/9 is 0.111...           (the 1's repeat forever)\n\n#----------------------------------------------------------------\n#\n# Binary (base-2) can NOT represent other \"real\" numbers\n#\n#----------------------------------------------------------------\n\n# Binary numbers have similar limitations but for DIFFERENT fractions.\n# Any fraction that has a power of 2 in the denominator can be represented\n# exactly in binary. However, other fractions cannot.\n# For example:\n#\n#     1/2  is EXACTLY 0.1  (in binary)\n#     1/4  is EXACTLY 0.01  (in binary)\n#     1/8  is EXACTLY 0.001  (in binary)\n#     1/16  is EXACTLY 0.0001  (in binary)\n#     3/4  is EXACTLY  0.11 (in binary)\n#     3/8 is EXACTLY   0.011 (in binary)\n#     (any fraction for which the denominator is a power of 2 can be represented exactly in binary)\n#\n# However:\n#\n#     1/3  in binary is 0.010101... (the 01's repeat forever)\n#     1/5  in binary is 0.00110011... (the 0011's repeat forever)\n#     1/6  in binary is 0.0010101...  (the 01's repeat forever)\n#     1/10 in binary is 0.000110011... (the 0011's repeat forever)\n#     (fractions whose denomiators are not a power of two cannot be represented exactly in binary)",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>scientific notation *~(longer version)~*</span>"
    ]
  },
  {
    "objectID": "000400-sciNotation_roundoffError_accessingVectorPositions-v000.html",
    "href": "000400-sciNotation_roundoffError_accessingVectorPositions-v000.html",
    "title": "20  scientific notation ~(abbridged version)~",
    "section": "",
    "text": "# remove all varibles\nrm (list = ls())\n\n########################################################\n########################################################\n##\n##  A couple of introductory comments about basic math\n##\n########################################################\n########################################################\n\n#--------------------------------------------\n# how many zeros are there in a power of 10?\n#--------------------------------------------\n\n# 10^2 is 100\n100     # 100 is the same as 10^2\n\n[1] 100\n\n10^2    # 10^2 is the same as 100\n\n[1] 100\n\n# 10^3 is 1000\n1000    # 1000 is the same as 10^3\n\n[1] 1000\n\n10^3    # 10^3 is the same as 1000\n\n[1] 1000\n\n# etc ...\n# In summary, you can figure out a power of 10, by adding the number\n# of zeros after the 1 that match the exponent, e.g. 10^2 is 100 (2 zeros)\n# This works similarly (but not exactly the same) for negative exponents of 10\n\n# 10^-1 is 0.1\n0.1      # 0.1 is the same as 10^-1\n\n[1] 0.1\n\n10^-1    # 10^-1 is the same as 0.1\n\n[1] 0.1\n\n# 10^-1 is 0.1\n0.01     # 0.01 is the same as 10^-2\n\n[1] 0.01\n\n10^-2    # 10^-2 is the same as 0.01\n\n[1] 0.01\n\n# etc...\n# The number of zeros after the decimal point is one less than the absolute value\n# of the exponent of 10.\n\n#-------------------------------------------------------\n# Intro to Scientific Notation in R\n#\n# Multiplying numbers by powers of 10\n#-------------------------------------------------------\n\n# If you multiply a number by a POSITIVE POWER of 10 the decimal point\n# will move to the RIGHT by the number of positions as expressed by the exponent.\n# Example:\n\n1.2345 * 10^0     # 10^0 is 1 so this doesn't change the first number\n\n[1] 1.2345\n\n1.2345 * 10^1     # 10^1 is 10 so this moves the decimal to the right by 1 position\n\n[1] 12.345\n\n1.2345 * 10^2     # 10^2 is 100 so this moves the decimal to the right by 1 position\n\n[1] 123.45\n\n1.2345 * 10^6     # This moves the decimal point to the RIGHT by 10 positions\n\n[1] 1234500\n\n# The above calculations are examples of \"Scientific notation\".\n# Scientific notation is used as a shorthand for writing very big numbers\n# (and very small numbers - see below)\n\n\n#---------------------------------------------------------------------\n# R has a shorthand notation for writing these types of calculations.\n# Instead of writing 1.2345*10^6, you could instead write 1.2345e6\n#\n# The \"e\" in the number stands for \"exponent\". The \"e\" is understood\n# to be read as \"times ten to the power of\". The number after the \"e\"\n# is the exponent for the power of 10.\n# EXMAPLE - all of the following are the same exact number:\n#---------------------------------------------------------------------\n\n1234500            # this is the same\n\n[1] 1234500\n\n1.2345 * 10^6      # this is the same\n\n[1] 1234500\n\n1.2345e6           # this is the same\n\n[1] 1234500\n\n# By default R will display values in scientific notation if the number is\n# very very big. For example:\n\n12345000000 # by default, R will show this value in scientific notation\n\n[1] 1.2345e+10\n\n#-------------------------------------------------------\n# Negative exponents of 10 move the decimal to the LEFT\n#-------------------------------------------------------\n\n# 0.00123 is the same as 0.123 * 10^-4\n\n0.0123      # this is the same value as below\n\n[1] 0.0123\n\n1.23*10^-2   # this is the same value as above\n\n[1] 0.0123\n\n# R will display very small numbers using scientific notation also.\n# The following is a very small number (there are ten zeros).\n# R will display this in scientific notation\n\n0.0000000000123   # same as 1.23e-11\n\n[1] 1.23e-11\n\n1.23e-11          # we can write that directly also\n\n[1] 1.23e-11\n\n#-----------------------------------------------------\n# MORAL OF THE STORY - don't become alarmed\n#\n# Occasionally, you will see R displaying numbers in \n# scientific notation. Don't become confused. Understand\n# that these are just \"regular numbers\" being displayed in \n# a more concise format. Any math that is done with these\n# numbers is the same as if you did the same math with the \n# equivalent non-scientific-notation format.\n#-----------------------------------------------------\n\n\n#----------------------------------------------------------\n# PRACTICE\n#----------------------------------------------------------\n\n# what are the values of the following expressions?\n#\n#    1e-2 + 2e-1\n#\n#    9.876e5\n#\n#    5.23e4 + 1000\n#\n#\n# What will R display for the following numbers?\n#\n#    12340000000000 (ten zeros)\n#\n#    0.0000000000123 (ten zeros)\n\n\n#############################################################\n#############################################################\n##\n## Floating point nubmers\n##\n#############################################################\n#############################################################\n\n# Some fractions that we write do not have an exact representation\n# as decimal numbers. For example, many people will write\n# 1/3 as 0.333  \n#\n# However there really are an infinite number of 3's in the decimal \n# version. 0.333 is just a rough approximation. 0.3333 is closer to 1/3\n# and 0.33333 (five 3's) is even closer. However, you will NEVER get\n# an exact representation of 1/3 unless you write an infinite number\n# of 3's after the decimal point :(\n#\n# Therefore 1/3  +  1/3   +  1/3 = 1\n# When converted into decimals becomes, approximately \n#\n#  0.333 + 0.333 + 0.333 = 0.999 (which looks wrong!)\n#\n# Some fractions can be converted exactly, eg.\n#    1/2 is 0.5 exactly\n#    1/4 is 0.25 exactly\n#    1/5 is 0.2 exactly\n#    1/8 is 0.125 exactly\n#    1/10 is 0.1 exactly\n#    1/16 is 0.0625 exactly \n#    1/25 is 0.04 exactly\n#\n# In general if a fraction can be reduced to an equivalent fraction whose\n# denominator is a power of 2 , a power of 5 or a power of 10, then the \n# fraction can be represented by an exact terminating decimal.\n\n\n#------------------------------------------------------------------\n# \n# Decimal vs Binary numbers\n# \n#------------------------------------------------------------------\n\n\n# Humans use numbers that have 10 different digits i.e 0,1,2 .. 9\n# Numbers that use all these digits are known as \"base-10\" numbers\n#\n# Computers internally use numbers that only have 1 and 0 as digits\n# These numbers are known as \"binary\" numbers.\n#\n# For more info. see the powerpoint on Canvas.\n\n# You don't have to be familar with the details of binary numbers\n# for this course. HOWEVER, you should understand the following ...\n#\n# The nubmers that can be converted to exact decimal numbers are \n# different for binary numbers and for decimal numbers. \n# For binary nubmers (i.e. numbers that computers use internally)\n# fractions that can be reduced to have a power of 2 in the denominator\n# can be represented by a terminating decimal point value. \n# Other fractions cannot. \n#\n\n#------------------------------------------------------------------\n#\n# Roundoff error\n#\n#------------------------------------------------------------------\n# This issue leads to \"roundoff\" error very frequently when doing math\n# in computer programming- similar to 1/3 + 1/3 + 1/3 ...\n#\n# R masks this issue by displaying what you might think a number is.\n# However, the actual value for the number might be something else. \n# \n# You can use the print.default (or just print) function with the \n# digits argument to display the ACTUAL value that R stores for a number\n\nprint(0.1, digits=22)\n\n[1] 0.1000000000000000055511\n\nprint(0.3, digits=22)\n\n[1] 0.2999999999999999888978\n\n# This issue can lead to \"roundoff\" errors. There are ways to deal with \n# this but it can get a little involved for this early in the course.\n# for right now, just accept it. We'll revisit this issue later.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>scientific notation *~(abbridged version)~*</span>"
    ]
  },
  {
    "objectID": "000410-implicitAndExplicitConversions-v025.html",
    "href": "000410-implicitAndExplicitConversions-v025.html",
    "title": "21  implicit and explicit conversions",
    "section": "",
    "text": "######################################################################.\n# SUMMARY OF TOPICS INCLUDED IN THIS FILE (it's possible I missed some)\n#\n# - DEFINITION: object \n#     a structure or single item of data that R knows about\n#\n# - mode function: \n#     Returns the underlying structure of R objects.\n#     The modes that we've learned about are:\n#     \"numeric\"  \"logical\"  \"character\"  \"list\"\n#     See also the class function (covered in a later file)\n#\n# - is.XXXX functions, eg. is.numeric, is.character, is.logical\n#     Note that there are many other is.XXXX that work with other \n#     R data types. These include functions such as\n#     is.list, is.matrix, is.data.frame, etc etc etc\n#\n#\n\n\n#####################################################################.\n# DEFINITION - OBJECT\n# \n# An OBJECT is a value or a collection of values that R treats as a single unit. ####\n#              e.g. something that can be assigned to a variable.\n#  \n# EXAMPLES \n#   - 1:3 is an object\n# \n#   - c(\"apple\", \"pear\") is an object\n#\n#   - even a function is an object, such as the following or any other function.\n#\n#        function(x,y) {\n#          a = x + y\n#          b = a * 2\n#          return (a + b)\n#        }\n#\n#   - Anything that can be assigned to a variable is an OBJECT even when it is\n#     not actually assigned to a variable. For example, the following line of\n#     code references two different objects.\n#\n#          &gt; c(1,2,3) + seq(from=100,to=300,by=100)\n#          [1] 101 202 303\n# \n#     Both c(1,2,3) and seq(from=100,to=300,by=100) are objects. Each of them\n#     could have been assigned to different variables. The result of the entire\n#     line, i.e. c(101,202,303) is yet another object. It too could have been assigned\n#     to a variable.\n#####################################################################.\n\n\n#####################################################################.\n# TOPIC :    mode( SOME_OBJECT )\n#\n#   mode( SOME_OBJECT) returns the \"type\" of info contained in the object ####\n#   e.g. \"numeric\" or \"character\" or \"logical\"\n#\n#   A single vector may only hold one \"mode\" of information ####\n#   e.g. \"numeric\" or \"character\" or \"logical\"\n#####################################################################.\n\n# A single vector may only hold one \"mode\" of information\n# (character, numeric, logical)\n\nmode(c(100,200,300))   # numeric\n\n[1] \"numeric\"\n\nmode(c(TRUE, FALSE))   #logical\n\n[1] \"logical\"\n\nmode(c(\"apple\",\"pear\"))  # character\n\n[1] \"character\"\n\n# You can use mode with any expression, not just with variables\nnums = c(100,200,300)\nmode(nums)                          # \"numeric\"\n\n[1] \"numeric\"\n\nmode(rep(seq(10,14,by=2),each=3))   # \"numeric\"\n\n[1] \"numeric\"\n\nmode(rep(c(\"apple\",\"orange\"),each=3))   # \"character\"\n\n[1] \"character\"\n\n#...........................................................\n# Question - what will the following command return???\n#\n#     &gt; mode(mode(c(100,200,300)))\n#...........................................................\n\n# ANSWER\n# \n# The following command returns \"character\". \n# See the comments below for explanation.\n\nmode(mode(c(100,200,300)))   # answer is \"character\"  (surprised? see below)\n\n[1] \"character\"\n\n# original command:                           mode(mode(c(100,200,300)))\n# mode(c(100,200,300)) becomes \"numeric\":     mode(\"numeric\")\n# The word \"numeric\" is a \"character\" value:  \"character\" \n\n\n#-----------------------------------------------------------------------------.\n# THIS COMMENT IS NOT REQUIRED FOR OUR CLASS.\n# YOU MAY SKIP THIS.\n# BUT I RECOMMEND THAT YOU READ IT IF YOU PLAN TO USE R MORE IN THE FUTURE.\n#-----------------------------------------------------------------------------.\n#\n# typeof (SOME_OBJECT)\n#\n# NOTE: We will NOT be covering the typeof function in this class,\n# (you are NOT resposible for it). However, if you are interested in R,\n# it is good to know about the typeof function.  \n#\n# typeof(SOME_OBJECT) is VERY SIMILAR to the mode(SOME_OBJECT).\n# In most cases, typeof and mode return the same values. However, in some \n# cases, the return values are different. The reason why is explained below.\n# Most introductory R tutorials/books/etc teach about the \"mode\" function\n# and not about the \"typeof\" function. Therefore we will focus on \"mode\" \n# and NOT on \"typeof\". However, many sources of \"best practices\" for R\n# suggest that you use \"typeof\" instead of \"mode\". Therefore if you continue\n# to use \"R\" it may be beneficial (but not required) to look more \n# deeply into the similarity and differences between the \"mode\" and \"typeof\"\n# functions. See the following pages for similarities and differences:\n#\n#    https://renenyffenegger.ch/notes/development/languages/R/functions/mode\n#    https://renenyffenegger.ch/notes/development/languages/R/functions/typeof\n#\n#\n# WHY ARE THERE TWO DIFFERENT FUNCTIONS?\n#\n# R was originally created as an \"open source\" version of another language called \"S\".\n# However, R has been modified many times over the years and has diverged\n# somewhat from \"S\". \"S\" is still used but it nowhere as popular as \"R\" is.\n# The mode function was designed to work the same in \"R\" as in \"S\".\n# However, \"R\" and \"S\" do have differences. The \"typeof\" function is \n# very similar to the \"mode\" function, except that \"typeof\" can sometimes\n# return different values than \"mode\" since \"typeof\" is based on the way\n# \"R\" works. \n#-----------------------------------------------------------------------------.\n\n\n###############################################################################.\n#\n# The \"is dot\" functions (e.g. is.numeric, is.character, etc) return TRUE or FALSE ####\n#\n# is.numeric(SOME_OBJECT)   #TRUE if mode(SOME_OBJECT) is numeric FALSE otherwise  \n# is.logical(SOME_OBJECT)   #TRUE if mode(SOME_OBJECT) is logical FALSE otherwise\n# is.character(SOME_OBJECT) #TRUE if mode(SOME_OBJECT) is character FALSE otherwise\n#\n###############################################################################.\n\nnums = c(100,200,300)\ntf = c(TRUE,FALSE,TRUE,TRUE)\nfruit = c(\"apple\", \"orange\")\n\nmode(nums)   # \"numeric\"\n\n[1] \"numeric\"\n\nmode(tf)     # \"logical\"\n\n[1] \"logical\"\n\nmode(fruit)  # \"character\"\n\n[1] \"character\"\n\nis.numeric(nums)   # TRUE\n\n[1] TRUE\n\nis.numeric(tf)     # FALSE\n\n[1] FALSE\n\nis.numeric(fruit)  # FALSE\n\n[1] FALSE\n\nis.logical(nums)   # FALSE\n\n[1] FALSE\n\nis.logical(tf)     # TRUE\n\n[1] TRUE\n\nis.logical(fruit)  # FALSE\n\n[1] FALSE\n\nis.character(nums)  # FALSE\n\n[1] FALSE\n\nis.character(tf)    # FALSE\n\n[1] FALSE\n\nis.character(fruit) # TRUE\n\n[1] TRUE\n\n###############################################################################.\n# BE CAREFUL ... Sometimes even if something \"looks like\" a numeric\n# or a logical vector ... it might actually be a character vector!!!\n###############################################################################.\n\nmode(c(\"100\",\"200\",\"300\"))   # character\n\n[1] \"character\"\n\nmode(c(\"TRUE\",\"FALSE\"))   # character\n\n[1] \"character\"\n\n#############################################################################.\n#\n# ERROR!\n# You can't do math with character vectors even if the values \"look like\" numbers. ####\n#\n##############################################################################.\n\n# You cannot do math with character vectors, even if the values \"look like\" numbers.\ncharNums = c(\"100\", \"200\")    \ncharNums * 3   # error - you cannot do math with character vectors\n\nError in charNums * 3: non-numeric argument to binary operator\n\nsum(charNums)  # error - you cannot do math with character vectors\n\nError in sum(charNums): invalid 'type' (character) of argument\n\n#######################################################################.\n#\n# WARNING!!!\n#\n# You cannot use character vectors to index into other vectors   ####\n# even if the index values \"look like\" logical values\n#\n# See examples below.\n#######################################################################.\n\n# EXAMPLE \n\nnums = c(100,200,300,400)  \n\n# You cannot \"index\" the vector with character values - DON'T DO THIS\n\nnums [ \"apple\" ]  # NA\n\n[1] NA\n\nnums[ c(\"apple\", \"pear\", \"comquat\", \"peach\")]   # NA NA NA NA \n\n[1] NA NA NA NA\n\n# Same result even if the character values \"look like\" numbers or like logical values!!!\n\nnums[c(\"1\",\"3\")]                       # NA NA\n\n[1] NA NA\n\nnums[c(\"-2\",\"-4\")]                # NA NA NA\n\n[1] NA NA\n\nnums[c(\"TRUE\",\"FALSE\",\"TRUE\",\"FALSE\")] # NA NA NA NA\n\n[1] NA NA NA NA\n\n# (we will see below that there is a way to \"convert\" a character vector\n# into a numeric or logical vector)\n\n\n\n#######################################################################.\n# REMINDER - so far we learned about 3 different ways to index a vector \n#    o positive position numbers\n#    o negative position numbers \n#    o a logical vector\n# \n# See examples below.\n#######################################################################.\n\n# EXAMPLES\nnums = c(100,200,300,400)\n\nnums[c(1,3)]                   # 100 300 - values from positions 1 and 3\n\n[1] 100 300\n\nnums[c(-2,-4)]                 # 100 300 - all values EXCEPT those in positions 2 and 4\n\n[1] 100 300\n\nnums[c(TRUE,FALSE,TRUE,FALSE)] # 100 300 - all values that correspond to the TRUE's in the index\n\n[1] 100 300\n\n########################################################################.\n# BEREN - UP TO HERE - AFTER CLASS 13\n#\n# MIDTERM TOPICS UP TO HERE\n########################################################################.\n\n\n\n########################################################################.\n# WILF - UP TO HERE - AFTER CLASS 13\n#\n# MIDTERM TOPICS UP TO HERE\n########################################################################.\n\n\n\n\n################################################################.\n################################################################.\n##\n##  TOPIC :  implicit conversions\n##\n################################################################.\n################################################################.\n\n\n##########################################################################.\n# WHAT IS AN IMPLICIT CONVERSION ?  ####\n#\n# An \"implicit\" conversion from one mode to another mode is a conversion \n# that happens \"automatically\".\n#\n# Implicit conversions can happen for different reasons.\n# For example\n#\n#   - If you try to mix values with different modes (e.g. numeric, logical,\n#     character) into a single vector, then R implicitly converts\n#     all the values to a single mode (these details are covered below)\n#\n#   - If you try to do math with logical values, then R implicitly converts \n#       TRUE's to 1's and \n#       FALSE's to 0's\n#\n#   - If you try to use numbers with the operators ! & | \n#     R will implicitly convert \n#       0's to FALSE's and \n#       all other numbers to TRUE's.\n#\n# IF R DOES IT AUTOMATICLY WHY SHOULD I CARE ABOUT IMPLICIT CONVERSIONS? ####\n#\n#   Sometimes, you may intentionally want implicit conversions to happen. \n#   For example, \n#\n#     - to get the total number of TRUE's in a logical vector you can \n#       use the sum() function. \n#\n#     - To get the percent of TRUEs in a logical vector you can \n#       use the mean() function. See examples below.\n#\n#     - other similar examples exist of doing \"math\" with TRUEs and FALSEs\n#\n#   It is also very important to understand how R performs implicit conversions\n#   since understanding these rules will help you figure out errors in your\n#   code. For example, sometimes, you may have an error in your code and R may\n#   display a value you never expected. At times like these it is very helpful \n#   to understand the rules R uses to do implicit conversions to \n#   help you figure out what you did wrong.\n#\n# There are different situations in R where implicit conversions happen. \n# These are described below.\n##########################################################################.\n\n\n\n##########################################################################.\n# ALL VALUES IN THE SAME VECTOR ARE IMPLICITLY CONVERTED TO THE SAME MODE ####\n#\n# A vector may only contain a single mode of data\n# (e.g. numeric, logical or character). \n# \n# Different values placed in the same vector are all implicitly converted\n# to the same mode. The rule is: \n#\n#   logical values BECOME numeric AND THEN numeric values BECOME character\n#\n# You can remember this with the following diagram:\n#\n#   logical ----&gt; numeric ------&gt; character                              ####\n#\n# See examples below.\n##########################################################################.\n\n\n\n#---------------------------------------------------.\n# If you mix logical and numeric in the same vector:   ####\n#\n#   TRUE becomes 1 and \n#   FALSE becomes 0\n#---------------------------------------------------.\n\nc(TRUE, 100)                      # 1  100\n\n[1]   1 100\n\nc(FALSE, TRUE, -22, TRUE, FALSE)  # 0   1 -22   1   0\n\n[1]   0   1 -22   1   0\n\n#------------------------------------------------------.\n# If you mix logical and character in the same vector           ####\n# the logicals are implicitly converted to character:\n#\n#   TRUE becomes \"TRUE\" and\n#   FALSE becomes \"FALSE\"\n#---------------------------------------------------.\n\nc(TRUE, \"apple\")  # same as    c(\"TRUE\", \"apple\")\n\n[1] \"TRUE\"  \"apple\"\n\n#---------------------------------------------------.\n# If you mix numeric and character values in the same vector               ####\n# the numbers are implicitly converted to character.\n#---------------------------------------------------.\n\nc(123, \"apple\")  # \"123\"   \"apple\"   (notice the \"quotes\" around \"123\")\n\n[1] \"123\"   \"apple\"\n\n#------------------------------------------------------------.\n# If you mix all three types, logical, numeric and character in the same vector ####\n# everything becomes character.\n#------------------------------------------------------------.\n\nc(100, TRUE, \"apple\")  # \"100\"   \"TRUE\"  \"apple\"  (notice the \"quotes\")\n\n[1] \"100\"   \"TRUE\"  \"apple\"\n\n##############################################################################.\n# If you try to do math with logicals               ####\n#\n#     TRUE becomes 1\n#     FALSE becomes 0\n##############################################################################.\n\n3 + TRUE   # 4\n\n[1] 4\n\nFALSE * c(100,200,300)   # 0  0  0\n\n[1] 0 0 0\n\nTRUE + FALSE  # 1\n\n[1] 1\n\nFALSE + TRUE + TRUE  # 2\n\n[1] 2\n\nFALSE / TRUE    # 0\n\n[1] 0\n\nsum(c(FALSE, TRUE, TRUE, FALSE))  # 2\n\n[1] 2\n\nmean (c(FALSE, TRUE, TRUE, FALSE))  # 0.5 - ie. same as mean(c(0,1,1,0)) \n\n[1] 0.5\n\n#.......................................................................\n# QUESTION (example of purposely making use of R's implicit conversion\n#            of logical to numeric)\n#\n# The passing grade on a test is 65 (and higher). Given the grades vector below,\n# use the sum function to determine the number of students who passed.\n#\n#    &gt; grades = c(90,60,80,85,53)\n#.......................................................................\n\ngrades = c(90,60,80,85,53)\n\n#     ANSWER\n#\n#     In the code below, the &gt;= operator results in logical values (i.e. TRUE/FALSE values).\n#     Since the sum function expects numbers, the logical values are \n#     \"implicitly\" (i.e. automatically) converted into numbers.\n#     TRUE's are converted to 1's and FALSE's to 0's. See below for a step\n#     by step analysis of how R processes the code.\n\nsum ( grades &gt;= 65 )  # 3\n\n[1] 3\n\n# original :           sum ( grades &gt;= 65 )\n# &gt;=       :           sum(c(TRUE,FALSE,TRUE,TRUE,FALSE))\n# implicit conversion: sum(c(1,0,1,1,0))\n# final answer:        3\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# NOTE: \n#\n# A student asked during class if we could get the same answer \n# WIHTOUT using the sum function.\n# \n# You could by using the following code:     length( grades [ grades &gt;= 65 ] ) \n# \n# Even though this alternative answer is not wrong, using the sum function\n# as shown in the original answer above is shorter, is very commonly used in R,\n# and looks more professional to many R coders.\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n\n\n#.......................................................................\n# QUESTION (another example of purposely making use of R's implicit conversion\n#            of logical to numeric)\n#\n# Passing on a test is 65 and up. Given the grades vector below,\n# use the mean function to determine the percent of the class who passed.\n#\n#    &gt; grades = c(90,60,80,85,53)\n#.......................................................................\n\ngrades = c(90,60,80,85,53)\n\n#     ANSWER (see below for step by step explanation)\n\nmean ( grades &gt;= 65 )  # 0.6\n\n[1] 0.6\n\n# original           : mean ( grades &gt;= 65 ) \n# &gt;=                 : mean(c(TRUE,FALSE,TRUE,TRUE,FALSE))\n# implicit conversion: mean(c(1,0,1,1,0))\n# final answer       : 0.6\n\n\n\n\n############################################################################.\n#\n# IMPLICIT CONVERSION OF NUMBERS USED WITH   !   &  |                ####\n#\n# The operators !  &  | are defined to be used with logical values.\n# When numbers are used with ! & | operators:\n#\n#     0 becomes FALSE\n#\n#     all other numbers become TRUE\n#\n############################################################################.\n\n0 & TRUE     # FALSE - 0 is converted to FALSE\n\n[1] FALSE\n\nFALSE | 99   # TRUE - 99 is converted to TRUE\n\n[1] TRUE\n\nc(999,0,-100,1,0) & c(TRUE,TRUE,TRUE,TRUE,TRUE)  # TRUE FALSE TRUE TRUE FALSE\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n# original:                            c(999,0,-100,1,0) & c(TRUE,TRUE,TRUE,TRUE,TRUE)\n# implicitly convert nums to logicals: c(TRUE,FALSE,TRUE,TRUE,FALSE) & c(TRUE,TRUE,TRUE,TRUE,TRUE)\n#                                   :  c(TRUE&TRUE,FALSE&TRUE,TRUE&TRUE,TRUE&TRUE,FALSE&TRUE)\n#                                          TRUE      FALSE      TRUE      TRUE       FALSE\n\n\n\n############################################################################.\n#\n# ERROR!!! - DON'T USE \"CHARACTER\" VALUES WITH   !   &  |           ####\n#\n# The operators !  &  | are defined to be used with logical values.\n# If you try to use these operators with ANY character values, \n# (even \"TRUE\" and \"FALSE\" - with \"quotes\") you will get an ERROR.\n#\n############################################################################.\n\n# The following all produce ERRORS!\n\n\"TRUE\" & FALSE   # ERROR - \"TRUE\" is a character value \n\nError in \"TRUE\" & FALSE: operations are possible only for numeric, logical or complex types\n\n!\"FALSE\"         # ERROR - \"FALSE\" is a character value\n\nError in !\"FALSE\": invalid argument type\n\n################################################################.\n################################################################.\n##\n##  TOPIC :  EXPLICIT CONVERSIONS\n##\n################################################################.\n################################################################.\n\n##############################################################################.\n#\n# The \"as dot\" functions are used to \"explicit conversions\"      ####\n#\n#    as.numeric( SOME_VECTOR )   - converts SOME_VECTOR to numeric\n#    as.logical( SOME_VECTOR )   - converts SOME_VECTOR to logical\n#    as.character( SOME_VECTOR ) - converts SOME_VECTOR to character\n#\n# See examples below.\n#\n##############################################################################.\n\n###############################################################################.\n#\n# as.numeric ( LOGICAL_VECTOR )                  ####\n#\n#     converts TRUE to 1 and FALSE to 0\n#\n#\n# as.numeric ( CHARACTER_VECTOR )                ####\n#\n#   values that \"look like\" numbers - e.g. \"100\" are converted to numbers, e.g. 100\n#   values that don't \"look like numbers\" e.g. \"apple\" are converted to NA\n#\n##############################################################################.\n\n\n# Convert TRUE to 1 and FALSE to 0\n\nas.numeric(c(TRUE, FALSE, TRUE, TRUE))   # 1 0 1 1\n\n[1] 1 0 1 1\n\n# Convert character values that look like numbers to numbers\n# all other character values become NA\n\nas.numeric( c(\"100\", \"apple\", \"-22.123\"))     # 100 NA  -22.123\n\nWarning: NAs introduced by coercion\n\n\n[1] 100.000      NA -22.123\n\ncharNums = c(\"100\", \"200\", \"300\")\ncharNums\n\n[1] \"100\" \"200\" \"300\"\n\nmode(charNums) # character\n\n[1] \"character\"\n\ncharNums + 1   # ERROR - can't do math with \"character\" values\n\nError in charNums + 1: non-numeric argument to binary operator\n\nnums = as.numeric(charNums)   # explicit conversion from character to numeric\nnums\n\n[1] 100 200 300\n\nmode(nums)   # numeric\n\n[1] \"numeric\"\n\nnums + 1     # 101 201 301 \n\n[1] 101 201 301\n\nas.numeric(charNums) + 1  # ALSO GOOD!!  same as c(100,200,300) + 1\n\n[1] 101 201 301\n\n#-----------------------------------------------------------------------------.\n# Question \n# \n# The two lines of code below produce the results shown. \n# Explain why the 2nd line produces all NA values.\n#\n#  &gt; as.numeric(c(TRUE,FALSE,TRUE))    \n#  [1] 1 0 1\n#\n#  &gt; as.numeric(c(TRUE,FALSE,\"TRUE\"))    \n#  [1] NA NA NA\n#-----------------------------------------------------------------------------.\n\n\n##############################################################################.\n#\n# as.logical ( NUMERIC_VECTOR )                ####\n#\n#     converts 0 to FALSE\n#     converts all other numbers to TRUE\n#\n#\n# as.logical ( CHARACTER_VECTOR )               ####\n#\n#     \"TRUE\",  \"true\"  and \"T\" become TRUE\n#     \"FALSE\", \"false\" and \"F\" become FALSE\n#     Everything else becomes NA\n#\n##############################################################################.\n\n# 0 becomes FALSE,  all other numbers become TRUE\nas.logical(  c(100 , 0 , -999 , 0 , 25.2345)   )   # TRUE FALSE TRUE FALSE TRUE\n\n[1]  TRUE FALSE  TRUE FALSE  TRUE\n\n# \"TRUE\",  \"true\"  and \"T\" become TRUE\n# \"FALSE\", \"false\" and \"F\" become FALSE\n# Everything else becomes NA\n\nas.logical(c( \"TRUE\", \"F\", \"FALSE\", \"f\", \"apple\") )   # TRUE FALSE FALSE NA NA\n\n[1]  TRUE FALSE FALSE    NA    NA\n\n#-----------------------------------------------------------------.\n# QUESTION: Explain why the following produces what it does.\n#\n#   &gt; as.logical( c(1, 0, \"3\"))\n#   [1] NA  NA  NA\n#-----------------------------------------------------------------.\n\n# ANSWER\n\nas.logical( c(1, 0, \"3\"))   # NA NA NA\n\n[1] NA NA NA\n\n# original: as.logical( c(1, 0, \"3\"))\n#\n# step1 - implicitly convert mix of character and numeric to character:\n#           as.logical (  c( \"1\", \"0\", \"3\" ) )\n#\n# step2 - explicitly convert the character vector to logicals:\n#           NA   NA     NA \n\n\n#-----------------------------------------------------------------.\n# QUESTION: Explain why the following produces what it does.\n#\n#   &gt; as.logical (  c( \"true\", 1, 0, \"FALSE\", \"F\") )  \n#   [1] TRUE  NA  NA  FALSE\n#-----------------------------------------------------------------.\n\n# ANSWER:\n\nas.logical (  c( \"true\", 1, 0, \"FALSE\", \"F\") )  \n\n[1]  TRUE    NA    NA FALSE FALSE\n\n# original: as.logical (   c( \"true\", 1, 0, \"FALSE\", \"F\") ) \n#\n# step1 - implicitly convert mix of character and numeric to character:\n#           as.logical (  c( \"true\", \"1\", \"0\", \"FALSE\", \"F\") )\n#\n# step2 - explicitly convert the character vector to logicals:\n#           TRUE   NA   NA    FALSE    FALSE\n\n\n\n\n##############################################################################.\n#\n# as.character (ANY_VECTOR) - explicitly convert values to character     ####\n#\n##############################################################################.\n\n# explicitly convert numeric to character\nas.character(c(100,200,300))   # \"100\"  \"200\"  \"300\"\n\n[1] \"100\" \"200\" \"300\"\n\n# explicitly convert logical to character\nas.character(c(TRUE, FALSE, TRUE, TRUE, FALSE))   # \"TRUE\" \"FALSE\" \"TRUE\" \"TRUE\" \"FALSE\"\n\n[1] \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>implicit and explicit conversions</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html",
    "href": "000415-a-lists-v035.html",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "",
    "text": "22.1 Terminology: indexing/subsetting     index/subscript\n# Remove all variables to start this lesson with a clean slate\nrm(list = ls())\n\n###################################################################.\n#\n# TERMINOLOGY:  indexing/index   vs   subsetting/subscript\n#\n# In class I've been referring to code that extracts specific\n# values out of a vector or out of a list as \"indexing\" the vector\n# or the list. For example, I would refer to the following code\n#\n#     someVector[1:3]\n#\n# as \"indexing\" the vector and I would refer to the 1:3 in the\n# code above as the \"index\".\n#\n# An alternative terminology is to describe the code as \n\n# performing \"subsetting\" of the vector and to describe the 1:3\n# as a \"subscript\". \n#\n# Both indexing/index and subsetting/subscript are valid terminology\n# and are alternate ways to describe the same things. Be aware\n# of this if you try to search for additional information online.\n#\n###################################################################.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#other-sources-of-info",
    "href": "000415-a-lists-v035.html#other-sources-of-info",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.2 Other sources of info",
    "text": "22.2 Other sources of info\n\n###################################################################.\n#\n# OTHER SOURCES OF INFORMATION\n#\n# Material in this file that discusses the rules\n# for \"indexing\" (AKA \"subsetting\") lists and vectors can be confusing. I tried\n# to make the material straightforward but there are always situations\n# that will nevertheless be confusing. These are some other sources\n# of information that may help.\n#\n#\n#   ADVANCED R, 2nd Edition by Hadley Wickham (available online)\n#\n#   This page: https://adv-r.hadley.nz/subsetting.html\n#   from the book \"Advanced R\" by Hadley Wickham, describes these rules\n#   in detail. At this point, you may not be familiar with all of the\n#   terminology that is used on this page, but this is a good reference\n#   when you are trying to figure something out. \n#\n#\n#   OFFICIAL R-LANGUAGE DEFINITION\n#   (by the R Core Team - the people who create R)\n#\n#   The following is a link to the section on Indexing in the\n#   \"Official R Language Definition\":\n#\n#       https://stat.ethz.ch/R-manual/R-devel/doc/manual/R-lang.html#Indexing\n#\n#   This material is NOT easy to read but it is the \"official\" word on how\n#   things work in R. The authors assume that you know a lot and they do\n#   not \"hold your hand\". It may be hard to read this material but it is\n#   good to know it exists. \n#\n#\n#   GOOGLE  :)         (yes, I know it's obvious)\n#\n#   There are many many webpages and websites devoted to trying to explain R.\n#   Obviously, one of the first things to do when faced with a problem you don't\n#   understand is to describe the problem accurately in Google and see\n#   what you find. If you get an error or warning message when you run\n#   your code type the error/warning message into the search. This usually \n#   works well to find a webpage that helps to clarify things.\n#\n#######################################################################.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#list-object1-object2-etc",
    "href": "000415-a-lists-v035.html#list-object1-object2-etc",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.3 list( OBJECT1, OBJECT2, etc)",
    "text": "22.3 list( OBJECT1, OBJECT2, etc)\n\n#######################################################################.\n#######################################################################.\n##\n## TOPIC :    lists\n##\n##   A list is a collection of ANY R \"objects\"         ####\n##\n##   So far we learned about the following R \"objects\".\n##     - character vectors\n##     - numeric vectors\n##     - logical vectors\n##   These R objects (as well as other types of R objects that\n##   we haven't learned about yet) can all be included in a \"list\".\n##\n##   A \"list\" itself, is also an R \"object\". Therefore a list can contain other lists. ####\n##   A list that is contained in another list is called a \"nested list\".\n##\n##   You can create a list with the list function. \n##   See examples below.\n##\n#######################################################################.\n#######################################################################.\n\n# create some vectors\nstudents = c(\"bob\", \"charlie\", \"frank\")\ntest1 = c(70,80,90)\ntest2 = c(75,85,88)\nhonors = c(TRUE, FALSE,FALSE)\n\n# create a list (called gradebook_MathClass) that contains all the vectors.\ngradebook_MathClass = list(students, test1, test2, honors)\n\ngradebook_MathClass\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#mode-some_list-is-list",
    "href": "000415-a-lists-v035.html#mode-some_list-is-list",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.4 mode( SOME_LIST ) is “list”",
    "text": "22.4 mode( SOME_LIST ) is “list”\n\n#---------------------------------------------------------------------.\n# mode( SOME_LIST ) is \"list\"      ####\n#\n# So far, at this point we have seen that mode(SOME_OBJECT) can return one of the \n# following values: \"numeric\", \"logical\", \"character\" and \"list\"\n#---------------------------------------------------------------------.\n\nmode(gradebook_MathClass)    # \"list\"\n\n[1] \"list\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#a-list-contains-a-separate-copy-of-data-from-variables-used-to-create-the-list",
    "href": "000415-a-lists-v035.html#a-list-contains-a-separate-copy-of-data-from-variables-used-to-create-the-list",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.5 A LIST CONTAINS A SEPARATE COPY OF DATA FROM VARIABLES USED TO CREATE THE LIST",
    "text": "22.5 A LIST CONTAINS A SEPARATE COPY OF DATA FROM VARIABLES USED TO CREATE THE LIST\n\n#-----------------------------------------------------------------------------.\n# A LIST CONTAINS A SEPARATE COPY OF DATA FROM VARIABLES USED TO CREATE THE LIST ####\n#\n# If the variables that were used to create a list are removed     \n# the list continues to exist (with all the data intact).\n#\n# In other words, the existence of a list, is NOT dependent on the underlying\n# variables, (e.g. students, test1, test2, honors) that were used to create it.\n#-----------------------------------------------------------------------------.\n\n# We can remove the variables that were used to create the list ...\nrm( students, test1, test2, honors)\n\n# ... the list, still exists\ngradebook_MathClass\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n############################################################################.\n#\n# You can create a list without using any other variables. \n# Just put the information directly in the list function.\n# See examples below.\n#\n############################################################################.\n\n# EXAMPLE - create another gradebook without using other variables\n\ngradebook_HistoryClass = list( c(\"bob\", \"charlie\", \"frank\"), # student names\n                               c(70,80,90),                  # grades from first test\n                               c(75,85,88),                  # grades from second test\n                               c(TRUE, FALSE,FALSE))         # TRUE for honors students\n\ngradebook_HistoryClass\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n###############################################################################.\n# The data used to create a list can be generated using ANY functions \n# not just the c() function\n###############################################################################.\n\n# EXAMPLE\n\nstuff = list ( seq(2, 10, by=2),\n               c(\"apple\", \"orange\", \"pear\"),\n               rep(c(1,2,3), 2))\n\nstuff\n\n[[1]]\n[1]  2  4  6  8 10\n\n[[2]]\n[1] \"apple\"  \"orange\" \"pear\"  \n\n[[3]]\n[1] 1 2 3 1 2 3",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#length-some_list-returns-the-number-of-objects-in-the-list",
    "href": "000415-a-lists-v035.html#length-some_list-returns-the-number-of-objects-in-the-list",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.6 length( SOME_LIST ) # returns the number of objects in the list",
    "text": "22.6 length( SOME_LIST ) # returns the number of objects in the list\n\n###########################################################################.\n#\n# length( SOME_LIST )  # returns the number of objects in the list   ####\n#\n###########################################################################.\n\n# There are 4 objects in the gradebook_HistoryClass list, i.e. \n#\n#   - the character vector of student names\n#   - the numeric vector of the test1 grades\n#   - the numeric vector of the test2 grades\n#   - the logical vector of honors statuses\n\ngradebook_HistoryClass\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# The length function returns the number of objects in the list.\n\nlength(gradebook_HistoryClass)  # 4\n\n[1] 4",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#a-list-can-contain-other-lists-recursive-lists",
    "href": "000415-a-lists-v035.html#a-list-can-contain-other-lists-recursive-lists",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.7 A list can contain other lists (recursive lists)",
    "text": "22.7 A list can contain other lists (recursive lists)\n\n# Create a list that contains other lists\ngradebooks = list( \"Fall 2023\",             # 1st item in the list\n                   gradebook_MathClass,     # 2nd item in the list\n                   gradebook_HistoryClass)  # 3rd item in the list\n\nlength(gradebooks)  # 3 - see comments above\n\n[1] 3\n\ngradebooks\n\n[[1]]\n[1] \"Fall 2023\"\n\n[[2]]\n[[2]][[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]][[2]]\n[1] 70 80 90\n\n[[2]][[3]]\n[1] 75 85 88\n\n[[2]][[4]]\n[1]  TRUE FALSE FALSE\n\n\n[[3]]\n[[3]][[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[3]][[2]]\n[1] 70 80 90\n\n[[3]][[3]]\n[1] 75 85 88\n\n[[3]][[4]]\n[1]  TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#str-some_object-displays-info-about-object-very-useful-for-lists",
    "href": "000415-a-lists-v035.html#str-some_object-displays-info-about-object-very-useful-for-lists",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.8 str( SOME_OBJECT ) # displays info about object (very useful for lists)",
    "text": "22.8 str( SOME_OBJECT ) # displays info about object (very useful for lists)\n\n###########################################################################.\n# TOOLS TO HELP YOU UNDERSTAND THE STRUCTURE OF LISTS AND OTHER OBJECTS\n#\n# str( SOME_OBJECT)  # shows \"human readable\" description of the structure of the object ####\n#\n# The str function shows the \"structure\" of an R object. \n# It provides a more \"human readable\" description of what an object contains.\n# It is usable with any R objects (i.e. vectors, lists, dataframes and other types)\n# but is especially useful when trying to understand what is inside a \n# complex list. Remember the str function. It could help you a lot\n# at some point.\n#\n#\n#\n# View( SOME_OBJECT )  # (It's a CAPITAL \"V\" in \"View\") displays object in another tab ####\n#\n# The \"View\" function opens up the object in another tab in RStudio. The\n# \"View\" tab for that object displays the contents of the object in a \n# way that is easy to see and navigate through the data in the object.\n# This is especially helpful for objects that contain a lot of data.\n#\n#\n#\n# THE \"&gt;\" ARROW BUTTON NEXT TO LISTS IN THE ENVIRONMENT TAB\n#\n# Next to lists that appear in the Environment tab in RStudio, there is a \n# small button that looks like a right pointing arrow \"&gt;\". If you press\n# on it, you will see the full contents of the list. This is similar\n# to the output you get with the View(SOME_OBJECT) command but is \n# easier to use for small to medium sized lists. The View command may be\n# easier to use for very large lists.\n#\n###########################################################################.\n\nstr(gradebook_HistoryClass) \n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\nstr(gradebooks) \n\nList of 3\n $ : chr \"Fall 2023\"\n $ :List of 4\n  ..$ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n  ..$ : num [1:3] 70 80 90\n  ..$ : num [1:3] 75 85 88\n  ..$ : logi [1:3] TRUE FALSE FALSE\n $ :List of 4\n  ..$ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n  ..$ : num [1:3] 70 80 90\n  ..$ : num [1:3] 75 85 88\n  ..$ : logi [1:3] TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#view-some_object",
    "href": "000415-a-lists-v035.html#view-some_object",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.9 View( SOME_OBJECT )",
    "text": "22.9 View( SOME_OBJECT )\n\n# *** READ THIS BEFORE YOU RUN THE NEXT LINE OF CODE!!! ***\n\n# The following command will open a new \"tab\" in RStudio that \n# shows the contents of the gradebook_HistoryClass variable. This seems\n# unnecessary for such a small set of data but the View tab can be very \n# helpful for large collections of data. To get back to reading this file\n# you can close the View tab or alternatively find the tab for this\n# file and click on the tab.\n\n\n# Uncooment the following line to run it. I commented it so that \n# it shouldn't be run by mistake and confuse you when the new tab opens.\n\n#View(gradebooks)  # A new \"tab\" opens in RStudio that \n\n\n# Try pressing the \"&gt;\" arrow button that appears in the Environment \n# tab, next to the word \"gradebook_HistoryClass\" and\n# you will see the full contents of the list.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#lists-are-indexed-with-single-brackets-double-brackets-and-dollar-signs",
    "href": "000415-a-lists-v035.html#lists-are-indexed-with-single-brackets-double-brackets-and-dollar-signs",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.10 Lists are indexed with [single-brackets], [[double-brackets]] and $dollar-signs",
    "text": "22.10 Lists are indexed with [single-brackets], [[double-brackets]] and $dollar-signs\n\n############################################################################.\n############################################################################.\n## Indexing with [single-brackets], [[double-brackets]] and $notation\n##\n##   We have spent a lot of time up until now learning how to \"index\"\n##   (i.e. to select specific values from) a VECTOR. For vectors we\n##   used various forms of [single-bracket] notation to select only\n##   the values we wanted. \n##\n##   With lists, you can also select just the values you want using \n##   the same [single-bracket-notation]. This notation is very similar to \n##   [single-bracket-notation] as used with vectors. \n##\n##   We will also introduce two additional notations for selecting specific\n##   values from lists that we have not used with vectors.\n##   The new notations are [[double-bracket]] notation as well as\n##   $dollar-sign notation.\n##\n##   First let's show you how the [single-bracket-notation] is used\n##   with lists in a very similar way to how the [single-bracket-notation]\n##   is used with vectors.\n############################################################################.\n############################################################################.\n\n\nsingle brackets - i.e. - SOME_LIST[ SOME_VECTOR ]\n\n###########################################################################.\n# Indexing lists with [single-brackets] follows the same rules as\n# indexing vectors with [single-brackets].\n#\n# You can use\n#   - positive position numbers - to get JUST the values in those positions\n#   - negative position numbers - to get everything except the values in those positions\n#   - TRUE/FALSE values - to get just the values that correspond to the TRUE's\n#\n# However, \n#    with VECTORS, you get back a new VECTOR that contains just the specified values. \n#\n#    with LISTS,   you get back a new LIST that contains just the specified values. \n#\n# See examples below.\n#\n###########################################################################.\n\ngradebook_HistoryClass\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# someList[c(1,3)]   # returns a new list with objects 1 and 3 from someList ####\n# EXAMPLE:\ngradebook_HistoryClass[c(1,3)]   # positive position numbers\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 75 85 88\n\n# someList[-c(1,3)]  # a new list with everything except for 1st and 3rd objects ####\n# EXAMPLE:\ngradebook_HistoryClass[-c(1,3)]  # negative position numbers\n\n[[1]]\n[1] 70 80 90\n\n[[2]]\n[1]  TRUE FALSE FALSE\n\n# someList[c(TRUE, FALSE)] # new list with every other object starting with first\n# EXAMPLE:\ngradebook_HistoryClass[c(TRUE, FALSE)]  # logicals - this example uses recycling rule\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 75 85 88\n\n#------------------------------------------------.\n# Each of the examples above return a LIST\n# We can prove this with the mode function\n#------------------------------------------------.\n\nmode( gradebook_HistoryClass[c(1,3)]  )         # list\n\n[1] \"list\"\n\nmode( gradebook_HistoryClass[-c(1,3)] )         # list\n\n[1] \"list\"\n\nmode( gradebook_HistoryClass[c(TRUE, FALSE)]  ) # list\n\n[1] \"list\"\n\n#------------------------------------------------.\n# You can assign the results to a new variable.\n#------------------------------------------------.\n\n\nnames_and_test2 = gradebook_HistoryClass[c(1,3)]\n\nnames_and_test2\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 75 85 88\n\nmode( names_and_test2)\n\n[1] \"list\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-a-lists-v035.html#use-only-one-vector-between-the-brackets",
    "href": "000415-a-lists-v035.html#use-only-one-vector-between-the-brackets",
    "title": "22  intro to “lists” - i.e. collections of any R objects",
    "section": "22.11 Use only one vector between the brackets",
    "text": "22.11 Use only one vector between the brackets\n\n######################################################################.\n# Be careful. As with vectors you may only use ONE VECTOR between the\n# [square-brackets]. See the exmamples below:\n######################################################################.\n\nrm(list=ls())  # start from scratch\n\n# Setup a list of info about some movies.\n\nmovies =list( c(\"Angels\", \"The Bat\", \"Fast Cars\", \"Dogs Eat Stuff\"),\n              c(\"PG\",     \"R\",       \"G\",         \"PG\"),\n              c(102,      152,       73,          135)\n            )\n\nmovies\n\n[[1]]\n[1] \"Angels\"         \"The Bat\"        \"Fast Cars\"      \"Dogs Eat Stuff\"\n\n[[2]]\n[1] \"PG\" \"R\"  \"G\"  \"PG\"\n\n[[3]]\n[1] 102 152  73 135\n\n# The following contains ONE vector between the [brackets]\n# since the c() combines the 1 and 3 into a single vector.\n\nmovies[c(1,3)]  # returns a new list with the 1st and 3rd objects\n\n[[1]]\n[1] \"Angels\"         \"The Bat\"        \"Fast Cars\"      \"Dogs Eat Stuff\"\n\n[[2]]\n[1] 102 152  73 135\n\n# However, the following returns an error since the 1 and 3 \n# are two different vectors and there is only allowed to be \n# one vector between the [square-brackets]\n\nmovies[1,3]  # ERROR - may only have ONE vector between the [brackets]\n\nError in movies[1, 3]: incorrect number of dimensions",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>intro to \"lists\" - i.e. collections of any R objects</span>"
    ]
  },
  {
    "objectID": "000415-c2-lists-v035.html",
    "href": "000415-c2-lists-v035.html",
    "title": "23  [[double-brackets]]",
    "section": "",
    "text": "23.1 someList[1] vs someList[[1]]\n#............................................................................\n# QUESTION\n#\n# Take a minute to CAREFULLY NOTICE the difference between the following \n# two commands. \n# \n# What is the difference??? \n#\n#      &gt; gradebook[1]\n#      [[1]]\n#      [1] \"bob\"     \"charlie\" \"frank\"  \n#\n#\n#      &gt; gradebook[[1]]\n#      [1] \"bob\" \"charlie\" \"frank\"\n#\n#............................................................................\n\ngradebook[1]  # return value is shown below\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n# &gt; gradebook[1]\n# [[1]]\n# [1] \"bob\"     \"charlie\" \"frank\"  \n\n\ngradebook[[1]]  # return value is shown below\n\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n# &gt; gradebook[[1]]\n# [1] \"bob\" \"charlie\" \"frank\"\n\n\n\n#............................................................................\n# ANSWER TO QUESTION\n#\n#    gradebook[1]    # returns a LIST of that contains ONE VECTOR\n#\n#    gradebook[[1]]  # returns ONE VECTOR\n#............................................................................\n\nmode( gradebook [1])   # returns a list\n\n[1] \"list\"\n\nmode( gradebook [[1]]) # returns a character vector\n\n[1] \"character\"\n\n# Similarly for other positions ....\n\ngradebook[[2]]      # 70 80 90\n\n[1] 70 80 90\n\nmode( gradebook [2])   # list\n\n[1] \"list\"\n\nmode( gradebook [[2]]) # numeric\n\n[1] \"numeric\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>[[double-brackets]]</span>"
    ]
  },
  {
    "objectID": "000415-c2-lists-v035.html#using-single-brackets-to-index-into-a-list-using-more-than-one-positive-number",
    "href": "000415-c2-lists-v035.html#using-single-brackets-to-index-into-a-list-using-more-than-one-positive-number",
    "title": "23  [[double-brackets]]",
    "section": "23.2 USING [single-brackets] TO INDEX INTO A LIST USING MORE THAN ONE POSITIVE NUMBER",
    "text": "23.2 USING [single-brackets] TO INDEX INTO A LIST USING MORE THAN ONE POSITIVE NUMBER\n\n#---------------------------------------------------------------------.\n# USING [single-brackets] TO INDEX INTO A LIST \n# USING MORE THAN ONE POSITIVE NUMBER\n# is conceptually similar to using more than one positive number in single brackets\n# with VECTORS.\n#\n# When indexing into a VECTOR you get back just the specified values in a new VECTOR.\n#\n# When indexing into a LIST  you get back just the specified values in a new LIST.\n#---------------------------------------------------------------------.\n\ngradebook[ c(1,2) ]   # a list of 2 items, i.e. the names and the test1 grades\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\nmode(gradebook[c(1,2)])  # list\n\n[1] \"list\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>[[double-brackets]]</span>"
    ]
  },
  {
    "objectID": "000415-c2-lists-v035.html#using-double-brackets-to-index-into-a-list-using-more-than-one-positive-number",
    "href": "000415-c2-lists-v035.html#using-double-brackets-to-index-into-a-list-using-more-than-one-positive-number",
    "title": "23  [[double-brackets]]",
    "section": "23.3 USING [[double-brackets]] TO INDEX INTO A LIST USING MORE THAN ONE POSITIVE NUMBER",
    "text": "23.3 USING [[double-brackets]] TO INDEX INTO A LIST USING MORE THAN ONE POSITIVE NUMBER\n\n#---------------------------------------------------------------------.\n# RECURSIVE INDEXING\n#\n# WITH LISTS YOU CAN USE THE [[double-brackets]] with more than\n# one position number - it applies the position numbers to the items\n# you get back one at a time. This is known as \"recursive indexing\".\n#---------------------------------------------------------------------.\n\ngradebook[[c(1,2)]] # \"charlie\" - ie. from the 1st item in the list get the 2nd item\n\n[1] \"charlie\"\n\ngradebook[[c(3,3)]] # 88 - i.e. from the 3rd item in the list get the 3rd item\n\n[1] 88\n\ngradebook[[c(3,2)]] # 85 - i.e. from the 3rd item in the list get the 2nd item\n\n[1] 85\n\ngradebook[[3]]      # 75 85 95\n\n[1] 75 85 88\n\ngradebook[[4]]      # TRUE FALSE FALSE\n\n[1]  TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>[[double-brackets]]</span>"
    ]
  },
  {
    "objectID": "000415-c2-lists-v035.html#using-the-length-function-with-lists-it-can-be-tricky",
    "href": "000415-c2-lists-v035.html#using-the-length-function-with-lists-it-can-be-tricky",
    "title": "23  [[double-brackets]]",
    "section": "23.4 Using the length function with lists (it can be tricky)",
    "text": "23.4 Using the length function with lists (it can be tricky)\n\n#--------------------------------------------.\n# length( SOME_LIST )\n#    returns the number of objects in the list\n#\n#     vs\n# \n# length( SOME_LIST[[1]] )\n#    returns the number of items in the first object in the list\n#\n#    vs\n#\n# length( SOME_LIST[1] )\n#    DONT DO THIS - IT ALWAYS RETURNS 1  - WHY?\n#------------------------------------------------\n\nrm(list=ls()) # Start from scratch\ngradebook = list( c(\"bob\", \"charlie\", \"frank\"), # student names\n                  c(70,80,90),                  # grades from first test\n                  c(75,85,88),                  # grades from second test\n                  c(TRUE, FALSE,FALSE))         # TRUE for honors students\n\n\n##############################################.\n# Let's see the lengths of the following ...\n##############################################.\nlength(gradebook)       # 4 - i.e. four objects in the list \n\n[1] 4\n\nlength(gradebook[[1]])  # 3 - i.e. three student names in the first object of the list\n\n[1] 3\n\n# Be careful - if you use single brackets you will get back a \"list\". \n# Therefore the following all return a list of length 1.\nlength(gradebook[1])    # 1 - i.e. this is a LIST that contains one vector\n\n[1] 1\n\n#############################.\n# Let's see the actual values\n#############################.\n\n# The full gradebook\ngradebook       \n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# The first item in the list (i.e. a full vector)\ngradebook[[1]]  \n\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n# A new list that contains just the 1st item of the original list vector)\ngradebook[1]    \n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n#etc",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>[[double-brackets]]</span>"
    ]
  },
  {
    "objectID": "000415-c2-lists-v035.html#summary---single-brackets-vs-double-brackets",
    "href": "000415-c2-lists-v035.html#summary---single-brackets-vs-double-brackets",
    "title": "23  [[double-brackets]]",
    "section": "23.5 Summary - [single-brackets] vs [[double-brackets]]",
    "text": "23.5 Summary - [single-brackets] vs [[double-brackets]]\n\n###############################################################################.\n#\n# If you keep the following idea in mind, a lot of the rules become \n# easier to remember:\n#\n#   - [single-brackets] are intended to allow you to identify MULTIPLE objects\n#     in a list (and in a vector).\n#\n#   - [[double-brackets]] are intended to allow you to identify A SINGLE object\n#     in a list (and in a vector too - we'll see this later). However, when\n#     using a list, a SINGLE object might be a complete vector (or even \n#     a complete list)\n###############################################################################.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>[[double-brackets]]</span>"
    ]
  },
  {
    "objectID": "000415-c2-lists-v035.html#practice",
    "href": "000415-c2-lists-v035.html#practice",
    "title": "23  [[double-brackets]]",
    "section": "23.6 — Practice —",
    "text": "23.6 — Practice —\n\n#########################################################.\n# Use the following to answer the questions below\n#########################################################.\nrm(list=ls()) # Start from scratch\ngradebook = list( c(\"bob\", \"charlie\", \"frank\", \"sam\"),# student names\n                  c(70,     80,        90,      100), # grades from 1st test\n                  c(75,     85,        88,      92),  # grades from 2nd test\n                  c(TRUE,   FALSE,     FALSE,   TRUE))# TRUE for honors students\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:4] \"bob\" \"charlie\" \"frank\" \"sam\"\n $ : num [1:4] 70 80 90 100\n $ : num [1:4] 75 85 88 92\n $ : logi [1:4] TRUE FALSE FALSE TRUE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"   \"sam\"    \n\n[[2]]\n[1]  70  80  90 100\n\n[[3]]\n[1] 75 85 88 92\n\n[[4]]\n[1]  TRUE FALSE FALSE  TRUE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n\n\n\n\n\nClick here for questions\n\n\n\n\n\n\n\n\n\n\n\nQUESTION - average on 1st exam (click for more info)\n\n\n\n\n\n\n##########################################################################.\n# QUESTION\n#\n# NOTE that many R commands and functions require a vector, not a list.\n# Therefore in these situations you will need to retrieve a vector\n# from the list using [[double-brackets]]\n#\n# Given the gradebook data shown above, write a command to calculate\n# the average on the 1st exam.\n##########################################################################.\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\n# Use [[double-brackets]] to get the data for the first exam\n# and take the mean.\n\nmean(gradebook[[2]])\n\n[1] 85\n\n##############################.\n# THE FOLLOWING IS WRONG!!!!\n##############################.\n\n# Note that the following does NOT produce the correct results\n# since gradebook[2] is a LIST and you cannot take the mean of a list.\n\nmean(gradebook[2])  # WRONG - gradebook[2] is a LIST - you need a VECTOR\n\nWarning in mean.default(gradebook[2]): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQUESTION - name of students who got above avg on 1st test (click for more info)\n\n\n\n\n\n\n##########################################################################.\n# QUESTION\n#\n# Notice that the data in the list above is a set of parallel vectors.\n# Write a command to show the name of the students who got above average\n# on the 1st test.\n##########################################################################.\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#####################################.\n# ANSWER (using a few lines of code)\n#####################################.\n\nstudents = gradebook[[1]]\ntest1 = gradebook[[2]]\n\nstudents [ test1 &gt; mean(test1) ]  # show the students names\n\n[1] \"frank\" \"sam\"  \n\n#####################################.\n# ANSWER (in one line of code)\n#####################################.\n\ngradebook[[1]] [  gradebook[[2]] &gt; mean(gradebook[[2]])  ]\n\n[1] \"frank\" \"sam\"  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQUESTION - vector of test1 and test2 grades for 3rd student\n\n\n\n\n\n\n#############################################################################.\n# QUESTION \n# Write a command to return a vector that contains both the test1 and test2 \n# grades for the 3rd student\n#############################################################################.\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\nc( gradebook[[c(2,3)]] , gradebook[[c(3,3)]] )\n\n[1] 90 88",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>[[double-brackets]]</span>"
    ]
  },
  {
    "objectID": "000415-c2-lists-v035.html#practice-1",
    "href": "000415-c2-lists-v035.html#practice-1",
    "title": "23  [[double-brackets]]",
    "section": "23.7 — Practice —",
    "text": "23.7 — Practice —\n\n#########################################################.\n# Use the following to answer the questions below\n#########################################################.\nrm(list=ls())  # start from scratch\n\ngradebooks = list( \n                    c(\"Intro to IDS\", \"Prof. Jones\"),\n                    list( \"Fall 2023\",\n                          c(\"bob\", \"charlie\", \"frank\"), # student names\n                          c(70,80,90),                  # grades from first test\n                          c(75,85,88),                  # grades from second test\n                          c(TRUE, FALSE,FALSE)),         # TRUE for honors students\n                    list(\"Spring 2024\",\n                          c(\"bob\", \"charlie\", \"frank\"), # student names\n                          c(70,80,90),                  # grades from first test\n                          c(75,85,88),                  # grades from second test\n                          c(TRUE, FALSE,FALSE))         # TRUE for honors students\n             )\n\n\n\n\n\n\n\nAnalyze the gradeooks object - click here\n\n\n\n\n\n\nstr(gradebooks)  # see the structure\n\nList of 3\n $ : chr [1:2] \"Intro to IDS\" \"Prof. Jones\"\n $ :List of 5\n  ..$ : chr \"Fall 2023\"\n  ..$ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n  ..$ : num [1:3] 70 80 90\n  ..$ : num [1:3] 75 85 88\n  ..$ : logi [1:3] TRUE FALSE FALSE\n $ :List of 5\n  ..$ : chr \"Spring 2024\"\n  ..$ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n  ..$ : num [1:3] 70 80 90\n  ..$ : num [1:3] 75 85 88\n  ..$ : logi [1:3] TRUE FALSE FALSE\n\ngradebooks # (see the actual values)\n\n[[1]]\n[1] \"Intro to IDS\" \"Prof. Jones\" \n\n[[2]]\n[[2]][[1]]\n[1] \"Fall 2023\"\n\n[[2]][[2]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]][[3]]\n[1] 70 80 90\n\n[[2]][[4]]\n[1] 75 85 88\n\n[[2]][[5]]\n[1]  TRUE FALSE FALSE\n\n\n[[3]]\n[[3]][[1]]\n[1] \"Spring 2024\"\n\n[[3]][[2]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[3]][[3]]\n[1] 70 80 90\n\n[[3]][[4]]\n[1] 75 85 88\n\n[[3]][[5]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n\n\n\n\n\nQuestions to WRITE CODE - click here for questions - click question for answer\n\n\n\n\n\n\n\n\n\n\n\nWrite code to calculate the average of the first test from the Fall 2023 class.\n\n\n\n\n\n\nmean( gradebooks[[2]][[3]] )\n\n[1] 80\n\n\n\n\n\n\n\n\n\n\n\nWrite code to calculate the highest grade from all of the test grades from the Fall 2023 class.\n\n\n\n\n\n\nmax( gradebooks[[2]][[3]], gradebooks[[2]][[4]] )\n\n[1] 90\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestions to READ CODE - click here for questions - click question for answer\n\n\n\n\n\n\n\n\n\n\n\nlength(gradebooks)\n\n\n\n\n\n\nlength(gradebooks)\n\n[1] 3\n\n\n\n\n\n\n\n\n\n\n\nlength(gradebooks[c(1,2)])\n\n\n\n\n\n\nlength(gradebooks[c(1,2)])  \n\n[1] 2\n\n\n\n\n\n\n\n\n\n\n\ngradebooks[c(1,2)]\n\n\n\n\n\n\ngradebooks[c(1,2)]\n\n[[1]]\n[1] \"Intro to IDS\" \"Prof. Jones\" \n\n[[2]]\n[[2]][[1]]\n[1] \"Fall 2023\"\n\n[[2]][[2]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]][[3]]\n[1] 70 80 90\n\n[[2]][[4]]\n[1] 75 85 88\n\n[[2]][[5]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n\n\n\n\n\nstr(gradebooks[c(1,2)])\n\n\n\n\n\n\nstr(gradebooks[c(1,2)])\n\nList of 2\n $ : chr [1:2] \"Intro to IDS\" \"Prof. Jones\"\n $ :List of 5\n  ..$ : chr \"Fall 2023\"\n  ..$ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n  ..$ : num [1:3] 70 80 90\n  ..$ : num [1:3] 75 85 88\n  ..$ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\n\n\n\ngradebooks[c(1,3)]\n\n\n\n\n\n\ngradebooks[c(1,3)]\n\n[[1]]\n[1] \"Intro to IDS\" \"Prof. Jones\" \n\n[[2]]\n[[2]][[1]]\n[1] \"Spring 2024\"\n\n[[2]][[2]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]][[3]]\n[1] 70 80 90\n\n[[2]][[4]]\n[1] 75 85 88\n\n[[2]][[5]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n\n\n\n\n\nstr(gradebooks[c(1,3)])\n\n\n\n\n\n\nstr(gradebooks[c(1,3)])\n\nList of 2\n $ : chr [1:2] \"Intro to IDS\" \"Prof. Jones\"\n $ :List of 5\n  ..$ : chr \"Spring 2024\"\n  ..$ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n  ..$ : num [1:3] 70 80 90\n  ..$ : num [1:3] 75 85 88\n  ..$ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\n\n\n\nlength(gradebooks[[c(1,2)]])\n\n\n\n\n\n\nlength(gradebooks[[c(1,2)]])\n\n[1] 1\n\n\n\n\n\n\n\n\n\n\n\ngradebooks[[c(1,2)]]\n\n\n\n\n\n\ngradebooks[[c(1,2)]]\n\n[1] \"Prof. Jones\"\n\n\n\n\n\n\n\n\n\n\n\nstr(gradebooks[[c(1,2)]])\n\n\n\n\n\n\nstr(gradebooks[[c(1,2)]])\n\n chr \"Prof. Jones\"\n\n\n\n\n\n\n\n\n\n\n\nlength(gradebooks[[2]])\n\n\n\n\n\n\nlength(gradebooks[[2]])\n\n[1] 5\n\n\n\n\n\n\n\n\n\n\n\ngradebooks[[2]][3]\n\n\n\n\n\n\ngradebooks[[2]][3]\n\n[[1]]\n[1] 70 80 90\n\n\n\n\n\n\n\n\n\n\n\nmode( gradebooks[[2]][3] )\n\n\n\n\n\n\nmode( gradebooks[[2]][3] )\n\n[1] \"list\"\n\n\n\n\n\n\n\n\n\n\n\nlength( gradebooks[[2]][3] )\n\n\n\n\n\n\nlength( gradebooks[[2]][3] )\n\n[1] 1\n\n\n\n\n\n\n\n\n\n\n\ngradebooks[[2]][[3]]\n\n\n\n\n\n\ngradebooks[[2]][[3]]  \n\n[1] 70 80 90\n\n\n\n\n\n\n\n\n\n\n\nmode( gradebooks[[2]][[3]] )\n\n\n\n\n\n\nmode( gradebooks[[2]][[3]] )  \n\n[1] \"numeric\"\n\n\n\n\n\n\n\n\n\n\n\nlength( gradebooks[[2]][3] )\n\n\n\n\n\n\nlength( gradebooks[[2]][3] )  \n\n[1] 1",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>[[double-brackets]]</span>"
    ]
  },
  {
    "objectID": "000415-d-lists-v036.html",
    "href": "000415-d-lists-v036.html",
    "title": "24  Modifying Lists: (1) removing items (2) adding items (3) replacing items",
    "section": "",
    "text": "24.1 Removing objects from a list with NULL\n#---------------------------------------------------------------.\n# Removing objects from a list with NULL\n#---------------------------------------------------------------.\n# NULL is a \"special value\" that can be understood as \"nothing\".\n# To remove an item from a list, you can assign NULL to that value.\n#\n# We'll discuss this in more depth below. For now, let's just see an example:\n#---------------------------------------------------------------.\n\n# let's recreate all of the data\nrm(list= ls())\n\ngradebook = list(c(\"bob\", \"charlie\", \"frank\"), \n                 c(70,80,90), \n                 c(75,85,88), \n                 c(TRUE, FALSE,FALSE))\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\n# You can use [single-brackets] \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\ngradebook[3] = NULL   # remove the third item from the gradebook\n\nstr(gradebook)  # the 3rd value is removed\n\nList of 3\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : logi [1:3] TRUE FALSE FALSE\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\n# You can also use [[double-brackets]]\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\ngradebook[[2]] = NULL    # removes the 2nd item from the list\nstr(gradebook)  # the 2nd value is removed\n\nList of 2\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : logi [1:3] TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Modifying Lists: (1) removing items (2) adding items (3) replacing items</span>"
    ]
  },
  {
    "objectID": "000415-d-lists-v036.html#removing-objects-from-a-list-with-null",
    "href": "000415-d-lists-v036.html#removing-objects-from-a-list-with-null",
    "title": "24  Modifying Lists: (1) removing items (2) adding items (3) replacing items",
    "section": "",
    "text": "Analyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n\n\n\n\n\n\nsee the actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n\n\n\n\n\n\nsee the actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\nYou cannot use NULL to remove values from vectors.\n\n#------------------------------------------------------------------.\n# VECTORS and LISTS are fundamentally different in how they \n# work \"under the covers\". As a result, you\n# cannot use NULL to remove values from vectors.\n#------------------------------------------------------------------.\nnums = c(100,200,300,400)\nnums\n\n[1] 100 200 300 400\n\nnums[3] = NULL   # This doesn't work\n\nError in nums[3] = NULL: replacement has length zero\n\nnums  # nothing happened to nums\n\n[1] 100 200 300 400\n\n\n\n\nRemoving more than one item in one command with [single-brackets]\n\nrm(list=ls()) # Let's start from scratch\ngradebook = list(c(\"bob\", \"charlie\", \"frank\"), \n                 c(70,80,90), \n                 c(75,85,88), \n                 c(TRUE, FALSE,FALSE))\nstr(gradebook)  \n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nsee the actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n# To remove more than one item from the list at once, use [single-brackets]\n# and use more than one value in the index.\ngradebook[c(1,2)] = NULL  \nstr(gradebook)  \n\nList of 2\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nsee the actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] 75 85 88\n\n[[2]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n# You cannot use [[double-brackets]] for this ...\n# That makes sense since this would actually try to use recursive\n# indexing to set the 2nd value in the 1st vector to NULL. However, \n# you cannot set values in vectors to NULL.\n#\ngradebook[[c(1,2)]] = NULL  # ERROR\n\nError in gradebook[[c(1, 2)]] = NULL: replacement has length zero\n\nstr(gradebook)  \n\nList of 2\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nsee the actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] 75 85 88\n\n[[2]]\n[1]  TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Modifying Lists: (1) removing items (2) adding items (3) replacing items</span>"
    ]
  },
  {
    "objectID": "000415-d-lists-v036.html#adding-items-to-a-list---3-different-ways",
    "href": "000415-d-lists-v036.html#adding-items-to-a-list---3-different-ways",
    "title": "24  Modifying Lists: (1) removing items (2) adding items (3) replacing items",
    "section": "24.2 Adding items to a list - 3 different ways",
    "text": "24.2 Adding items to a list - 3 different ways\n\n##############################################################################.\n# There are 3 different way to add items to a list\n#\n# option 1 - Use the c() function.\n#\n# option 2 - Use the append() function.\n#\n# option 3 - Assign new items to positions past the end of the list.\n#            Pay careful attention to using [single-brackets] vs [[double-brackets]]\n#\n# See the examples below ...\n##############################################################################.\n\n\nadd to a list - option 1 - use the c() function\n\nrm(list=ls()) # start from scratch\ngradebook = list(c(\"bob\", \"charlie\", \"frank\"), \n                 c(70,80,90), \n                 c(75,85,88), \n                 c(TRUE, FALSE,FALSE))\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n#######################################################################.\n# Adding to a list - option #1 - use the c() function\n#---------------------------------------------------------------------.\n# The c() function can be used to combines lists in the same way it\n# can be used to combine vectors. \n#    c(list1, list2, list3)   # a new combined list of all the items\n# See the example.\n#######################################################################.\n\n# Create a LIST that contains the new data\nnewData = list(c(61, 62, 63, 64),     # another test\n               c(\"senior\", \"sophomore\", \"senior\", \"freshman\") # year in school\n               )\n\n# combine the lists with the c function\ncombinedList = c(gradebook, newData)\nstr(combinedList)\n\nList of 6\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n $ : num [1:4] 61 62 63 64\n $ : chr [1:4] \"senior\" \"sophomore\" \"senior\" \"freshman\"\n\n\n\n\n\n\n\n\nsee the actual data - click here\n\n\n\n\n\n\ncombinedList # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n[[5]]\n[1] 61 62 63 64\n\n[[6]]\n[1] \"senior\"    \"sophomore\" \"senior\"    \"freshman\" \n\n\n\n\n\n\n\nadd to a list - option 2 - use the append() function\n\nrm(list=ls()) # start from scratch\ngradebook = list(c(\"bob\", \"charlie\", \"frank\"), \n                 c(70,80,90), \n                 c(75,85,88), \n                 c(TRUE, FALSE,FALSE))\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n#######################################################################.\n# Adding to a list - option #2 - use the append() function\n#\n# Append the values in a one list onto the end of another list.\n# see examples below\n#######################################################################.\n\n# Create a LIST that contains the new data\nnewData = list(c(61, 62, 63, 64),     # another test\n               c(\"senior\", \"sophomore\", \"senior\", \"freshman\") # year in school\n               )\n\n# combine the lists with the append function\ncombinedList = append(gradebook, newData)\nstr(combinedList)\n\nList of 6\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n $ : num [1:4] 61 62 63 64\n $ : chr [1:4] \"senior\" \"sophomore\" \"senior\" \"freshman\"\n\n# NOTE - the append function works with vectors too.\n# It can be used in other ways as well. \n# For more info see the help page.\n# ?append  \n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n\nadd to a list - option 3 - assign new items to positions past the end of the list\n\nrm(list=ls()) # start from scratch\ngradebook = list(c(\"bob\", \"charlie\", \"frank\"), \n                 c(70,80,90), \n                 c(75,85,88), \n                 c(TRUE, FALSE,FALSE))\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n# If you add an item using [[double-brackets]]\n# Whatever is on the RHS will be placed in the one position \n# identified on the LHS.\n\ngradebook[[5]] = c(\"senior\", \"senior\", \"junior\")  \n\ngradebook\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n[[5]]\n[1] \"senior\" \"senior\" \"junior\"\n\n# If you add an item using [single-brackets] the values in the list (or vector)\n# on the RHS will be assigned to the corresponding positions on the LHS.\n#\n# The following has a list of two values on the RHS.\n# The 1st vector in the list on the RHS is assigned to position 6\n# The 2nd vector in the list on the RHS is assigned to position 7\n\ngradebook[c(6,7)] = list(c(\"B.\", \"David\", \"Loyd\"),            # middle names\n                         c(\"Berger\", \"Chaplan\", \"Wright\")     # last names\n                         )\ngradebook\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n[[5]]\n[1] \"senior\" \"senior\" \"junior\"\n\n[[6]]\n[1] \"B.\"    \"David\" \"Loyd\" \n\n[[7]]\n[1] \"Berger\"  \"Chaplan\" \"Wright\" \n\n\n\nYou can reorganize items in the list after you add the new items.\n\n# We added middle and last names to the end of the list. \n# However, it would be nice if they were at the beginning of the list.\n# We can reorganize the list.\n# This is the way the list looks as of now. Notice that the middle\n# and last names are in the 6th and 7th positions in the list.\ngradebook\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n[[5]]\n[1] \"senior\" \"senior\" \"junior\"\n\n[[6]]\n[1] \"B.\"    \"David\" \"Loyd\" \n\n[[7]]\n[1] \"Berger\"  \"Chaplan\" \"Wright\" \n\n# Let's rearrange the list so the first,middle and last names are\n# all at the beginning of the list.\n\ngradebook = gradebook[c(1,6,7,2:5)]\n\n# Here is the new list\ngradebook\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] \"B.\"    \"David\" \"Loyd\" \n\n[[3]]\n[1] \"Berger\"  \"Chaplan\" \"Wright\" \n\n[[4]]\n[1] 70 80 90\n\n[[5]]\n[1] 75 85 88\n\n[[6]]\n[1]  TRUE FALSE FALSE\n\n[[7]]\n[1] \"senior\" \"senior\" \"junior\"\n\n\n\n\nSkipped entries in a list contain NULL\n\n# If you skip entires in a list then the missing entries are NULL.\n# You probably wouldn't want to do that. However, it's good\n# to understand what's happening if you do do it.\n\nrm(list=ls()) # start from scratch\ngradebook = list(c(\"bob\", \"charlie\", \"frank\"), \n                 c(70,80,90), \n                 c(75,85,88), \n                 c(TRUE, FALSE,FALSE))\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n# Assign a new value to position 7\n\ngradebook[[7]] = c(\"some\",\"new\",\"values\")\n\n# Positions 5 and 6 will \"implicitly\" contain NULL \n# (i.e. we didn't actually assign NULL)\ngradebook\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n[[5]]\nNULL\n\n[[6]]\nNULL\n\n[[7]]\n[1] \"some\"   \"new\"    \"values\"\n\n# If we want to remove those positions we can \n# EXPLICITLY assign NULL to those positions.\n# (Sounds strange, but this will actually work.)\ngradebook[c(5,6)] = NULL\n\ngradebook\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n[[5]]\n[1] \"some\"   \"new\"    \"values\"\n\n\n\n\n\nYou can add items to an empty list (this will be a useful technique later)\n\n#############################################################################.\n# Add items to an empty list (this will be a useful technique later)\n#############################################################################.\nstuff = list()    # this creates an empty list\nstuff\n\nlist()\n\nstr(stuff)\n\n list()\n\n# add a value to the 1st position\nstuff[[1]] = c(\"apple\", \"pear\", \"banana\")\n\n# add a value to the 2nd position\nstuff[[2]] = c(\"red\", \"green\", \"yellow\")\n\n# add values to the 3rd and 4th positions using [single-brackets]\nstuff[c(3,4)] = list( c(1.99, 2.99, 3.99),    # price\n                      c(TRUE, FALSE, TRUE))   # on sale\n\n# Here is the new data\nstr(stuff)\n\nList of 4\n $ : chr [1:3] \"apple\" \"pear\" \"banana\"\n $ : chr [1:3] \"red\" \"green\" \"yellow\"\n $ : num [1:3] 1.99 2.99 3.99\n $ : logi [1:3] TRUE FALSE TRUE\n\n# You can also add an entire list \n# (gradebook was defined above - this should probably be a better example)\nstuff[[5]] = gradebook     \nstr(stuff)\n\nList of 5\n $ : chr [1:3] \"apple\" \"pear\" \"banana\"\n $ : chr [1:3] \"red\" \"green\" \"yellow\"\n $ : num [1:3] 1.99 2.99 3.99\n $ : logi [1:3] TRUE FALSE TRUE\n $ :List of 5\n  ..$ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n  ..$ : num [1:3] 70 80 90\n  ..$ : num [1:3] 75 85 88\n  ..$ : logi [1:3] TRUE FALSE FALSE\n  ..$ : chr [1:3] \"some\" \"new\" \"values\"\n\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 5\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n $ : chr [1:3] \"some\" \"new\" \"values\"\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n[[5]]\n[1] \"some\"   \"new\"    \"values\"\n\n# View(gradebooks)  # see the structure - try this command yourself",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Modifying Lists: (1) removing items (2) adding items (3) replacing items</span>"
    ]
  },
  {
    "objectID": "000415-d-lists-v036.html#replacing-items-in-a-list",
    "href": "000415-d-lists-v036.html#replacing-items-in-a-list",
    "title": "24  Modifying Lists: (1) removing items (2) adding items (3) replacing items",
    "section": "24.3 Replacing items in a list",
    "text": "24.3 Replacing items in a list\n\nUsing [[double-brackets]] to replace entries in a list\n\n#####################################################################.\n# Using [[double-brackets]] to replace entries in a list\n#\n#    SOME_LIST[[ 1 ]] = SOME_VALUE\n# \n# The value at the specified position is replaced with SOME_VALUE\n#####################################################################.\nrm(list=ls())  # start from scratch\ngradebook = list( c(\"bob\", \"charlie\", \"frank\"), # student names\n                  c(70,80,90),                  # grades from first test\n                  c(75,85,88),                  # grades from second test\n                  c(TRUE, FALSE,FALSE))         # TRUE for honors students\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n#---------------------------------------------------------------------------.\n# Remember that SOME_LIST[[double-brackets]] will identify EXACTLY ONE item.\n#\n# If you use [[double-brackets]] on the LHS of the = sign then whatever\n# is on the RHS of the = sign will replace the one item that is \n# identified on the LHS of the = sign.\n#---------------------------------------------------------------------------.\n\n# EXAMPLE:\n# Replace the 1st item in the list with new vector of names\n\ngradebook[[1]] = c(\"anne\", \"betty\", \"carla\")\ngradebook\n\n[[1]]\n[1] \"anne\"  \"betty\" \"carla\"\n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n— Practice —\n\n#########################################################################.\n# QUESTION - write code to replace the 2nd item in the list with a new\n# vector that adds 1 point to each grade.\n#########################################################################.\n\n# Answer\ngradebook[[2]] = gradebook[[2]]  + 1\ngradebook\n\n[[1]]\n[1] \"anne\"  \"betty\" \"carla\"\n\n[[2]]\n[1] 71 81 91\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\nAnother example - insert a list into a list\n\nrm(list=ls())  # start from scratch\ngradebook = list( c(\"bob\", \"charlie\", \"frank\"), # student names\n                  c(70,80,90),                  # grades from first test\n                  c(75,85,88),                  # grades from second test\n                  c(TRUE, FALSE,FALSE))         # TRUE for honors students\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n# If the item on the RHS of the = sign is itself a list, that will be\n# inserted as a nested list.\n# \n# The following example inserts a nested list.\n\ngradebook[[1]] = list( c(\"Robert\",     \"Charles\", \"Francois\"),\n                       c(\"M.\",         \"David\",   \"\"),\n                       c(\"Rabinowitz\", \"Bush\",    \"McDonald\")\n                     )\n\n# It's easier to see the new structure of the list by using str\nstr(gradebook)\n\nList of 4\n $ :List of 3\n  ..$ : chr [1:3] \"Robert\" \"Charles\" \"Francois\"\n  ..$ : chr [1:3] \"M.\" \"David\" \"\"\n  ..$ : chr [1:3] \"Rabinowitz\" \"Bush\" \"McDonald\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nclick here to see the actual data\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[[1]][[1]]\n[1] \"Robert\"   \"Charles\"  \"Francois\"\n\n[[1]][[2]]\n[1] \"M.\"    \"David\" \"\"     \n\n[[1]][[3]]\n[1] \"Rabinowitz\" \"Bush\"       \"McDonald\"  \n\n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n\nUsing RECURSIVE INDEXING to replace a single value deep inside of a list\n\n############################################################################.\n# Using RECURSIVE INDEXING to replace a single value deep inside of a list\n############################################################################.\n\n# Let's start again with the following data.\n\nrm(list=ls())  # start from scratch\ngradebook = list( c(\"bob\", \"charlie\", \"frank\"), # student names\n                  c(70,80,90),                  # grades from first test\n                  c(75,85,88),                  # grades from second test\n                  c(TRUE, FALSE,FALSE))         # TRUE for honors students\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n#-------------------------------------------------------------------------.\n# The following example uses\n# \"recursive indexing\" (i.e. 2 or more values in the [[double-brackets]]) \n# to pinpoint the name \"charlie\" in the 1st entry of the list.\n# Therefore the name \"charles\" replaces that single item.\n#-------------------------------------------------------------------------.\n\ngradebook[[c(1,2)]] = \"charles\"   # Change \"charlie\" to \"charles\"\nstr(gradebook)\n\nList of 4\n $ : chr [1:3] \"bob\" \"charles\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nclick here to see the actual data\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charles\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n\n— Practice —\n\n########################################################################.\n# QUESTION - write code to \n# add 5 points to the 2nd students grade in the 3rd vector\n########################################################################.\n\n\n\n\n\n\n\nAnswer - click here\n\n\n\n\n\n\n# ANSWER\ngradebook # These are the original values\n\n[[1]]\n[1] \"bob\"     \"charles\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\ngradebook[[c(3, 2)]] = gradebook[[c(3, 2)]] + 5  # ANSWER \n\ngradebook  # These are the new values\n\n[[1]]\n[1] \"bob\"     \"charles\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 90 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n\nUsing [single-brackets] to replace items in a list\n\n############################################################################.\n# Using [single-brackets] to replace items in a list\n############################################################################.\n# When you use [single-brackets] on the left hand side (LHS) of the = sign, \n# you can potentially identify more than one value from the list. \n# Therefore the values from the RHS of the = sign may also contain more than \n# one value. The values are replaced one by one from the values on the RHS to \n# the positions in the list on the LHS.\n# This is true both in the case that the RHS contains a list \n# and in the case that the RHS contains a vector. \n# Therefore it's very important to be aware of the type of data (list or vector)\n# that is on the RHS of the = sign.\n#\n# See the examples below for more info.\n############################################################################.\n\n\nlist1[single-brackets]=list2 #replace values in list1 with values from list2\n\n# Let's start again with new data\n\nrm(list=ls())  # start from scratch\ngradebook = list( c(\"bob\", \"charlie\", \"frank\"), # student names\n                  c(70,80,90),                  # grades from first test\n                  c(75,85,88),                  # grades from second test\n                  c(TRUE, FALSE,FALSE))         # TRUE for honors students\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n# EXAMPLE:\n#\n# Replace the 2nd and 3rd items in the list on the left with the items \n# in the list on the right.\n#\n# IMPORTANT - Notice that the item on the right is also a LIST.\ngradebook[c(2,3)] = list(c(81,82,83),\n                         c(91,92,93))\n\nstr(gradebook)  # str of the new list\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 81 82 83\n $ : num [1:3] 91 92 93\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nsee the actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 81 82 83\n\n[[3]]\n[1] 91 92 93\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n#-----------------------------------------------------------.\n# ANOTHER EXAMPLE - Replace the names with new names.\n#-----------------------------------------------------------.\n# It makes no difference what is in the list on the RHS,\n# just that it is a list with the correct number of values.\n#\n# Replace the 1st entry in the list with new names.\n# Notice that the RHS of the = sign is a LIST\n#-----------------------------------------------------------.\n\ngradebook[1] = list(c(\"sue\", \"joan\", \"eve\"))\nstr(gradebook)  # str of the new list\n\nList of 4\n $ : chr [1:3] \"sue\" \"joan\" \"eve\"\n $ : num [1:3] 81 82 83\n $ : num [1:3] 91 92 93\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nsee the actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"sue\"  \"joan\" \"eve\" \n\n[[2]]\n[1] 81 82 83\n\n[[3]]\n[1] 91 92 93\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n# You can even replace the names with any other type of info.\ngradebook[1] = list(c(\"sue\", \"joan\", \"eve\",\"fran\",\"goldie\",\"laura\",\"mindy\"))\nstr(gradebook)  # str of the new list\n\nList of 4\n $ : chr [1:7] \"sue\" \"joan\" \"eve\" \"fran\" ...\n $ : num [1:3] 81 82 83\n $ : num [1:3] 91 92 93\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nsee the actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"sue\"    \"joan\"   \"eve\"    \"fran\"   \"goldie\" \"laura\"  \"mindy\" \n\n[[2]]\n[1] 81 82 83\n\n[[3]]\n[1] 91 92 93\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n\nSOME_LIST[single-brackets] = SOME_VECTOR # uses values from the vector\n\n#---------------------------------------------------------------------,\n# SOME_LIST[single-brackets] = SOME_VECTOR  \n#---------------------------------------------------------------------,\n# CAREFUL - if you have a VECTOR on the RHS then\n# the values from the VECTOR on the RHS will replace\n# the associated values from the LIST on the LHS.\n#\n# Generally speaking you probably don't want to to that.\n# However, you should be aware of what happens if you try to do that.\n#\n# Let's start again with the following data\n#---------------------------------------------------------------------,\n\nrm(list=ls())  # start from scratch\ngradebook = list( c(\"bob\", \"charlie\", \"frank\"), # student names\n                  c(70,80,90),                  # grades from first test\n                  c(75,85,88),                  # grades from second test\n                  c(TRUE, FALSE,FALSE))         # TRUE for honors students\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n#-------------------------------------------------------------------------.\n# EXAMPLE:\n#\n# The following has only one value on the LHS but 3 values on the RHS.\n# (Keep in mind - the LHS is a list but the RHS is a vector).\n#\n# This will cause only the first value from the RHS to be assigned to the\n# single value on the LHS.\n# i.e. the entire names vector (i.e. the 1st value on the LHS)\n# is replaced with just \"sue\" (i.e. the 1st value on the RHS)\n#\n# In addition you get a WARNING since there are more values on the RHS than\n# there should be.\n#-------------------------------------------------------------------------.\n\ngradebook[1] = c(\"sue\", \"joan\", \"anne\")\n\nWarning in gradebook[1] = c(\"sue\", \"joan\", \"anne\"): number of items to replace\nis not a multiple of replacement length\n\nstr(gradebook)\n\nList of 4\n $ : chr \"sue\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nsee actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"sue\"\n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n# The correct way to do this is to make the value on the RHS into a list.\ngradebook[1] = list ( c(\"sue\", \"joan\", \"anne\")  )\nstr(gradebook)\n\nList of 4\n $ : chr [1:3] \"sue\" \"joan\" \"anne\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nsee actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"sue\"  \"joan\" \"anne\"\n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n# Or another correct way to do this is to use [[double-brackets]] on the LHS\n# and the vector on the RHS\ngradebook[[1]] = c(\"leticia jones\", \"paulette cohen\", \"henrietta burns\")  \nstr(gradebook)\n\nList of 4\n $ : chr [1:3] \"leticia jones\" \"paulette cohen\" \"henrietta burns\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nsee actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"leticia jones\"   \"paulette cohen\"  \"henrietta burns\"\n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nlist1[1:4] = listWith2Values # recycling rule!!\n\n#--------------------------------------------------------------------------.\n# DON'T FORGET the recycling rule!!!\n#--------------------------------------------------------------------------.\n\n# Let's start again with the following data\n\nrm(list=ls())  # start from scratch\ngradebook = list( c(\"bob\", \"charlie\", \"frank\"), # student names\n                  c(70,80,90),                  # grades from first test\n                  c(75,85,88),                  # grades from second test\n                  c(TRUE, FALSE,FALSE))         # TRUE for honors students\n\n\n\n\n\n\n\nAnalyze the gradeook object - click here\n\n\n\n\n\n\nstr(gradebook)  # see the structure\n\nList of 4\n $ : chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ : num [1:3] 70 80 90\n $ : num [1:3] 75 85 88\n $ : logi [1:3] TRUE FALSE FALSE\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 88\n\n[[4]]\n[1]  TRUE FALSE FALSE\n\n# View(gradebooks)  # see the structure - try this command yourself\n\n\n\n\n\n#------------------------------------------------------------------------------.\n# Replace entries 1,2,3,4 in gradebook with the entries in the list on the RHS.\n# However there are only two entries in the list on the RHS. Therefore\n# The entries on the RHS are recycled so that there are four entries\n# in the list on the RHS.\n#------------------------------------------------------------------------------.\n\ngradebook[1:4] = list(c(\"apple\",\"banana\",\"comquat\",\"pear\",\"peach\"),\n                      c(1.99, 2.99, 3.99, 4.99, 5.99))\n\nstr(gradebook) # notice the vectors were recycled\n\nList of 4\n $ : chr [1:5] \"apple\" \"banana\" \"comquat\" \"pear\" ...\n $ : num [1:5] 1.99 2.99 3.99 4.99 5.99\n $ : chr [1:5] \"apple\" \"banana\" \"comquat\" \"pear\" ...\n $ : num [1:5] 1.99 2.99 3.99 4.99 5.99\n\n\n\n\n\n\n\n\nsee the actual values - click here\n\n\n\n\n\n\ngradebook # (see the actual values)\n\n[[1]]\n[1] \"apple\"   \"banana\"  \"comquat\" \"pear\"    \"peach\"  \n\n[[2]]\n[1] 1.99 2.99 3.99 4.99 5.99\n\n[[3]]\n[1] \"apple\"   \"banana\"  \"comquat\" \"pear\"    \"peach\"  \n\n[[4]]\n[1] 1.99 2.99 3.99 4.99 5.99",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Modifying Lists: (1) removing items (2) adding items (3) replacing items</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html",
    "href": "000415-e-lists-v035.html",
    "title": "25  NAMED LISTS",
    "section": "",
    "text": "25.1 Introducing $dollar-sign-notation for named lists\n#........................................................................\n# $DOLLAR-SIGN-NOTATION\n#\n# For \"named lists\" in addition to [[double-bracket-notation]] (as described above)\n# you can ALSO use $dollar-sign-notion (see examples below)\n#........................................................................\n\n# ONCE WE ADDED THE NAMES ...\n\ngradebook[[1]]    # still works\n\n[1] \"bob\"     \"charlie\" \"frank\"  \n\ngradebook$studs   # same exact thing\n\n[1] \"bob\"     \"charlie\" \"frank\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#double-brackets-vs.-dollar-sign-notation-different-ways-to-do-same-thing",
    "href": "000415-e-lists-v035.html#double-brackets-vs.-dollar-sign-notation-different-ways-to-do-same-thing",
    "title": "25  NAMED LISTS",
    "section": "25.2 [[double-brackets]] vs. $dollar-sign-notation (different ways to do same thing)",
    "text": "25.2 [[double-brackets]] vs. $dollar-sign-notation (different ways to do same thing)\n\n#--------------------------------------------------------------.\n# TWO WAYS OF DOING THE SAME THING:\n#    [[double-brackets-notation]] and $dollar-sign-notation\n#\n# [[double-brackets]] notation is just a different way of writing\n# $dollar-sign-notation. The result is EXACTLY THE SAME.\n#--------------------------------------------------------------.\n\ngradebook[[2]]    # access the 2nd value of gradebook\n\n[1] 70 80 90\n\ngradebook$exam1   # same EXACT thing\n\n[1] 70 80 90\n\n#--------------------------------------------------------------.\n# However, [single-brackets] are different !!!\n#--------------------------------------------------------------.\n\ngradebook[2]     # this returns a list\n\n$exam1\n[1] 70 80 90\n\ngradebook[[2]]   # this returns a vector\n\n[1] 70 80 90\n\ngradebook$exam1  # this returns a vector (same as gradebook[[2]] )\n\n[1] 70 80 90\n\n# Proof\nmode(gradebook[2])\n\n[1] \"list\"\n\nmode(gradebook[[2]]) \n\n[1] \"numeric\"\n\nmode(gradebook$exam1)\n\n[1] \"numeric\"\n\nidentical(gradebook[[2]], gradebook$exam1)   # TRUE\n\n[1] TRUE\n\nidentical(gradebook[2], gradebook$exam1)   # FALSE\n\n[1] FALSE\n\n#--------------------------------------------------------------.\n# All of the rules that you learned about using [[double-brackets]]\n# work the same way for $names However, $names are a lot easier\n# to use and are less confusing than [[double-brackets]].\n#--------------------------------------------------------------.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#practice",
    "href": "000415-e-lists-v035.html#practice",
    "title": "25  NAMED LISTS",
    "section": "25.3 — Practice —",
    "text": "25.3 — Practice —\n\n################################################################.\n# QUESTION\n#\n# Change the name of the first student to a different name.\n################################################################.\n\n###########.\n# Answer\n###########.\n\n# We have a few ways to do this.\n\n#---------------------------------------------.\n# One way ... using [[double-brackets]]\n#---------------------------------------------.\n\ngradebook[[1]][2] = \"avraham\" \ngradebook\n\n$studs\n[1] \"bob\"     \"avraham\" \"frank\"  \n\n$exam1\n[1] 70 80 90\n\n$exam2\n[1] 75 85 88\n\n$honorsStudent\n[1]  TRUE FALSE FALSE\n\n#---------------------------------------------.\n# Another way ... using $names\n#---------------------------------------------.\n\ngradebook$studs[2] = \"avi\"   \ngradebook\n\n$studs\n[1] \"bob\"   \"avi\"   \"frank\"\n\n$exam1\n[1] 70 80 90\n\n$exam2\n[1] 75 85 88\n\n$honorsStudent\n[1]  TRUE FALSE FALSE\n\n#---------------------------------------------.\n# A third way ... using \"recursive indexing\"\n# change the name from \"avi\" to \"abie\".\n#---------------------------------------------.\n\ngradebook[[c(1,2)]] = \"abie\"\ngradebook\n\n$studs\n[1] \"bob\"   \"abie\"  \"frank\"\n\n$exam1\n[1] 70 80 90\n\n$exam2\n[1] 75 85 88\n\n$honorsStudent\n[1]  TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#another-way-to-assign-names---specify-names-when-you-create-the-list",
    "href": "000415-e-lists-v035.html#another-way-to-assign-names---specify-names-when-you-create-the-list",
    "title": "25  NAMED LISTS",
    "section": "25.4 another way to assign names - specify names when you create the list(…)",
    "text": "25.4 another way to assign names - specify names when you create the list(…)\n\n#-------------------------------------------------------------.\n# another way to assign names - give the names directly\n# in the call to the list(...) function\n#-------------------------------------------------------------.\n\n# Remove all variables and start over again. \nrm(list= ls())  \n\n# This is the data that will go into the list.\n# We can remove these variables once the list is created.\nstudents = c(\"bob\", \"charlie\", \"frank\")\ntest1 = c(70,80,90)\ntest2 = c(75,85,88)\nhonors = c(TRUE, FALSE,FALSE)\n\n# create the list and assign names all in one command.\n#\n# For example, the code, \"studs=students\", in the command below means that \n# \"studs\" will be the name in the list for the data that is inserted into\n# the list from the students vector. (We could also call the name in \n# the list \"students\" instead of \"studs\". We'll see how to do that in the next example.)\n\ngradebook = list(studs=students, exam1=test1, exam2=test2, honorsStudent=honors)\n\ngradebook   \n\n$studs\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$exam1\n[1] 70 80 90\n\n$exam2\n[1] 75 85 88\n\n$honorsStudent\n[1]  TRUE FALSE FALSE\n\n# REMEMBER - the list does NOT depend on the original variables.\n# we can remove the original variables and the list is still there.\nrm(students, test1, test2, honors)   \ngradebook\n\n$studs\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$exam1\n[1] 70 80 90\n\n$exam2\n[1] 75 85 88\n\n$honorsStudent\n[1]  TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#review---comparison-of-the-2-ways-to-add-names-to-a-list",
    "href": "000415-e-lists-v035.html#review---comparison-of-the-2-ways-to-add-names-to-a-list",
    "title": "25  NAMED LISTS",
    "section": "25.5 REVIEW - comparison of the 2 ways to add names to a list:",
    "text": "25.5 REVIEW - comparison of the 2 ways to add names to a list:\n\n#...........................................................................\n# REVIEW - comparison of the 2 ways to add names to a list:\n#\n#     The first time we created the list we did the following\n#\n#        &gt; gradebook = list(students, test1, test2, honors)\n#        &gt; names(gradebook) = c(\"studs\", \"exam1\", \"exam2\", \"honorsStudent\")\n#\n#     an easier way is to do it all in one command like this:\n#\n#        &gt; gradebook = list(studs=students, exam1=test1, exam2=test2, honorsStudent=honors)\n#...........................................................................",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#using-the-same-names-as-the-variables",
    "href": "000415-e-lists-v035.html#using-the-same-names-as-the-variables",
    "title": "25  NAMED LISTS",
    "section": "25.6 USING THE SAME NAMES AS THE VARIABLES …",
    "text": "25.6 USING THE SAME NAMES AS THE VARIABLES …\n\n#...........................................................................\n# USING THE SAME NAMES AS THE VARIABLES ...\n#\n# Using the same name as the variable also works but it could look a little\n# confusing when you first see it. In the following command students=students,\n# looks confusing but it isn't so difficult. \n#\n#   &gt; gradebook = list(students=students, test1=test1, test2=test2, honors=honors)\n#\n# The word, students, on the left hand side of the = sign is the name of the\n# data in the list.\n# \n# The word, students, on the right hand side of the = sign is the variable students\n# that you are getting the data from.\n#\n# (See the code below ...)\n#...........................................................................\n\n# start over ... remove all variables\nrm (list = ls())\n\nstudents = c(\"bob\", \"charlie\", \"frank\",\"david\")\ntest1 = c(60,70,80,90)\ntest2 = c(65,75,85,95)\nhonors = c(TRUE, FALSE,FALSE)\n\ngradebook = list(students=students, test1=test1, test2=test2, honors=honors)\ngradebook\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"   \"david\"  \n\n$test1\n[1] 60 70 80 90\n\n$test2\n[1] 65 75 85 95\n\n$honors\n[1]  TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#changing-the-names-of-the-entries-in-a-list",
    "href": "000415-e-lists-v035.html#changing-the-names-of-the-entries-in-a-list",
    "title": "25  NAMED LISTS",
    "section": "25.7 Changing the names of the entries in a list",
    "text": "25.7 Changing the names of the entries in a list\n\n#--------------------------------------------------------------------------.\n# names( SOME_LIST ) = NEW_NAMES\n#\n# The names function simply returns the names of the objects in the list as a vector.\n# You can use this vector to display the names. \n# You can also use this to change the names. \n#\n# See the examples below. \n#--------------------------------------------------------------------------.\n\nrm(list=ls()) # start from scratch\ngradebook = list(students=c(\"bob\", \"charlie\", \"frank\"), \n                 test1=c(70,80,90), \n                 test2=c(75,85,88), \n                 honors=c(TRUE, FALSE,FALSE))\n\ngradebook\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$test1\n[1] 70 80 90\n\n$test2\n[1] 75 85 88\n\n$honors\n[1]  TRUE FALSE FALSE\n\nnames(gradebook)   # \"students\"  \"test1\"  \"test2\"  \"honors\"\n\n[1] \"students\" \"test1\"    \"test2\"    \"honors\"  \n\nnames(gradebook)[c(2,3)] = c(\"exam1\", \"exam2\")   # change tests to exams\n\nnames(gradebook)   # \"students\"  \"exam1\"  \"exam2\"  \"honors\"\n\n[1] \"students\" \"exam1\"    \"exam2\"    \"honors\"  \n\ngradebook   # notice the test1 and test2 were changed to exam1 and exam2\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$exam1\n[1] 70 80 90\n\n$exam2\n[1] 75 85 88\n\n$honors\n[1]  TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#practice-1",
    "href": "000415-e-lists-v035.html#practice-1",
    "title": "25  NAMED LISTS",
    "section": "25.8 — Practice —",
    "text": "25.8 — Practice —\n\n#..............................................................\n# QUESTION - Answer this question using the list defined below.\n#\n# (a) write code to add 2 points to the third student's\n#     grade on test1. Do this using $dollar-sign notation.\n#\n# (b) Do the same thing again but this \n#     time use [[double-bracket]] notation\n#\n# (c) Do the same thing again with \"recursive-indexing\"\n#..............................................................\n\n# Use this list \nrm(list=ls()) # start from scratch\ngradebook = list(students=c(\"bob\", \"charlie\", \"frank\"), \n                 test1=c(70,80,90), \n                 test2=c(75,85,88), \n                 honors=c(TRUE, FALSE,FALSE))\n\nstr(gradebook)\n\nList of 4\n $ students: chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ test1   : num [1:3] 70 80 90\n $ test2   : num [1:3] 75 85 88\n $ honors  : logi [1:3] TRUE FALSE FALSE\n\n############.\n# ANSWERS\n############.\n\n# (a) write code to add 2 points to the third student's\n#     grade on test1. Do this using $dollar-sign notation.\n\ngradebook$test1[3] = gradebook$test1[3] + 2 \n\ngradebook\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$test1\n[1] 70 80 92\n\n$test2\n[1] 75 85 88\n\n$honors\n[1]  TRUE FALSE FALSE\n\n# (b) Do the same thing again but this\n#     time use [[double-bracket]] notation\n\ngradebook[[2]][3] = gradebook[[2]][3] + 2\n\ngradebook\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$test1\n[1] 70 80 94\n\n$test2\n[1] 75 85 88\n\n$honors\n[1]  TRUE FALSE FALSE\n\n# (c)\n\ngradebook[[c(2,3)]] = gradebook[[c(2,3)]] + 2\ngradebook\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$test1\n[1] 70 80 96\n\n$test2\n[1] 75 85 88\n\n$honors\n[1]  TRUE FALSE FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#is.list-some_object-mode-some_object",
    "href": "000415-e-lists-v035.html#is.list-some_object-mode-some_object",
    "title": "25  NAMED LISTS",
    "section": "25.9 is.list( SOME_OBJECT )     mode( SOME_OBJECT )",
    "text": "25.9 is.list( SOME_OBJECT )     mode( SOME_OBJECT )\n\n#----------------------------------------.\n# is.list\n# mode\n#----------------------------------------.\n\nrm(list=ls()) # start from scratch\ngradebook = list(students=c(\"bob\", \"charlie\", \"frank\"), \n                 test1=c(70,80,90), \n                 test2=c(75,85,88), \n                 honors=c(TRUE, FALSE,FALSE))\n\nstr(gradebook)\n\nList of 4\n $ students: chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ test1   : num [1:3] 70 80 90\n $ test2   : num [1:3] 75 85 88\n $ honors  : logi [1:3] TRUE FALSE FALSE\n\nis.list(gradebook)           # TRUE\n\n[1] TRUE\n\nis.list(gradebook[[1]])      # FALSE\n\n[1] FALSE\n\nis.list(gradebook$students)  # FALSE\n\n[1] FALSE\n\nmode(gradebook)              # \"list\"\n\n[1] \"list\"\n\nmode(gradebook[[1]])         # \"character\"\n\n[1] \"character\"\n\nmode(gradebook$students)     # \"character\"\n\n[1] \"character\"\n\ngradebook[[1]][2]       # \"charlie\"\n\n[1] \"charlie\"\n\nmode(gradebook[[1]][2]) # \"character\"\n\n[1] \"character\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#a-list-can-contain-other-lists-as-well-as-vectors.",
    "href": "000415-e-lists-v035.html#a-list-can-contain-other-lists-as-well-as-vectors.",
    "title": "25  NAMED LISTS",
    "section": "25.10 A list can contain other lists as well as vectors.",
    "text": "25.10 A list can contain other lists as well as vectors.\n\n#######################################################.\n#\n# A list can contain other lists as well as vectors.\n#\n#######################################################.\n\nrm(list = ls())\n\nsection1 = list ( students = c(\"abe\",\"bob\",\"charlie\"),\n                  test1 = c(70,80,90),\n                  test2 = c(75,85,95))\n\nsection2 = list( students = c(\"fran\", \"anne\", \"sue\", \"bertha\", \"maxine\"),\n                 test1 = c(100,90,80,70,60),\n                 test2 = c(95,85,75,65,55),\n                 test3 = c(93,83,73,63,53))\n\nclasses = list( year = 2021,\n                semester = \"fall\",\n                section1 = section1,\n                section2 = section2 )\n\n# we don't need the original variables anymore\nrm( section1, section2 )\n\n\nclasses            # data for all of my sections\n\nclasses$section2   # just get the section2 data\n\n$section2  # ERROR - you need to start with the list, classes\n\nsection2   # ERROR - variable section2 doesn't exist (we removed it above)\n\n# modes of various portions of the structure\nmode(classes)  # list (obviously)\nmode(classes$section2 )  # list\nmode(classes$section2$test3 )   # numeric\n\n# display the average grade for section 2 on test 3\nmean ( classes$section2$test3 )\n\nError: &lt;text&gt;:31:1: unexpected '$'\n30: \n31: $\n    ^",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#setting-up-a-complex-list-structure-without-extra-variables",
    "href": "000415-e-lists-v035.html#setting-up-a-complex-list-structure-without-extra-variables",
    "title": "25  NAMED LISTS",
    "section": "25.11 Setting up a complex list structure without extra variables",
    "text": "25.11 Setting up a complex list structure without extra variables\n\n#..................................................\n# remember - you don't need extra variables. \n#            the following works too.\n#..................................................\n\nrm(list = ls())\n\nclasses = list( year = 2021,\n                semester = \"fall\",\n                section1 = list ( students = c(\"abe\",\"bob\",\"charlie\"),\n                                  test1 = c(70,80,90),\n                                  test2 = c(75,85,95)),\n                section2 = list( students = c(\"fran\", \"anne\", \"sue\", \"bertha\", \"maxine\"),\n                                 test1 = c(100,90,80,70,60),\n                                 test2 = c(95,85,75,65,55),\n                                 test3 = c(93,83,73,63,53)) )\n\nclasses\n\n$year\n[1] 2021\n\n$semester\n[1] \"fall\"\n\n$section1\n$section1$students\n[1] \"abe\"     \"bob\"     \"charlie\"\n\n$section1$test1\n[1] 70 80 90\n\n$section1$test2\n[1] 75 85 95\n\n\n$section2\n$section2$students\n[1] \"fran\"   \"anne\"   \"sue\"    \"bertha\" \"maxine\"\n\n$section2$test1\n[1] 100  90  80  70  60\n\n$section2$test2\n[1] 95 85 75 65 55\n\n$section2$test3\n[1] 93 83 73 63 53\n\nclasses$section2\n\n$students\n[1] \"fran\"   \"anne\"   \"sue\"    \"bertha\" \"maxine\"\n\n$test1\n[1] 100  90  80  70  60\n\n$test2\n[1] 95 85 75 65 55\n\n$test3\n[1] 93 83 73 63 53\n\nmean( classes$section2$test3 )\n\n[1] 73\n\nmean( classes[[4]][[4]] )   # same thing\n\n[1] 73",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#practice-2",
    "href": "000415-e-lists-v035.html#practice-2",
    "title": "25  NAMED LISTS",
    "section": "25.12 — Practice —",
    "text": "25.12 — Practice —\n\n#------------------------------------------------------------------------------.\n# QUESTION - Display the grade for the last student in section 2 on test3\n#------------------------------------------------------------------------------.\n\n# ANSWER - with $ notation\nclasses$section2$test3[   length(classes$section2$test3)       ]\n\n[1] 53\n\n# NOTE - you CAN use \"recursive indexing\" to get the grade using the code\n# below, but the code to get the \"last\" test3 grade is harder to read.\n# ANSWER - using nested indexing \n\nclasses[[ c(4,    4,           5                 ) ]]  # get the 5th test3 grade\n\n[1] 53\n\nclasses[[ c(4,    4,   length(classes[[c(4,4)]]) ) ]]  # get the last test3 grade\n\n[1] 53\n\n#------------------------------------------------------------------------------.\n# QUESTION \n# write code to display anne's grade on test2\n# anne is in section2\n# do NOT assume that anne is the 2nd person, i.e. \n# write the code so that no matter how many people are in the class\n# and no matter the order of those people in the data, you will get anne's grade\n#------------------------------------------------------------------------------.\n\n# ANSWER\n\nclasses$section2$test2[ classes$section2$students == \"anne\" ]\n\n[1] 85\n\n#------------------------------------------------------------------------------.\n# QUESTION - write code to find the name of the person in \n# section 1 who scored highest on test2\n# AGAIN - do not assume that the data is any particular order\n#------------------------------------------------------------------------------.\n\n# ANSWER \n\nclasses$section1$students[  classes$section1$test2 == max ( classes$section1$test2 )     ]\n\n[1] \"charlie\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#review-of-ways-to-access-data-in-a-list",
    "href": "000415-e-lists-v035.html#review-of-ways-to-access-data-in-a-list",
    "title": "25  NAMED LISTS",
    "section": "25.13 REVIEW OF WAYS TO ACCESS DATA IN A LIST",
    "text": "25.13 REVIEW OF WAYS TO ACCESS DATA IN A LIST\n\n#--------------------------------------------------------------------------.\n# REVIEW OF WAYS TO ACCESS DATA IN A LIST\n#\n#   SOME_LIST[[ A_SINGLE_POSITIVE_NUMBER ]]\n#\n#   SOME_LIST[[ VECTOR_OF_POSITIVE_NUMBERS ]]   # i.e. recursive indexing\n#\n#   SOME_LIST[ SOME_VECTOR_INDEX ]     # a list\n#\n#   SOME_LIST$SOME_ENTRY_NAME      # same as double bracket notation\n#\n#--------------------------------------------------------------------------.\n#\n# With [[double-bracket]] notation you always get back ONE object.\n#\n#   SOME_LIST [[ A_SINGLE_POSITIVE_NUMBER ]]\n#       returns the object in the list at the specified position\n#\n#       Example:\n#         &gt; stuff = list ( c(\"apple\", \"orange\", \"pear\") , c(\"table\", \"chair\") )\n#\n#         &gt; stuff[[1]]\n#         [1]  \"apple\"  \"orange\"  \"pear\"\n#\n#         &gt; stuff[[2]]\n#         [1] \"table\"  \"chair\"\n#\n#\n#   SOME_LIST [[ A_VECTOR_OF_POSITIVE_NUMBERS ]]\n#       If the subscript in the [[double brackets]] contains more than one\n#       positive number then the values in the subscript are applied one after the other\n#       until you wind up with a single object. This is known as \"recursive indexing\".\n#       For example:\n# \n#       Example:\n#         &gt; stuff = list ( c(\"apple\", \"orange\", \"pear\") , c(\"table\", \"chair\") )\n#\n#         &gt; stuff[[1]]\n#         [1]  \"apple\"  \"orange\"  \"pear\"\n#\n#         &gt; # get the 1st object from the list then the 2nd item from that vector\n#\n#         &gt; stuff[[c(1,2)]]    \n#         [1] \"orange\"\n#\n#       Unfortunately, most R programmers are not familiar with using subscripts that \n#       are vectors with more than one number. This feature is not documented well.\n#       It's hard to find a good explanation of this in the official R documentation.\n#\n#       Therefore I don't recommend that you use this in your code a lot\n#       as many other R programmers will not understand what you are doing.\n#       However, it does work. \n#\n#\n#   SOME_LIST[ SOME_VECTOR_INDEX ]   \n#          \n#       You can use [single-bracket] notation to get back a NEW LIST\n#       of values from the original list.\n#\n#       With [single-bracket] notation, you can use any of methods that\n#       we learned about for indexing vectors, i.e. \n#         - positive position numbers\n#         - negative position numbers\n#         - logical values\n#       to get as many values back as you want. \n#\n#       All the values are put into a NEW LIST.\n#\n#\n#\n#---------------------------------------------------------------.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#removing-items-from-a-list-this-was-covered-in-previous-section",
    "href": "000415-e-lists-v035.html#removing-items-from-a-list-this-was-covered-in-previous-section",
    "title": "25  NAMED LISTS",
    "section": "25.14 Removing items from a list (THIS WAS COVERED IN PREVIOUS SECTION)",
    "text": "25.14 Removing items from a list (THIS WAS COVERED IN PREVIOUS SECTION)\n\n#---------------------------------------------------------------.\n# Removing items from a list.\n#\n# NULL is a \"special value\" that can be understood as \"nothing\".\n# To remove an item from a list, you can assign NULL to that value.\n# This works whether you specify the item to remove\n#   with the [[double-bracket]] notation, \n#   with the [single-bracket] notation or\n#   with the $dollar-sign-notation\n#\n# NULL is DIFFERERNT from NA.\n# ---------------------------.\n# NA means there is some information being recorded but the exact\n# value of that information is not available.\n#\n# NULL means that there is no information being recorded.\n#\n# Therefore if you set an item in a list to NULL, the item is\n# removed from the list. However, if you set an item in a list to NA\n# then the item becomes NA.\n#---------------------------------------------------------------.\n\n# let's recreate all of the data\nrm(list= ls())\n\n# gradebook = list(students, test1, test2, honors)\n\ngradebook = list(students=c(\"bob\", \"charlie\", \"frank\"), \n                 test1=c(70,80,90), \n                 test2=c(75,85,88), \n                 honors=c(TRUE, FALSE,FALSE))\n\ngradebook\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$test1\n[1] 70 80 90\n\n$test2\n[1] 75 85 88\n\n$honors\n[1]  TRUE FALSE FALSE\n\nstr(gradebook)\n\nList of 4\n $ students: chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ test1   : num [1:3] 70 80 90\n $ test2   : num [1:3] 75 85 88\n $ honors  : logi [1:3] TRUE FALSE FALSE\n\n#gradebook = list(students=students, test1=test1, test2=test2, honors=honors)\n#gradebook               # gradebook contains 4 items\n\ngradebook[[3]] = NULL   # remove the third item from the gradebook (i.e. $test2)\ngradebook               # $test2 (which was the 3rd value is removed)\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$test1\n[1] 70 80 90\n\n$honors\n[1]  TRUE FALSE FALSE\n\nstr(gradebook)\n\nList of 3\n $ students: chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ test1   : num [1:3] 70 80 90\n $ honors  : logi [1:3] TRUE FALSE FALSE\n\ngradebook$test1 = NULL  # remove the $test1 item from the gradebook\ngradebook               # test1 is removed\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$honors\n[1]  TRUE FALSE FALSE\n\nstr(gradebook)\n\nList of 2\n $ students: chr [1:3] \"bob\" \"charlie\" \"frank\"\n $ honors  : logi [1:3] TRUE FALSE FALSE\n\ngradebook[2] = NULL    # single brackets also works, honors is currently the 2nd item\ngradebook              # honors was removed from the gradebook\n\n$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\nstr(gradebook)\n\nList of 1\n $ students: chr [1:3] \"bob\" \"charlie\" \"frank\"\n\ngradebook[[1]] = NULL  # you can remove the last item too\ngradebook              # named list()   - i.e. an empty list that has names\n\nnamed list()\n\n# add an item to the now empty list (see below for more info\n# about how to add items)\n\ngradebook[[1]] = c(\"apple\", \"cucumber\", \"tomato\")\ngradebook\n\n[[1]]\n[1] \"apple\"    \"cucumber\" \"tomato\"  \n\nstr(gradebook)\n\nList of 1\n $ : chr [1:3] \"apple\" \"cucumber\" \"tomato\"\n\ngradebook[[1]] = NULL\ngradebook\n\nnamed list()",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#adding-items-to-a-list---using-newnames-or-double-brackets",
    "href": "000415-e-lists-v035.html#adding-items-to-a-list---using-newnames-or-double-brackets",
    "title": "25  NAMED LISTS",
    "section": "25.15 Adding items to a list - using $newNames (or [[double-brackets]])",
    "text": "25.15 Adding items to a list - using $newNames (or [[double-brackets]])\n\n#---------------------------------------------------------------.\n# Adding items to a list.\n#---------------------------------------------------------------.\n\n#...................................................................\n# You can assign a new value in the list using either\n# [[double-bracket]] notation\n# or $dollar-sign notation\n#...................................................................\nrm(list=ls())\n\nstudents = c(\"bob\", \"charlie\", \"frank\")\n\nstuff = list()  # let's start with an empty list\nstuff           # list()\n\nlist()\n\nstuff[[1]] = students     # position 1 is created\nstuff\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\nstuff$exam1 = c(71,81,91) # add another entry to the list\nstuff\n\n[[1]]\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$exam1\n[1] 71 81 91\n\n# You can use either notation, [[double-brackets]] or $dollar-signs\n# to refer to the data you just added\nstuff$exam1\n\n[1] 71 81 91\n\nstuff[[2]]   #same thing\n\n[1] 71 81 91",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#navigating-a-complex-named-list-with-multiple-levels-of-nesting",
    "href": "000415-e-lists-v035.html#navigating-a-complex-named-list-with-multiple-levels-of-nesting",
    "title": "25  NAMED LISTS",
    "section": "25.16 NAVIGATING A COMPLEX NAMED LIST WITH MULTIPLE LEVELS OF NESTING",
    "text": "25.16 NAVIGATING A COMPLEX NAMED LIST WITH MULTIPLE LEVELS OF NESTING\n\n############################################################################.\n#\n# NAVIGATING A COMPLEX NAMED LIST WITH MULTIPLE LEVELS OF NESTING\n#\n############################################################################.\n\n# create a list that has names\n# This is a list with multiple levels of nesting\n# (i.e. lists inside lists inside lists ... etc)\n\ngradebook = list( year = 2022,\n                  semester = \"fall\",\n                  classes = list (\n                    \n                    ids1020 = list(\n                      \n                      section211 = list (\n                        students=c(\"bob\", \"charlie\", \"frank\"), \n                        test1=c(70,80,90), \n                        test2=c(75,85,88), \n                        honors=c(TRUE, FALSE,FALSE)\n                      ),\n                      \n                      sectionB = list(\n                        students=c(\"sarah\", \"anne\", \"lisa\"), \n                        test1=c(71,81,91), \n                        test2=c(72,82,92), \n                        honors=c(FALSE,FALSE,TRUE)\n                      )\n                    ),\n                    \n                    ids2030 = list(\n                      \n                      section311 = list(\n                        students=c(\"abe\", \"carl\", \"dave\"), \n                        test1=c(73,83,93), \n                        honors=c(FALSE, FALSE,FALSE)\n                      ),\n                      \n                      sectionC = list(\n                        students=c(\"alice\", \"bracha\"), \n                        test1=c(86,96), \n                        honors=c(TRUE,TRUE)\n                      )\n                    )\n                  )\n)\n\n# The following can be very hard to read\ngradebook\n\n$year\n[1] 2022\n\n$semester\n[1] \"fall\"\n\n$classes\n$classes$ids1020\n$classes$ids1020$section211\n$classes$ids1020$section211$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$classes$ids1020$section211$test1\n[1] 70 80 90\n\n$classes$ids1020$section211$test2\n[1] 75 85 88\n\n$classes$ids1020$section211$honors\n[1]  TRUE FALSE FALSE\n\n\n$classes$ids1020$sectionB\n$classes$ids1020$sectionB$students\n[1] \"sarah\" \"anne\"  \"lisa\" \n\n$classes$ids1020$sectionB$test1\n[1] 71 81 91\n\n$classes$ids1020$sectionB$test2\n[1] 72 82 92\n\n$classes$ids1020$sectionB$honors\n[1] FALSE FALSE  TRUE\n\n\n\n$classes$ids2030\n$classes$ids2030$section311\n$classes$ids2030$section311$students\n[1] \"abe\"  \"carl\" \"dave\"\n\n$classes$ids2030$section311$test1\n[1] 73 83 93\n\n$classes$ids2030$section311$honors\n[1] FALSE FALSE FALSE\n\n\n$classes$ids2030$sectionC\n$classes$ids2030$sectionC$students\n[1] \"alice\"  \"bracha\"\n\n$classes$ids2030$sectionC$test1\n[1] 86 96\n\n$classes$ids2030$sectionC$honors\n[1] TRUE TRUE\n\n# It may be easier to analyze this list with str or with View (capital \"V\")\n# or by pressing the arrow \"&gt;\" button next to the gradebook variable in the Environment tab.\nstr(gradebook)\n\nList of 3\n $ year    : num 2022\n $ semester: chr \"fall\"\n $ classes :List of 2\n  ..$ ids1020:List of 2\n  .. ..$ section211:List of 4\n  .. .. ..$ students: chr [1:3] \"bob\" \"charlie\" \"frank\"\n  .. .. ..$ test1   : num [1:3] 70 80 90\n  .. .. ..$ test2   : num [1:3] 75 85 88\n  .. .. ..$ honors  : logi [1:3] TRUE FALSE FALSE\n  .. ..$ sectionB  :List of 4\n  .. .. ..$ students: chr [1:3] \"sarah\" \"anne\" \"lisa\"\n  .. .. ..$ test1   : num [1:3] 71 81 91\n  .. .. ..$ test2   : num [1:3] 72 82 92\n  .. .. ..$ honors  : logi [1:3] FALSE FALSE TRUE\n  ..$ ids2030:List of 2\n  .. ..$ section311:List of 3\n  .. .. ..$ students: chr [1:3] \"abe\" \"carl\" \"dave\"\n  .. .. ..$ test1   : num [1:3] 73 83 93\n  .. .. ..$ honors  : logi [1:3] FALSE FALSE FALSE\n  .. ..$ sectionC  :List of 3\n  .. .. ..$ students: chr [1:2] \"alice\" \"bracha\"\n  .. .. ..$ test1   : num [1:2] 86 96\n  .. .. ..$ honors  : logi [1:2] TRUE TRUE\n\n# View(gradebook)   # this opens a new tab. Uncomment this line if you want to run it.\n\ngradebook\n\n$year\n[1] 2022\n\n$semester\n[1] \"fall\"\n\n$classes\n$classes$ids1020\n$classes$ids1020$section211\n$classes$ids1020$section211$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$classes$ids1020$section211$test1\n[1] 70 80 90\n\n$classes$ids1020$section211$test2\n[1] 75 85 88\n\n$classes$ids1020$section211$honors\n[1]  TRUE FALSE FALSE\n\n\n$classes$ids1020$sectionB\n$classes$ids1020$sectionB$students\n[1] \"sarah\" \"anne\"  \"lisa\" \n\n$classes$ids1020$sectionB$test1\n[1] 71 81 91\n\n$classes$ids1020$sectionB$test2\n[1] 72 82 92\n\n$classes$ids1020$sectionB$honors\n[1] FALSE FALSE  TRUE\n\n\n\n$classes$ids2030\n$classes$ids2030$section311\n$classes$ids2030$section311$students\n[1] \"abe\"  \"carl\" \"dave\"\n\n$classes$ids2030$section311$test1\n[1] 73 83 93\n\n$classes$ids2030$section311$honors\n[1] FALSE FALSE FALSE\n\n\n$classes$ids2030$sectionC\n$classes$ids2030$sectionC$students\n[1] \"alice\"  \"bracha\"\n\n$classes$ids2030$sectionC$test1\n[1] 86 96\n\n$classes$ids2030$sectionC$honors\n[1] TRUE TRUE\n\nstr(gradebook)\n\nList of 3\n $ year    : num 2022\n $ semester: chr \"fall\"\n $ classes :List of 2\n  ..$ ids1020:List of 2\n  .. ..$ section211:List of 4\n  .. .. ..$ students: chr [1:3] \"bob\" \"charlie\" \"frank\"\n  .. .. ..$ test1   : num [1:3] 70 80 90\n  .. .. ..$ test2   : num [1:3] 75 85 88\n  .. .. ..$ honors  : logi [1:3] TRUE FALSE FALSE\n  .. ..$ sectionB  :List of 4\n  .. .. ..$ students: chr [1:3] \"sarah\" \"anne\" \"lisa\"\n  .. .. ..$ test1   : num [1:3] 71 81 91\n  .. .. ..$ test2   : num [1:3] 72 82 92\n  .. .. ..$ honors  : logi [1:3] FALSE FALSE TRUE\n  ..$ ids2030:List of 2\n  .. ..$ section311:List of 3\n  .. .. ..$ students: chr [1:3] \"abe\" \"carl\" \"dave\"\n  .. .. ..$ test1   : num [1:3] 73 83 93\n  .. .. ..$ honors  : logi [1:3] FALSE FALSE FALSE\n  .. ..$ sectionC  :List of 3\n  .. .. ..$ students: chr [1:2] \"alice\" \"bracha\"\n  .. .. ..$ test1   : num [1:2] 86 96\n  .. .. ..$ honors  : logi [1:2] TRUE TRUE\n\n#------------------------------------------------------------------------.\n# REMEMBER - you can use the $dollar-sign notation to navigate the list\n#------------------------------------------------------------------------.\n\ngradebook$classes$ids2030$section311$students   # \"abe\" \"carl\" \"dave\"\n\n[1] \"abe\"  \"carl\" \"dave\"\n\ngradebook$classes$ids2030$section311$test1   # 73 83 93\n\n[1] 73 83 93\n\ngradebook$classes$ids1020$sectionB$students   # \"sarah\" \"anne\" \"lisa\"\n\n[1] \"sarah\" \"anne\"  \"lisa\" \n\ngradebook$classes$ids1020$sectionB  # an entire list\n\n$students\n[1] \"sarah\" \"anne\"  \"lisa\" \n\n$test1\n[1] 71 81 91\n\n$test2\n[1] 72 82 92\n\n$honors\n[1] FALSE FALSE  TRUE\n\n# $students\n# [1] \"sarah\" \"anne\"  \"lisa\" \n# \n# $test1\n# [1] 71 81 91\n# \n# $test2\n# [1] 72 82 92\n# \n# $honors\n# [1] FALSE FALSE  TRUE\n\nstr(gradebook$classes$ids1020$sectionB) # easier to read with str\n\nList of 4\n $ students: chr [1:3] \"sarah\" \"anne\" \"lisa\"\n $ test1   : num [1:3] 71 81 91\n $ test2   : num [1:3] 72 82 92\n $ honors  : logi [1:3] FALSE FALSE TRUE\n\n# List of 4\n# $ students: chr [1:3] \"sarah\" \"anne\" \"lisa\"\n# $ test1   : num [1:3] 71 81 91\n# $ test2   : num [1:3] 72 82 92\n# $ honors  : logi [1:3] FALSE FALSE TRUE\n\n# a list of lists\ngradebook$classes$ids1020  \n\n$section211\n$section211$students\n[1] \"bob\"     \"charlie\" \"frank\"  \n\n$section211$test1\n[1] 70 80 90\n\n$section211$test2\n[1] 75 85 88\n\n$section211$honors\n[1]  TRUE FALSE FALSE\n\n\n$sectionB\n$sectionB$students\n[1] \"sarah\" \"anne\"  \"lisa\" \n\n$sectionB$test1\n[1] 71 81 91\n\n$sectionB$test2\n[1] 72 82 92\n\n$sectionB$honors\n[1] FALSE FALSE  TRUE\n\nstr(gradebook$classes$ids1020)\n\nList of 2\n $ section211:List of 4\n  ..$ students: chr [1:3] \"bob\" \"charlie\" \"frank\"\n  ..$ test1   : num [1:3] 70 80 90\n  ..$ test2   : num [1:3] 75 85 88\n  ..$ honors  : logi [1:3] TRUE FALSE FALSE\n $ sectionB  :List of 4\n  ..$ students: chr [1:3] \"sarah\" \"anne\" \"lisa\"\n  ..$ test1   : num [1:3] 71 81 91\n  ..$ test2   : num [1:3] 72 82 92\n  ..$ honors  : logi [1:3] FALSE FALSE TRUE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#using-names-another-way-e.g.---somelistcvectorofquotednames",
    "href": "000415-e-lists-v035.html#using-names-another-way-e.g.---somelistcvectorofquotednames",
    "title": "25  NAMED LISTS",
    "section": "25.17 Using names another way, e.g. - someList[c(“vector”,“of”,“quoted”,“names”)]",
    "text": "25.17 Using names another way, e.g. - someList[c(“vector”,“of”,“quoted”,“names”)]\n\n#---------------------------------------------------------------------------.\n# someList[c(\"vector\",\"of\",\"quoted\",\"names\")]       (with [single-brackets])\n# \n# You can use a vector of quoted \"names\" as an index for the list.\n# The result is a list that contains just the specified elements. \n#---------------------------------------------------------------------------.\n\nlength(gradebook)   # 3\n\n[1] 3\n\nlength(gradebook$classes) # 2\n\n[1] 2\n\ngradebook[c(\"year\", \"semester\")]   \n\n$year\n[1] 2022\n\n$semester\n[1] \"fall\"\n\n# $year\n# [1] 2022\n# \n# $semester\n# [1] \"fall\"\n\ngradebook[ c(1,2) ]  # same result\n\n$year\n[1] 2022\n\n$semester\n[1] \"fall\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#recursive-indexing-with-a-vector-of-names-eg.-somelistcvecofnames",
    "href": "000415-e-lists-v035.html#recursive-indexing-with-a-vector-of-names-eg.-somelistcvecofnames",
    "title": "25  NAMED LISTS",
    "section": "25.18 RECURSIVE INDEXING WITH A VECTOR OF NAMES, eg. someList[[c(“vec”,“of”,“names”)]]",
    "text": "25.18 RECURSIVE INDEXING WITH A VECTOR OF NAMES, eg. someList[[c(“vec”,“of”,“names”)]]\n\n#------------------------------------------------------------------------.\n# RECURSIVE INDEXING WITH A VECTOR OF NAMES, eg.\n# someList[[c(\"vector\",\"of\",\"quoted\",\"names\")]]       (with [[double-brackets]])\n#\n# We are adding this section to be complete. However, this technique\n# is not used very often (see below for why).\n#\n# Just like you can use \"recursive indexing\" with\n# a vector of numbers in [[double-brackets]]\n# you can also use \"recursive indexing\" with\n# a vector of names in [[double-brackets]]\n#\n# Remember that when using code such as someList[[c(3,2,4)]], \n# ie. [[double-brackets]] with a vector of positive numbers\n# R performs \"recursive indexing\" (see above for more info).\n#\n# In a similar way, you use similar code with a vector of names instead of\n# a vector of numbers, R will also do \"recursive indexing\", based on the names\n# instead of the numbers. However, this technique is not used very often,\n# because $dollar-sign notation accomplishes the same thing and is much\n# easier to read and type.\n#\n#      someList[[c(\"name\",\"anotherName\",\"yetAThirdName\",\"etc\")]]\n#\n#             is the same as \n#\n#      someList$name$anotherName$yetAThirdName$etc\n#\n#------------------------------------------------------------------------.\n\n# You may use [[\"oneQuotedName\"]] in double-brackets.\n\ngradebook[[\"semester\"]]   # [1] \"fall\"\n\n[1] \"fall\"\n\ngradebook$semester        # \"fall\" - same thing \n\n[1] \"fall\"\n\n# If you use more than one quoted name in the [[double-brackets]]\n# R does \"recursive indexing\" and finds the one item that you specified\n# which may be inside nested named lists or nested named vectors\n#\n# The following returns JUST the vector of student \n# names that is in section311 in ids2030 in the classes list\n\ngradebook[[c(\"classes\",\"ids2030\",\"section311\",\"students\")]] # \"abe\" \"carl\" \"dave\"\n\n[1] \"abe\"  \"carl\" \"dave\"\n\n# This is the same thing ... and much easier to type\n\ngradebook$classes$ids2030$section311$students        # same thing - \"abe\" \"carl\" \"dave\"\n\n[1] \"abe\"  \"carl\" \"dave\"\n\ngradebook [[ c(3,2,1,1)]]  # same thing - \n\n[1] \"abe\"  \"carl\" \"dave\"\n\ngradebook [[ c(3,2,1,1,2)]]  # \"carl\"\n\n[1] \"carl\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#named-vectors",
    "href": "000415-e-lists-v035.html#named-vectors",
    "title": "25  NAMED LISTS",
    "section": "25.19 NAMED VECTORS",
    "text": "25.19 NAMED VECTORS\n\n##############################################################################.\n##############################################################################.\n## NAMED VECTORS\n##\n## Just like you can have named lists, you can also have vectors with names.\n##\n## You can use a vector of quoted \"names\" as an index for a vector or a list.\n##############################################################################.\n##############################################################################.\n\n#-------------------------------------------------------.\n# HOW TO CREATE A NAMED VECTOR - FIRST WAY\n#\n#   someVector = c(name1=value1, name2=value2, etc)\n#\n#   (No need to put \"quotes\" around the names)\n#-------------------------------------------------------.\n\n# create a numeric vector with names\ntest1 = c(joe=50, sam=60, sue=70, bob=80, anne=90)\n\n#-------------------------------------------------------.\n# The names are displayed with the vector.\n#-------------------------------------------------------.\ntest1\n\n joe  sam  sue  bob anne \n  50   60   70   80   90 \n\n# joe  sam  sue  bob anne \n#  50   60   70   80   90 \n\n#-------------------------------------------------------.\n# HOW TO CREATE A NAMED VECTOR - SECOND WAY\n#\n#   names(someVector) = c(\"name1\", \"name2\", ... etc.)\n#-------------------------------------------------------.\n\n# Create a vector without names\ncalories = c(95, 102, 45)\ncalories \n\n[1]  95 102  45\n\n# [1] 95 102 45\n\n# Add names.\nnames(calories) = c(\"apple\", \"pear\", \"orange\")\ncalories\n\n apple   pear orange \n    95    102     45 \n\n# apple   pear orange \n#    95    102     45\n\n\n25.19.1 A vector with names has the same mode as if it didn’t have names.\n\n#------------------------------------------------------------------------.\n# A vector with names has the same mode as if it didn't have names.\n# You can continue to treat numeric data as numeric, logical data as logical, etc.\n#------------------------------------------------------------------------.\n\ntest1\n\n joe  sam  sue  bob anne \n  50   60   70   80   90 \n\n# joe  sam  sue  bob anne \n#  50   60   70   80   90 \n\nmode(test1)   # \"numeric\"\n\n[1] \"numeric\"\n\nmean(test1)   # this still works\n\n[1] 70\n\n# [1] 70\n\ntest1 + 1     # this still works\n\n joe  sam  sue  bob anne \n  51   61   71   81   91 \n\n# joe  sam  sue  bob anne \n#  51   61   71   81   91\n\n\n#------------------------------------------------------------------------.\n# You can see from the output of str that a vector has names\n#------------------------------------------------------------------------.\n\nstr(test1) \n\n Named num [1:5] 50 60 70 80 90\n - attr(*, \"names\")= chr [1:5] \"joe\" \"sam\" \"sue\" \"bob\" ...\n\n# Named num [1:5] 50 50 70 80 90\n# - attr(*, \"names\")= chr [1:5] \"joe\" \"sam\" \"suzanne\" \"bob\" ...\n\n\n\n25.19.2 names(SOME_VECTOR) returns a character vector of the names - you can use this to change the names\n\n#------------------------------------------------------------------------.\n# You can use the names() function to access just the names of a vector or list.\n# The value returned from names() is a \"character\" vector.\n# You can change the names by using the names() function.\n#------------------------------------------------------------------------.\n\n# You can access just the names with the names function\nnames(test1)\n\n[1] \"joe\"  \"sam\"  \"sue\"  \"bob\"  \"anne\"\n\n# [1] \"joe\"  \"sam\"  \"sue\"  \"bob\"  \"anne\"\n\n\n# You can change SOME of the names \nnames(test1)[3] = \"suzanne\"\n\ntest1\n\n    joe     sam suzanne     bob    anne \n     50      60      70      80      90 \n\n# joe     sam suzanne     bob    anne \n#  50      60      70      80      90 \n\n# ... or you can change ALL of the names \nnames(test1) = c(\"joseph\", \"samuel\", \"suzanne\", \"robert\", \"anne\")\ntest1\n\n joseph  samuel suzanne  robert    anne \n     50      60      70      80      90 \n\n# joseph  samuel suzanne  robert    anne \n#     50      50      70      80      90 \n\n\n\n25.19.3 INDEXING A NAMED VECTOR WITH THE NAMES\n\n############################################################################.\n# INDEXING WITH NAMES\n#\n# You can use a vector of names as the index to a named vector. \n# You must use \"quotes\" around the names in the index.\n# This also works for lists that have names.\n############################################################################.\n\nrm(list =ls())\n\n# create a named vector\ntest1 = c(joe=50, sam=60, sue=70, bob=80, anne=90)\ntest1\n\n joe  sam  sue  bob anne \n  50   60   70   80   90 \n\n# Use a vector of quoted \"names\" as the index\n\ntest1[c(\"sue\", \"anne\")]  \n\n sue anne \n  70   90 \n\n# sue anne \n#  70   90\n\n\n\n# add 5 points to just sue and anne's grades\ntest1[c(\"sue\", \"anne\")] = test1[c(\"sue\", \"anne\")] + 5\n\ntest1\n\n joe  sam  sue  bob anne \n  50   60   75   80   95 \n\n# joe  sam  sue  bob anne \n#  50   60   75   80   95 \n\n#--------------------------------------------------------------------------.\n# Even though a vector or a list have names, all the other \n# indexing methods (i.e. positive numbers, negative numbers, TRUE/FALSE)\n# continue to work.\n#--------------------------------------------------------------------------.\n\ntest1\n\n joe  sam  sue  bob anne \n  50   60   75   80   95 \n\n# joe  sam  sue  bob anne \n# 50   60   75   80   95 \n\ntest1[c(3,5)]                # use positive position numbers as the index\n\n sue anne \n  75   95 \n\n# sue anne \n#  75   95\n\ntest1[c(-1,-2,-4)]           # use negative position numbers as the index\n\n sue anne \n  75   95 \n\n# sue anne \n#  75   95\n\ntest1[c(FALSE,FALSE,TRUE,FALSE,TRUE)]   # use a logical vector as the index\n\n sue anne \n  75   95 \n\n# sue anne \n#  75   95",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#somevector-unlist-some_list-convert-a-list-into-a-vector",
    "href": "000415-e-lists-v035.html#somevector-unlist-some_list-convert-a-list-into-a-vector",
    "title": "25  NAMED LISTS",
    "section": "25.20 someVector = unlist( SOME_LIST ) # convert a list into a vector",
    "text": "25.20 someVector = unlist( SOME_LIST ) # convert a list into a vector\n\n#############################################################################.\n#############################################################################.\n##\n## someVector = unlist( SOME_LIST )\n##\n##    Creates a vector from the contents of SOME_LIST\n##\n##############################################################################.\n##############################################################################.\n\nrm(list=ls())\n\n#...........................................................................\n# example 1 - a simple list - all values are put into a single vector\n#...........................................................................\n\nlistOfNumerics = list( c(1,2,3),\n                       c(10,20,30),\n                       c(100,200,300))\nlistOfNumerics\n\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] 10 20 30\n\n[[3]]\n[1] 100 200 300\n\nnums = unlist(listOfNumerics)\nnums      # [1] 1 2 3 10 20 30 100 200 300 \n\n[1]   1   2   3  10  20  30 100 200 300\n\n#-----------------------------------------------------------------------------.\n# example 2\n# If the list contains nested lists, you still get a single vector that\n# contains all of the values from all of the lists.\n#\n# NOTE this can be modified by specifying \n#   unlist(SOME_VECTOR, recursive=FALSE)\n#\n# See the documentation for more info: ?unlist\n#-----------------------------------------------------------------------------.\n\n# create a list with multiple nested lists\n\nlistOfLists = list( c(10,20),\n                    list (\n                      c(30,40),\n                      c(50,60),\n                      list(\n                        c(70,80),\n                        c(90,100)\n                      )\n                    ),\n                    list ( 200, 400 )\n)\n\n# unlist takes all values and puts them into a single vector.\n\nunlist(listOfLists) # [1]  10  20  30  40  50  60  70  80  90 100 200 400\n\n [1]  10  20  30  40  50  60  70  80  90 100 200 400\n\n#...........................................................................\n# example 3 - \n#   If only SOME of the items in the list have names,\n#   so only some of the values in the resulting vector will have names.\n#   The resulting vector positions \"without\" names\n#   actually have \"\" as their name. (see code below)\n#...........................................................................\n\n# setup a list with only some names\nlistWithSomeNames = list( c(1,2),\n                          tens=c(10,20,30),\n                          c(100,200),\n                          famous=round(c(pi, exp(1)), digits=2)\n)\nstr(listWithSomeNames)\n\nList of 4\n $       : num [1:2] 1 2\n $ tens  : num [1:3] 10 20 30\n $       : num [1:2] 100 200\n $ famous: num [1:2] 3.14 2.72\n\n# convert to a vector\nvec = unlist(listWithSomeNames)  # see result below\nvec\n\n                  tens1   tens2   tens3                 famous1 famous2 \n   1.00    2.00   10.00   20.00   30.00  100.00  200.00    3.14    2.72 \n\n# Result:\n#                tens1   tens2   tens3                 famous1 famous2 \n# 1.00    2.00   10.00   20.00   30.00  100.00  200.00    3.14    2.72 \n\n\n# The value in the names vector for those values that \"dont have names\"\n# is the empty string, i.e. \"\" (nothing - not even a space - is between the quotes)\nnames(vec) # \"\"  \"\"  \"tens1\" \"tens2\" \"tens3\"  \"\"  \"\"  \"famous1\" \"famous2\"\n\n[1] \"\"        \"\"        \"tens1\"   \"tens2\"   \"tens3\"   \"\"        \"\"       \n[8] \"famous1\" \"famous2\"\n\n#...........................................................................\n# example 4 - \n#   For nested list with names. The names in the vector are a combination\n#   of the names from each list in the hierarchy (see example)\n#...........................................................................\n\n# Setup a nested list with names at each level.\nnestedList = \n  list( \n    fin = list (\n      taxes = c(10, 20),\n      invest = c(30, 40)\n    ),\n    shop = list(\n      fruit   = c(\"apples\", \"oranges\"),\n      amount = c(5,        4)\n    )\n  )\n\nstr(nestedList)\n\nList of 2\n $ fin :List of 2\n  ..$ taxes : num [1:2] 10 20\n  ..$ invest: num [1:2] 30 40\n $ shop:List of 2\n  ..$ fruit : chr [1:2] \"apples\" \"oranges\"\n  ..$ amount: num [1:2] 5 4\n\n# Names in the vector combine names from different levels in the nested list\n# (see result below)\nunlist(nestedList)\n\n  fin.taxes1   fin.taxes2  fin.invest1  fin.invest2  shop.fruit1  shop.fruit2 \n        \"10\"         \"20\"         \"30\"         \"40\"     \"apples\"    \"oranges\" \nshop.amount1 shop.amount2 \n         \"5\"          \"4\" \n\n# Result: \n# fin.taxes1   fin.taxes2  fin.invest1  fin.invest2  shop.fruit1  shop.fruit2 shop.amount1 shop.amount2 \n#       \"10\"         \"20\"         \"30\"         \"40\"     \"apples\"    \"oranges\"          \"5\"          \"4\" \n\n\n#...........................................................................\n# example 5 - \n#   For nested list with names, if you specify use.names=FALSE\n#   the vector will NOT have names.\n#...........................................................................\n\n# using same list as previous example\nstr(nestedList)\n\nList of 2\n $ fin :List of 2\n  ..$ taxes : num [1:2] 10 20\n  ..$ invest: num [1:2] 30 40\n $ shop:List of 2\n  ..$ fruit : chr [1:2] \"apples\" \"oranges\"\n  ..$ amount: num [1:2] 5 4\n\nunlist(nestedList)  # generates a NAMED vector\n\n  fin.taxes1   fin.taxes2  fin.invest1  fin.invest2  shop.fruit1  shop.fruit2 \n        \"10\"         \"20\"         \"30\"         \"40\"     \"apples\"    \"oranges\" \nshop.amount1 shop.amount2 \n         \"5\"          \"4\" \n\nunlist(nestedList, use.names = FALSE)  # gernerates an UNnamed vector\n\n[1] \"10\"      \"20\"      \"30\"      \"40\"      \"apples\"  \"oranges\" \"5\"      \n[8] \"4\"      \n\n#--------------------------------------------------------------------------.\n# ADDITIONAL FEATURES OF unlist() FUNCTION\n#\n# The unlist function has two additional arguments that control how it works\n# with nested lists and with named lists.\n# See the help page ?unlist for more info.\n# \n#   - The recursive argument controls exactly how unlist works when the list\n#     contains nested lists. The default is recursive=TRUE. See the help\n#     file for more info, ?unlist\n#\n#   - The use.names argument controls exactly how unlist works when the list\n#     contains names. (see example 5 above).\n#     The default is use.names=TRUE.  For more info see ?unlist\n#\n#--------------------------------------------------------------------------.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#review",
    "href": "000415-e-lists-v035.html#review",
    "title": "25  NAMED LISTS",
    "section": "25.21 REVIEW",
    "text": "25.21 REVIEW\n\n############################################################################.\n# REVIEW\n#\n# SIMILARITIES BETWEEN VECTORS AND LISTS \n#\n# - Both VECTORS and LISTS can have names\n#\n# - Indexing with [single-brackets]\n# \n#   VECTORS and LISTS can be indexed with [single-brackets] in the same ways. \n#   With VECTORS the result is a VECTOR and  with LISTS the results is a LIST.\n#\n#   There are 4 ways of using [single-brackets] for indexing.\n#\n#     o position position numbers, eg. someVector[c(1,2)]        or someList[c(1,2)]\n#     o negative position numbers, eg. someVector[c(-1,-2)]      or someList[c(-1,-2)]\n#     o logicals (TRUE/FALSE),     eg. someVector[c(TRUE,FALSE)] or someList[c(TRUE,FALSE)]\n#     o names, eg.  someVector[c(\"oneName\",\"anotherName\")] or someList[c(\"oneName\",\"anotherName\")]\n#\n# - Indexing with [[double-brackets]]\n#   \n#     o Retrieves exactly one value from the VECTOR or the LIST\n#\n#     o Only positive numbers or names can be used for the index\n#\n#     o If more than one positive number is used e.g. someList[[c(3,2,4)]]\n#       or more than one name is used, eg. someList[c(\"classes\",\"ids2030\",\"sectionC\")]\n#       then recursive indexing is used. \n#       This is really the same concept for vectors, however, since a vector can\n#       only contain individual values (and not lists) you cannot have more \n#       than one positive number or one name in the double brackets.\n#\n# - length() returns the length of both vectors and lists\n#\n# DIFFERENCES BETWEEN VECTORS AND LISTS\n#\n# - You can use $dollar-sign notation with lists but NOT with vectors\n############################################################################.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000415-e-lists-v035.html#terminology-atomic-vector-is-a-vector-recursive-vector-is-a-list",
    "href": "000415-e-lists-v035.html#terminology-atomic-vector-is-a-vector-recursive-vector-is-a-list",
    "title": "25  NAMED LISTS",
    "section": "25.22 TERMINOLOGY: “atomic vector” (is a vector) “recursive vector” (is a list)",
    "text": "25.22 TERMINOLOGY: “atomic vector” (is a vector) “recursive vector” (is a list)\n\n###########################################################################.\n# TERMINOLOGY\n#\n#    \"atomic vector\"    is just a fancy name for a \"vector\"\n#    \"recursive vector\" is just a fancy name for a \"list\"\n#\n# Most books, tutorials, etc. refer to \"vectors\" and \"lists\" as distinct\n# and separate types of objects - exactly as we have.\n#\n# However, sometimes what we have been calling \"vectors\" are referred to \n# as \"atomic vectors\" (since they contain individual \"atomic\" values that \n# cannot be broken down further.) Sometimes what we have been calling\n# \"lists\" are referred to as \"recursive vectors\", i.e. vectors that can\n# have other vectors inside of them. Most people who use R are not\n# familiar with these more complicated terms. However, it is good to\n# be aware of these terms in case you come across them while\n# reading documentation or other advanced information about R. \n# For example: https://r4ds.had.co.nz/vectors.html\n#\n# Bottom line:\n#    \"atomic vector\" is just a fancy name for a \"vector\"\n#    \"recursive vector\" is just a fancy name for a \"list\"\n###########################################################################.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NAMED LISTS</span>"
    ]
  },
  {
    "objectID": "000430-lapply-v031-afterWilf.html",
    "href": "000430-lapply-v031-afterWilf.html",
    "title": "26  lapply ( SOME_LIST , SOME_FUNCTION )",
    "section": "",
    "text": "rm(list = ls())   # start from scratch\n\n##############################################################################.\n#\n#      lapply ( SOME_LIST , SOME_FUNCTION )     ####\n#\n#\n# The lapply function is used to \"apply\" a function to every entry in a list.\n#\n# The function is run as many times as there are entries in the list.\n# \n# lapply returns a list that contains the return values from each of the\n# times the function was called. \n#\n# The \"l\" in \"lapply\" stands for \"list\", i.e. the return value of the \n# \"lapply\" function is a list. There are other similar functions\n# such as sapply, mapply and apply that have slightly different ways \n# of working. For now we will just focus on \"lapply\". Later in the course\n# we will learn about \"sapply\" and perhaps \"mapply\" and \"apply\".\n#\n# (see the examples below)\n#\n##############################################################################.\n\n\n# create a list\ngradebook = list(grades=c(80,85,72,95,100,89,65,84), \n                 students=c(\"joe\",\"sue\",\"bob\",\"al\",\"frank\",\"mike\",\"anne\",\"clara\"),\n                 honors=c(FALSE,FALSE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE))\ngradebook\n\n$grades\n[1]  80  85  72  95 100  89  65  84\n\n$students\n[1] \"joe\"   \"sue\"   \"bob\"   \"al\"    \"frank\" \"mike\"  \"anne\"  \"clara\"\n\n$honors\n[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE\n\n#-----------------------------------------------------------------------.\n# Some built-in functions \n# \n# We'll use the following functions to help explain the lapply and sapply functions\n#\n#   length(SOME_VECTOR_OR_LIST) returns the number of items in the vector or the list\n#   range(SOME_VECTOR) - returns c( min(SOME_VECTOR) , max(SOME_VECTOR))\n#   summary(SOME_OBJECT) - returns a summary of what is in SOME_OBJECT\n#-----------------------------------------------------------------------.\n\n\n# length returns the number of items in a vector (or in a list)\nlength( gradebook$grades )     # 8\n\n[1] 8\n\nlength( gradebook$students )   # 8\n\n[1] 8\n\nlength( gradebook$honors )     # 8\n\n[1] 8\n\n# range returns min and max of the vector\nrange( gradebook$grades)     # 65   100\n\n[1]  65 100\n\nrange( gradebook$students)   # \"al\" \"sue\"\n\n[1] \"al\"  \"sue\"\n\nrange( gradebook$honors)     #   0   1\n\n[1] 0 1\n\n# summary returns a short summary of data.\n# different results for different types of data.\n\nsummary( gradebook$grades )    # see output below\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  65.00   78.00   84.50   83.75   90.50  100.00 \n\n#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n# 65.00   78.00   84.50   83.75   90.50  100.00 \n\nsummary( gradebook$students )   # see output below\n\n   Length     Class      Mode \n        8 character character \n\n# Length     Class      Mode \n#      8 character character \n\nsummary( gradebook$honors )    # see output below\n\n   Mode   FALSE    TRUE \nlogical       5       3 \n\n#    Mode   FALSE    TRUE \n# logical       5       3 \n\n#-----------------------------------------------------------------------.\n# lapply ( SOME_LIST , SOME_FUNCTION )\n# \n# The lapply function takes two arguments:\n#   X   - a list\n#   FUN - the name of a function.\n#\n# lapply returns a new list that contains a many entries as there \n# were in the list X. Each entry in the new list contains the results\n# of \"applying\" the function X to an entry of the original list, X.\n#\n#    EXAMPLE:\n#      &gt; lst = list( c(10,20,30),           # length of this is 3\n#                    c(\"apple\", \"orange\"))  # length of this is 2\n#\n#      &gt; lapply(X=lst, FUN=length) # list of 3 and 2\n#      [[1]]\n#      [1] 3\n#      \n#      [[2]]\n#      [1] 2\n#-----------------------------------------------------------------------.\n\n\n#........................................\n# EXAMPLE 1 - lapply(gradebook, length)\n#........................................\n\n# Use the lapply function to automatically apply the length function to \n# each of the items in the gradebook list.\n# This returns a new list that contains all of the results.\n\nlapply(gradebook, length)   # see results below\n\n$grades\n[1] 8\n\n$students\n[1] 8\n\n$honors\n[1] 8\n\n# $grades\n# [1] 8\n#\n# $students\n# [1] 8\n#\n# $honors\n# [1] 8\n\n\n# lapply returns a list of the answers\nmode(lapply(gradebook, length))  # \"list\"\n\n[1] \"list\"\n\n#........................................\n# EXAMPLE 2 - lapply(gradebook, range)\n#........................................\n\n# Show the results of the range function on each of the items in the list\nrange(gradebook$grades)     #  65   100\n\n[1]  65 100\n\nrange(gradebook$students)   # \"al\" \"sue\"\n\n[1] \"al\"  \"sue\"\n\nrange(gradebook$honors)     #   0   1\n\n[1] 0 1\n\n# apply range function to all items in the gradebook list\n\nlapply(gradebook, range)   # see results below\n\n$grades\n[1]  65 100\n\n$students\n[1] \"al\"  \"sue\"\n\n$honors\n[1] 0 1\n\n# $grades\n# [1]  65 100\n# \n# $students\n# [1] \"al\"  \"sue\"\n# \n# $honors\n# [1] 0 1\n\n\n\n#........................................\n# EXAMPLE 3 - lapply(gradebook, summary)\n#........................................\n\n# summary returns a short summary of data.\n# different results for different types of data.\nsummary( gradebook$grades )    # see output below\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  65.00   78.00   84.50   83.75   90.50  100.00 \n\n#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n# 65.00   78.00   84.50   83.75   90.50  100.00 \n\nsummary( gradebook$students )   # see output below\n\n   Length     Class      Mode \n        8 character character \n\n# Length     Class      Mode \n#      8 character character \n\nsummary( gradebook$honors )    # see output below\n\n   Mode   FALSE    TRUE \nlogical       5       3 \n\n#    Mode   FALSE    TRUE \n# logical       5       3 \n\n# apply summary function to all items in the gradebook list\nlapply(gradebook, summary)   # all of the above results in a single list\n\n$grades\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  65.00   78.00   84.50   83.75   90.50  100.00 \n\n$students\n   Length     Class      Mode \n        8 character character \n\n$honors\n   Mode   FALSE    TRUE \nlogical       5       3 \n\n# apply mode function to all items in the gradebook list\nlapply(gradebook, mode)   # all of the above results in a single list\n\n$grades\n[1] \"numeric\"\n\n$students\n[1] \"character\"\n\n$honors\n[1] \"logical\"\n\n#---------------------------------------------------------------------------.\n# lapply also works with nested lists\n# (i.e. lists that contain other lists)\n#---------------------------------------------------------------------------.\n\n\nrm(list = ls())\n\nclasses = list( year = 2021,\n                semester = \"fall\",\n                section1 = list ( students = c(\"abe\",\"bob\",\"charlie\"),\n                                  test1 = c(70,80,90),\n                                  test2 = c(75,85,95)),\n                section2 = list( students = c(\"fran\", \"anne\", \"sue\", \"bertha\", \"maxine\"),\n                                 test1 = c(100,90,80,70,60),\n                                 test2 = c(95,85,75,65,55),\n                                 test3 = c(93,83,73,63,53)) )\n\nlength(classes)   # 4  (classes contains 4 objects)\n\n[1] 4\n\nlapply(classes, length) # a list that contains 1,1,3,4, i.e. the length of each object in classes\n\n$year\n[1] 1\n\n$semester\n[1] 1\n\n$section1\n[1] 3\n\n$section2\n[1] 4\n\n# remember the str function is very helpful for seeing the structure of complex lists\nstr(classes)\n\nList of 4\n $ year    : num 2021\n $ semester: chr \"fall\"\n $ section1:List of 3\n  ..$ students: chr [1:3] \"abe\" \"bob\" \"charlie\"\n  ..$ test1   : num [1:3] 70 80 90\n  ..$ test2   : num [1:3] 75 85 95\n $ section2:List of 4\n  ..$ students: chr [1:5] \"fran\" \"anne\" \"sue\" \"bertha\" ...\n  ..$ test1   : num [1:5] 100 90 80 70 60\n  ..$ test2   : num [1:5] 95 85 75 65 55\n  ..$ test3   : num [1:5] 93 83 73 63 53\n\n#-----------------------------------------------------------------------.\n# NAMED LISTS WITH lapply VS UNNAMED LISTS\n#\n# The return value of lapply will be a named list only if the\n# original list has names.\n#-----------------------------------------------------------------------.\n\n\nhasNames = list( fruit=c(\"apple\",\"orange\",\"pear\",\"plum\"),\n                 evens=seq(2,10,by=2),\n                 odds=seq(1,30,by=2),\n                 someLogicals=c(TRUE,FALSE,TRUE))\nhasNames\n\n$fruit\n[1] \"apple\"  \"orange\" \"pear\"   \"plum\"  \n\n$evens\n[1]  2  4  6  8 10\n\n$odds\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29\n\n$someLogicals\n[1]  TRUE FALSE  TRUE\n\nstr(hasNames)\n\nList of 4\n $ fruit       : chr [1:4] \"apple\" \"orange\" \"pear\" \"plum\"\n $ evens       : num [1:5] 2 4 6 8 10\n $ odds        : num [1:15] 1 3 5 7 9 11 13 15 17 19 ...\n $ someLogicals: logi [1:3] TRUE FALSE TRUE\n\nlength(hasNames)\n\n[1] 4\n\nlapply(hasNames, length)\n\n$fruit\n[1] 4\n\n$evens\n[1] 5\n\n$odds\n[1] 15\n\n$someLogicals\n[1] 3\n\nlapply(hasNames, range)\n\n$fruit\n[1] \"apple\" \"plum\" \n\n$evens\n[1]  2 10\n\n$odds\n[1]  1 29\n\n$someLogicals\n[1] 0 1\n\nlapply(hasNames, summary)\n\n$fruit\n   Length     Class      Mode \n        4 character character \n\n$evens\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      2       4       6       6       8      10 \n\n$odds\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       8      15      15      22      29 \n\n$someLogicals\n   Mode   FALSE    TRUE \nlogical       1       2 \n\nnoNames = list( c(\"apple\",\"orange\",\"pear\",\"plum\"),\n                seq(2,10,by=2),\n                seq(1,30,by=2),\n                c(TRUE,FALSE,TRUE))\nnoNames\n\n[[1]]\n[1] \"apple\"  \"orange\" \"pear\"   \"plum\"  \n\n[[2]]\n[1]  2  4  6  8 10\n\n[[3]]\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29\n\n[[4]]\n[1]  TRUE FALSE  TRUE\n\nstr(noNames)\n\nList of 4\n $ : chr [1:4] \"apple\" \"orange\" \"pear\" \"plum\"\n $ : num [1:5] 2 4 6 8 10\n $ : num [1:15] 1 3 5 7 9 11 13 15 17 19 ...\n $ : logi [1:3] TRUE FALSE TRUE\n\nlength(noNames)\n\n[1] 4\n\nlapply(noNames, length)\n\n[[1]]\n[1] 4\n\n[[2]]\n[1] 5\n\n[[3]]\n[1] 15\n\n[[4]]\n[1] 3\n\nlapply(noNames, range)\n\n[[1]]\n[1] \"apple\" \"plum\" \n\n[[2]]\n[1]  2 10\n\n[[3]]\n[1]  1 29\n\n[[4]]\n[1] 0 1\n\nlapply(noNames, summary)\n\n[[1]]\n   Length     Class      Mode \n        4 character character \n\n[[2]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      2       4       6       6       8      10 \n\n[[3]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       8      15      15      22      29 \n\n[[4]]\n   Mode   FALSE    TRUE \nlogical       1       2 \n\n######################################################################.\n# 2022 WILF - UP TO HERE - AFTER CLASS 17\n######################################################################.\n\n\n\n############################################################.\n#   using custom functions with lapply\n#\n# You can use any function that contains one argument \n# with lapply, even your own custom functions\n############################################################.\n\n\nstuff = list(grades = c(70,80,95,88,60),\n             students = c(\"larry\", \"zeke\",\"charlie\",\"yaakov\",\"abe\"),\n             age = c(17,23,20,20,21,19))\n\n# define a function to find the 2nd largest value in a vector\nsecondLargest = function( vec ){\n sort(vec)[length(vec)-1]\n}\n\n# Test the function\nnums = c(10,1000,900,-55,23)\nsecondLargest(nums)   # 900\n\n[1] 900\n\n# Example - use our function the vectors in the list, stuff\nsecondLargest( stuff$grades)    # 88\n\n[1] 88\n\nsecondLargest( stuff$students)  # \"yaakov\"\n\n[1] \"yaakov\"\n\nsecondLargest( stuff$age)       # 21\n\n[1] 21\n\n# Use our custom function with lapply to automatically apply the function\n# to all entries in the list, stuff\n\nlapply( stuff, secondLargest)    # list of the answers\n\n$grades\n[1] 88\n\n$students\n[1] \"yaakov\"\n\n$age\n[1] 21\n\n###########################################.\n# functions defined in one line\n#\n# If a function only needs one line of code\n# the {curly braces} aren't required. \n###########################################.\n\n# Another way to define the second largest function - all in one line \n# (you don't the the {curly braces})\nsecondLargest = function ( vec ) sort(vec)[length(vec)-1]\n\n# Test the function\nnums = c(10,1000,900,-55,23)\nsecondLargest(nums)\n\n[1] 900\n\n###########################################.\n# functions defined in one line\n#\n# If a function only needs one line of code\n# the {curly braces} aren't required. \n###########################################.\n\n\n\n# create a list\ngradebook = list(grades=c(80,85,72,95,100,89,65,84), \n                 students=c(\"joe\",\"sue\",\"bob\",\"al\",\"frank\",\"mike\",\"anne\",\"clara\"),\n                 honors=c(FALSE,FALSE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE))\ngradebook\n\n$grades\n[1]  80  85  72  95 100  89  65  84\n\n$students\n[1] \"joe\"   \"sue\"   \"bob\"   \"al\"    \"frank\" \"mike\"  \"anne\"  \"clara\"\n\n$honors\n[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE\n\n# If you want to define a function just to use with lapply you\n# can define it directly in the call to lapply\n\n\n# Use the secondLargest function we defined above\nlapply(gradebook, secondLargest)   # we defined gradebook above\n\n$grades\n[1] 95\n\n$students\n[1] \"mike\"\n\n$honors\n[1] TRUE\n\n# This also works\nlapply(gradebook, function ( vec ) {\n sort(vec)[length(vec)-1]\n})\n\n$grades\n[1] 95\n\n$students\n[1] \"mike\"\n\n$honors\n[1] TRUE\n\n# So does this\nlapply(gradebook, function ( vec ) sort(vec)[length(vec)-1] )\n\n$grades\n[1] 95\n\n$students\n[1] \"mike\"\n\n$honors\n[1] TRUE\n\n# You can capture the output of lapply in a variable if you like\nanswers = lapply(gradebook, function ( vec ) sort(vec)[length(vec)-1] )\n\nanswers\n\n$grades\n[1] 95\n\n$students\n[1] \"mike\"\n\n$honors\n[1] TRUE\n\nanswers$students\n\n[1] \"mike\"\n\nanswers[[1]] \n\n[1] 95\n\nmode(answers)   # \"list\"\n\n[1] \"list\"\n\n#------------------------------------------------------------------------.\n# QUESTION\n#\n# stuff is a list.\n# Write a single line of code that returns the number of \n# numeric vectors that are contained in a single list.\n#\n# HINT: Use the is.numeric function, lapply and unlist\n#\n# EXAMPLE\n#\n#   &gt; stuff = list(c(100,200,300), \n#                 c(\"apple\", \"orange\", \"pear\"), \n#                 seq(10,100,by=5),\n#                 c(TRUE, FALSE))\n#\n#   &gt; YOUR CODE GOES HERE\n#   [1] 2\n#------------------------------------------------------------------------.\n\n# Setup the data\nstuff = list(c(100,200,300), \n             c(\"apple\", \"orange\", \"pear\"), \n             seq(10,100,by=5),\n             c(TRUE, FALSE))\nstuff\n\n[[1]]\n[1] 100 200 300\n\n[[2]]\n[1] \"apple\"  \"orange\" \"pear\"  \n\n[[3]]\n [1]  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100\n\n[[4]]\n[1]  TRUE FALSE\n\n# ANSWER\nsum( unlist( lapply(stuff, is.numeric) )  )\n\n[1] 2\n\n# Or you can break up into multiple lines to make it easier to read.\nsum( \n unlist( \n  lapply(stuff, is.numeric) \n )  \n)\n\n[1] 2\n\n#------------------------------------------------------------------------.\n# QUESTION\n# \n# stuff is a list.\n# Write a single line of code that creates a new variable,\n# named numericStuff, that contains just a new list with \n# just the numeric vectors from stuff.\n#\n# EXAMPLE:\n# &gt; stuff = list( seq(10,20,length.out=4) ,   # numeric\n#                 NULL,                       # NULL\n#                 c(\"apple\", \"orange\"),       # character\n#                 rep(5, 3),                  # numeric\n#                 1:4 &gt; pi,                   # logical\n#                 NULL,                       # NULL\n#                 paste0(letters[1:5], 1:5),  # character\n#                 2 ^ (1:5) )                 # numeric\n#\n# &gt; numericStuff = YOUR CODE GOES HERE\n#\n# &gt; numericStuff\n# [[1]]\n# [1] 10.00000 13.33333 16.66667 20.00000\n# \n# [[2]]\n# [1] 5 5 5\n# \n# [[3]]\n# [1]  2  4  8 16 32\n#------------------------------------------------------------------------.\n\n# ANSWER\n\nstuff = list( seq(10,20,length.out=4) ,   # numeric\n              NULL,                       # NULL\n              c(\"apple\", \"orange\"),       # character\n              rep(5, 3),                  # numeric\n              1:4 &gt; pi,                   # logical\n              NULL,                       # NULL\n              paste0(letters[1:5], 1:5),  # character\n              2 ^ (1:5))                  # numeric\n\nstuff\n\n[[1]]\n[1] 10.00000 13.33333 16.66667 20.00000\n\n[[2]]\nNULL\n\n[[3]]\n[1] \"apple\"  \"orange\"\n\n[[4]]\n[1] 5 5 5\n\n[[5]]\n[1] FALSE FALSE FALSE  TRUE\n\n[[6]]\nNULL\n\n[[7]]\n[1] \"a1\" \"b2\" \"c3\" \"d4\" \"e5\"\n\n[[8]]\n[1]  2  4  8 16 32\n\nnumericStuff = stuff [        # ANSWER\n unlist ( \n  lapply(stuff, is.numeric) \n ) \n] \n\nnumericStuff\n\n[[1]]\n[1] 10.00000 13.33333 16.66667 20.00000\n\n[[2]]\n[1] 5 5 5\n\n[[3]]\n[1]  2  4  8 16 32\n\n#------------------------------------------------------------------------.\n# QUESTION\n# \n# (see previous question)\n# Same idea as previous question, but this time create a vector\n# called someStuff that contains just the logical and numeric vectors\n# from stuff. \n#\n# HINT: one way to do this is to create a custom function that\n#       takes a single argument. The custom function should\n#       return TRUE if the argument contains a numeric or a logical vector\n#       and FALSE otherwise.\n#\n# EXAMPLE:\n# &gt; stuff = list( seq(10,20,length.out=4) ,   # numeric\n#                 NULL,                       # NULL\n#                 c(\"apple\", \"orange\"),       # character\n#                 rep(5, 3),                  # numeric\n#                 1:4 &gt; pi,                   # logical\n#                 NULL,                       # NULL\n#                 paste0(letters[1:5], 1:5),  # character\n#                 2 ^ (1:5) )                 # numeric\n#\n# &gt; someStuff = YOUR CODE GOES HERE\n#\n# &gt; someStuff\n# [[1]]\n# [1] 10.00000 13.33333 16.66667 20.00000\n# \n# [[2]]\n# [1] 5 5 5\n# \n# [[3]]\n# [1]  2  4  8 16 32\n#------------------------------------------------------------------------.\n\n# ANSWER\n\n# setup some data\nstuff = list( seq(10,20,length.out=4) ,   # numeric\n              NULL,                       # NULL\n              c(\"apple\", \"orange\"),       # character\n              rep(5, 3),                  # numeric\n              1:4 &gt; pi,                   # logical\n              NULL,                       # NULL\n              paste0(letters[1:5], 1:5),  # character\n              2 ^ (1:5))                  # numeric\n\nstuff\n\n[[1]]\n[1] 10.00000 13.33333 16.66667 20.00000\n\n[[2]]\nNULL\n\n[[3]]\n[1] \"apple\"  \"orange\"\n\n[[4]]\n[1] 5 5 5\n\n[[5]]\n[1] FALSE FALSE FALSE  TRUE\n\n[[6]]\nNULL\n\n[[7]]\n[1] \"a1\" \"b2\" \"c3\" \"d4\" \"e5\"\n\n[[8]]\n[1]  2  4  8 16 32\n\n# STEP 1\n# Create a function that returns TRUE if the arguemnt is either logical or numeric\nisLogicalOrNumeric = function( something ){\n is.logical(something) | is.numeric(something)\n}\n\n# STEP 2 - use the function with lapply\ntfList = lapply(stuff, isLogicalOrNumeric)   # list of TRUE/FALSE values\ntfList \n\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] FALSE\n\n[[3]]\n[1] FALSE\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] TRUE\n\n[[6]]\n[1] FALSE\n\n[[7]]\n[1] FALSE\n\n[[8]]\n[1] TRUE\n\n# STEP 3 - unlist the results to get a vector\ntfVector = unlist ( tfList )  # vector of TRUE/FALSE values\ntvVector\n\nError in eval(expr, envir, enclos): object 'tvVector' not found\n\n# STEP 4 - use the logical vector to get just the logical and numeric entries in the list\nsomeStuff = stuff[tfVector]\n\n# ALL STEPS TOGETHER IN ONE COMMAND \n# You can create an \"anonymous\" function directly in the call to lapply.\nsomeStuff = stuff [       \n unlist ( \n      lapply(stuff,  function (something) is.logical(something)|is.numeric(something) \n  )\n ) \n] \n\n# or alternatively all in one line\nsomeStuff = stuff[unlist ( lapply(stuff,  function (something) is.logical(something)|is.numeric(something) ) ) ] \n\n\nsomeStuff\n\n[[1]]\n[1] 10.00000 13.33333 16.66667 20.00000\n\n[[2]]\n[1] 5 5 5\n\n[[3]]\n[1] FALSE FALSE FALSE  TRUE\n\n[[4]]\n[1]  2  4  8 16 32\n\n###\n### END OF FILE\n### INFORMATION BELOW IS NOT FINISHED\n### \n\n\n#------------------------------------------------------------------------.\n# QUESTION\n# \n# Write a function called modeCount. The function\n# takes a single argument, lst, which is a list.\n# The function returns a named vector that contains\n# the number of entries in the lst that of each of the \n# following modes: character, logical, numeric, list, NULL.\n#\n# EXAMPLE:\n# &gt; stuff = list( seq(10,20,length.out=4) ,   # numeric\n#                 NULL,                       # NULL\n#                 c(\"apple\", \"orange\"),       # character\n#                 rep(5, 3),                  # numeric\n#                 1:4 &gt; pi,                   # logical\n#                 NULL,                       # NULL\n#                 paste0(letters[1:5], 1:5),  # character\n#                 2 ^ 1:5)                    # numeric\n#\n# &gt; YOUR CODE GOES HERE\n\n#------------------------------------------------------------------------.\n\n\nstuff = list( seq(10,20,length.out=4) ,      # numeric\n              NULL,                       # NULL\n              c(\"apple\", \"orange\"),       # character\n              rep(5, 3),                  # numeric\n              1:4 &gt; pi,                   # logical\n              NULL,                       # NULL\n              paste0(letters[1:5], 1:5),  # character\n              2 ^ 1:5)                    # numeric\n\nsum ( unlist ( lapply(stuff, is.numeric) ) )\n\n[1] 3",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>lapply ( SOME_LIST , SOME_FUNCTION )</span>"
    ]
  },
  {
    "objectID": "000495-attributres_attr_names_matrix_factor_dataframe-v010.html",
    "href": "000495-attributres_attr_names_matrix_factor_dataframe-v010.html",
    "title": "27  attributes",
    "section": "",
    "text": "rm (list = ls()) \n\n############################################################################.\n############################################################################.\n# NOTE\n# \n# This file contains very little new material. \n# This file discusses the attr() and attributes()\n# functions and how these functions work with named vectors and lists.\n#\n# This file also covers general info about named vectors\n# and named lists. However, that was already covered in the \n# previous file, 000415-lists-v30.R. \n#\n# Therefore we will just cover the new material. If you want to \n# review the rules of named vectors and named lists you can \n# read the rest of the file on your own.\n############################################################################.\n############################################################################.\n\n\n\n######################################################################.\n# attr()   and   attributes() functions\n######################################################################.\n\n#-----------------------------------------------------------------------------.\n# attr( SOME_OBJECT , \"someAttribute\" )  =   SOME_VALUE\n#\n#      This will set the value of the \"someAttribute\" on SOME_OBJECT to SOME_VALUE\n#\n#\n# attr( SOME_OBJECT , \"someAttribute\" )\n# \n#      This retrieves the value of the attribute.\n#\n#\n# Any data in R can have associated \"attributes\" added onto it. \n# The attributes are additional information that is attached to the main information.\n# This is done with the attr function.\n#-----------------------------------------------------------------------------.\n\n# Set up some data.\n\ngrades &lt;- c(70,80,90,100)    # some grades\n\n# Set the value of the \"campus\" attribute on the grades variable to \"beren\"\nattr(grades, \"campus\") &lt;- \"beren\"   \n\n\n# Set the value of the \"semester\" attribute on the grades variable to \"beren\"\nattr(grades, \"semester\") &lt;- \"fall 2020\"  # attach the \"semester\" attribute to the grades\n\n# The grades vector now displays the actual grades as well as the values of\n# the attributes\n\ngrades\n\n[1]  70  80  90 100\nattr(,\"campus\")\n[1] \"beren\"\nattr(,\"semester\")\n[1] \"fall 2020\"\n\n# [1]  70  80  90 100\n# attr(,\"campus\")\n# [1] \"beren\"\n# attr(,\"semester\")\n# [1] \"fall 2020\"\n\n# grades is still a regular numeric vector.\n# It just has additional attributes attached to it.\n\nmean(grades)   # 85\n\n[1] 85\n\nmode(grades)   # \"numeric\"\n\n[1] \"numeric\"\n\nstr(grades)\n\n num [1:4] 70 80 90 100\n - attr(*, \"campus\")= chr \"beren\"\n - attr(*, \"semester\")= chr \"fall 2020\"\n\n# num [1:4] 70 80 90 100\n# - attr(*, \"campus\")= chr \"beren\"\n# - attr(*, \"semester\")= chr \"fall 2020\"\n\n\n#-------------------------------------------------------------\n# attr can be used to set or get a single attribute\n#-------------------------------------------------------------\n\nattr(grades, \"campus\")     # \"beren\"     - display the campus\n\n[1] \"beren\"\n\nattr(grades, \"semester\")   # \"fall 2020\" - display the semester\n\n[1] \"fall 2020\"\n\nattr(grades, \"campus\") &lt;- \"wilf\"     # change the campus\n\nattr(grades, \"campus\")     # \"wilf\"  - display the new value of the campus attribute\n\n[1] \"wilf\"\n\n# show the new data\n\ngrades              \n\n[1]  70  80  90 100\nattr(,\"campus\")\n[1] \"wilf\"\nattr(,\"semester\")\n[1] \"fall 2020\"\n\n# [1]  70  80  90 100\n# attr(,\"campus\")\n# [1] \"wilf\"\n# attr(,\"semester\")\n# [1] \"fall 2020\"\n\nstr(grades)\n\n num [1:4] 70 80 90 100\n - attr(*, \"campus\")= chr \"wilf\"\n - attr(*, \"semester\")= chr \"fall 2020\"\n\n# num [1:4] 70 80 90 100\n# - attr(*, \"campus\")= chr \"wilf\"\n# - attr(*, \"semester\")= chr \"fall 2020\"\n\n\n\n#----------------------------------------------------------------------------.\n# attributes( SOME_OBJECT ) \n#\n#   returns a LIST of just the attributes of the object.\n#----------------------------------------------------------------------------.\n\n# The attributes function returns a LIST of the attributes on an object\n# without the actual data - i.e. without the actual grades\n\nattributes(grades)\n\n$campus\n[1] \"wilf\"\n\n$semester\n[1] \"fall 2020\"\n\n# $campus\n# [1] \"beren\"\n# \n# $semester\n# [1] \"fall 2020\"\n\n\n\n\n\n############################################################################.\n# R uses attributes to add new features to R. The following are all\n# implemented by adding different attributes onto either a vector or a list.\n#\n#  - named vectors\n#\n#    A named vector is a vector that has a names attribute. \n#    The value of the names attribute\n#    is a character vector of the same length as the original vector.\n#    You can use the names as one more way to retrieve the values from the vector.\n#\n#  - named lists\n#\n#    A named list is very similar to a named vector.\n#\n#  - matrices (singular is matrix)\n#\n#    A matrix is a vector with a \"dim\" attribute.\n#    The value of the \"dim\" attribute is a numeric vector with exactly 2 values.\n#    The first value is the  number of rows in the matrix.\n#    The 2nd value is the number of columns in the matrix.\n#    The #rows * # of columns must be equal to the length of the underlying vector.\n#\n#   - factors\n#     a numeric vector with different attributes.\n#     We'll cover this later.\n#     attributes: class = \"factor\"\n#                 levels = # the \"level names\" of the factor\n#\n#   - data.frames\n#     A list of equal length vectors.\n#     attributes: class = \"data.frame\"\n############################################################################.\n\n#-------------------------------------------------------------------\n# named vectors\n#\n# o names() function for applying names to vectors\n# o accessing contents of a vector using position names\n#-------------------------------------------------------------------\n\n# EXAMPLE\navgAgeOfVoters &lt;- c(25, 42, 32)\nnames(avgAgeOfVoters) &lt;- c(\"democrat\", \"republican\", \"independent\")\n\navgAgeOfVoters\n\n   democrat  republican independent \n         25          42          32 \n\n# democrat  republican independent \n#       25          42          32 \n\n\n# ANOTHER EXAMPLE\nsalaries &lt;- c(100,50,70,85)\nsalaries\n\n[1] 100  50  70  85\n\n# add names to the vector\nnames(salaries) &lt;- c(\"joe\", \"sue\", \"bob\", \"anne\")\n\nsalaries\n\n joe  sue  bob anne \n 100   50   70   85 \n\n# joe  sue  bob anne \n# 100   50   70   85 \n\nsum(salaries)  # 305 - still works like a numeric vector\n\n[1] 305\n\n#---------------------------------------------------------------------.\n# named vectors are just regular vectors that have a \"names\" attribute\n#---------------------------------------------------------------------.\n\nsalaries\n\n joe  sue  bob anne \n 100   50   70   85 \n\n# joe  sue  bob anne \n# 100   50   70   85 \n\nattributes(salaries)\n\n$names\n[1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\n# $names\n# [1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\n\n\n# names(salaries) is a shortcut for attr(salaries, \"names\") \n\nsalaries\n\n joe  sue  bob anne \n 100   50   70   85 \n\nnames(salaries)         # \"joe\" \"sue\" \"bob\" \"anne\"\n\n[1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\nattr(salaries, \"names\") # same thing - i.e. the value of the \"names\" attribute\n\n[1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\nattributes(salaries)    # a list of all the attributes\n\n$names\n[1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\nnames(salaries)   # same as attr(salaries,\"names\")\n\n[1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\n# $names\n# [1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\nmode(salaries)    # \"numeric\"\n\n[1] \"numeric\"\n\nsum(salaries)     # 305\n\n[1] 305\n\n# you can use names of positions to access the data\n# This is similar to the way you can use position numbers to access the data\n\n# EXAMPLE : show the salaries for joe and bob\n\n# One way:\nsalaries[c(1,3)]\n\njoe bob \n100  70 \n\n# Another way using names:\nsalaries[c(\"joe\",\"bob\")]\n\njoe bob \n100  70 \n\nsalaries[c(\"joe\", \"bob\", \"joe\", \"bob\")]  # you can repeat names just like ...\n\njoe bob joe bob \n100  70 100  70 \n\nsalaries[c(1,3,1,3)]                     # you can also repeat numbers\n\njoe bob joe bob \n100  70 100  70 \n\n# salaries is still a NUMERIC vector\n# it just has \"names\" associated with the positions\n#\n# it is NOT a character vector\n# it is NOT a dataframe\n\nsum(salaries)  # you can still sum the values - it is still a numeric vector\n\n[1] 305\n\nmode(salaries) # still numeric\n\n[1] \"numeric\"\n\nclass(salaries) # still numeric\n\n[1] \"numeric\"\n\nattributes(salaries)  # it has names\n\n$names\n[1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\n# names(salaries) is a character vector\nnames(salaries)  # \"joe\" \"sue\" \"bob\" \"anne\"\n\n[1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\nsalaries\n\n joe  sue  bob anne \n 100   50   70   85 \n\nmode(names(salaries))  # character\n\n[1] \"character\"\n\nclass(names(salaries)) # character\n\n[1] \"character\"\n\nmode(salaries)   # numeric\n\n[1] \"numeric\"\n\nnames(salaries)   # get the vector of names\n\n[1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\nattr(salaries, \"names\")  # same thing - names(salaries) is just a shorthand\n\n[1] \"joe\"  \"sue\"  \"bob\"  \"anne\"\n\n# Display just the name of the 3rd person\nnames(salaries)[3]    \n\n[1] \"bob\"\n\nsalaries[3]  \n\nbob \n 70 \n\nsalaries[3] + 5\n\nbob \n 75 \n\n# Assign NULL to any attribute you want to remove\ngrades\n\n[1]  70  80  90 100\nattr(,\"campus\")\n[1] \"wilf\"\nattr(,\"semester\")\n[1] \"fall 2020\"\n\nattr(grades, \"students\") = NULL\n\ngrades\n\n[1]  70  80  90 100\nattr(,\"campus\")\n[1] \"wilf\"\nattr(,\"semester\")\n[1] \"fall 2020\"\n\nsalaries\n\n joe  sue  bob anne \n 100   50   70   85 \n\nnames(salaries) = NULL\n\nsalaries\n\n[1] 100  50  70  85\n\n#############################################################\n# 2021 - BEREN - UP TO HERE - AFTER CLASS 17\n#############################################################\nrm(list=ls())\n\nsalaries &lt;- c(100,50,70,85)\nnames(salaries) &lt;- c(\"joe\", \"sue\", \"bob\", \"anne\")\nsalaries\n\n joe  sue  bob anne \n 100   50   70   85 \n\n# change the name of the 3rd person to Robert\nnames(salaries)[3] &lt;- \"robert\"\nsalaries\n\n   joe    sue robert   anne \n   100     50     70     85 \n\n# The following is the WRONG way to do it.\n#salaries[3] &lt;- \"robert\"    # this changes the number not the name\n\n\n# Change the name of sue to \"susan\" (do it in a way so that you don't have to know the numeric position that susuan is in)\nsalaries   # show the original vector\n\n   joe    sue robert   anne \n   100     50     70     85 \n\nnames(salaries)[  names(salaries) == \"sue\"] &lt;- \"susan\"   # change susan's name\nsalaries   # show the change\n\n   joe  susan robert   anne \n   100     50     70     85 \n\n# We can build our own named vector very simply\ngrades = c(70,80,90)\nattr(grades, \"students\") = c(\"joe\", \"sam\", \"sue\")\ngrades\n\n[1] 70 80 90\nattr(,\"students\")\n[1] \"joe\" \"sam\" \"sue\"\n\ngrades2 = c(75,85,95)\nattr(grades2,\"names\") = c(\"joe\",\"sam\",\"sue\")\ngrades2\n\njoe sam sue \n 75  85  95 \n\ngrades2[c(\"joe\",\"sue\")]\n\njoe sue \n 75  95 \n\n#-------------------------------------------------------------------\n# names of list items \n#\n# names of items in a list are also in the names attribute and\n# are returned via the names function.\n#-------------------------------------------------------------------\nunnamedList = list(c(\"joe\",\"sam\",\"sue\"),\n                 c(70,80,90),\n                 c(75,85,95),\n                 c(\"fr\",\"so\",\"fr\"))\nunnamedList\n\n[[1]]\n[1] \"joe\" \"sam\" \"sue\"\n\n[[2]]\n[1] 70 80 90\n\n[[3]]\n[1] 75 85 95\n\n[[4]]\n[1] \"fr\" \"so\" \"fr\"\n\nattributes(unnamedList)\n\nNULL\n\nattr(unnamedList, \"names\")\n\nNULL\n\n# now let's create a gradebook with names \ngradebook = list(students = c(\"joe\",\"sam\",\"sue\"),\n                 test1 = c(70,80,90),\n                 test2 = c(75,85,95),\n                 year = c(\"fr\",\"so\",\"fr\"))\ngradebook\n\n$students\n[1] \"joe\" \"sam\" \"sue\"\n\n$test1\n[1] 70 80 90\n\n$test2\n[1] 75 85 95\n\n$year\n[1] \"fr\" \"so\" \"fr\"\n\nattributes(gradebook)\n\n$names\n[1] \"students\" \"test1\"    \"test2\"    \"year\"    \n\nattr(gradebook, \"names\")\n\n[1] \"students\" \"test1\"    \"test2\"    \"year\"    \n\n# another way to create names\nnames(unnamedList) = c(\"people\", \"exam1\", \"exam2\", \"yearInSchool\")\nunnamedList # now we actually have names\n\n$people\n[1] \"joe\" \"sam\" \"sue\"\n\n$exam1\n[1] 70 80 90\n\n$exam2\n[1] 75 85 95\n\n$yearInSchool\n[1] \"fr\" \"so\" \"fr\"\n\n# you can use those new names\nunnamedList$people\n\n[1] \"joe\" \"sam\" \"sue\"\n\n#....................................................................\n# QUESTION\n# Write code to show all of the attributes of the gradebook list\n#....................................................................\n\nattributes(gradebook)\n\n$names\n[1] \"students\" \"test1\"    \"test2\"    \"year\"    \n\ngradebook$students     # only allowed since the names attribute exits\n\n[1] \"joe\" \"sam\" \"sue\"\n\n#....................................................................\n# QUESTION\n# Write code to show just the \"names\" attribute of the gradebook\n#....................................................................\n\n# ANSWER 1\nattr(gradebook, \"names\")  # \"students\" \"test1\" \"test2\" \"year\"\n\n[1] \"students\" \"test1\"    \"test2\"    \"year\"    \n\n# ANSWER 2\nnames(gradebook)  # names(gradebook) is just shorthand for   attr(gradebook,\"names\")\n\n[1] \"students\" \"test1\"    \"test2\"    \"year\"    \n\n#....................................................................\n# QUESTION \n# names(gradebook) is a character vector. Write code to prove that.\n#....................................................................\n\n# ANSWER\nmode(names(gradebook))  # character\n\n[1] \"character\"\n\n#....................................................................\n# QUESTION\n# Write code to change the name test1 to exam1\n#....................................................................\n\n# ANSWER\ngradebook   # notice test1 is in the 2nd position\n\n$students\n[1] \"joe\" \"sam\" \"sue\"\n\n$test1\n[1] 70 80 90\n\n$test2\n[1] 75 85 95\n\n$year\n[1] \"fr\" \"so\" \"fr\"\n\nnames(gradebook)[2] = \"exam1\"   # change the 2nd name in the names vector to \"exam1\"\n\ngradebook\n\n$students\n[1] \"joe\" \"sam\" \"sue\"\n\n$exam1\n[1] 70 80 90\n\n$test2\n[1] 75 85 95\n\n$year\n[1] \"fr\" \"so\" \"fr\"\n\n#....................................................................\n# QUESTION\n# Write code to change the name test2 to exam2.\n# Write the code so that you do NOT have to know which position test2 is in the list.\n#....................................................................\n\ngradebook\n\n$students\n[1] \"joe\" \"sam\" \"sue\"\n\n$exam1\n[1] 70 80 90\n\n$test2\n[1] 75 85 95\n\n$year\n[1] \"fr\" \"so\" \"fr\"\n\n# ANSWER\nnames(gradebook)[names(gradebook) == \"test2\"] = \"exam2\"\ngradebook  # test2 was changed to exam2\n\n$students\n[1] \"joe\" \"sam\" \"sue\"\n\n$exam1\n[1] 70 80 90\n\n$exam2\n[1] 75 85 95\n\n$year\n[1] \"fr\" \"so\" \"fr\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>attributes</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html",
    "href": "000700-matrices-v015.html",
    "title": "28  matrices",
    "section": "",
    "text": "28.1 DEFINITION: matrix\n#-------------------------------\n# DEFINITION: matrix\n#-------------------------------\n\n# A matrix is a VECTOR (e.g. numeric, logical or character) that is organized\n# into rows and columns. \n#\n# The vector has a \"dim\" attribute that contains the #of rows and #of columns\n# (more on this later)\n#\n# Since a matrix IS a vector - all of the data must be of the same mode,\n# i.e. all numeric, all character or all logical\n#\n# see examples and usage below ...",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#first-way-to-create-a-matrix",
    "href": "000700-matrices-v015.html#first-way-to-create-a-matrix",
    "title": "28  matrices",
    "section": "28.2 FIRST WAY TO CREATE A MATRIX",
    "text": "28.2 FIRST WAY TO CREATE A MATRIX\n\n#--------------------------------\n# FIRST WAY TO CREATE A MATRIX\n#--------------------------------\n# You can use the matrix() function to create a matrix from a vector.\n# The general form of this function is:\n#      matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,    dimnames = NULL)\n#\n# The data argument is a vector that contains the data. nrow and ncol are the\n# number of rows and number of columns for the matrix. \n?matrix    # see the documentation for the matrix function\n\nstarting httpd help server ... done\n\n# EXAMPLE: a matrix with 3 rows and 4 columns:\nnums &lt;- matrix( c(10,20,30,40,50,60,70,80,90,100,110,120) , nrow = 3, ncol=4)\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\n# ASIDE BASED ON A QUESTION FROM A STUDENT\n# (this is covered in more detail below)\n#\n# YOU CAN FILL IN THE DATA OF A MATRIX \"row by row\" or \"column by column\"\n# THIS IS CONTROLLED BY THE byrow ARGUMENT TO THE matrix FUNCTION. \n# BY DEFAULT, byrow=FALSE, AND THE DATA IS FILLED IN THE MATRIX\n# \"column by column\". TO HAVE THE DATA BE FILLED IN \"row by row\" SIMPLY\n# SET byrow=TRUE WHEN YOU CALL THE matrix FUNCTION.\nnumsFilledInByRow &lt;- matrix( c(10,20,30,40,50,60,70,80,90,100,110,120) , nrow = 3, ncol=4, byrow = TRUE)\nnumsFilledInByRow\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   20   30   40\n[2,]   50   60   70   80\n[3,]   90  100  110  120",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#dim-some_matrix-ncol-some_matrix-nrow-some_matrix",
    "href": "000700-matrices-v015.html#dim-some_matrix-ncol-some_matrix-nrow-some_matrix",
    "title": "28  matrices",
    "section": "28.3 dim( SOME_MATRIX )    ncol( SOME_MATRIX )    nrow( SOME_MATRIX )",
    "text": "28.3 dim( SOME_MATRIX )    ncol( SOME_MATRIX )    nrow( SOME_MATRIX )\n\n#-------------------------------------------------.\n# dim( SOME_MATRIX )\n#   returns a vector,  c(# of rows,# of columns)\n#   shorthand for attr(SOME_MATRIX, \"dim\")\n#\n# nrow( SOME_MATRIX )\n#   returns # of rows\n#   shorthand for dim(SOME_MATRIX)[1]\n#\n# ncol( SOME_MATRIX )\n#   returns # of columns\n#   shorthand for dim(SOME_MATRIX)[2]\n#-------------------------------------------------.\n\n# The \"dim\" attribute is a numeric vector that contains \n# - the number of rows in the first position\n# - the number of columns in the 2nd position\n# (\"dim\" stands for the English word \"dimensions\")\n\n# Let's start over with a matrix whose values are filled in column by column\nnums &lt;- matrix( c(10,20,30,40,50,60,70,80,90,100,110,120) , nrow = 3, ncol=4)\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\nattributes(nums)  # show the list of all attributes\n\n$dim\n[1] 3 4\n\nattr(nums, \"dim\") # just get the dim attribute\n\n[1] 3 4\n\ndim(nums)         # same thing - a shorthand for attr(nums,\"dim\")\n\n[1] 3 4\n\nmode(dim(nums))   # \"numeric\"\n\n[1] \"numeric\"\n\nlength(dim(nums)) # 2\n\n[1] 2\n\nnrow(nums)  # shorthand for dim(nums)[1]\n\n[1] 3\n\ndim(nums)[1] # nrow(nums) is same thing\n\n[1] 3\n\nattr(nums,\"dim\")[1]  # also same thing\n\n[1] 3\n\nattr(nums,\"year\") = 2021\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\nattr(,\"year\")\n[1] 2021\n\nattributes(nums)\n\n$dim\n[1] 3 4\n\n$year\n[1] 2021\n\nncol(nums)  # shorthand for dim(nums)[2]\n\n[1] 4\n\ndim(nums)[2] # ncol(nums) is same thing\n\n[1] 4\n\nattr(nums,\"dim\")[2]  # also same thing\n\n[1] 4",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#mode-some_object-vs-class-some_object",
    "href": "000700-matrices-v015.html#mode-some_object-vs-class-some_object",
    "title": "28  matrices",
    "section": "28.4 mode( SOME_OBJECT) vs class( SOME_OBJECT )",
    "text": "28.4 mode( SOME_OBJECT) vs class( SOME_OBJECT )\n\n#----------------------------------------------------------------------------.\n# mode( SOME_OBJECT )    vs     class( SOME_OBJECT )\n#\n#   mode( SOME_OBJECT )\n#      mode returns the underlying basic type of the data\n#      - i.e. \"numeric\" or \"logical\" or \"character\" or \"list\"\n#      Every object has just ONE mode\n#\n#   class( SOME_OBJECT )\n#      For \"regular\" vectors and lists, class returns the \n#      same value as mode returns.\n#      For more complex \"derived\" types, such as matrices, dataframes, factors, etc.\n#      class returns the name(s) of the derived type(s).\n#      For example:\n#         class( SOME_DATAFRAME ) is \"data.frame\"\n#         class( SOME_MATRIX ) is \"matrix\" \"array\" (since a matrix is also an array)\n#\n#      (see more info below)\n#----------------------------------------------------------------------------.\n\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\nattr(,\"year\")\n[1] 2021\n\nattr(nums,\"year\") = NULL  # get rid of the \"year\" attribute\n\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# mode( SOME_OBJECT )\n#\n# mode returns the underlying basic type of the data\n# - i.e. \"numeric\", \"logical\", \"character\" or \"list\"\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nmode(nums)   # numeric , i.e.  a numeric vector\n\n[1] \"numeric\"\n\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# class (SOME_OBJECT)\n#\n# For \"standard plain old\" vectors and lists, class(SOME_OBJECT) returns\n# the same value as mode(SOME_OBJECT)\n#\n# For more complex \"derived\" types, such as matrix\n# class returns the name of the derived type(s).\n# Since a \"matrix\" is also a type of \"array\" the class function\n# for matrices returns  \"matrix\" \"array\"\n#\n# Note - in older versions of R, class(SOME_MATRIX) used to return just \"matrix\".\n# This changed in R 4.0 to \"matrix\" \"array\". There may still be documentation and\n# tutorials online that refer to the older functionality.\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nclass(nums)  # \"matrix\" \"array\"\n\n[1] \"matrix\" \"array\" \n\nattr(nums,\"dim\") = NULL     # remove dim attribute\n\n# dim(nums)        = NULL     # this does the same thing ...\n\nnums\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120\n\nclass(nums)   # \"numeric\" - it's not a matrix anymore.\n\n[1] \"numeric\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#is-some_object-some_type",
    "href": "000700-matrices-v015.html#is-some_object-some_type",
    "title": "28  matrices",
    "section": "28.5 is( SOME_OBJECT , “SOME_TYPE” )",
    "text": "28.5 is( SOME_OBJECT , “SOME_TYPE” )\n\n#--------------------------------------------------.\n# is( SOME_OBJECT , \"SOME_TYPE\" )\n# \n# This function returns TRUE if \"SOME_TYPE\" is in the vector that is\n# returned by class(SOME_OBJECT). Basically it's the same as  \n#\n#    \"SOME_TYPE\" %in% class(SOME_OBJECT) \n#\n# NOTE - The inherits and isa functions are similar to the is function.\n#        For R beginners I recommend you use the \"is\" function. \n#        The name is easier to remember than \"inherits\" and the \"isa\" \n#        function has some peculiarities that \"is\" doesn't. \n#--------------------------------------------------.\n\nmat &lt;- matrix( c(10,20,30,40,50,60,70,80,90,100,110,120) , nrow = 3, ncol=4)\nmat\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\nclass(mat)\n\n[1] \"matrix\" \"array\" \n\nis(mat, \"array\")  # TRUE\n\n[1] TRUE\n\nis(mat, \"matrix\")  # TRUE\n\n[1] TRUE\n\nis(mat, \"data.frame\")  # FALSE\n\n[1] FALSE\n\n#--------------------------------\n# SECOND WAY TO CREATE A MATRIX\n#--------------------------------\n\nrm(list=ls()) # start over\n\n# Since a matrix is just a vector with a dim attribute (see above) we\n# can \"create\" a matrix by explicitly adding the dim attribute to a vector.\n\nnums &lt;- c(10,20,30,40,50,60,70,80,90,100,110,120)  # start with a regular vector\nnums\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120\n\nmode(nums) # \"numeric\"\n\n[1] \"numeric\"\n\nclass(nums) # \"numeric\"\n\n[1] \"numeric\"\n\ndim(nums) &lt;- c(3,4)    # add a dim attribute i.e. 3 rows, 4 columns, same as: attr(nums,\"dim\") &lt;- c(3,4)\nnums  # we now have a matrix\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\nmode(nums)   # \"numeric\"\n\n[1] \"numeric\"\n\nclass(nums)  # \"matrix\" \"array\"\n\n[1] \"matrix\" \"array\" \n\n# Remember ...\nattributes(nums)  # show the list of all attributes (for right now this only contains dim)\n\n$dim\n[1] 3 4\n\nattr(nums, \"dim\") # just get the dim attribute\n\n[1] 3 4\n\ndim(nums)     # a shorthand for attr(nums,\"dim\")\n\n[1] 3 4",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#matrix-vs-dataframe",
    "href": "000700-matrices-v015.html#matrix-vs-dataframe",
    "title": "28  matrices",
    "section": "28.6 matrix vs dataframe",
    "text": "28.6 matrix vs dataframe\n\n#----------------------------------------------------------------------------\n# NOTE: YOU MAY IGNORE THIS FOR NOW.\n#\n# We will cover dataframes later, but for those who already know about \n# dataframes from other classes, this migh clarify some things for you.\n#----------------------------------------------------------------------------\n# matrix VS dataframe\n#\n# - A MATRIX is a vector\n#     o The vector has a dim attribute whose value is a \n#       numeric vector with the number of rows and number of columns\n#\n#\n# - A DATAFRAME is a list \n#     o The list contains several vectors of the same length. \n#       (the vectors are shown as columns when the dataframe is displayed)\n#\n#     o A dataframe has the following attributes:\n#         1. \"class\" is an attribute whose value is \"data.frame\"\n#         1. \"names\" is an attribute whose value is a character vector of column names\n#         2. \"row.names\" is an attribute whose value is  a character vector of row names\n#----------------------------------------------------------------------------",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#somematrix-rows_vector-cols_vector",
    "href": "000700-matrices-v015.html#somematrix-rows_vector-cols_vector",
    "title": "28  matrices",
    "section": "28.7 someMatrix [ ROWS_VECTOR , COLS_VECTOR ]",
    "text": "28.7 someMatrix [ ROWS_VECTOR , COLS_VECTOR ]\n\n#---------------------------------------------\n#\n# someMatrix [ ROWS_VECTOR , COLS_VECTOR ]\n#\n#  (returns the info in the ROWS and COLS\n#   similar to how a dataframe works)\n#\n#---------------------------------------------\nrm(list=ls())\n\nnums &lt;- matrix( c(10,20,30,40,50,60,70,80,90,100,110,120) , nrow = 3, ncol=4)\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\n# In [brackets], specify the [ ROWS , COLUMNS ] that you want.\n# This is very similar to the way dataframes are accessed.\n\nnums[c(1,2,3), c(2,4)]  # rows: 1,2,3  columns: 2,4\n\n     [,1] [,2]\n[1,]   40  100\n[2,]   50  110\n[3,]   60  120\n\nnums[c(1,3), c(2,4)]    # rows 1,3  columns: 2,4\n\n     [,1] [,2]\n[1,]   40  100\n[2,]   60  120\n\nnums[ , c(2,4)]         # all rows,  columns: 2,4 \n\n     [,1] [,2]\n[1,]   40  100\n[2,]   50  110\n[3,]   60  120\n\nnums[ c(2,3) , ]        # rows 2,3  columns: ALL\n\n     [,1] [,2] [,3] [,4]\n[1,]   20   50   80  110\n[2,]   30   60   90  120",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#droptrue-vs-dropfalse",
    "href": "000700-matrices-v015.html#droptrue-vs-dropfalse",
    "title": "28  matrices",
    "section": "28.8 drop=TRUE vs drop=FALSE",
    "text": "28.8 drop=TRUE vs drop=FALSE\n\n#-------------------------------------------------------------------\n# Sometimes the data is returned AS A MATRIX.\n#\n# - If the data comes from at least two rows and at least two columns\n#   then the data is returned as a MATRIX.\n#\n#\n# Sometimes the data is returned AS A VECTOR.\n#\n# - If the data comes from only one row or one column, \n#   then the data is returned as a VECTOR and not as a matrix.\n#\n#\n# How to override this behavior - someMatrix[ ROWS , COLS , drop=TRUE ]\n#\n# - If you specify drop=TRUE as a third arguemnt between the [single-brackets]\n#   Then the data will ALWAYS be returned as a matrix EVEN IF the\n#   data is all from one row or one column\n#------------------------------------------------------------------\n\n# The following only retrieves the data from the 2nd column. \n# The data doesn't have a rectangular structure so it is \n# returned as a VECTOR and not as a matrix.\nnums[ , 2 ]  # 2nd column as a vector - since all the data being returned is in one column.\n\n[1] 40 50 60\n\nclass(nums[ , 2 ])     # numeric (only one column - this is NOT a matrix)\n\n[1] \"numeric\"\n\nnums[ , 2, drop=FALSE ]   # same data as a matrix\n\n     [,1]\n[1,]   40\n[2,]   50\n[3,]   60\n\n# Similarly ... we're limiting the rows, but still only one column\n\nnums[ c(1,2) , 2 ]  # all data from a single column - result is vector (not a matrix)\n\n[1] 40 50\n\nclass(nums[ c(1,2), 2 ])     # numeric (only one column - this is NOT a matrix)\n\n[1] \"numeric\"\n\nnums[ c(1,2) , 2, drop=FALSE ]   # same data as a matrix\n\n     [,1]\n[1,]   40\n[2,]   50\n\n# At least two rows and at least two cols - returned info IS a MATRIX\nnums[ c(1,2), c(2,4)]        # matrix  (2 or more rows and 2 or more cols - this IS a matrix)\n\n     [,1] [,2]\n[1,]   40  100\n[2,]   50  110\n\nclass(nums[ c(1,2), c(2,4)]) # matrix  (2 or more rows and 2 or more cols - this IS a matrix)\n\n[1] \"matrix\" \"array\" \n\n# At least two rows and at least two cols - returned info IS a MATRIX\nnums[c(1,3) , ]        # matrix  (2 or more rows and 2 or more cols - this IS a matrix)\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   30   60   90  120\n\nclass(nums[c(1,3) , ]) # matrix  (2 or more rows and 2 or more cols - this IS a matrix)\n\n[1] \"matrix\" \"array\" \n\nnums[3 , ]          # numeric (only one row - result is NOT a matrix)\n\n[1]  30  60  90 120\n\nclass(nums[ 3 , ])  # numeric (only one row - result is NOT a matrix)\n\n[1] \"numeric\"\n\nnums[3 , c(1,2)]        # numeric (only one row - result is NOT a matrix)\n\n[1] 30 60\n\nclass(nums[3 , c(1,2)]) # numeric (only one row - result is NOT a matrix)\n\n[1] \"numeric\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#you-can-use-a-matrix-like-a-vector.",
    "href": "000700-matrices-v015.html#you-can-use-a-matrix-like-a-vector.",
    "title": "28  matrices",
    "section": "28.9 You can use a matrix like a vector.",
    "text": "28.9 You can use a matrix like a vector.\n\n#----------------------------------------------------------\n# Use a matrix like a vector.\n#\n# Remember since \"under the covers\" a matrix IS a vector.\n# you can do anything with a matrix that you can do with a vector.\n#\n#   - access individual values using one vector in the [brackets]\n#\n#   - pass the matrix to functions like mean, sum, length, round, etc\n#----------------------------------------------------------\n\n# If you use just ONE vector between the [square brackets] and\n# you don't include a comma between the brackets, you will wind up\n# retrieving the data as if you were retrieving it from the underlying\n# vector.\n#\n# The following retrieves JUST A SINGLE VALUE - i.e. the 2nd value\n# from the vector. It does NOT retrieve the 2nd row or the 2nd \n# column but the 2nd value!\n\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\nnums [ 2 ]   # 20 - i.e. the 2nd item in the underlying vector!\n\n[1] 20\n\n# BE CAREFUL! - adding a comma before or after the 2 changes the meaning.\nnums [ , 2 ]   # all ROWs   , 2nd column of data\n\n[1] 40 50 60\n\nnums [ , 2 , drop=FALSE]\n\n     [,1]\n[1,]   40\n[2,]   50\n[3,]   60\n\n# ... and the following will return the 2nd row (as we already saw above):\nnums [ 2 , ]   # 2nd ROW   ,   all COLUMNS\n\n[1]  20  50  80 110\n\n# since the following only specifies one vector between the\n# [square brackets] it retrieves the 2nd and 4th items from the VECTOR:\n\nnums [ c(2, 4) ]  # 20 40 - position 2 and position 4 in underlying vector\n\n[1] 20 40\n\n# Be careful ...\nnums [ 2 , 4 ] # 110 - i.e. ROW 2 , COL 4 (because there are two vectors in the brackets)\n\n[1] 110",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#different-types-of-indexing-still-works-with-rows-and-cols-of-matrices",
    "href": "000700-matrices-v015.html#different-types-of-indexing-still-works-with-rows-and-cols-of-matrices",
    "title": "28  matrices",
    "section": "28.10 4 different types of indexing still works with rows and cols of matrices",
    "text": "28.10 4 different types of indexing still works with rows and cols of matrices\n\n############################################################################.\n# You can use any of the 4 types of indexing that we learned about to \n# specify which rows and columns you want. Specifically these are:\n#\n#    - positive index numbers\n#    - negative index numbers\n#    - TRUE/FALSE values\n#    - a vector of row/column names (if there are row/column  names)\n############################################################################.\n\n#--------------------------------\n# Using negative position numbers\n#--------------------------------\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\nnums[,-2]   # get all except for 2nd column\n\n     [,1] [,2] [,3]\n[1,]   10   70  100\n[2,]   20   80  110\n[3,]   30   90  120\n\nnums[  , c(-2,-3)]   # get all except for 2nd and 3rd columns\n\n     [,1] [,2]\n[1,]   10  100\n[2,]   20  110\n[3,]   30  120\n\nnums[c(1,3), c(-2,-3)]  # get rows 1,3 and all columns except for 2nd and 3rd\n\n     [,1] [,2]\n[1,]   10  100\n[2,]   30  120\n\n# The following only has one vector in the brackets \n# so we will access the data as a VECTOR\n# This returns all values except the 3rd value from the underlying vector.\nnums[-3]  # one vector in [brackets] - access nums as a VECTOR \n\n [1]  10  20  40  50  60  70  80  90 100 110 120\n\n# This returns all values except the 2nd and 3rd from the underlying vector\nnums [-c(2,3)] # one vector in brackets - access data as if it were a vector\n\n [1]  10  40  50  60  70  80  90 100 110 120\n\nnums[-(3:10)]  # all values except the 3rd through 10th from the vector\n\n[1]  10  20 110 120\n\n#---------------------------------------------------------------------\n# using logical vectors \n#---------------------------------------------------------------------\n\n# specify two vectors in the brackets, i.e. [ROWS,COLS]\n\nnums[ , c(TRUE,FALSE,FALSE,TRUE)]  # get the 1st and 4th columns\n\n     [,1] [,2]\n[1,]   10  100\n[2,]   20  110\n[3,]   30  120\n\nnums[c(TRUE,TRUE,FALSE) , ]        # get the first two rows\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n\n# specify one vector in the brackets to get info from the underlying vector\nnums [c(TRUE, FALSE)]  # get every other value from the underlying vector \n\n[1]  10  30  50  70  90 110\n\nnums[c(TRUE,FALSE), c(TRUE, FALSE)]  # rows: every other     cols: every other\n\n     [,1] [,2]\n[1,]   10   70\n[2,]   30   90",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#rownames-and-colnames",
    "href": "000700-matrices-v015.html#rownames-and-colnames",
    "title": "28  matrices",
    "section": "28.11 rownames and colnames",
    "text": "28.11 rownames and colnames\n\n#--------------------------------------------------\n# rownames and colnames - i.e. using names for rows and columns\n#   - matrix function dimnames argument\n#   - rownames function\n#   - colnames function\n#--------------------------------------------------\n\n\n# use matrix function to setup a matrix with row and column names\n# dimnames argument takes a list \n#   - 1st entry in the list is character vector with ROW names\n#   - 2nd entry in the list is character vector with COLUMN names\nnums &lt;- matrix(c(10,20,30,40,50,60,70,80,90,100,110,120), \n               nrow = 3, \n               ncol=4, \n               dimnames=list(\n                             c(\"row1\", \"row2\",\"row3\"),                      # ROW NAMES\n                             c(\"first\",\"second\",\"third\",\"fourth\") # COL NAMES\n                           ))\n\nnums\n\n     first second third fourth\nrow1    10     40    70    100\nrow2    20     50    80    110\nrow3    30     60    90    120\n\n# QUESTION\n# x is a positive number\n# Create a vector \"row1\" \"row2\" \"row3\" .... \"rowx\"\n\nx=9\npaste0(\"row\", 1:x)\n\n[1] \"row1\" \"row2\" \"row3\" \"row4\" \"row5\" \"row6\" \"row7\" \"row8\" \"row9\"\n\n# QUESTION\n# r is the number of rows you want\n# c is the number of columns you want\n# create a matrix that has the followign structure\n#\n#         \"col1\"    \"col2\"  ....  \"col-c\"\n# \"row1\"\n# \"row2\"\n# .\n#.\n# .\n# \"row-r\"\n#\n# the values of the matrix should be 10,20,30, etc\nr = 4\nc = 7\n\nanswer &lt;- matrix( 1:(r*c) * 10  ,   # another way: seq(10, r*c*10, by=10)\n               nrow = r, \n               ncol = c, \n               dimnames=list(\n                  paste0(\"row\", 1:r), # ROW NAMES\n                  paste0(\"col\", 1:c) # COL NAMES\n               ))\nanswer\n\n     col1 col2 col3 col4 col5 col6 col7\nrow1   10   50   90  130  170  210  250\nrow2   20   60  100  140  180  220  260\nrow3   30   70  110  150  190  230  270\nrow4   40   80  120  160  200  240  280\n\n# see the documentation for the matrix function\n?matrix\n\nattributes(nums)       # \"dim\" (a vector) and \"dimnames\" (a list of 2 vectors)\n\n$dim\n[1] 3 4\n\n$dimnames\n$dimnames[[1]]\n[1] \"row1\" \"row2\" \"row3\"\n\n$dimnames[[2]]\n[1] \"first\"  \"second\" \"third\"  \"fourth\"\n\nstr(attributes(nums))\n\nList of 2\n $ dim     : int [1:2] 3 4\n $ dimnames:List of 2\n  ..$ : chr [1:3] \"row1\" \"row2\" \"row3\"\n  ..$ : chr [1:4] \"first\" \"second\" \"third\" \"fourth\"\n\n#--------------------------------------------\n# access the rownames / colnames\n#--------------------------------------------\n\nrownames(nums)                 # the vector of row names\n\n[1] \"row1\" \"row2\" \"row3\"\n\nattributes(nums)$dimnames[[1]] # same thing\n\n[1] \"row1\" \"row2\" \"row3\"\n\ncolnames(nums)                 # the vector of column names\n\n[1] \"first\"  \"second\" \"third\"  \"fourth\"\n\nattributes(nums)$dimnames[[2]] # same thing\n\n[1] \"first\"  \"second\" \"third\"  \"fourth\"\n\n# change the rownames / colnames\n\nrownames(nums)[c(1,3)] &lt;- c(\"apple\",\"pear\")\nnums  \n\n      first second third fourth\napple    10     40    70    100\nrow2     20     50    80    110\npear     30     60    90    120\n\nrownames(nums)[2] &lt;- \"peach\"\nnums  \n\n      first second third fourth\napple    10     40    70    100\npeach    20     50    80    110\npear     30     60    90    120\n\nrownames(nums) &lt;- c(\"a\",\"b\",\"c\")\nnums\n\n  first second third fourth\na    10     40    70    100\nb    20     50    80    110\nc    30     60    90    120\n\nnums[ c(\"a\",\"c\") , ]   # get the 1st and 3rd rows\n\n  first second third fourth\na    10     40    70    100\nc    30     60    90    120\n\nnums[ , c(\"first\", \"fourth\")]  # get the 1st and 4th columns\n\n  first fourth\na    10    100\nb    20    110\nc    30    120\n\nnums[ c(\"a\", \"c\"), c(\"first\", \"fourth\")]   # get the 1st and 3rd rows from the 1st and 4th columns\n\n  first fourth\na    10    100\nc    30    120\n\nnums[c(1,3), c(1,4)]\n\n  first fourth\na    10    100\nc    30    120\n\n#----------------------------------------------------------\n# Combining the different ways to access rows and columns\n#----------------------------------------------------------\n\n# EXAMPLES\n\n# logical vector and negative position numbers\nnums [ c(TRUE, FALSE, TRUE), c(-2,-3) ]  # rows: 1,3   columns: all except for 2nd and 3rd\n\n  first fourth\na    10    100\nc    30    120\n\n# vector of names and vector of positions\nnums [ c(\"a\",\"c\"), c(1,4) ]  # rows 1,3   columns 1,4\n\n  first fourth\na    10    100\nc    30    120",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#changing-the-dimensions-of-a-matrix",
    "href": "000700-matrices-v015.html#changing-the-dimensions-of-a-matrix",
    "title": "28  matrices",
    "section": "28.12 Changing the dimensions of a matrix",
    "text": "28.12 Changing the dimensions of a matrix\n\n#-------------------------------------------\n#\n# Changing the dimensions of a matrix \n#\n#-------------------------------------------\n\n# You can change the dimensions of a matrix too:\n\nnums &lt;- matrix(c(10,20,30,40,50,60,70,80,90,100,110,120), nrow = 3, ncol=4)\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\ndim(nums) &lt;- c(4,3)  # change to 4 rows and 3 columns\nnums\n\n     [,1] [,2] [,3]\n[1,]   10   50   90\n[2,]   20   60  100\n[3,]   30   70  110\n[4,]   40   80  120\n\ndim(nums) &lt;- c(2,6)  # change to 2 rows and 6 columns\nnums\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]   10   30   50   70   90  110\n[2,]   20   40   60   80  100  120",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#matrices-can-be-based-on-any-mode-of-vector-including-character-logical-and-numeric",
    "href": "000700-matrices-v015.html#matrices-can-be-based-on-any-mode-of-vector-including-character-logical-and-numeric",
    "title": "28  matrices",
    "section": "28.13 matrices can be based on any mode of vector: including “character”, “logical” and “numeric”",
    "text": "28.13 matrices can be based on any mode of vector: including “character”, “logical” and “numeric”\n\n#------------------------------------------------------------------------------\n# \n# A matrix can be based on any type (i.e. mode) of underlying vector:\n#    including \"character\", \"logical\" and \"numeric\"\n#\n# As with all vectors - all values in the vector must be the\n# same mode (ie. \"character\", \"logical\" or \"numeric\")\n#\n#------------------------------------------------------------------------------\n\n# Character, logical and numeric matrices\n#\n# Just like you can have numeric matrices you can also have character\n# and logical matrices:\n\n\n# A matrix with character data\nstudents &lt;- matrix(c(\"joe\",\"sam\",\"sue\",\"bill\",\"anne\",\"heather\",\"mike\",\"alice\",\"chana\"),\n                   nrow=3, \n                   ncol=3,\n                   dimnames = list(\n                     1:3,                           # row names\n                     c(\"group1\", \"group2\", \"group3\")   # column names\n                   ))\nstudents\n\n  group1 group2    group3 \n1 \"joe\"  \"bill\"    \"mike\" \n2 \"sam\"  \"anne\"    \"alice\"\n3 \"sue\"  \"heather\" \"chana\"\n\nas.vector(students)      # get the underlying character vector\n\n[1] \"joe\"     \"sam\"     \"sue\"     \"bill\"    \"anne\"    \"heather\" \"mike\"   \n[8] \"alice\"   \"chana\"  \n\nas.character(students)   # same thing\n\n[1] \"joe\"     \"sam\"     \"sue\"     \"bill\"    \"anne\"    \"heather\" \"mike\"   \n[8] \"alice\"   \"chana\"  \n\nstudents # students didn't change\n\n  group1 group2    group3 \n1 \"joe\"  \"bill\"    \"mike\" \n2 \"sam\"  \"anne\"    \"alice\"\n3 \"sue\"  \"heather\" \"chana\"\n\n# A matrix with logical data\nyesNo &lt;- c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE)\nyesNo\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE\n\ndim(yesNo) &lt;- c(3, 2)\nyesNo\n\n     [,1]  [,2]\n[1,] TRUE FALSE\n[2,] TRUE FALSE\n[3,] TRUE  TRUE\n\ndim(yesNo)\n\n[1] 3 2\n\nnrow(yesNo)  # same as: dim(yesNo)[1] \n\n[1] 3\n\nncol(yesNo)  # same as: dim(yesNo)[2]\n\n[1] 2\n\n# SOME OTHER EXAMPLES:\nletters   # built in vector of lowercase letters \"a\" \"b\" \"c\" ... etc ... \"z\"\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nLETTERS   # built in vector of UPPERCASE letters \"A\" \"B\" \"C\" ... etc ... \"Z\"\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\nclass(LETTERS)\n\n[1] \"character\"\n\nclass(letters)\n\n[1] \"character\"\n\nstuff &lt;- letters[1:20]   # assign the first 24 lowercase letters to stuff\nmode (stuff)  # \"character\"\n\n[1] \"character\"\n\nstuff  # \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\"\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\"\n\ndim(stuff) &lt;- c(4,5)  # add dimensions\nstuff\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,] \"a\"  \"e\"  \"i\"  \"m\"  \"q\" \n[2,] \"b\"  \"f\"  \"j\"  \"n\"  \"r\" \n[3,] \"c\"  \"g\"  \"k\"  \"o\"  \"s\" \n[4,] \"d\"  \"h\"  \"l\"  \"p\"  \"t\" \n\n# Get 2nd and 3rd rows,  5th column\nstuff [ c(2,3), 5]  # \"r\" \"s\"\n\n[1] \"r\" \"s\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#convert-a-matrix-to-a-vector",
    "href": "000700-matrices-v015.html#convert-a-matrix-to-a-vector",
    "title": "28  matrices",
    "section": "28.14 Convert a matrix to a vector",
    "text": "28.14 Convert a matrix to a vector\n\n#-----------------------------------------------------------------------------------\n# Convert a matrix to a vector\n#\n# A few ways:\n#\n#   - remove the dim attribute in any of the following ways (they are all equivalent)\n#     (this also automatically removes the dimnames attribute if it exists)\n#\n#         o dim(SOME_MATRIX) = NULL\n#\n#         o attr(SOME_MATRIX, \"dim\") = NULL\n#\n#         o attributes(SOME_MATRIX)$dim = NULL\n#\n#   - use one of the as.xxxxx functions\n#     (this will remove ALL attributes, including the dim attribute)\n#\n#         o SOME_MATRIX = as.vector(SOME_MATRIX)\n#\n#         o you can similarly use as.numeric, as.logical or as.character to convert\n#           to a numeric, logical or character vector\n#-----------------------------------------------------------------------------------\n\n# View the underlying vector with the as.vector function for any\n# vector (or the as.numeric, as.character or as.logical for those types of vectors).\n\nnums &lt;- matrix(c(10,20,30,40,50,60,70,80,90,100,110,120), nrow = 3, ncol=4)\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\nas.numeric(nums) # a numeric vector\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120\n\nas.vector(nums)  # same - return the underlying vector\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120\n\nnums    # nums didn't change\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\n# TO change the variable to a vector you would have to assign the new value\n# back to the same variable. For example:\n\nnums = as.vector(nums)\nnums     #  10  20  30  40  50  60  70  80  90 100 110 120 \n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120\n\n# Set the dimensions of a matrix to NULL\n# \n# TO remove the dimensions from a matrix, You can also set the value of the\n# dim attribute to NULL. The variable will cease to be a matrix and will\n# be treated as a regular vector. For exmample:\n\nnums &lt;- matrix(c(10,20,30,40,50,60,70,80,90,100,110,120), nrow = 3, ncol=4)\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\ndim(nums)\n\n[1] 3 4\n\ndim(nums) &lt;- NULL    # remove the dimensions\nnums                 # nums is no longer a matrix\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#byrowtrue",
    "href": "000700-matrices-v015.html#byrowtrue",
    "title": "28  matrices",
    "section": "28.15 byrow=TRUE",
    "text": "28.15 byrow=TRUE\n\n############################\n#\n# byrow=TRUE\n#\n###########################\n\n# When you create a matrix the values can be filled in either \"by row\" or  \"by\n# column\" For example, in the following code, the first values in the original\n# vector (i.e. 10,20,30) are used to fill in the first column of the matrix.\n# Then the following values (i.e. 30,40,50) are used to fill in the 2nd column,\n# etc. This is knowns a \"filling in the values by column\":\noriginalValues &lt;- c(10,20,30,40,50,60,70,80,90,100,110,120)\noriginalValues\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120\n\nnumsA &lt;- matrix(originalValues, nrow = 3, ncol=4)\nnumsA\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\n# The byrow argument to the matrix function can be used to change this behavior.\n# By default the byrow  argument is set to FALSE. Therefore the data is filled\n# in \"by column\" as shown above.  However by setting byrow=TRUE, the values\n# would be filled into the matrix \"by row\" as shown below:\noriginalValues &lt;- c(10,20,30,40,50,60,70,80,90,100,110,120)\noriginalValues\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120\n\nnumsB &lt;- matrix(originalValues, nrow = 3, ncol=4, byrow=TRUE)\nnumsB\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   20   30   40\n[2,]   50   60   70   80\n[3,]   90  100  110  120\n\nnumsB[2]   # using byrow=TRUE rearranges the values in the underlying vector\n\n[1] 50\n\n# Note that if you convert the matrix back to a vector (as shown earlier in this\n# document) then if the data was filled in by column (i.e. byrow=FALSE) then the\n# new vector will be in the exact same order as the original data. As shown here\n# with the matrix numsA from above:\ndim(numsA) &lt;- NULL\nnumsA   #  10  20  30  40  50  60  70  80  90 100 110 120\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120\n\n# However, if the matrix was filled in by row (by setting byrow=TRUE) then the\n# arrangement in the underlying vector is changed to the order that would be\n# used to fill in the matrix by column. Therefore when the dimensions are\n# removed and the matrix is converted back to a vector the data will be in a\n# different order. This is seen here with the matrix numsB from above:\ndim(numsB) &lt;- NULL\nnumsB  #  10  50  90  20  60 100  30  70 110  40  80 120\n\n [1]  10  50  90  20  60 100  30  70 110  40  80 120\n\n# Notice that the order in the resulting vector is derived by reading across the\n# rows from the matrix, one row at a time.\n \n\n# Remember, you can use a matrix as a vector - EXAMPLE\nnums &lt;- matrix(c(10,20,30,40,50,60,70,80,90,100,110,120), nrow = 3, ncol=4)\nnums\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\nmean(nums)\n\n[1] 65\n\nsum(nums)\n\n[1] 780\n\nnums[nums&gt;100]  # 100 120  \n\n[1] 110 120",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#converting-data-from-one-type-to-another-using-as.___-functions",
    "href": "000700-matrices-v015.html#converting-data-from-one-type-to-another-using-as.___-functions",
    "title": "28  matrices",
    "section": "28.16 CONVERTING DATA FROM ONE TYPE TO ANOTHER USING “as.___” functions,",
    "text": "28.16 CONVERTING DATA FROM ONE TYPE TO ANOTHER USING “as.___” functions,\n\n######################################################################\n######################################################################\n##\n## CONVERTING DATA FROM ONE TYPE TO ANOTHER USING \"as.___\" functions, \n## e.g. as.numeric, as.character, as.logical\n##\n## Testing the type of data using \"is.___\" functions\n## e.g. is.numeric, is.character, is.logical\n##\n######################################################################\n######################################################################\n\n# Remember, logicals when used in the context of numerics get converted\n# implicitly (i.e. \"automatically\") to numbers. TRUE is converted to 1 and FALSE is converted to 0.\n\nsum (c(TRUE, FALSE, TRUE))   # 2\n\n[1] 2\n\nmean(c(TRUE, FALSE, TRUE))   # 0.66666, i.e. (1+0+1)/3, i.e. % of values that are true\n\n[1] 0.6666667\n\nnums &lt;- c(50, 150, 300)\nsum(nums &gt; 100)  # 2\n\n[1] 2\n\n# Using the as.numeric function you can force that conversion to happen.\nsomeLogicals &lt;- c(TRUE, FALSE, TRUE)\nsomeLogicals                # TRUE FALSE TRUE\n\n[1]  TRUE FALSE  TRUE\n\nas.numeric (someLogicals)   # 1 0 1\n\n[1] 1 0 1\n\nsomeLogicals                # TRUE FALSE TRUE  (the variable didn't change)\n\n[1]  TRUE FALSE  TRUE\n\n# \"TRUE\" as a character value is NOT the same as \n# TRUE as a logical value.\nnums &lt;- seq(10,100,10)\nnums\n\n [1]  10  20  30  40  50  60  70  80  90 100\n\nnums[c(TRUE,FALSE)]      # every other number: 10 30 50 70 90\n\n[1] 10 30 50 70 90\n\nnums[c(\"TRUE\",\"FALSE\")]  # NA NA  (there are no values named \"TRUE\" or \"FALSE\")\n\n[1] NA NA\n\n# You can convert logicals into character also\nsomeLogicals               # TRUE FALSE TRUE       (no quotes, i.e. logical)\n\n[1]  TRUE FALSE  TRUE\n\nas.character(someLogicals) # \"TRUE\" \"FALSE\" \"TRUE\" (\"quotes\", i.e. character)\n\n[1] \"TRUE\"  \"FALSE\" \"TRUE\" \n\n# In general, you can convert from just about any type into any other\n# type. These conversions are accomplished with similar functions such as\n#\n#    as.numeric, as.logical, as.character, etc.\n#\n# We will discuss these as necessary as the need for them comes up.\n\n\nprices &lt;- c(1.99,2.99)            # numeric data\nmean(prices)                      # 2.49\n\n[1] 2.49\n\notherPrices &lt;- c(\"1.99\",\"2.99\")   # character data\nmean(otherPrices)                 # NA with a warning \n\nWarning in mean.default(otherPrices): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\nas.numeric(otherPrices)           # convereted to numeric\n\n[1] 1.99 2.99\n\nmean(as.numeric(otherPrices))     # 2.49\n\n[1] 2.49\n\n# Similarly, you can check to see if some data is a particular type \n# using \"is.____\" functions such as is.numeric, is.character, is.logical\nis.numeric(otherPrices)  # FALSE\n\n[1] FALSE\n\nis.numeric(prices)       # TRUE\n\n[1] TRUE\n\nis.character(otherPrices) # TRUE\n\n[1] TRUE\n\nis.character(prices)      # FALSE\n\n[1] FALSE\n\nprices                # 1.99 2.99      (numeric data)\n\n[1] 1.99 2.99\n\nas.character(prices)  # \"1.99\" \"2.99\"  (character data)\n\n[1] \"1.99\" \"2.99\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000700-matrices-v015.html#arrays---a-matrix-is-a-2-dimentional-array.",
    "href": "000700-matrices-v015.html#arrays---a-matrix-is-a-2-dimentional-array.",
    "title": "28  matrices",
    "section": "28.17 arrays - (A matrix is a 2 dimentional array).",
    "text": "28.17 arrays - (A matrix is a 2 dimentional array).\n\n#-------------------------------------------------------------------\n# arrays\n#\n# A matrix is a 2 dimentional array.\n#\n# arrays can have more than 2 dimensions\n#-------------------------------------------------------------------\n\nnums = seq(10,240,by=10)\n\nlength(nums)   # 24\n\n[1] 24\n\n# EXAMPLE - a 3 dimensional \"array\"\n#\n# The product of the dimensions should equal the length of the underlying vector\ndim(nums) = c(3,4,2)   # 3*4*2 is 24\n\nnums\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]  130  160  190  220\n[2,]  140  170  200  230\n[3,]  150  180  210  240\n\nclass(nums)\n\n[1] \"array\"\n\nnums[,,1]   # 1st matrix in the array\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\nnums[,,2]   # 2nd matrix in the array\n\n     [,1] [,2] [,3] [,4]\n[1,]  130  160  190  220\n[2,]  140  170  200  230\n[3,]  150  180  210  240\n\nnums[3,,1]  # 3rd row of first matrix\n\n[1]  30  60  90 120\n\nnums[3,,2]  # 3rd row of 2nd matrix\n\n[1] 150 180 210 240\n\nnums[3,,1]  # 3rd row of first matrix\n\n[1]  30  60  90 120\n\nnums[3,,2]  # 3rd row of 2nd matrix\n\n[1] 150 180 210 240\n\nnums[1,c(2,3),1]  # rows: 1   cols: 2,3    matrix: 1\n\n[1] 40 70\n\nnums[1,c(2,3),2]  # rows: 1   cols: 2,3    matrix: 2\n\n[1] 160 190",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>matrices</span>"
    ]
  },
  {
    "objectID": "000800-factors-v010.html",
    "href": "000800-factors-v010.html",
    "title": "29  factors",
    "section": "",
    "text": "##############################################\n##############################################\n## factors\n##\n## For more info see this page:\n## https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors/index.html\n##############################################\n##############################################\n\n########################################################################.\n# NUMBERS SHOULDN'T ALWAYS BE USED FOR DOING MATH ... \n#\n# Some types of numbers are not intended for doing math. For example,\n# suppose I asked 1000 people: \n#\n#   Which of the following do you like best: \n#   \"chicken\" or \"pizza\" or \"pasta\"\n#\n#   and I get 1000 answers - that look like this:\n#      \"pizza\" \"chicken\" \"pizza\" \"pasta\" \"chicken\" \"pizza\" ... etc\n#\n#   I can put that data into an R vector\n#      answers = c(\"pizza\",\"chicken\",\"pizza\",\"pasta\",\"chicken\",\"pizza\", etc ...)\n#\n#   but there is not much that I can do with that vector other than figure out\n#   how many answers I got for each type of food, e.g. 300 for \"chicken\",\n#   500 for \"pizza\" and 200 for \"pasta\". There is no way for me to take\n#   the \"mean\" of the answers and come up with \"pizza flavored chicken\"\n#\n# Similarly, if I changed the question to the following:\n#\n#    Which of the following do you like best:\n#    answer 1 for \"chicken\" or 2 for \"pizza\" or 3 for \"pasta\"\n#\n#    and I get 1000 answers - that look like this:\n#      2 1 2 3 1 2 ... etc\n#\n#    I can put that data into an R vector\n#      answers = c(2, 1, 2, 3, 1, 2, ... etc)\n#\n#    However, even though the answers now look like numbers taking the mean of \n#    those numbers would not make any sense. (The mean would be meaningless :)\n#    1, 2 and 3 are simply standing in for the values \"chicken\" \"pizza\" and \"pasta\".\n#    Taking a mean of these numbers would make no more sense than taking  a\n#    mean of c(\"pizza\",\"chicken\",\"pizza\", etc ...).\n#\n# So we can see clearly that you shouldn't always do \"math\" with numbers.\n########################################################################.\n\n#########################################################################.\n# SOME CHARACTER DATA IS NOT INTENDED FOR TALLYING RESULTS\n#\n# For some character data it is appropriate to add up how many copies of \n# the same value appear in the data. In the example above in response to\n# asking 1000 people the question:\n#   which do you like best \"chicken\" \"pizza\" or \"pasta\"\n#\n# we might put the results in a character vector, e.g.\n#      answers = c(\"pizza\",\"chicken\",\"pizza\",\"pasta\",\"chicken\",\"pizza\", etc ...)\n#\n# It would be very appropriate to \"tally these values\" (ie. add up how many\n# of each response there is). For example we might figure out there were\n# 300 answers for \"chicken\", 500 for \"pizza\" and 200 for \"pasta\".\n#\n#\n# However, suppose I have data in parallel vectors that record info about\n# students in a school. The vectors might look like this:\n#      studentNames = c(\"Mike Smith\", \"Anne Jones\", \"Larry Cohen\", ... etc)\n#      year         = c(\"sophomore\",  \"freshman\",   \"sophomore\",   ... etc)\n#      age          = c(18,           21,           16,            ... etc)\n#      satMath      = c(400,          650,          520,           ... etc)\n#\n# A statistician working with the data to figure out school policy and\n# demographics would typically not need to tally\n# the student names, e.g. 1 \"Mike Smith\", 1 \"Anne Jones\", 1 \"Larry Cohen\", etc.\n#\n# NOTE - it might be interesting to know if there are two people with the \n# same name - HOWEVER - a \"statistician working with the data to figure out\n# school policy and demographics\" would not need to do that. \n###########################################################################.\n\n###########################################################################.\n#\n# *** INTRODUCING R \"factors\" ***\n#\n#    DIFFERENT TYPES OF NUMBERS ... DIFFERENT TYPES OF CHARACTERS ...\n#    = DIFFERENT \"classes\" OF DATA IN R\n#\n#\n# As we know R has the following \"classes\" of data that are intended to be used\n# in the following ways:\n#\n#    \"numeric\" vectors - for numbers for which doing \"math\" is appropriate\n#\n#    \"character\" vectors - for data that has no inherent meaning and does \n#                          NOT need to be tallied (e.g. studentNames in example above)\n#\n# R also has another class of data:\n#\n#    \"factor\" vectors - used for numeric data that is NOT appropriate for math\n#                       also used for character data that is not appropriate for tallying\n#\n#                       For example you could use an R \"factor\" to store the answers\n#                       to either question about favorite food, whether the \n#                       answers are given with words, e.g. \"pizza\", \"chicken\" , etc\n#                       or if the answers are given with numbers, e.g. \n#                       1 for chicken, 2 for pizza, etc.\n#\n# KEEP READING FOR MORE INFO ABOUT HOW TO WORK WITH FACTORS IN R\n#\n###########################################################################.\n\n#------------------------------------------------------------------------------\n# Different types of data in statistics\n# See this for a good overview:\n#\n# https://www.scribbr.com/statistics/levels-of-measurement/#:~:text=Nominal%3A%20the%20data%20can%20only%20be%20categorized.,and%20has%20a%20natural%20zero.\n#\n#\n#   - nominal/categorical data   \n#\n#     (ratios are OK,    &gt; and &lt; are not OK,    means are not OK)\n#     R uses \"factor\", i.e. factor( ... ) - see below\n#\n#\n#\n#   - ordinal data               (ratios are OK,    &gt; and &lt; are OK,        means are not OK)   \n#     R uses \"ordered factor\", ie. factor( ..., ordered=TRUE)\n#\n#\n#\n#   - interval data  (see the above webpage)\n#   - ratio data     (ratios are OK,    &gt; and &lt; are OK,        means are OK)  \n#\n#     R uses \"numeric\" for both of these types of data\n#            (also \"integer\" and \"double\" - these are beyond the scope of what we've discussed)\n#------------------------------------------------------------------------------\n\n\n#------------------------------------------------------------------------------\n# What is a factor? \n#\n# A \"factor\" is R's way of making it easy for statisticians to work with\n# nominal/categorical data.\n#\n# A factor ...\n#    - is a vector\n#    - has a \"class\" attribute that is set to    \"factor\"\n#    - has a \"levels\" attribute that contains a vector of level names\n#          (see more below)\n#------------------------------------------------------------------------------\n\n# character data - is used for data that is not going to be involved in statistical calculations\n# \n# Data such as peoples names are generally not used for statistical analysis.\n# For example, I generally wouldn't care about what the most common name is\n# in my data or what percent of the people have each name or what the ratio\n# is of \"joes\" to \"bobs\" in my data. These are all questions that don't really\n# make any difference to a typical statistician.\n# The name of the person is simply a name that I can use to refer to the data for that person.\n#\n# Character data that you are not expecting to use for statistical analysis should\n# simply remain as \"character\" data - NOT as a factor.\n#\n# [ If for some reason you DO care about statistical analysis of the names of the\n#   people then you could make this data into a factor. ]\n\nperson   &lt;- c(\"joe\", \"sue\", \"bob\", \"alan\", \"anne\", \"pearl\")    \nperson\n\n[1] \"joe\"   \"sue\"   \"bob\"   \"alan\"  \"anne\"  \"pearl\"\n\nclass(person)  # \"character\"\n\n[1] \"character\"\n\n# numeric data is data for which you expect to perform mathematical operations\n# such as:   +  -   *   /  ^   sqrt, max, min, sum, mean, etc.\n# This type of data should NOT be made into a factor.\n#\n# For example test grades that will be analyzed numerically - eg. mean, max, etc\n# should NOT be a factor.\n\ntest1 &lt;-    c(70,80,90,100,95,85)  \ntest1\n\n[1]  70  80  90 100  95  85\n\nclass(test1)  # \"numeric\"\n\n[1] \"numeric\"\n\n# For nominal/categorical data  use a factor in R.\n#\n# For example, let's say you would want to perform statistical analysis\n# on people's favorite colors. For example you might be curious to know\n# how many people have \"blue\" as their favorite color, what is the most common\n# favorite color or what percent of the people have each favorite color\n# then favorite color should be a factor.\n\n\nfavcolor &lt;- factor(c(\"red\", \"blue\", \"red\", \"red\", \"blue\", \"yellow\"))   \nfavcolor\n\n[1] red    blue   red    red    blue   yellow\nLevels: blue red yellow\n\nclass(favcolor)  # \"factor\"\n\n[1] \"factor\"\n\n# The \"levels\" of a factor are the different values that the data can have.\n# For the favcolors data shown above, the valid values are \"red\", \"blue\" and\n# \"yellow\". These are the levels of the factor.\n\nlevels(favcolor) # \"blue\" \"red\" \"yellow\"   (in alphabetical order)\n\n[1] \"blue\"   \"red\"    \"yellow\"\n\n#------------------------------------------------------------------------------\n# plot( x )     # works differently for different classes of x\n# summary( x )  # works differently for different classes of x\n#\n# Some R functions will work differently with factor data than with\n# other types of data.\n#\n# Examples: summary, plot\n#------------------------------------------------------------------------------\n\nsummary(favcolor)    # for factors shows the number of each \"level\" in the data (see output)\n\n  blue    red yellow \n     2      3      1 \n\nsummary(test1)       # for numeric shows a numeric summary (see output)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  70.00   81.25   87.50   86.67   93.75  100.00 \n\nsummary(person)      # for character not much useful data (see output)\n\n   Length     Class      Mode \n        6 character character \n\nplot(favcolor)    # a bar chart of the numbers of number of values for each color\n\n\n\n\n\n\n\nplot(test1)       # a \"dot plot\" of the values of each individual test grade\n\n\n\n\n\n\n\nplot(person)      # ERROR - you cannot plot character data\n\nWarning in xy.coords(x, y, xlabel, ylabel, log): NAs introduced by coercion\n\n\nWarning in min(x): no non-missing arguments to min; returning Inf\n\n\nWarning in max(x): no non-missing arguments to max; returning -Inf\n\n\nError in plot.window(...): need finite 'ylim' values\n\n\n\n\n\n\n\n\n#.............................................................................\n# WARNING - if you try calling plot from RStudio and the window that displays\n# the plot is too small to display the plot you may get an error similar to\n# the following:\n#\n#   &gt; plot(person)\n#   Error in plot.new() : figure margins too large\n#\n# To fix this, simply make the window for the plot larger and run the command again.\n#.............................................................................\n\n\n#------------------------------------------------------------------------------\n# An \"ordered factor\" is R's way of working with ordinal data.\n# An ordered factor ...\n#    - ... is a vector\n#    - ... has a \"class\" attribute that is set to    \"ordered\" factor\"\n#    - ... has a \"levels\" attribute that contains a vector of level names\n#          (see more below)\n#------------------------------------------------------------------------------\n\n# ordinal data  (use an \"ordered factor\" in R)\n#\n# nominal/categorical data that also have an implied \"order\" to the data\n# is known as \"ordinal\" data and should be stored as an \"ordered factor\"\n# \n# For example, students in college are categorized as freshmen, sophomores,\n# juniors and seniors. However, there is also an implied order, in that\n# the category depends on the number of credits taken (or the number of year\n# in college). Freshmen have the fewest credits (or years in college) \n# while seniors have the most credits (or years in school). This implies\n# the order  freshman, sophomore, junior, senior.\n#\n# Notice that I included a \"levels\" argument in the call to the factor function\n# to list the exact levels. The values in the levels argument should be\n# arranged in the correct order.\n\nyear &lt;-     factor(c(\"fr\", \"so\", \"fr\", \"so\", \"fr\", \"se\"),\n                   ordered=TRUE,\n                   levels=c(\"fr\",\"so\",\"ju\",\"se\")) \nyear\n\n[1] fr so fr so fr se\nLevels: fr &lt; so &lt; ju &lt; se\n\nclass(year)  # \"ordered\" \"factor\"\n\n[1] \"ordered\" \"factor\" \n\nlevels(year) # \"fr\" \"so\" \"ju\" \"se\"\n\n[1] \"fr\" \"so\" \"ju\" \"se\"\n\nplot(year)   # all 4 levels - including ju are plotted\n\n\n\n# WHAT IF YOU DID NOT SPECIFY levels= ... AND ordered = TRUE\n\nyear &lt;-     factor(c(\"fr\", \"so\", \"fr\", \"so\", \"fr\", \"se\"),\n                   ordered=TRUE) \nyear\n\n[1] fr so fr so fr se\nLevels: fr &lt; se &lt; so\n\nclass(year)  # \"ordered\" \"factor\"\n\n[1] \"ordered\" \"factor\" \n\nlevels(year) # \"fr\" \"se\" \"so\"   - \"ju\" isn't there - the order is alphabetical\n\n[1] \"fr\" \"se\" \"so\"\n\nplot(year)   # no column for ju and columns are in alphabetical order\n\n\n# WHAT IF YOU DID NOT SPECIFY levels= ... AND ordered = FALSE \n\nyear &lt;-     factor(c(\"fr\", \"so\", \"fr\", \"so\", \"fr\", \"se\"),\n                   ordered=FALSE) \nyear\n\n[1] fr so fr so fr se\nLevels: fr se so\n\nclass(year)  # \"factor\"\n\n[1] \"factor\"\n\nlevels(year) # \"fr\" \"se\" \"so\"   - \"ju\" isn't there - the order is alphabetical\n\n[1] \"fr\" \"se\" \"so\"\n\nplot(year)   # no column for ju and columns are in alphabetical order\n\n\n#------------------------------------------------------------------------------\n# Sometimes data that looks like numbers should in fact be treated as \n# factor data. For example, if you ask a survey question whose answers\n# are recorded as a number but in fact these numbers actually \n# represent nominal/categorical data the numbers should in fact be stored as \n# a factor in R and not as numeric data.\n#------------------------------------------------------------------------------\n\n#...........................................................................\n# EXAMPLE: The following data contains the answer to the survey question:\n#\n#          What is your favorite color? \n#          1=red  2=blue  3=green  4=other\n#\n# Since the actual data \"red\", \"blue\", \"green\", \"other\" is\n# nominal/categorical data and NOT numeric the numbers 1,2,3,4 that are used\n# to record the answers should obviously NOT be used to perform\n# arithmetic (+-*/^,mean,sum,etc). Therefore these numbers\n# would be recorded as a factor and not a numeric vector.\n#\n# Note that with the data stored as a factor you can still count\n# the number of people who answered each choice or find\n# the percent of people who answered each choice.\n#...........................................................................\n\nsurvey &lt;- factor(c( 4, 1, 1, 2, 2, 2), levels = 1:4)\nsurvey\n\n[1] 4 1 1 2 2 2\nLevels: 1 2 3 4\n\nclass(survey)  # \"factor\"\n\n[1] \"factor\"\n\nlevels(survey) \n\n[1] \"1\" \"2\" \"3\" \"4\"\n\nplot(survey)\nsummary(survey)\n\n1 2 3 4 \n2 3 0 1 \n\n#...........................................................................\n# Another Example: \"ordered factor\" data\n#\n# Survey question:\n#\n#         How may years of schooling do you have?\n#         1=some high school, 2=hs graduate, 3=some college, 4=college grad ,5=advanced degree\n#\n# Here, as in the previous example, the numbers 1,2,3,4 that represent the \n# answers \"some high school\", \"hs graduate\", etc. should not be used in arithmetic \n# calculations. \n#\n# However, in this example there is an implied order to the choices. \n#    People who answered \"some high school\" have had fewer years of school than\n#    people who answered \"hs graduate\" who have  had fewer years of school than\n#    people who answered \"some college\", etc.\n# \n# Therefore the data should be stored in an \"ordered factor\" by specifying\n# ordered=TRUE in the call to the factor function.\n#...........................................................................\n\neducation &lt;- factor(c( 2, 4, 4, 1, 5, 4), \n                    ordered=TRUE,\n                    levels=1:5)\neducation\n\n[1] 2 4 4 1 5 4\nLevels: 1 &lt; 2 &lt; 3 &lt; 4 &lt; 5\n\nclass(education)  # \"ordered\" \"factor\"\n\n[1] \"ordered\" \"factor\" \n\nlevels(education)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\nsummary(education)\n\n1 2 3 4 5 \n1 1 0 3 1 \n\nplot(education)\n\n\n?factor\n\nstarting httpd help server ... done\n\n#-------------------------------------------------------------------------\n# Review of the Basic and complex \"data structures\" in R\n#-------------------------------------------------------------------------\n# R has numerous \"data structures\". The following are the \"basic\"\n# data structures that we learned about:\n#\n#    - numeric, logical and character vectors  \n#      Note: there are other types of vectors that we did not cover, i.e.\n#            integer, double, complex and raw.\n#\n#    - lists\n#\n#    NOTE: Usually, the R documentation uses the terms \"vector\" and \"list\" as we\n#    have been using them. However, in some places, the R documentation uses the terms\n#    \"atomic vector\"    to refer to what we've been calling simply a \"vector\" and\n#    \"recursive vector\" to refer to what we've been calling a \"list\".\n#\n# The following are more complex data structures that are built on \n# top of R's \"basic\" data structures.\n#\n#    - matrices  (A matrix is a vector that has a \"dim\" attribute\n#                 The value of the \"dim\" attribute is a numeric vector\n#                 that contains the number of rows and cols of the matrix)\n#\n#    - factors   (A factor is a numeric vector that contains a \n#                 \"class\" attribute, set to \"factor\" and a \n#                 \"levels\" attribute set to a character vector with the names of the levels)\n#\n#    - dataframes (We didn't cover this yet.\n#                 A dataframe is a list of vectors, all of the same length.\n#                 The list has the following attributes:\n#\n#                   name of attribute  value of attribute\n#                   -----------------  ------------------\n#                   class              \"data.frame\"\n#\n#                   names              character vector with the names of \n#                                      the columns of the dataframe\n#\n#                   row.names          character vector with the names of \n#                                      rows of the dataframe.\n#\n#   - R contains many other more complex arrangements of data\n#     (ie. data structures) that are constructed from\n#     vectors, lists and attributes.\n#-------------------------------------------------------------------------\n\n\ndf = data.frame( student = c(\"joe\", \"sue\", \"anne\"),\n                 test1 = c(70,80,90),\n                 tes2 = c(75,85,95))\n\n\ndf\n\n  student test1 tes2\n1     joe    70   75\n2     sue    80   85\n3    anne    90   95\n\n#-------------------------------------------------------------------------\n# Review of mode vs class  (we covered this in the last file on matrices)\n#-------------------------------------------------------------------------\n# mode returns the name of the underlying basic type of a data structure.\n#\n#    mode(SOME_NUMERIC_VECTOR)   # \"numeric\"\n#    mode(SOME_CHARACTER_VECTOR) # \"character\"\n#    mode(SOME_LOGICAL_VECTOR)   # \"logical\"\n#    mode(SOME_LIST)             # \"list\"\n#\n#    mode(SOME_MATRIX)    # \"numeric\" or \"character\" or \"logical\"\n#    mode(SOME_FACTOR)    # \"numeric\"\n#    mode(SOME_DATAFRAME) # \"list\"\n#\n# For a complex data structure (e.g. matrix, factor, dataframe)\n# class returns the name of the more complex structure. \n# For the basic data structures (i.e. vectors and lists) the class function \n# returns the same value as the mode function\n# \n#    class(SOME_NUMERIC_VECTOR)   # \"numeric\"\n#    class(SOME_CHARACTER_VECTOR) # \"character\"\n#    class(SOME_LOGICAL_VECTOR)   # \"logical\"\n#    class(SOME_LIST)             # \"list\"\n#\n#    class(SOME_MATRIX)    # \"matrix\" \"array\"\n#    class(SOME_FACTOR)    # \"factor\" or \"ordered\" \"factor\"\n#    class(SOME_DATAFRAME) # \"data.frame\"\n#\n# If you attach a \"class\" attribute to any data, R will return the \n# value of the \"class\" attribute as the result of the class function.\n#-------------------------------------------------------------------------\n\n#...............\n# some examples\n#...............\n\n# matrix\nmat = matrix(c(10,20,30,40,50,60), nrow=2, ncol=3)\nmat\n\n     [,1] [,2] [,3]\n[1,]   10   30   50\n[2,]   20   40   60\n\nmode(mat)    # \"numeric\"\n\n[1] \"numeric\"\n\nclass(mat)   # \"matrix\"\n\n[1] \"matrix\" \"array\" \n\n# factor\nfavcolor &lt;- factor(c(\"red\", \"blue\", \"red\", \"red\", \"blue\", \"yellow\"))   \nfavcolor\n\n[1] red    blue   red    red    blue   yellow\nLevels: blue red yellow\n\nmode(favcolor)   # \"numeric\"  (see below for why this is numeric)\n\n[1] \"numeric\"\n\nclass(favcolor)  # \"factor\"\n\n[1] \"factor\"\n\n# ordered factor\nyear = factor(c(\"fr\", \"so\", \"fr\", \"so\", \"fr\", \"se\"),\n              ordered=TRUE,\n              levels=c(\"fr\",\"so\",\"ju\",\"se\")) \nyear\n\n[1] fr so fr so fr se\nLevels: fr &lt; so &lt; ju &lt; se\n\nmode(year)   # \"numeric\"             (see below for why this is numeric)\n\n[1] \"numeric\"\n\nclass(year)  # \"ordered\" \"factor\"\n\n[1] \"ordered\" \"factor\" \n\n# data.frame\ndf = data.frame(students=c(\"joe\",\"sam\",\"sue\"),\n                test1=c(70,80,90),\n                test2=c(75,85,95),\n                honors=c(FALSE,FALSE,TRUE),\n                stringsAsFactors = FALSE)\ndf\n\n  students test1 test2 honors\n1      joe    70    75  FALSE\n2      sam    80    85  FALSE\n3      sue    90    95   TRUE\n\nmode(df)  # \"list\"\n\n[1] \"list\"\n\nclass(df) # \"data.frame\"\n\n[1] \"data.frame\"\n\n#--------------------------------------------------------------------------\n# Levels of a factor\n#\n#   - stored as a \"levels\" attribute  \n#\n#   - attr(SOME_FACTOR, \"levels\")\n#\n#   - levels(SOME_FACTOR)   # shorthand for attr(SOME_FACTOR, \"levels\")\n# \n#   - by default levels are stored in sorted order\n#     (alphabetic order, or numeric order depending on data)\n#--------------------------------------------------------------------------\n\n# The \"levels\" of a factor are stored in the \"levels\" attribute as a \"character\" vector\n# EXAMPLES\n\nfavcolor\n\n[1] red    blue   red    red    blue   yellow\nLevels: blue red yellow\n\nlevels(favcolor)  # \"blue\" \"red\" \"yellow\" - in alphabetical order\n\n[1] \"blue\"   \"red\"    \"yellow\"\n\nyear\n\n[1] fr so fr so fr se\nLevels: fr &lt; so &lt; ju &lt; se\n\nlevels(year)  # \"fr\" \"se\" \"so\" -  notice \"ju\" (i.e. junior) is missing, it wasn't in the data\n\n[1] \"fr\" \"so\" \"ju\" \"se\"\n\nsummary(year) # \"ju\" is missing - order of levels is alphabetical\n\nfr so ju se \n 3  2  0  1 \n\nplot(year)    # \"ju\" is missing - order of levels is alphabetical\n\neducation\n\n[1] 2 4 4 1 5 4\nLevels: 1 &lt; 2 &lt; 3 &lt; 4 &lt; 5\n\nlevels(education)  # in numeric order, notice 3 is missing \n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\nsummary(education) # \"3\" is missing\n\n1 2 3 4 5 \n1 1 0 3 1 \n\nplot(education)    # \"3\" is missing\n\nx = factor(c(100,2))   # numeric data\nlevels (x)             # \"2\" \"100\" - in numeric order, even though levels is a character vector\n\n[1] \"2\"   \"100\"\n\n#--------------------------------------------------------------------------\n# Setting the levels explicitly\n#\n#    If your data is missing some values or\n#    if you want the levels to be in a specific order you can explicitly specify a \n#    vector for the levels when you create the factor.\n#\n#       factor ( ... levels = SOME_VECTOR ...)\n#--------------------------------------------------------------------------\n\n# remember that for year, there were no juniors so \"ju\" didn't appear\n# in either the summary or in the plot.\n#\n# Also the years are not in the correct order \n# notice that \"se\" (i.e. senior) is before \"so\" (i.e. sophomore)\n# the order should be \"fr\" \"so\" \"ju\" \"se\"\nyear\n\n[1] fr so fr so fr se\nLevels: fr &lt; so &lt; ju &lt; se\n\nsummary(year)\n\nfr so ju se \n 3  2  0  1 \n\nplot(year)\n\n# Recreate the year variable to ensure that ALL \"levels\" are included\n# and that order of levels is as desired.\nyear &lt;-     factor(c(\"fr\", \"so\", \"fr\", \"so\", \"fr\", \"se\"),\n                   levels=c(\"fr\",\"so\",\"ju\",\"se\"))              # ordinal data (use a factor in R)\n\nplot(year)   # now data is in order and ju shows a zero total\nsummary(year)   # now data is in order and ju shows a zero total\n\nfr so ju se \n 3  2  0  1 \n\neducation &lt;- factor(c( 2, 4, 4, 1, 5, 4), \n                    levels=c(1,2,3,4,5))         # nominal data (use a factor in R)\n\n# similar approach for education\nplot(education)\nsummary(education)\n\n1 2 3 4 5 \n1 1 0 3 1 \n\n# A factor ...\n#  1. ... is a \"numeric\" vector (yes \"numeric\" not \"character\" - keep reading)\n#  2. ... has a \"class\" attribute with a value of \"factor\"\n#  3. ... has a \"levels\" attribute that is a character vector with the names\n#         of the levels with a value of \"factor\"\nyear\n\n[1] fr so fr so fr se\nLevels: fr so ju se\n\nattributes(year)\n\n$levels\n[1] \"fr\" \"so\" \"ju\" \"se\"\n\n$class\n[1] \"factor\"\n\nclass(year)\n\n[1] \"factor\"\n\neducation\n\n[1] 2 4 4 1 5 4\nLevels: 1 2 3 4 5\n\nattributes(education)\n\n$levels\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\n$class\n[1] \"factor\"\n\nclass(year)\n\n[1] \"factor\"\n\n# Turn year into a character vector\ncharYear &lt;- as.character(year)\ncharYear\n\n[1] \"fr\" \"so\" \"fr\" \"so\" \"fr\" \"se\"\n\nyear\n\n[1] fr so fr so fr se\nLevels: fr so ju se\n\nis.factor(charYear)\n\n[1] FALSE\n\nis.factor(year)\n\n[1] TRUE\n\n# Turn a character vector into a factor with the factor function\ncharYear\n\n[1] \"fr\" \"so\" \"fr\" \"so\" \"fr\" \"se\"\n\nfacYear &lt;- factor(charYear, levels=c(\"fr\",\"so\",\"ju\",\"se\"), ordered=TRUE)\nfacYear\n\n[1] fr so fr so fr se\nLevels: fr &lt; so &lt; ju &lt; se\n\n#-------------------------------------------------------------------------\n# A factor is actually a \"numeric\" vector!!!  (yes, numeric, not character)\n#\n# R stores the data for a factor in a numeric vector as it is often more \n# efficient for the computer to process numbers than it is to process\n# character data.\n#\n# See below for details ...\n#-------------------------------------------------------------------------\n\nrm(list = ls())   # start over \n\n# when R creates a factor it does the following:\n#  It uses the numbers 1,2,3, etc.\n#  to represent the first,second,third, etc levels\n#\n#  R stores this data in a numeric vector and stores the names\n#  of the levels in the levels attributes\n#\n#  R creates a class attribute with the value of \"factor\"\n\ncolors &lt;- factor(c(\"violet\", \"red\", \"green\", \"red\", \"green\", \"violet\", \"red\", \"red\"))\ncolors\n\n[1] violet red    green  red    green  violet red    red   \nLevels: green red violet\n\nis.factor(colors)  # TRUE\n\n[1] TRUE\n\nis.character(colors) # FALSE\n\n[1] FALSE\n\nis.numeric(colors)   # FALSE\n\n[1] FALSE\n\nattributes(colors)  # all of the attributes -i.e. class and levels\n\n$levels\n[1] \"green\"  \"red\"    \"violet\"\n\n$class\n[1] \"factor\"\n\n# To see the actual data you can remove the class attribute\nattr(colors, \"class\") = NULL  # this also works: class(colors) = NULL    \n\nattributes(colors)   # class is gone\n\n$levels\n[1] \"green\"  \"red\"    \"violet\"\n\n# Since we removed the class attribute, \n# colors is no longer a factor - it is just a \"numeric\" vector (yes, \"numeric\" - keep reading)\n# that has some attributes.\ncolors\n\n[1] 3 2 1 2 1 3 2 2\nattr(,\"levels\")\n[1] \"green\"  \"red\"    \"violet\"\n\nis.factor(colors)  # FALSE\n\n[1] FALSE\n\nis.character(colors) # FALSE\n\n[1] FALSE\n\nis.numeric(colors)   # TRUE\n\n[1] TRUE\n\n#----------------------------------------------------------------------------\n# unclass( SOME_OBJECT )\n#   - returns SOME_OBJECT but without the class attribute\n#----------------------------------------------------------------------------\nrm(list = ls())   # start over \n\n# create a factor\ncolors &lt;- factor(c(\"violet\", \"red\", \"green\", \"red\", \"green\", \"violet\", \"red\", \"red\"))\ncolors\n\n[1] violet red    green  red    green  violet red    red   \nLevels: green red violet\n\n# unclass(colors) returns colors without the class attribute\nunclass(colors)\n\n[1] 3 2 1 2 1 3 2 2\nattr(,\"levels\")\n[1] \"green\"  \"red\"    \"violet\"\n\n# the original variable didn't change\ncolors\n\n[1] violet red    green  red    green  violet red    red   \nLevels: green red violet\n\n# REMEMBER - if you want to change the original variable, you must assign to it!\ncolors = unclass(colors)\n\ncolors\n\n[1] 3 2 1 2 1 3 2 2\nattr(,\"levels\")\n[1] \"green\"  \"red\"    \"violet\"\n\nis.factor(colors)  # FALSE\n\n[1] FALSE\n\nis.numeric(colors) # TRUE\n\n[1] TRUE\n\n#-------------------------------------------------------------------------\n# WARNING: as.numeric will convert a factor into the underlying numeric\n#          values of the levels\n#\n#          Data whose value is equal to the 1st \"level\" is recorded as 1\n#          Data whose value is equal to the 2nd \"level\" is recorded as 2\n#          etc.\n#          (see example below)\n#-------------------------------------------------------------------------\n\nrm(list = ls())   # start over \n\ncolors &lt;- factor(c(\"violet\", \"red\", \"green\", \"red\", \"green\", \"violet\", \"red\", \"red\"))\ncolors\n\n[1] violet red    green  red    green  violet red    red   \nLevels: green red violet\n\nattributes(colors)\n\n$levels\n[1] \"green\"  \"red\"    \"violet\"\n\n$class\n[1] \"factor\"\n\nas.numeric(colors)   # 3 2 1 2 1 3 2 2   (just the numeric values - 1st level is 1, 2nd level is 2, etc)\n\n[1] 3 2 1 2 1 3 2 2\n\n# REMOVE THE class attribute - the data will no longer be a factor\n# You will see the underlying numeric values of the data.\n\nattr(colors, \"class\") &lt;- NULL   # remove the class attribute\n\nattributes(colors)\n\n$levels\n[1] \"green\"  \"red\"    \"violet\"\n\ncolors # display the underlying data without the special treatment of being a factor\n\n[1] 3 2 1 2 1 3 2 2\nattr(,\"levels\")\n[1] \"green\"  \"red\"    \"violet\"\n\n# WARNING ...\n# as.numeric will not work as you expect in this example:\n\nareaCodes = factor(c(718, 212, 212, 718, 516))\nareaCodes\n\n[1] 718 212 212 718 516\nLevels: 212 516 718\n\nas.numeric(areaCodes) # 3 1 1 3 2   ... not what you'd expect\n\n[1] 3 1 1 3 2\n\nas.character(areaCodes) # \"718\" \"212\" \"212\" \"718\" \"516\"\n\n[1] \"718\" \"212\" \"212\" \"718\" \"516\"\n\n# You can solve the probalem in the following way:\n\nas.numeric(as.character(areaCodes)) # 718 212 212 718 516\n\n[1] 718 212 212 718 516",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>factors</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html",
    "href": "000850-introToDataframes-v0019-afterBeren.html",
    "title": "30  dataframes",
    "section": "",
    "text": "30.1 Example of a data.frame\n# Example of a dataframe\n#\n# You can create a dataframe with the data.frame function\n# (NOTICE the \".\" in the name data.frame. Don't forget to type it.\n#  In R, a period is simply a regular character that can be used\n#  in the name of a variable or function. It is often used to separate\n#  words such as: a.long.variable.name = 100)\n\ngradebook = data.frame(student =      c(\"joe\", \"sue\", \"sam\", \"anne\", \"bob\", \"carla\", \"dana\", \"david\"),\n                       test1 =        c(70,     80,    90,    75,    85,    95,      100,    60),\n                       test2 =        c(81,     77,    88,    87,    91,    92,      99,     73),\n                       year  = factor(c(\"fr\",   \"fr\",  \"so\",  \"so\",  \"fr\",  \"se\",    \"so\",   \"so\"), \n                                      ordered=TRUE, levels=c(\"fr\",\"so\",\"ju\",\"se\")),\n                       honors =       c(FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,    TRUE,   FALSE),\n                         stringsAsFactors = FALSE)\n                       \ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\n# The data.frame function takes a series of vectors as arguments. The vectors\n# must all be the same length. (remember that a factor is a vector too).\n#\n# The vectors become the columns of the dataframe.\n# The names of the arguments become the names of the columns in the dataframe.\n#\n# There are other arguments to the data.frame function that you may \n# be interested in exploring when you get more adept at using dataframes.\n#\n# For now, the other argument we will look at is stringsAsFactors. \n# We will discuss stringsAsFactors in more detail later. For now, we will simply set \n#    stringsAsFactors=TRUE\n# Later, we will explain what stringsAsFactors=TRUE does and what \n# it means if you set stringsAsFactors=FALSE or leave out stringsAsFactors\n# entirely.\n\n?data.frame\n\nstarting httpd help server ... done\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html#anatomy-of-a-data.frame-its-a-list-of-parallel-vectors",
    "href": "000850-introToDataframes-v0019-afterBeren.html#anatomy-of-a-data.frame-its-a-list-of-parallel-vectors",
    "title": "30  dataframes",
    "section": "30.2 Anatomy of a data.frame (it’s a list of parallel vectors … )",
    "text": "30.2 Anatomy of a data.frame (it’s a list of parallel vectors … )\n\n#-----------------------------------------------------------------------\n# \"Under the covers\", a dataframe is actually a list of vectors.\n# All of the vectors in the list must have the same length.\n# R arranges the data into rows (horizontal) and columns (vertical).\n# The vectors are the columns.\n#\n# R arranges the vectors as the columns and displays them next to \n# each other to make the dataframe appear as a \"grid\" with rows and columns.\n# Because each column in actually a vector - each column in the dataframe\n# must be a single class (eg. all data in a single column must be \"numeric\", \"logical\"\n# \"character\", \"factor\", etc.) There is NO such requirement for the rows\n# of a dataframe.\n#\n# A dataframe looks different than a simple list and has a few added\n# features (which we'll explore later below). This is because R recognizes\n# that the list should treated as a dataframe because the class attributre of\n# the list is set to \"data.frame\". This is done by the data.frame function\n# which is used to create the dataframe. There are also a couple of other \n# attributes that are attached to the list. (see below)\n#\n# The following attributes are attached to every dataframe:\n#\n#      attribute name    attribute value\n#      --------------    ---------------\n#      class             \"data.frame\"\n#\n#      names             character vector with names of the columns\n#                        note that a plain list can also have a names attribute\n#                        with names of the entries in the list.\n#\n#      row.names         a character vector with names of the rows.\n#                        By default the row names are simply numbers.\n#                        You can change the row names to anything you like\n#                        (If you recall, we also did this with matrices.)\n# \n# You can access these attributes by using the following functions\n# (see details in the code below)\n#\n#    attr(SOME_DATAFRAME, ATTRIBUTE_NAME)\n#    attributes(SOME_DATAFRAME)\n#    names(SOME_DATAFRAME)\n#    colnames(SOME_DATAFRAME)\n#    rownames(SOME_DATAFRAME)\n#    row.names(SOME_DATAFRAME)\n#------------------------------------------------------------------------------\n\nmode(gradebook) # \"list\"\n\n[1] \"list\"\n\nclass(gradebook) # \"data.frame\"\n\n[1] \"data.frame\"\n\n# There are a few attributes on the list that make R interpret how to display\n# and use the dataframe. \n\nattributes(gradebook)  # names   class   row.names\n\n$names\n[1] \"student\" \"test1\"   \"test2\"   \"year\"    \"honors\" \n\n$class\n[1] \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5 6 7 8\n\n# The class attribute\n# Any of the following commands will display the contents of the \"class\" attribute.\n\nclass(gradebook)            # \"data.frame\"\n\n[1] \"data.frame\"\n\nattr(gradebook, \"class\")    # same thing\n\n[1] \"data.frame\"\n\nattributes(gradebook)$class # same thing\n\n[1] \"data.frame\"\n\n# The names attribute - contains the names of the columns\n# Any of the following commands will display the contents of the \"names\" attribute.\n\nnames(gradebook)            # \"student\" \"test1\"   \"test2\"   \"year\"    \"honors\" \n\n[1] \"student\" \"test1\"   \"test2\"   \"year\"    \"honors\" \n\ncolnames(gradebook)         # same thing\n\n[1] \"student\" \"test1\"   \"test2\"   \"year\"    \"honors\" \n\nattr(gradebook, \"names\")    # same thing\n\n[1] \"student\" \"test1\"   \"test2\"   \"year\"    \"honors\" \n\nattributes(gradebook)$names # same thing\n\n[1] \"student\" \"test1\"   \"test2\"   \"year\"    \"honors\" \n\n# The row.names attribute - contains the names of the rows\n# Any of the following commands will display the contents of the \"row.names\" attribute.\n#\n# NOTE that there is both a \"row.names\" and a \"rownames\" function.\n# They return the same value. If you're curious about why both exist and which\n# is preferable to use (ie. row.names) see the link below. \n#\n# ALSO NOTE, that while there is a row.names function, there is no\n# col.names function, only colnames.\n#\n# https://stackoverflow.com/questions/38466276/why-is-row-names-preferred-over-rownames/39179031\n\nrow.names(gradebook)         # (as a character vector) - \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\"\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\"\n\nrownames(gradebook)          # same thing (as a character vector)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\"\n\nattr(gradebook, \"row.names\")    # actual value of the row.names attribute (by default these are integers)\n\n[1] 1 2 3 4 5 6 7 8\n\nattributes(gradebook)$row.names # same thing\n\n[1] 1 2 3 4 5 6 7 8",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html#some-useful-functions-nrow-ncol-head-tail-class-length-etc.",
    "href": "000850-introToDataframes-v0019-afterBeren.html#some-useful-functions-nrow-ncol-head-tail-class-length-etc.",
    "title": "30  dataframes",
    "section": "30.3 Some useful functions: nrow, ncol, head, tail, class, length, etc.",
    "text": "30.3 Some useful functions: nrow, ncol, head, tail, class, length, etc.\n\n#-----------------------------------------------------------------------------\n# Other functions you can use with dataframes\n#-----------------------------------------------------------------------------\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\nnrow(gradebook)   # number of rows\n\n[1] 8\n\nncol(gradebook)   # number of columns\n\n[1] 5\n\nhead(gradebook, 2)  # show just the first 2 rows (or any other number)\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n\ntail(gradebook, 2)  # show just the last 2 rows (or any other number)\n\n  student test1 test2 year honors\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\n#-----------------------------------------------------------------------------\n# You can see that the dataframe is actually a list by removing the \n# class attribute.\n#\n# This will stop the list from being a dataframe. \n# When it is displayed it will look just like a plain list.\n#-----------------------------------------------------------------------------\n\ngradebook         # displayed in rows and columns\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\nclass(gradebook)  # \"data.frame\"\n\n[1] \"data.frame\"\n\n# either of the following lines will do the same thing ..\n\ngradebook = unclass(gradebook)  # remove the class attribute\nattr(gradebook, \"class\") = NULL # this does the same thing\n\nattributes(gradebook)  # \"class\" is gone!\n\n$names\n[1] \"student\" \"test1\"   \"test2\"   \"year\"    \"honors\" \n\n$row.names\n[1] 1 2 3 4 5 6 7 8\n\n# Now you can see that the gradebook is no longer a dataframe\ngradebook        # displayed as a regular \"list\"\n\n$student\n[1] \"joe\"   \"sue\"   \"sam\"   \"anne\"  \"bob\"   \"carla\" \"dana\"  \"david\"\n\n$test1\n[1]  70  80  90  75  85  95 100  60\n\n$test2\n[1] 81 77 88 87 91 92 99 73\n\n$year\n[1] fr fr so so fr se so so\nLevels: fr &lt; so &lt; ju &lt; se\n\n$honors\n[1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE\n\nattr(,\"row.names\")\n[1] 1 2 3 4 5 6 7 8\n\nclass(gradebook) # \"list\"\n\n[1] \"list\"\n\n# Let's put back the class attribute and we'll see that it once again\n# is a dataframe\nclass(gradebook) = \"data.frame\"\ngradebook        # once again it is a dataframe\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\nclass(gradebook) # \"data.frame\"\n\n[1] \"data.frame\"\n\n############################################################################\n# The \"list\" features of a dataframe.\n#\n# Because a dataframe is a list, all the features of lists\n# also work for dataframes. The following all work because a dataframe\n# is a list.\n############################################################################\n\nlength(gradebook)    # the number of columns - same as ncol(gradebook)\n\n[1] 5\n\nncol(gradebook)      # same thing\n\n[1] 5\n\n#..............................................................................\n# unlist - i.e. retrieve all the values in the dataframe in one large named vector\n#..............................................................................\nvec = unlist(gradebook)  # put the entire contents of the dataframe in a single named vector\nvec\n\nstudent1 student2 student3 student4 student5 student6 student7 student8 \n   \"joe\"    \"sue\"    \"sam\"   \"anne\"    \"bob\"  \"carla\"   \"dana\"  \"david\" \n  test11   test12   test13   test14   test15   test16   test17   test18 \n    \"70\"     \"80\"     \"90\"     \"75\"     \"85\"     \"95\"    \"100\"     \"60\" \n  test21   test22   test23   test24   test25   test26   test27   test28 \n    \"81\"     \"77\"     \"88\"     \"87\"     \"91\"     \"92\"     \"99\"     \"73\" \n   year1    year2    year3    year4    year5    year6    year7    year8 \n     \"1\"      \"1\"      \"2\"      \"2\"      \"1\"      \"4\"      \"2\"      \"2\" \n honors1  honors2  honors3  honors4  honors5  honors6  honors7  honors8 \n \"FALSE\"  \"FALSE\"  \"FALSE\"  \"FALSE\"  \"FALSE\"   \"TRUE\"   \"TRUE\"  \"FALSE\" \n\n#. . . . . . . . . . . . . \n# using the unlisted data\n#. . . . . . . . . . . . . \nmode(vec)   # \"character\" - the exact mode will depend on the implicit conversion rules\n\n[1] \"character\"\n\nclass(vec)  # \"character\" \n\n[1] \"character\"\n\nnames(vec)  # just the names of the named vector\n\n [1] \"student1\" \"student2\" \"student3\" \"student4\" \"student5\" \"student6\"\n [7] \"student7\" \"student8\" \"test11\"   \"test12\"   \"test13\"   \"test14\"  \n[13] \"test15\"   \"test16\"   \"test17\"   \"test18\"   \"test21\"   \"test22\"  \n[19] \"test23\"   \"test24\"   \"test25\"   \"test26\"   \"test27\"   \"test28\"  \n[25] \"year1\"    \"year2\"    \"year3\"    \"year4\"    \"year5\"    \"year6\"   \n[31] \"year7\"    \"year8\"    \"honors1\"  \"honors2\"  \"honors3\"  \"honors4\" \n[37] \"honors5\"  \"honors6\"  \"honors7\"  \"honors8\" \n\nnames(vec) = NULL # get rid of the names\n\nvec               # just the data without the names\n\n [1] \"joe\"   \"sue\"   \"sam\"   \"anne\"  \"bob\"   \"carla\" \"dana\"  \"david\" \"70\"   \n[10] \"80\"    \"90\"    \"75\"    \"85\"    \"95\"    \"100\"   \"60\"    \"81\"    \"77\"   \n[19] \"88\"    \"87\"    \"91\"    \"92\"    \"99\"    \"73\"    \"1\"     \"1\"     \"2\"    \n[28] \"2\"     \"1\"     \"4\"     \"2\"     \"2\"     \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[37] \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"\n\n#............................................................\n# Retrieve specific columns with [single-bracket] notation.\n# This will return a smaller dataframe (ie. list) with just those columns.\n#\n#     ** This all works because a dataframe IS A LIST **\n#............................................................\n\n# single brackets (with one vector inside the [brackets])\n# will return just the columns that you request.\n# You can use any of the methods to request the columns that you can use \n# with a named list, i.e. a vector that contains\n#   - position numbers\n#   - negative position numbers\n#   - TRUE FALSE values\n#   - names of items in the list (i.e. the column names)\n\ngradebook[1]  # a dataframe that contains just the 1st column\n\n  student\n1     joe\n2     sue\n3     sam\n4    anne\n5     bob\n6   carla\n7    dana\n8   david\n\ngradebook[c(1,3)]   # items 1 and 3 from list - i.e. 1st and 3rd columns\n\n  student test2\n1     joe    81\n2     sue    77\n3     sam    88\n4    anne    87\n5     bob    91\n6   carla    92\n7    dana    99\n8   david    73\n\ngradebook[c(-2,-4,-5)]  # everything EXCEPT for columns 2,4,5 - i.e. same result\n\n  student test2\n1     joe    81\n2     sue    77\n3     sam    88\n4    anne    87\n5     bob    91\n6   carla    92\n7    dana    99\n8   david    73\n\ngradebook[c(TRUE,FALSE,TRUE,FALSE,FALSE)] # same result\n\n  student test2\n1     joe    81\n2     sue    77\n3     sam    88\n4    anne    87\n5     bob    91\n6   carla    92\n7    dana    99\n8   david    73\n\ngradebook[c(\"student\",\"test2\")] # items named \"student\" and \"test2\" from the list \n\n  student test2\n1     joe    81\n2     sue    77\n3     sam    88\n4    anne    87\n5     bob    91\n6   carla    92\n7    dana    99\n8   david    73\n\n# The recycling rule also works for indexing with logical vectors\ngradebook[c(TRUE,FALSE)]  # every other column starting with the 1st\n\n  student test2 honors\n1     joe    81  FALSE\n2     sue    77  FALSE\n3     sam    88  FALSE\n4    anne    87  FALSE\n5     bob    91  FALSE\n6   carla    92   TRUE\n7    dana    99   TRUE\n8   david    73  FALSE\n\n#.............................................................................\n# Retrieve specific columns with $dollar-sign-notation.\n# This returns a VECTOR (i.e. the actual contents of what's in the list)\n#\n#     ** This all works because a dataframe IS A LIST **\n#.............................................................................\n\ngradebook$student        # \"joe\"   \"sue\"   \"sam\"   \"anne\"  \"bob\"   \"carla\" \"dana\"  \"david\"\n\n[1] \"joe\"   \"sue\"   \"sam\"   \"anne\"  \"bob\"   \"carla\" \"dana\"  \"david\"\n\nclass(gradebook$student) # \"character\"   ( NOT \"data.frame\" )\n\n[1] \"character\"\n\ngradebook$test1        # 70  80  90  75  85  95 100  60\n\n[1]  70  80  90  75  85  95 100  60\n\nclass(gradebook$test1) # \"numeric\"   ( NOT \"data.frame\" )\n\n[1] \"numeric\"\n\n#.............................................................................\n# Retrieve specific columns with [[double-bracket]] notation.\n# Same as using $dollar-sign-notation.\n# This returns a VECTOR (i.e. the actual contents of what's in the list)\n#\n#     ** This all works because a dataframe IS A LIST **\n#.............................................................................\n\ngradebook[[1]] # Just 1st column AS A VECTOR, (same as gradebook$student) - \"joe\" \"sue\" etc ...\n\n[1] \"joe\"   \"sue\"   \"sam\"   \"anne\"  \"bob\"   \"carla\" \"dana\"  \"david\"\n\ngradebook[[2]] # Just 2nd column AS A VECTOR, (same as gradebook$test1) - 70 80 90 etc ...\n\n[1]  70  80  90  75  85  95 100  60",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html#since-a-dataframe-is-a-list-of-vectors-you-can-do-all-the-following-using-list-concepts",
    "href": "000850-introToDataframes-v0019-afterBeren.html#since-a-dataframe-is-a-list-of-vectors-you-can-do-all-the-following-using-list-concepts",
    "title": "30  dataframes",
    "section": "30.4 Since a dataframe is a list of vectors, you can do all the following using list concepts …",
    "text": "30.4 Since a dataframe is a list of vectors, you can do all the following using list concepts …\n\n##############################################################################.\n# A dataframe is a \"list\" of parallel vectors ...\n#\n# Since a dataframe is a \"list\", any technique that works with\n# lists also works with dataframes. If you understand how to use lists\n# then you already understand how to use many of the features of dataframes\n# since **a dataframe IS A LIST. The following topics do not introduce\n# any new concepts. The following topics simply show how to apply\n# your knowledge of mainipulating lists directly to dataframes.\n##############################################################################.\n\n\nUsing lapply with a dataframe\n\n#.............................................................................\n# You can use lapply with a dataframe just as you'd use lapply with a simple list.\n#\n# lapply will apply a function to each column of the gradebook (i.e. to each item in the list).\n# lapply returns a list of the results of running the function on each different column.\n#\n#     ** This all works because a dataframe IS A LIST **\n#.............................................................................\n\nlapply(gradebook, mode)  # a list of the mode of each column\n\n$student\n[1] \"character\"\n\n$test1\n[1] \"numeric\"\n\n$test2\n[1] \"numeric\"\n\n$year\n[1] \"numeric\"\n\n$honors\n[1] \"logical\"\n\nlapply(gradebook, class)  # a list of the class of each column (notice that year is a factor)\n\n$student\n[1] \"character\"\n\n$test1\n[1] \"numeric\"\n\n$test2\n[1] \"numeric\"\n\n$year\n[1] \"ordered\" \"factor\" \n\n$honors\n[1] \"logical\"\n\nlapply(gradebook, max)    # a list of the max value from each column\n\n$student\n[1] \"sue\"\n\n$test1\n[1] 100\n\n$test2\n[1] 99\n\n$year\n[1] se\nLevels: fr &lt; so &lt; ju &lt; se\n\n$honors\n[1] 1\n\nlapply(gradebook, summary) # a list with the results of the summary function for each column\n\n$student\n   Length     Class      Mode \n        8 character character \n\n$test1\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  60.00   73.75   82.50   81.88   91.25  100.00 \n\n$test2\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  73.00   80.00   87.50   86.00   91.25   99.00 \n\n$year\nfr so ju se \n 3  4  0  1 \n\n$honors\n   Mode   FALSE    TRUE \nlogical       6       2 \n\n# You can also call summary directly on the dataframe\n#\n# Remember that summary is a generic function that has different versions (i.e. methods)\n# for different classes of data. \n\nsummary(gradebook)             # This automatically calls summary.data.frame(gradebook)\n\n   student              test1            test2       year     honors       \n Length:8           Min.   : 60.00   Min.   :73.00   fr:3   Mode :logical  \n Class :character   1st Qu.: 73.75   1st Qu.:80.00   so:4   FALSE:6        \n Mode  :character   Median : 82.50   Median :87.50   ju:0   TRUE :2        \n                    Mean   : 81.88   Mean   :86.00   se:1                  \n                    3rd Qu.: 91.25   3rd Qu.:91.25                         \n                    Max.   :100.00   Max.   :99.00                         \n\nsummary.data.frame(gradebook)  # REVIEW - same thing - this is not necessary - just call summary(gradebook)\n\n   student              test1            test2       year     honors       \n Length:8           Min.   : 60.00   Min.   :73.00   fr:3   Mode :logical  \n Class :character   1st Qu.: 73.75   1st Qu.:80.00   so:4   FALSE:6        \n Mode  :character   Median : 82.50   Median :87.50   ju:0   TRUE :2        \n                    Mean   : 81.88   Mean   :86.00   se:1                  \n                    3rd Qu.: 91.25   3rd Qu.:91.25                         \n                    Max.   :100.00   Max.   :99.00                         \n\n# The mean function will not work for character or factor columns\n# Get a copy of the gradebook with just the test columns.\ngradebook_justTests = gradebook[ colnames(gradebook) == \"test1\" | colnames(gradebook) == \"test2\"]\ngradebook_justTests\n\n  test1 test2\n1    70    81\n2    80    77\n3    90    88\n4    75    87\n5    85    91\n6    95    92\n7   100    99\n8    60    73\n\n# another way that assumes you know the positions of the columns\ngradebook_justTests = gradebook[c(2,3)]\ngradebook_justTests\n\n  test1 test2\n1    70    81\n2    80    77\n3    90    88\n4    75    87\n5    85    91\n6    95    92\n7   100    99\n8    60    73\n\nlapply ( gradebook_justTests, mean)\n\n$test1\n[1] 81.875\n\n$test2\n[1] 86\n\n# or all in one shot\nlapply(gradebook[c(2,3)], mean)\n\n$test1\n[1] 81.875\n\n$test2\n[1] 86\n\n#. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n# REMEMBER - You can also use custom functions with lapply.\n#. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n\n# return largest two values in a vector\nlargestTwo = function(vec){\n  sort(vec)[c(length(vec)-1, length(vec))]\n}\nlapply(gradebook[c(2,3)], largestTwo)   # highest two grades on both tests\n\n$test1\n[1]  95 100\n\n$test2\n[1] 92 99\n\n# REMEMBER - You can also do it with an anonymous function\nlapply(gradebook[c(2,3)], function(col) sort(col)[c(length(col)-1, length(col))] )\n\n$test1\n[1]  95 100\n\n$test2\n[1] 92 99\n\n\n\n\nRemoving columns from a dataframe (same as removing items from a list)\n\n#............................................................\n# Remove columns from a dataframe\n#............................................................\n# You can remove columns from a dataframe by setting the column value to NULL\n# (just as you can remove an item from a list by setting the value to NULL) by\n# using $dollar-sign-notation \n# or    [single-bracket-notation]\n# or    [[double-bracket-notation]]\n#\n#     ** This all works because a dataframe IS A LIST **\n#............................................................\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\n# any of the methods to refer to columns works\n\ngradebook[[4]]= NULL # remove the 4th column (i.e. the year)\ngradebook\n\n  student test1 test2 honors\n1     joe    70    81  FALSE\n2     sue    80    77  FALSE\n3     sam    90    88  FALSE\n4    anne    75    87  FALSE\n5     bob    85    91  FALSE\n6   carla    95    92   TRUE\n7    dana   100    99   TRUE\n8   david    60    73  FALSE\n\ngradebook$honors = NULL   # remove the honors column\ngradebook\n\n  student test1 test2\n1     joe    70    81\n2     sue    80    77\n3     sam    90    88\n4    anne    75    87\n5     bob    85    91\n6   carla    95    92\n7    dana   100    99\n8   david    60    73\n\ngradebook[c(2,3)] = NULL  # remove the 2nd and 3rd columns\ngradebook\n\n  student\n1     joe\n2     sue\n3     sam\n4    anne\n5     bob\n6   carla\n7    dana\n8   david\n\n# let's recreate the gradebook\ngradebook = data.frame(student =      c(\"joe\", \"sue\", \"sam\", \"anne\", \"bob\", \"carla\", \"dana\", \"david\"),\n                       test1 =        c(70,     80,    90,    75,    85,    95,      100,    60),\n                       test2 =        c(81,     77,    88,    87,    91,    92,      99,     73),\n                       year  = factor(c(\"fr\",   \"fr\",  \"so\",  \"so\",  \"fr\",  \"se\",    \"so\",   \"so\"), \n                                      ordered=TRUE, levels=c(\"fr\",\"so\",\"ju\",\"se\")),\n                       honors =       c(FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,    TRUE,   FALSE),\n                       stringsAsFactors = FALSE)\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\n\n\n\nAdding new columns to an already existing dataframe (same as adding vectors to a list)\n\n#............................................................\n# Add columns to a dataframe\n#............................................................\n# You can add columns to a dataframe by\n# using $dollar-sign-notation \n# or    [single-bracket-notation]\n# or    [[double-bracket-notation]]\n#\n#     ** This all works because a dataframe IS A LIST **\n#............................................................\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\nncol(gradebook)\n\n[1] 5\n\n# Add test3 as c(70,80,90,60,70,80,90,100)\n# using $dollar-sign-notation\n\ngradebook$test3 = c(70,80,90,60,70,80,90,100)\nncol(gradebook)  # we added a column\n\n[1] 6\n\ngradebook        # the new column is there and it is named \"test3\"\n\n  student test1 test2 year honors test3\n1     joe    70    81   fr  FALSE    70\n2     sue    80    77   fr  FALSE    80\n3     sam    90    88   so  FALSE    90\n4    anne    75    87   so  FALSE    60\n5     bob    85    91   fr  FALSE    70\n6   carla    95    92   se   TRUE    80\n7    dana   100    99   so   TRUE    90\n8   david    60    73   so  FALSE   100\n\n# Add test4\n# using double bracket notation\n\ngradebook[[7]] = c(74,84,94,64,74,84,94,99)\nncol(gradebook)  # we added a column\n\n[1] 7\n\ngradebook        # name of new column is \"V7\" - not exactly what we want\n\n  student test1 test2 year honors test3 V7\n1     joe    70    81   fr  FALSE    70 74\n2     sue    80    77   fr  FALSE    80 84\n3     sam    90    88   so  FALSE    90 94\n4    anne    75    87   so  FALSE    60 64\n5     bob    85    91   fr  FALSE    70 74\n6   carla    95    92   se   TRUE    80 84\n7    dana   100    99   so   TRUE    90 94\n8   david    60    73   so  FALSE   100 99\n\nnames(gradebook)[7] = \"test4\"  # change the name to test4\ngradebook\n\n  student test1 test2 year honors test3 test4\n1     joe    70    81   fr  FALSE    70    74\n2     sue    80    77   fr  FALSE    80    84\n3     sam    90    88   so  FALSE    90    94\n4    anne    75    87   so  FALSE    60    64\n5     bob    85    91   fr  FALSE    70    74\n6   carla    95    92   se   TRUE    80    84\n7    dana   100    99   so   TRUE    90    94\n8   david    60    73   so  FALSE   100    99\n\n# Add test5\n# using single bracket notation\n\ngradebook[8] = c(75, 85,95,65,75,85,95,98)\nncol(gradebook)\n\n[1] 8\n\ngradebook\n\n  student test1 test2 year honors test3 test4 V8\n1     joe    70    81   fr  FALSE    70    74 75\n2     sue    80    77   fr  FALSE    80    84 85\n3     sam    90    88   so  FALSE    90    94 95\n4    anne    75    87   so  FALSE    60    64 65\n5     bob    85    91   fr  FALSE    70    74 75\n6   carla    95    92   se   TRUE    80    84 85\n7    dana   100    99   so   TRUE    90    94 95\n8   david    60    73   so  FALSE   100    99 98\n\n# change the name of the last column\nnames(gradebook)[ncol(gradebook)] = \"test5\" # change the name of the last column\ngradebook\n\n  student test1 test2 year honors test3 test4 test5\n1     joe    70    81   fr  FALSE    70    74    75\n2     sue    80    77   fr  FALSE    80    84    85\n3     sam    90    88   so  FALSE    90    94    95\n4    anne    75    87   so  FALSE    60    64    65\n5     bob    85    91   fr  FALSE    70    74    75\n6   carla    95    92   se   TRUE    80    84    85\n7    dana   100    99   so   TRUE    90    94    95\n8   david    60    73   so  FALSE   100    99    98",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html#replace-columns-with-other-columns-same-as-replacing-items-in-a-list-with-other-items",
    "href": "000850-introToDataframes-v0019-afterBeren.html#replace-columns-with-other-columns-same-as-replacing-items-in-a-list-with-other-items",
    "title": "30  dataframes",
    "section": "30.5 Replace columns with other columns (same as replacing items in a list with other items)",
    "text": "30.5 Replace columns with other columns (same as replacing items in a list with other items)\n\n#............................................................\n# Replace columns in a dataframe\n#\n# You can replace a column in a dataframe with a different column (ie. vector)\n# by using $dollar-sign-notation\n# or using [[double-bracket-notation]]\n#\n#     ** This all works because a dataframe IS A LIST **\n#............................................................\n\n# replace the test5 column with lastName\n#\n# you can use [single-bracket-notation]\n# or [[double-bracket-notation]]\n# or $dollar-sign-notation\n\ngradebook\n\n  student test1 test2 year honors test3 test4 test5\n1     joe    70    81   fr  FALSE    70    74    75\n2     sue    80    77   fr  FALSE    80    84    85\n3     sam    90    88   so  FALSE    90    94    95\n4    anne    75    87   so  FALSE    60    64    65\n5     bob    85    91   fr  FALSE    70    74    75\n6   carla    95    92   se   TRUE    80    84    85\n7    dana   100    99   so   TRUE    90    94    95\n8   david    60    73   so  FALSE   100    99    98\n\nncol(gradebook) \n\n[1] 8\n\ngradebook[8] = c(\"schwartz\", \"rosen\", \"aames\", \"chill\", \"jones\", \"fox\", \"katz\", \"cohen\")\n\n# The following alternatives would have accomplished the same thing as \n# the line of code above.\n#\n#    # [[double-brackets]]\n#    gradebook[[8]] = c(\"schwartz\", \"rosen\", \"aames\", \"chill\", \"jones\", \"fox\", \"katz\", \"cohen\")\n#\n#    # $dollar-sign-notation\n#    gradebook$test5 = c(\"schwartz\", \"rosen\", \"aames\", \"chill\", \"jones\", \"fox\", \"katz\", \"cohen\")\n\ngradebook  # the column name was not changed. It is still \"test5\"\n\n  student test1 test2 year honors test3 test4    test5\n1     joe    70    81   fr  FALSE    70    74 schwartz\n2     sue    80    77   fr  FALSE    80    84    rosen\n3     sam    90    88   so  FALSE    90    94    aames\n4    anne    75    87   so  FALSE    60    64    chill\n5     bob    85    91   fr  FALSE    70    74    jones\n6   carla    95    92   se   TRUE    80    84      fox\n7    dana   100    99   so   TRUE    90    94     katz\n8   david    60    73   so  FALSE   100    99    cohen\n\nnames(gradebook)[8] = \"lastName\" # change the name of the 8th column\ngradebook\n\n  student test1 test2 year honors test3 test4 lastName\n1     joe    70    81   fr  FALSE    70    74 schwartz\n2     sue    80    77   fr  FALSE    80    84    rosen\n3     sam    90    88   so  FALSE    90    94    aames\n4    anne    75    87   so  FALSE    60    64    chill\n5     bob    85    91   fr  FALSE    70    74    jones\n6   carla    95    92   se   TRUE    80    84      fox\n7    dana   100    99   so   TRUE    90    94     katz\n8   david    60    73   so  FALSE   100    99    cohen",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html#rearrange-the-order-of-the-columns-same-as-rearranging-the-items-in-a-list",
    "href": "000850-introToDataframes-v0019-afterBeren.html#rearrange-the-order-of-the-columns-same-as-rearranging-the-items-in-a-list",
    "title": "30  dataframes",
    "section": "30.6 Rearrange the order of the columns (same as rearranging the items in a list)",
    "text": "30.6 Rearrange the order of the columns (same as rearranging the items in a list)\n\n#............................................................\n# Rearrange the order of columns in a dataframe\n#\n# You can rearrange the order of columns in a dataframe by \n# using [single-bracket-notation].\n#\n#     ** This all works because a dataframe IS A LIST **\n#............................................................\n\n\ngradebook\n\n  student test1 test2 year honors test3 test4 lastName\n1     joe    70    81   fr  FALSE    70    74 schwartz\n2     sue    80    77   fr  FALSE    80    84    rosen\n3     sam    90    88   so  FALSE    90    94    aames\n4    anne    75    87   so  FALSE    60    64    chill\n5     bob    85    91   fr  FALSE    70    74    jones\n6   carla    95    92   se   TRUE    80    84      fox\n7    dana   100    99   so   TRUE    90    94     katz\n8   david    60    73   so  FALSE   100    99    cohen\n\nncol(gradebook)\n\n[1] 8\n\n# Rearrange the gradebook so firstName and lastName are grouped together\n# and all tests are grouped together.\n#\n# Either of the following will work\n\ngradebook = gradebook[  c(1,8,2,3,6,7,4,5)   ]\ngradebook\n\n  student lastName test1 test2 test3 test4 year honors\n1     joe schwartz    70    81    70    74   fr  FALSE\n2     sue    rosen    80    77    80    84   fr  FALSE\n3     sam    aames    90    88    90    94   so  FALSE\n4    anne    chill    75    87    60    64   so  FALSE\n5     bob    jones    85    91    70    74   fr  FALSE\n6   carla      fox    95    92    80    84   se   TRUE\n7    dana     katz   100    99    90    94   so   TRUE\n8   david    cohen    60    73   100    99   so  FALSE\n\n# Reorder thew columns again - this time using a different notation\ngradebook = gradebook[  c(\"student\", \"lastName\", \"year\", \"honors\", \"test1\", \"test2\", \"test3\", \"test4\")   ]\ngradebook\n\n  student lastName year honors test1 test2 test3 test4\n1     joe schwartz   fr  FALSE    70    81    70    74\n2     sue    rosen   fr  FALSE    80    77    80    84\n3     sam    aames   so  FALSE    90    88    90    94\n4    anne    chill   so  FALSE    75    87    60    64\n5     bob    jones   fr  FALSE    85    91    70    74\n6   carla      fox   se   TRUE    95    92    80    84\n7    dana     katz   so   TRUE   100    99    90    94\n8   david    cohen   so  FALSE    60    73   100    99",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html#refer-to-specific-rows-and-columns",
    "href": "000850-introToDataframes-v0019-afterBeren.html#refer-to-specific-rows-and-columns",
    "title": "30  dataframes",
    "section": "30.7 Refer to specific rows and columns",
    "text": "30.7 Refer to specific rows and columns\n\n###########################################################################.\n# Dataframes vs matrices\n#\n# Dataframes and matrices are different types of objects. \n# A matrix is actually a vector while a dataframe is actually a list.\n# Therefore a matrix is limited to a single mode of data (e.g. numeric,\n# logical or character). However, a dataframe can have columns of \n# different modes.\n#\n# However, dataframes and matrices are similar in that they both arrange\n# their data in rows and columns. Therefore the syntax for manipulating\n# the data by specifying specific rows and columns is basically the \n# same syntax for dataframes as for matrices.\n# If you understand how to access data from specific rows/columns in \n# in a matrix, the same techniques are available for dataframes.\n#########################################################################.\n\n\nAccess data in specific rows and columns (same syntax as for matrices)\n\n###############################################################################\n###############################################################################\n## Additional features of dataframes that are not available with simple \"lists\"\n##\n## You can access specific ROWS and COLUMNS in the same way as is\n## done with matrices.\n###############################################################################\n###############################################################################\n\nrm(list=ls() )   # start over\ngradebook = data.frame(student =      c(\"joe\", \"sue\", \"sam\", \"anne\", \"bob\", \"carla\", \"dana\", \"david\"),\n                       test1 =        c(70,     80,    90,    75,    85,    95,      100,    60),\n                       test2 =        c(81,     77,    88,    87,    91,    92,      99,     73),\n                       year  = factor(c(\"fr\",   \"fr\",  \"so\",  \"so\",  \"fr\",  \"se\",    \"so\",   \"so\"), \n                                      ordered=TRUE, levels=c(\"fr\",\"so\",\"ju\",\"se\")),\n                       honors =       c(FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,    TRUE,   FALSE),\n                       stringsAsFactors = FALSE)\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\n# If you specify TWO vectors in [single-brackets], then\n# the 1st vector indicates the ROWS you want and\n# the 2nd vector indicates the COLUMNS you want.\n# Examples:\n\ngradebook [  c(1,2) , c(1,2,3)]  # rows: 1,2   columns: 1,2,3\n\n  student test1 test2\n1     joe    70    81\n2     sue    80    77\n\ngradebook [ c(TRUE,FALSE) , c(-2,-3)]  # rows: every other, cols: all except 2 and 3\n\n  student year honors\n1     joe   fr  FALSE\n3     sam   so  FALSE\n5     bob   fr  FALSE\n7    dana   so   TRUE\n\ngradebook [ c(-2,-3) , c(\"student\", \"year\")] # rows: all except 2 and 3; columns: student, year\n\n  student year\n1     joe   fr\n4    anne   so\n5     bob   fr\n6   carla   se\n7    dana   so\n8   david   so\n\n# If the rows are NOT specified but the comma (,) is present it implies ALL rows\ngradebook [    ,    c(1,2)]  # rows: all , columns: 1,2\n\n  student test1\n1     joe    70\n2     sue    80\n3     sam    90\n4    anne    75\n5     bob    85\n6   carla    95\n7    dana   100\n8   david    60\n\ngradebook [ c(1,2) ]   # same as above BECAUSE no comma means only specify columns\n\n  student test1\n1     joe    70\n2     sue    80\n3     sam    90\n4    anne    75\n5     bob    85\n6   carla    95\n7    dana   100\n8   david    60\n\n# If the columns are NOT specified but the comma (,) is present it implies ALL columns\ngradebook [ c(1,2)   ,    ]  # rows: 1,2  columns: all\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n\n#.............................................................................\n# Using ROW names\n#.............................................................................\n# row names can have actual values instead of just numbers\n#.............................................................................\n\n# Recall that we can use column names to indicate columns. \ngradebook [ , c(\"student\",\"honors\")]  # all rows, just \"student\" and \"honors\" cols\n\n  student honors\n1     joe  FALSE\n2     sue  FALSE\n3     sam  FALSE\n4    anne  FALSE\n5     bob  FALSE\n6   carla   TRUE\n7    dana   TRUE\n8   david  FALSE\n\n# Rows can also have names can have actual values instead of just numbers\n# For example the following version of the dataframe uses the student names\n# as the row names. This is not necessarily recommended ... but it is possible.\n\ngradebookWithRownames = \n            data.frame(test1 =        c(70,     80,    90,    75,    85,    95,      100,    60),\n                       test2 =        c(81,     77,    88,    87,    91,    92,      99,     73),\n                       year  = factor(c(\"fr\",   \"fr\",  \"so\",  \"so\",  \"fr\",  \"se\",    \"so\",   \"so\"), \n                                      ordered=TRUE, levels=c(\"fr\",\"so\",\"ju\",\"se\")),\n                       honors =       c(FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,    TRUE,   FALSE),\n                       row.names =      c(\"joe\", \"sue\", \"sam\", \"anne\", \"bob\", \"carla\", \"dana\", \"david\"),\n                       stringsAsFactors = FALSE)\n\ngradebookWithRownames # in this version the student names are the row names and are not an actual column of data\n\n      test1 test2 year honors\njoe      70    81   fr  FALSE\nsue      80    77   fr  FALSE\nsam      90    88   so  FALSE\nanne     75    87   so  FALSE\nbob      85    91   fr  FALSE\ncarla    95    92   se   TRUE\ndana    100    99   so   TRUE\ndavid    60    73   so  FALSE\n\nncol(gradebookWithRownames) # only 4 columns - student names are no longer a column\n\n[1] 4\n\ngradebook # in this version the student names are a separate column\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    90    88   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\nncol(gradebook) # 5 columns - student names ARE a column of data\n\n[1] 5\n\n# you can use the row names to access data too\n\ngradebookWithRownames[c(\"joe\",\"sam\") , ]  # just rows for joe and sam, all columns\n\n    test1 test2 year honors\njoe    70    81   fr  FALSE\nsam    90    88   so  FALSE\n\ngradebookWithRownames[c(1,2) , ]   # same thing, we're just using row numbers instead of names\n\n    test1 test2 year honors\njoe    70    81   fr  FALSE\nsue    80    77   fr  FALSE\n\ngradebookWithRownames[c(\"joe\",\"sam\") , c(\"test2\",\"year\")]  # rows: joe, sam    columns: test2, year\n\n    test2 year\njoe    81   fr\nsam    88   so\n\n# You use different indexing methods for the rows and for the cols\n\ngradebookWithRownames[c(\"joe\",\"sam\") , c(2,3)]  # rows: joe, sam    columns: 2,3\n\n    test2 year\njoe    81   fr\nsam    88   so\n\nrownames(gradebookWithRownames)\n\n[1] \"joe\"   \"sue\"   \"sam\"   \"anne\"  \"bob\"   \"carla\" \"dana\"  \"david\"\n\nrow.names(gradebookWithRownames)\n\n[1] \"joe\"   \"sue\"   \"sam\"   \"anne\"  \"bob\"   \"carla\" \"dana\"  \"david\"\n\n\n\n\nData from a SINGLE ROW is returned as a data.frame BUT data from a SINGLE COLUMN is returned as a VECTOR!\n\n#-------------------------------------------------------------------------\n# Data from a SINGLE ROW is returned as a data.frame.\n# Data from a SINGLE COLUMN is returned as a VECTOR!\n#-------------------------------------------------------------------------\n\n# Data from a single row is returned as a dataframe.\n# This should not be surprising.\n\ngradebook[ 2 ,   ]   # one row - result is a data.frame\n\n  student test1 test2 year honors\n2     sue    80    77   fr  FALSE\n\ngradebook[ 2 ,  c(2,3) ]   # one row - result is a data.frame \n\n  test1 test2\n2    80    77\n\ngradebook[ 2 ,  c(\"test1\", \"test2\") ]   # same thing\n\n  test1 test2\n2    80    77\n\n# Data from a single row is returned as a VECTOR!\n\ngradebook[   , 2 ]   # one column - result is a vector\n\n[1]  70  80  90  75  85  95 100  60\n\ngradebook[   , 2 , drop=FALSE]   # one column - result is data.frame\n\n  test1\n1    70\n2    80\n3    90\n4    75\n5    85\n6    95\n7   100\n8    60\n\ngradebook[   , \"test2\" ]   # same thing\n\n[1] 81 77 88 87 91 92 99 73\n\ngradebook[   , \"test2\" , drop=FALSE]   # one column - result is data.frame\n\n  test2\n1    81\n2    77\n3    88\n4    87\n5    91\n6    92\n7    99\n8    73\n\ngradebook[   , c(2,3) ]   # two columns - result is a data.frame\n\n  test1 test2\n1    70    81\n2    80    77\n3    90    88\n4    75    87\n5    85    91\n6    95    92\n7   100    99\n8    60    73\n\ngradebook[   , c(\"test1\", \"test2\") ]   # same thing\n\n  test1 test2\n1    70    81\n2    80    77\n3    90    88\n4    75    87\n5    85    91\n6    95    92\n7   100    99\n8    60    73\n\ngradebook[  gradebook$test1 &gt;= 90 , 2 ]   # Data from a single column - VECTOR!\n\n[1]  90  95 100\n\n# Show the year for the students who got above a 90 on test1\ngradebook[  gradebook$test1 &gt;= 90 , 4 ] \n\n[1] so se so\nLevels: fr &lt; so &lt; ju &lt; se\n\n# another way\ngradebook[  gradebook$test1 &gt;= 90 , \"year\" ] \n\n[1] so se so\nLevels: fr &lt; so &lt; ju &lt; se",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html#practice",
    "href": "000850-introToDataframes-v0019-afterBeren.html#practice",
    "title": "30  dataframes",
    "section": "30.8 — Practice —",
    "text": "30.8 — Practice —\n\n###########################################################################\n###########################################################################\n## Practice questions\n###########################################################################\n###########################################################################\n\n# Use the following data\n\nrm(list=ls() )   # start over\ngradebook = data.frame(student =      c(\"joe\", \"sue\", \"sam\", \"anne\", \"bob\", \"carla\", \"dana\", \"david\"),\n                       test1 =        c(70,     80,    70,    75,    85,    95,      100,    60),\n                       test2 =        c(81,     77,    60,    87,    91,    92,      99,     73),\n                       year  = factor(c(\"fr\",   \"fr\",  \"so\",  \"so\",  \"fr\",  \"se\",    \"so\",   \"so\"), \n                                      ordered=TRUE, levels=c(\"fr\",\"so\",\"ju\",\"se\")),\n                       honors =       c(FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,    TRUE,   FALSE),\n                       stringsAsFactors = FALSE)\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    70    60   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\n#----------------------------------------------------------------------\n# QUESTION\n# PART A - show the average grade on test1\n# PART B - show the average grade that sophomores got on test1\n# PART C - Show the names for the students who scored above average on test1\n# PART D - Show the rows for the students who scored above average on test1\n# PART E - Show just the student names and test1 grades for students who scored above average on test1\n# PART F - Show the rows for the students who scored above average on test1 and on test2\n# PART G - Show the rows for the freshmen and sophomores who scored above average on test1 and on test2\n# PART H - Show the complete rows for \"sue\" and \"bob\". Write the code so that\n#          you do NOT need to know in which position the desired students appear.\n#----------------------------------------------------------------------\n\n# PART A - show the average grade on test1\n\nmean(gradebook[ , \"test1\"])\n\n[1] 79.375\n\nmean(gradebook[ , 2])\n\n[1] 79.375\n\nmean(gradebook[[2]])\n\n[1] 79.375\n\nmean(gradebook$test1)\n\n[1] 79.375\n\n# new question\n# Show just the data for sophomores test1 as a vector\n\ngradebook [   gradebook$year == \"so\"   ,      \"test1\" ] \n\n[1]  70  75 100  60\n\n# PART B - show the average grade that sophomores got on test1\n\nmean ( gradebook$test1[ gradebook$year == \"so\"    ] )\n\n[1] 76.25\n\nmean ( gradebook [   gradebook$year == \"so\"   ,      \"test1\" ] )\n\n[1] 76.25\n\n# PART C - Show the names for the students who scored above average on test1\n\ngradebook$student [ gradebook$test1 &gt;   mean(gradebook$test1)   ]\n\n[1] \"sue\"   \"bob\"   \"carla\" \"dana\" \n\ngradebook [ gradebook$test1 &gt;   mean(gradebook$test1)            , \"student\" ]\n\n[1] \"sue\"   \"bob\"   \"carla\" \"dana\" \n\n# PART D - Show the rows for the students who scored above average on test1\n\ngradebook [ gradebook$test1 &gt;   mean(gradebook$test1)            ,     ]\n\n  student test1 test2 year honors\n2     sue    80    77   fr  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n\n# PART E - Show just the student names and test1 grades for students who scored above average on test1\n\ngradebook [ gradebook$test1 &gt;   mean(gradebook$test1)  ,  c(\"student\", \"test1\")   ]\n\n  student test1\n2     sue    80\n5     bob    85\n6   carla    95\n7    dana   100\n\n# PART F - Show the rows for the students who scored above average on test1 and on test2\n\ngradebook [ gradebook$test1 &gt;   mean(gradebook$test1)  &\n              gradebook$test2 &gt;   mean(gradebook$test2) \n            ,    ]\n\n  student test1 test2 year honors\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n\n# PART G - Show the rows for the freshmen and sophomores who scored above average on test1 and on test2\n\ngradebook [ gradebook$test1 &gt;   mean(gradebook$test1)  &\n              gradebook$test2 &gt;   mean(gradebook$test2) &\n              (gradebook$year == \"fr\" | gradebook$year == \"so\")\n            ,    ]\n\n  student test1 test2 year honors\n5     bob    85    91   fr  FALSE\n7    dana   100    99   so   TRUE\n\n# More practice questions\n\n#----------------------------------------------------------------------\n# QUESTION\n#\n# Show the complete rows for \"sue\" and \"bob\". Write the code so that\n# you do NOT need to know in which position the desired students appear.\n#----------------------------------------------------------------------\n\n# One answer\ngradebook [ gradebook$student %in% c(\"sue\", \"bob\") ,  ]   # don't forget the comma\n\n  student test1 test2 year honors\n2     sue    80    77   fr  FALSE\n5     bob    85    91   fr  FALSE\n\n# Another answer:\ngradebook[gradebook$student==\"sue\"|gradebook$student==\"bob\" ,  ]   # don't forget the comma\n\n  student test1 test2 year honors\n2     sue    80    77   fr  FALSE\n5     bob    85    91   fr  FALSE\n\n#----------------------------------------------------------------------\n# QUESTION\n#\n# PART A - Show just carla's grade on test1. \n#            (Write the code in a way that you do NOT need to know which row).\n#\n# PART B -  Add 1 point to carla's grade on test1.\n#           (Write the code in a way that you do NOT need to know which row\n#            contains carla's data).\n#----------------------------------------------------------------------\n\n# PART A - Show just carla's grade on test1. \n#            (Write the code in a way that you do NOT need to know which row).\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    70    60   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\ngradebook[ gradebook$student == \"carla\" , \"test1\"]\n\n[1] 95\n\n# PART B -  Add 1 point to carla's grade on test1.\n#           (Write the code in a way that you do NOT need to know which row\n#            contains carla's data).\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    70    60   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    95    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\ngradebook[ gradebook$student == \"carla\" , \"test1\"] = \n  gradebook[ gradebook$student == \"carla\" , \"test1\"] + 1\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    70    60   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    96    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\n#----------------------------------------------------------------------\n# QUESTION\n#\n# Add 2 points to the test1 grades for all freshmen (year == \"fr\")\n#----------------------------------------------------------------------\ngradebook\n\n  student test1 test2 year honors\n1     joe    70    81   fr  FALSE\n2     sue    80    77   fr  FALSE\n3     sam    70    60   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    85    91   fr  FALSE\n6   carla    96    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\ngradebook [ gradebook$year == \"fr\", \"test1\" ] = \n  gradebook [ gradebook$year == \"fr\", \"test1\" ] + 2\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    72    81   fr  FALSE\n2     sue    82    77   fr  FALSE\n3     sam    70    60   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    87    91   fr  FALSE\n6   carla    96    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\n#----------------------------------------------------------------------\n# QUESTION\n#\n# PART A - Display the complete rows for all sophomores who scored at least \n#          5 points below average on test1 and on test2\n#\n# PART B - Display JUST the test1 and test2 grades of those students.\n#\n# PART C - Add 2 points to the test1 and test2 grades of those students.\n#----------------------------------------------------------------------\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    72    81   fr  FALSE\n2     sue    82    77   fr  FALSE\n3     sam    70    60   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    87    91   fr  FALSE\n6   carla    96    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\n# PART A - Display the complete rows for all sophomores who scored at least \n#          5 points below average on test1 and on test2\n\ngradebook[  gradebook$year == \"so\" &\n            gradebook$test1 &lt;= mean(gradebook$test1) - 5 &\n            gradebook$test2 &lt;= mean(gradebook$test2) - 5 \n            , ]\n\n  student test1 test2 year honors\n3     sam    70    60   so  FALSE\n8   david    60    73   so  FALSE\n\n# PART B - Display JUST the test1 and test2 grades of those students.\n\ngradebook[  gradebook$year == \"so\" &\n              gradebook$test1 &lt;= mean(gradebook$test1) - 5 &\n              gradebook$test2 &lt;= mean(gradebook$test2) - 5 \n            , c(\"test1\", \"test2\")]\n\n  test1 test2\n3    70    60\n8    60    73\n\n# PART C - Add 2 points to the test1 and test2 grades of those students.\n\ngradebook\n\n  student test1 test2 year honors\n1     joe    72    81   fr  FALSE\n2     sue    82    77   fr  FALSE\n3     sam    70    60   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    87    91   fr  FALSE\n6   carla    96    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    60    73   so  FALSE\n\ngradebook[  gradebook$year == \"so\" &\n              gradebook$test1 &lt;= mean(gradebook$test1) - 5 &\n              gradebook$test2 &lt;= mean(gradebook$test2) - 5 \n            , c(\"test1\", \"test2\")] = \n  \n   2 + gradebook[  gradebook$year == \"so\" &\n                   gradebook$test1 &lt;= mean(gradebook$test1) - 5 &\n                   gradebook$test2 &lt;= mean(gradebook$test2) - 5 \n                 , c(\"test1\", \"test2\")]\n  \n  \ngradebook\n\n  student test1 test2 year honors\n1     joe    72    81   fr  FALSE\n2     sue    82    77   fr  FALSE\n3     sam    72    62   so  FALSE\n4    anne    75    87   so  FALSE\n5     bob    87    91   fr  FALSE\n6   carla    96    92   se   TRUE\n7    dana   100    99   so   TRUE\n8   david    62    75   so  FALSE\n\n#----------------------------------------------------------------------\n# stringsAsFactors=FALSE      or        stringsAsFactors=TRUE\n#----------------------------------------------------------------------\n\nrm(list = ls() )   # start over from scratch\n\n# The data.frame function contains an argument named stringsAsFactors\n# that is expected to be TRUE or FALSE. The default value is TRUE.\n# (see the documentation for data.frame, i.e. ?data.frame)\n#\n#\n# WHAT IS A STRING???\n#\n# Don't get confused by the word \"string\". The term \"string\" means the same\n# thing as \"an element of a character vector\". The term \"string\" is used a LOT\n# in other languages, e.g. Java, Python, etc. instead\n# of what we call an element of a \"character vector\". The word seeped into\n# R in a few places. One of them is in the name of the argument\n# ?stringsAsFactors = FALSE. Perhaps a better name for this argument \n# could have been charactersAsFactors but that's not what it is.\n#\n# Are you curious about why an element of a character vector is known\n# as a \"string\" in many other languages? The word string comes from\n# \"stringing together many individual 'characters', \n# e.g. 'a' and 'p' and 'p' and 'p' and 'l' and 'e' can be strung together\n# like a string of beads on a necklace to make a single\n# \"string of characters\" e.g. \"apple\".\n#\n#\n#\n# WHAT DOES stringsAsFactors=FALSE DO ?\n#\n# By default, if you create a dataframe using character vectors, the \n# character vectors will be converted into factors before they are stored in the\n# dataframe. If that is not what you want then you can specify\n# stringsAsFactors = FALSE\n\n\n# EXAMPLE : stringsAsFactors = TRUE \n#           (this is the default if you don't specify anything for stringsAsFactors)\n\ngradebook_fact = data.frame(first = c(\"joe\", \"sue\", \"sam\", \"anne\", \"bob\", \"carla\", \"dana\", \"david\"),\n                       last =  c(\"baker\", \"jones\", \"smith\", \"fox\", \"cohen\", \"jones\", \"schwartz\", \"rosen\"),    \n                       test1 = c(70,     80,    90,    75,    85,    95,      100,    60),\n                       test2 = c(81,     77,    88,    87,    91,    92,      99,     73),\n                       year  = c(\"fr\",   \"fr\",  \"so\",  \"so\",  \"fr\",  \"se\",    \"so\",   \"se\"),\n                       honors =       c(FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,    TRUE,   FALSE),\n                stringsAsFactors = TRUE)   # THIS IS THE DEFAULT IF YOU DONT SPECIFY ANYTHING \n\ngradebook_fact\n\n  first     last test1 test2 year honors\n1   joe    baker    70    81   fr  FALSE\n2   sue    jones    80    77   fr  FALSE\n3   sam    smith    90    88   so  FALSE\n4  anne      fox    75    87   so  FALSE\n5   bob    cohen    85    91   fr  FALSE\n6 carla    jones    95    92   se   TRUE\n7  dana schwartz   100    99   so   TRUE\n8 david    rosen    60    73   se  FALSE\n\n# character vectors were converted to factors in the dataframe\nclass(gradebook_fact$first)  \n\n[1] \"factor\"\n\nclass(gradebook_fact$last)\n\n[1] \"factor\"\n\nclass(gradebook_fact$year)\n\n[1] \"factor\"\n\nsummary(gradebook_fact$first)\n\n anne   bob carla  dana david   joe   sam   sue \n    1     1     1     1     1     1     1     1 \n\nsummary(gradebook_fact$last)\n\n   baker    cohen      fox    jones    rosen schwartz    smith \n       1        1        1        2        1        1        1 \n\nsummary(gradebook_fact$year)\n\nfr se so \n 3  2  3 \n\n# EXAMPLE : stringsAsFactors = FALSE\n\ngradebook_char = data.frame(first = c(\"joe\", \"sue\", \"sam\", \"anne\", \"bob\", \"carla\", \"dana\", \"david\"),\n                       last =  c(\"baker\", \"jones\", \"smith\", \"fox\", \"cohen\", \"jones\", \"schwartz\", \"rosen\"),    \n                       test1 = c(70,     80,    90,    75,    85,    95,      100,    60),\n                       test2 = c(81,     77,    88,    87,    91,    92,      99,     73),\n                       year  = c(\"fr\",   \"fr\",  \"so\",  \"so\",  \"fr\",  \"se\",    \"so\",   \"se\"),\n                       honors =       c(FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,    TRUE,   FALSE),\n                stringsAsFactors = FALSE)\n# character vectors were NOT converted to factors in the dataframe\nclass(gradebook_char$first)\n\n[1] \"character\"\n\nclass(gradebook_char$last)\n\n[1] \"character\"\n\nclass(gradebook_char$year)\n\n[1] \"character\"\n\nsummary(gradebook_char$first)\n\n   Length     Class      Mode \n        8 character character \n\nsummary(gradebook_char$last)\n\n   Length     Class      Mode \n        8 character character \n\nsummary(gradebook_char$year)\n\n   Length     Class      Mode \n        8 character character \n\n# QUESTION\n#\n# In the gradebook_char variable we created above, the year is a character\n# vector but it should be a factor. Create a new variable named \n# gradebook, that changes the year column into a factor. You should\n# NOT use the data.frame function at all. Rather replace the year \n# column from gradebook_char with a factor that has the same data.\n\n\n# QUESTION\n#\n# In the gradebook_fact variable we created above, the first and last\n# name columns are factor columns. However, they should NOT be factors. \n# Create a new variable named  gradebook, that changes the\n# first and last columns into character vectors. You should\n# NOT use the data.frame function at all. Rather replace the\n# first and last columns from gradebook_fact with a charcter vectors\n# that have the same data.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html#importing-a-csv-file-into-an-r-data.frame-variable",
    "href": "000850-introToDataframes-v0019-afterBeren.html#importing-a-csv-file-into-an-r-data.frame-variable",
    "title": "30  dataframes",
    "section": "30.9 Importing a CSV file into an R data.frame variable",
    "text": "30.9 Importing a CSV file into an R data.frame variable\n\n############################################################################\n############################################################################\n##\n## importing a CSV file into an R data.frame variable\n##\n############################################################################\n############################################################################\n\n# CSV stands for \"comma separated values\". \n#\n# A CSV file contains data that is is intended to be arranged\n# in rows and columns (similar to an Excel file). Hoewver, in the \n# CSV file itself, the data is not lined up in columns. Rather\n# commas separate the data that should go in different columns.\n#\n# Each row of the data is a line in the CSV file.\n# Each value in a line is separated from the other values by commas. \n#\n# EXAMPLE: The following could be the contents of a CSV file.\n#\n#           student,year,gender,test1,test2,final,honors\n#           joe,so,m,100,100,89,TRUE\n#           sam,so,m,95,93,missing,FALSE\n#           sue,fr,f,80,66,68,FALSE\n#           al,fr,m,59,52,42.5,FALSE\n#           alice,fr,f,85,missing,missing,TRUE\n#           anne,se,f,75,65,76,FALSE\n#           bertha,se,f,65,58,62.5,FALSE\n#           charlie,so,m,86,84,93,FALSE\n#           david,so,m,78,82,88,TRUE\n#           edgar,fr,m,64,68,60,FALSE\n#           lou,ju,m,83,78,92.5,FALSE\n#           francine,ju,f,90,91,79.5,FALSE\n#           dan,ju,m,83,69,93,TRUE\n#           daniella,se,f,96,100,100,FALSE\n#           sarah,ju,f,80,68,78,FALSE\n#           rebecca,so,f,77,83,75,FALSE\n#           rachel,ju,f,80,82,86,TRUE\n#           deborah,fr,f,95,100,100,FALSE\n\n\n# import the file grades.csv\n# - press \"Import Dataset\" button in Environment window\n# - choose \"From Text (base)\"\n# - choose the file\n# - fill in the following values:\n#   o Name :    the name of the variable that will hold your data\n#   o Heading:  choose \"yes\" if the data has column heading (otherwise, choose \"no\")\n#   o Separator: for csv files choose \"comma\" (you can choose other types of separators based on the data in the file)\n#   o na.strings: choose the value in the file that indicates NA data\n#   o Strings as factors:   for now make sure to UNcheck this - we will learn more about this later# - read.csv\n#\n# This will run the read.csv function and assign the result to the variable\n# that you specified in the \"Name\" box. By default this will be the same name\n# as the name of the file.\n#\n# RStudio will then run the View command to show the data in a tab in the \n# \"source window\" in RStudio.\n\n# Result of following the instructions above is that the following two \n# commands will be excuted.\n# - The 1st command creates a variable to hold the data.\n# - The 2nd command displays the data in the source window.\n#\n#      grades &lt;- read.csv(\"C:/Users/Home/Desktop/grades.csv\", header=FALSE, stringsAsFactors=FALSE)\n#      View(grades2)\n#\n# You can type these commands yourself but the RStudio interface makes it\n# easier to remember exactly how to type the commands.\n\n# Read the information from the file into the variable, grades.\n#grades &lt;- read.csv(\"C:/Users/Home/Desktop/grades.csv\", header=TRUE, stringsAsFactors=FALSE)\ngrades &lt;- read.csv(\"C:/Users/yrose/Dropbox (Personal)/website/yu/ids2030-busAnalyticsAndProgramming/77fall21-ids2030-busAnalyticsAndProgramming/classwork_and_hw/wilf-class18/grades.csv\", header=TRUE, stringsAsFactors=FALSE)\n\ngrades\n\n    student year gender test1   test2   final honors\n1       joe   so      m   100     100      89   TRUE\n2       sam   so      m    95      93 missing  FALSE\n3       sue   fr      f    80      66      68  FALSE\n4        al   fr      m    59      52    42.5  FALSE\n5     alice   fr      f    85 missing missing   TRUE\n6      anne   se      f    75      65      76  FALSE\n7    bertha   se      f    65      58    62.5  FALSE\n8   charlie   so      m    86      84      93  FALSE\n9     david   so      m    78      82      88   TRUE\n10    edgar   fr      m    64      68      60  FALSE\n11      lou   ju      m    83      78    92.5  FALSE\n12 francine   ju      f    90      91    79.5  FALSE\n13      dan   ju      m    83      69      93   TRUE\n14 daniella   se      f    96     100     100  FALSE\n15    sarah   ju      f    80      68      78  FALSE\n16  rebecca   so      f    77      83      75  FALSE\n17   rachel   ju      f    80      82      86   TRUE\n18  deborah   fr      f    95     100     100  FALSE\n\n# To view the data in RStudio's source window use the View function\nView(grades)\n\n# To view the data in the Console window, just type the name of the variable\ngrades\n\n    student year gender test1   test2   final honors\n1       joe   so      m   100     100      89   TRUE\n2       sam   so      m    95      93 missing  FALSE\n3       sue   fr      f    80      66      68  FALSE\n4        al   fr      m    59      52    42.5  FALSE\n5     alice   fr      f    85 missing missing   TRUE\n6      anne   se      f    75      65      76  FALSE\n7    bertha   se      f    65      58    62.5  FALSE\n8   charlie   so      m    86      84      93  FALSE\n9     david   so      m    78      82      88   TRUE\n10    edgar   fr      m    64      68      60  FALSE\n11      lou   ju      m    83      78    92.5  FALSE\n12 francine   ju      f    90      91    79.5  FALSE\n13      dan   ju      m    83      69      93   TRUE\n14 daniella   se      f    96     100     100  FALSE\n15    sarah   ju      f    80      68      78  FALSE\n16  rebecca   so      f    77      83      75  FALSE\n17   rachel   ju      f    80      82      86   TRUE\n18  deborah   fr      f    95     100     100  FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000850-introToDataframes-v0019-afterBeren.html#use-the-order-function-to-sort-the-rows-of-a-dataframe.-dont-use-the-sort-function",
    "href": "000850-introToDataframes-v0019-afterBeren.html#use-the-order-function-to-sort-the-rows-of-a-dataframe.-dont-use-the-sort-function",
    "title": "30  dataframes",
    "section": "30.10 Use the order function to sort the rows of a dataframe. DON’T USE THE sort FUNCTION",
    "text": "30.10 Use the order function to sort the rows of a dataframe. DON’T USE THE sort FUNCTION\n\n############################################################################\n############################################################################\n##\n## Additional topics related to dataframes\n##\n############################################################################\n############################################################################\n\n\n#-----------------------------------------------------------------------------\n# order function\n#\n# You can use the order function to put the rows of a dataframe in sorted \n# \"order\" based on the contents of one or more columns.\n#\n#\n#\n# WARNING: DON'T USE sort\n#\n# The sort function will NOT help you to do this at all!!!\n# sort only works for individual vectors!!!\n#-----------------------------------------------------------------------------",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>dataframes</span>"
    ]
  },
  {
    "objectID": "000875-cbind_rbind-v002.html",
    "href": "000875-cbind_rbind-v002.html",
    "title": "31  cbind and rbind (to combine dataframes)",
    "section": "",
    "text": "#-----------------------------------------------------------------------------\n# cbind and rbind functions\n#\n# cbind combines (i.e. \"binds\") columns from multiple dataframes, matrices and vectors.\n# rbind combines (i.e. \"binds\") columns from multiple dataframes, matrices and vectors.\n#\n# For both cbind and rbind\n#   - If all items being \"bound\" are vectors and matrices then the result is a matrix.\n#   - If any of the items being \"bound\" is a dataframe, the result is a dataframe.\n#-----------------------------------------------------------------------------\n\n#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n# Use cbind to vectors into a matrix\n#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\nones = c(1,2,3,4,5)\ntens = c(10,20,30,40,50)\nhundreds = c(100,200,300,400,500)\n\nnums = cbind(ones, tens, hundreds)   # a matrix with 3 columns\nclass(nums)   # \"matrix\" \"array\"\n\n[1] \"matrix\" \"array\" \n\n# add another column to the matrix\nnums = cbind(nums, thousands = c(1000,2000,3000,4000,5000))\nnums\n\n     ones tens hundreds thousands\n[1,]    1   10      100      1000\n[2,]    2   20      200      2000\n[3,]    3   30      300      3000\n[4,]    4   40      400      4000\n[5,]    5   50      500      5000\n\n# another matrix\nmat = matrix( c(11,22,33,44,55,66,77,88,99,0), nrow=5, ncol=2)\nmat\n\n     [,1] [,2]\n[1,]   11   66\n[2,]   22   77\n[3,]   33   88\n[4,]   44   99\n[5,]   55    0\n\ncbind(nums, mat)\n\n     ones tens hundreds thousands      \n[1,]    1   10      100      1000 11 66\n[2,]    2   20      200      2000 22 77\n[3,]    3   30      300      3000 33 88\n[4,]    4   40      400      4000 44 99\n[5,]    5   50      500      5000 55  0\n\nmat = matrix(doubles=c(11,22,33,44,55), tripples=c(111,222,333,444,555))\n\nError in matrix(doubles = c(11, 22, 33, 44, 55), tripples = c(111, 222, : unused arguments (doubles = c(11, 22, 33, 44, 55), tripples = c(111, 222, 333, 444, 555))\n\n#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n# Use cbind to combine columns from different\n# dataframes and vectors into one dataframe\n#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n# A few rows\ndf1 = data.frame ( students = c(\"alice\", \"bob\", \"carla\"),\n                   \n                   #                   year     = factor( c(\"junior\", \"freshman\", \"junior\"),\n                   #                                levels = c(\"freshman\", \"sophomore\", \"junior\", \"senior\"),\n                   #                                ordered = TRUE),\n                   \n                   test1 =    c(71, 81, 91),\n                   \n                   stringsAsFactors = FALSE)\ndf1\n\n  students test1\n1    alice    71\n2      bob    81\n3    carla    91\n\n# two more tests\ndf2 = data.frame ( test2 = c(72, 82, 92),\n                   test3 = c(73, 83, 93),\n                   test4 = c(74, 84, 94) )\ndf2\n\n  test2 test3 test4\n1    72    73    74\n2    82    83    84\n3    92    93    94\n\n# yet another test\ndf3 = data.frame ( test4 = c(74, 84, 94) )\ndf3\n\n  test4\n1    74\n2    84\n3    94\n\n# use cbind to create a new data.frame with all the columns\nallTests = cbind(df1, df2, df3)   \nallTests\n\n  students test1 test2 test3 test4 test4\n1    alice    71    72    73    74    74\n2      bob    81    82    83    84    84\n3    carla    91    92    93    94    94\n\n# cbind can combine vectors and dataframes\n\ncbind( satScore = c(1200, 1150, 1400), allTests, test5=c(75,85,95) )\n\n  satScore students test1 test2 test3 test4 test4 test5\n1     1200    alice    71    72    73    74    74    75\n2     1150      bob    81    82    83    84    84    85\n3     1400    carla    91    92    93    94    94    95\n\n# You can also use cbind to combine a vectors\n# The result is a matrix\nmat = cbind (x = c(1,2,3), y=c(100,200,300), z=c(111, 222, 333))\nmat\n\n     x   y   z\n[1,] 1 100 111\n[2,] 2 200 222\n[3,] 3 300 333\n\n#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n# Use rbind to combine rows from different dataframes\n#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n# A few more rows\ndf3 = data.frame ( students = c(\"david\", \"ed\", \"fran\"),\n                   \n                   #                   year     = factor( c(\"junior\", \"freshman\", \"junior\"),\n                   #                                      levels = c(\"freshman\", \"sophomore\", \"junior\", \"senior\"),\n                   #                                      ordered = TRUE),\n                   \n                   test1 =    c(75, 85, 95),\n                   \n                   stringsAsFactors = FALSE)\ndf2 \n\n  test2 test3 test4\n1    72    73    74\n2    82    83    84\n3    92    93    94\n\n# Use \"rbind\" to combine the rows from df1 with the rows from df2 into a\n# single data.frame.\n#\n# The \"r\" in \"rbind\" stands for \"row\" since we are \"binding the rows together\")\n\nallRows = rbind(df1, df2)\n\nError in rbind(deparse.level, ...): numbers of columns of arguments do not match\n\nallRows\n\nError in eval(expr, envir, enclos): object 'allRows' not found\n\nx = rbind(allRows, c(\"a\",\"b\",\"c\"))\n\nError in eval(expr, envir, enclos): object 'allRows' not found\n\nstr(x)\n\nError in eval(expr, envir, enclos): object 'x' not found\n\nrbind(ones=c(1,2,3), tens=c(10,20,30) )\n\n     [,1] [,2] [,3]\nones    1    2    3\ntens   10   20   30",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>cbind and rbind (to combine dataframes)</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html",
    "title": "32  “if / else if / else” constructs",
    "section": "",
    "text": "32.1 Various forms of if statement\n#################################################\n#################################################\n##\n## Various forms of if statement\n##\n#################################################\n#################################################",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#if-by-itself---no-else-no-else-if",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#if-by-itself---no-else-no-else-if",
    "title": "32  “if / else if / else” constructs",
    "section": "32.2 if by itself - (no else, no else if)",
    "text": "32.2 if by itself - (no else, no else if)\n\n#-----------------------------------------------------------------.\n# if by itself - (no else, no else if)\n#-----------------------------------------------------------------.\n# An \"if\" is written with the following format. See below for an\n# explanation:\n#\n#   R commands before if\n#   R commands before if\n#   R commands before if\n#\n#   if ( LOGICAL_EXPRESSION_RESULTING_IN_TRUE_OR_FALSE ) {\n#     R commands inside if\n#     R commands inside if\n#     R commands inside if\n#   }\n#\n#   R commands after if\n#   R commands after if\n#   R commands after if\n#\n# EXPLANATION: \n#\n#   The commands before the if are processed as they normally would be.\n#\n#   When the code reaches the \"if\" the LOGICAL_EXPRESSION is evaluated.\n#   After the logical expression are several commands inside of {curly braces}.\n#   The code inside the {curly braces} is known as a \"block of code\".\n#   If the result of the LOGICAL_EXPRESSION is TRUE then the R commands inside\n#   the {curly braces} are done.\n#   If the result of the LOGICAL_EXPRESSION is FALSE then the R commands inside\n#   the {curly braces} are SKIPPED.\n#\n#   The commands after the if are processed as they normally would be.\n#-----------------------------------------------------------------.\n\nrm(list=ls())   # start from scratch\n\ncommentsAboutNumber = function( num ){\n  cat (\"You passed the number\", num, \"to this function.\\n\")\n  \n  if (num &gt; 1000) {\n    cat(\"Wow! that's a big number.\\n\")\n    cat (\"I LOVE big nubmers.\\n\")\n    cat(\"Big numbers are BEAUTIFUL.\\n\")\n  }\n  \n  cat(\"Thanks for your number :)\\n\")\n}\n\n\ncommentsAboutNumber(10)\n\nYou passed the number 10 to this function.\nThanks for your number :)\n\ncommentsAboutNumber(99999)\n\nYou passed the number 99999 to this function.\nWow! that's a big number.\nI LOVE big nubmers.\nBig numbers are BEAUTIFUL.\nThanks for your number :)",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#curly-braces-are-technically-only-required-for-2-or-more-commands",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#curly-braces-are-technically-only-required-for-2-or-more-commands",
    "title": "32  “if / else if / else” constructs",
    "section": "32.3 {Curly braces} are technically only required for 2 or more commands",
    "text": "32.3 {Curly braces} are technically only required for 2 or more commands\n\n#-----------------------------------------------------------------\n# The curly braces are not \"actually\" required if there is only \n# one command - but I recommend you use them anyway, until you \n# get more comfortable with the language.\n#-----------------------------------------------------------------\ncommentsAboutNumber = function( num ){\n  \n  cat (\"You passed the number\", num, \"to this function.\\n\")\n\n  # This works without the {curly braces} since there's only \n  # one command in the if\n  \n  if (num &gt; 1000) \n    cat(\"Wow! that's a big number.\\n\")\n  \n  cat(\"Thanks for your number :)\\n\")\n}\n\ncommentsAboutNumber(10)\n\nYou passed the number 10 to this function.\nThanks for your number :)\n\ncommentsAboutNumber(99999)\n\nYou passed the number 99999 to this function.\nWow! that's a big number.\nThanks for your number :)",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#dont-forget-the-curly-braces-if-they-are-needed.",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#dont-forget-the-curly-braces-if-they-are-needed.",
    "title": "32  “if / else if / else” constructs",
    "section": "32.4 DON’T FORGET the {curly braces} if they are needed.",
    "text": "32.4 DON’T FORGET the {curly braces} if they are needed.\n\n# MAKE SURE YOU DON'T FORGET THE {curly braces}\ncommentsAboutNumber = function( num ){\n\n  cat (\"You passed the number\", num, \"to this function.\\n\")\n  \n  # THIS IS WRONG - the {curly braces} are missing ...\n  # THIS WILL NOT DO WHAT YOU THINK!!!\n  if (num &gt; 1000) \n    cat(\"Wow!\", num, \"is a big number.\\n\") # This line IS controlled by if\n    cat (\"I LOVE big nubmers.\\n\")          # This line is NOT controlled by if\n    cat(\"Big numbers are BEAUTIFUL.\\n\")    # This line is NOT controlled by if\n\n  cat(\"Thanks for your number :)\\n\")\n}\n\ncommentsAboutNumber(10)\n\nYou passed the number 10 to this function.\nI LOVE big nubmers.\nBig numbers are BEAUTIFUL.\nThanks for your number :)\n\ncommentsAboutNumber(99999)\n\nYou passed the number 99999 to this function.\nWow! 99999 is a big number.\nI LOVE big nubmers.\nBig numbers are BEAUTIFUL.\nThanks for your number :)",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#example",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#example",
    "title": "32  “if / else if / else” constructs",
    "section": "32.5 EXAMPLE",
    "text": "32.5 EXAMPLE\n\n#..................................................................\n# Function should return the price of a salad based on the size\n#\n#    small  (4 choices) : 9\n#    medium (5 choices) : 12\n#    large  (6 choices) : 14\n#    xlarge (7 choices) : 15\n#    any other size - stop with a meaningful error\n#..................................................................\n\npriceOfSalad = function(size) {\n  \n  # check at the beginning for one of the correct sizes\n  if ( ! size %in% c(\"small\", \"medium\", \"large\", \"xlarge\")) {\n    stop(\"size must be one of : small , medium, large, xlarge\")\n  }\n  \n  if (size == \"small\") {\n    price = 9\n  }\n  \n  if (size == \"medium\"){\n    price = 12\n  } \n  \n  if (size == \"large\") {\n    price = 14\n  } \n  \n  if (size == \"xlarge\") {\n    price = 15\n  }\n  \n  price   # return the total price   \n}\n\npriceOfSalad(\"medium\")\n\n[1] 12\n\npriceOfSalad(\"small\")\n\n[1] 9\n\npriceOfSalad(\"gargantuan\")   # ERROR none of the prices were assigned\n\nError in priceOfSalad(\"gargantuan\"): size must be one of : small , medium, large, xlarge\n\n# use the debugger to see how R steps through the code\n\n#debugonce(priceOfSalad)\npriceOfSalad(\"medium\")\n\n[1] 12\n\n#debugonce(priceOfSalad)\npriceOfSalad(\"small\")\n\n[1] 9\n\n#debugonce(priceOfSalad)\npriceOfSalad(\"large\")\n\n[1] 14",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#be-careful-with-parentheses-and-curly-braces",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#be-careful-with-parentheses-and-curly-braces",
    "title": "32  “if / else if / else” constructs",
    "section": "32.6 Be careful with parentheses and {curly braces} !",
    "text": "32.6 Be careful with parentheses and {curly braces} !\n\n#.............................................................\n# Be careful with parentheses and {curly braces} !\n#\n# If you position the cursor right after\n# a (parentheses) or {curly brace} or [square-brackets], the matching\n# open/close (parentheses) or {curly brace} or [square-brackets] will\n# be highlighted in grey. It's hard to see at first but look for it.\n# It should happen.\n#\n# Try editing the above function by adding and/or removing\n# one or more (parentheses) or {curly braces} and then find the\n# new matching open/close. This should give you practice trying to \n# find a missing or extra open or close (parentheses) or {curly brace}\n# when you need to.\n#.............................................................",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#its-possible-that-no-if-will-run",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#its-possible-that-no-if-will-run",
    "title": "32  “if / else if / else” constructs",
    "section": "32.7 It’s possible that NO if will run!",
    "text": "32.7 It’s possible that NO if will run!\n\n#--------------------------------------------------------------------\n# It's possible that NO if will run!\n#--------------------------------------------------------------------\n\n# The following line will result in an error. \n# This is because, \"gargantuan\" is not one of the values that are \n# expected for the size of the salad. \n\npriceOfSalad(\"gargantuan\")   # ERROR object price not found \n\nError in priceOfSalad(\"gargantuan\"): size must be one of : small , medium, large, xlarge\n\n# You can use the debugger to see exactly why we get the error. \n#debugonce(priceOfSalad)\n\npriceOfSalad(\"gargantuan\")   # ERROR object price not found \n\nError in priceOfSalad(\"gargantuan\"): size must be one of : small , medium, large, xlarge",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#using-the-stop-function-to-check-arguments-to-a-function",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#using-the-stop-function-to-check-arguments-to-a-function",
    "title": "32  “if / else if / else” constructs",
    "section": "32.8 Using the “stop” function to check arguments to a function",
    "text": "32.8 Using the “stop” function to check arguments to a function\n\n# The error above occurred because the call to the function passed \n# \"gargantuan\" as the size. However, the code in the function did \n# not anticipate such a size. The error message was a little hard \n# to understand. It would have been much better if a more helpful \n# error message were displayed. This can be accomplished with the stop\n# function.\n#\n# The stop( SOME_ERROR_MESSAGE ) function can be used to display\n# a more appropriate error message as shown in the following example.\n#\n# The following version of the function includes a check\n# at the beginning of the code. If the size argument doesn't contain\n# one of the expected sizes then a meaningful error message is\n# displayed. See the next section for a more detailed discussion of \n# the stop function.\n\npriceOfSalad = function(size) {\n  \n  # check at the beginning for one of the correct sizes\n  if ( ! size %in% c(\"small\", \"medium\", \"large\", \"xlarge\")) {\n    stop(\"size must be one of : small , medium, large, xlarge\")\n  }\n  \n  if (size == \"small\") {\n    price = 9\n  }\n  \n  if (size == \"medium\"){\n    price = 12\n  } \n  \n  if (size == \"large\") {\n    price = 14\n  } \n  \n  if (size == \"xlarge\") {                          # an else DOES NOT HAVE a condition\n    price = 15\n  }\n  \n  price   # return the total price   \n}\n\npriceOfSalad(\"medium\")\n\n[1] 12\n\npriceOfSalad(\"small\")\n\n[1] 9\n\npriceOfSalad(\"gargantuan\") # ERROR: size must be one of small, medium, large, xlarge\n\nError in priceOfSalad(\"gargantuan\"): size must be one of : small , medium, large, xlarge",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#stopsome-error-message",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#stopsome-error-message",
    "title": "32  “if / else if / else” constructs",
    "section": "32.9 stop(“SOME ERROR MESSAGE”)",
    "text": "32.9 stop(“SOME ERROR MESSAGE”)\n\n############################################################################\n# stop(\"SOME ERROR MESSAGE\")\n#\n# The stop function stops the execution of a function and displays\n# an error message. \n############################################################################\n\n# The following function adds two square roots. \n# However, if either num1 or num2 are passed negative numbers, the\n# function will not work as expected. It will display some confusing\n# messages and return NaN. This is not ideal. \n\naddSquareRoots = function(num1, num2){\n  return (sqrt(num1) + sqrt(num2) )\n}\n\naddSquareRoots(49, 4)\n\n[1] 9\n\naddSquareRoots(-49,-2)   # Warning: NaNs produced ... etc.\n\nWarning in sqrt(num1): NaNs produced\n\n\nWarning in sqrt(num2): NaNs produced\n\n\n[1] NaN\n\n# This is why you should always check the values being passed into a function\n# to make sure that they are appropriate for the function. If the values\n# being passed into the function aren't appropriate then you can stop\n# the function with a better error message.\n\n# In the code below the stop will only happen if either num1 is less\n# than zero or num2 is less than zero\n\naddSquareRoots = function(num1, num2){\n  if ( num1 &lt; 0  |  num2 &lt; 0  )  {\n    stop(\"you specified a negative number. num1 and num2 may not be negative\")\n  }\n  \n  sqrt(num1) + sqrt(num2)\n}\n\naddSquareRoots(-49, 4)   # stop with an ERROR \n\nError in addSquareRoots(-49, 4): you specified a negative number. num1 and num2 may not be negative\n\naddSquareRoots(49, -4)   # stop with an ERROR\n\nError in addSquareRoots(49, -4): you specified a negative number. num1 and num2 may not be negative\n\naddSquareRoots(49, 4)    # This time it works\n\n[1] 9\n\naddSquareRoots(\"apple\",\"orange\")\n\nError in sqrt(num1): non-numeric argument to mathematical function\n\n# Modify addSquareRoots to also check for non-numeric arguments\naddSquareRoots = function(num1, num2){\n \n # check for non-numeric arguments\n if ( is.numeric(num1) == FALSE | is.numeric(num2) == FALSE){\n  stop(\"You specified a non numeric value. num1 and num2 must be numeric values.\")\n }\n \n # check for negative numbers\n if ( num1 &lt; 0  |  num2 &lt; 0  )  {\n  stop(\"you specified a negative number. num1 and num2 may not be negative\")\n }\n \n sqrt(num1) + sqrt(num2)\n}\n\n#debugonce(addSquareRoots)  # debug this to figure out what's going on\naddSquareRoots(49,\"orange\")\n\nError in addSquareRoots(49, \"orange\"): You specified a non numeric value. num1 and num2 must be numeric values.\n\n#debugonce(addSquareRoots)\naddSquareRoots(-49,-4)\n\nError in addSquareRoots(-49, -4): you specified a negative number. num1 and num2 may not be negative\n\n#debugonce(addSquareRoots)\naddSquareRoots(49, 4)\n\n[1] 9\n\naddSquareRoots(-2,\"orange\")\n\nError in addSquareRoots(-2, \"orange\"): You specified a non numeric value. num1 and num2 must be numeric values.\n\naddSquareRoots(\"apple\",4)\n\nError in addSquareRoots(\"apple\", 4): You specified a non numeric value. num1 and num2 must be numeric values.\n\n#debugonce(addSquareRoots)\naddSquareRoots(-49,-4)\n\nError in addSquareRoots(-49, -4): you specified a negative number. num1 and num2 may not be negative\n\n\n\nWhen a function is stopped no value is returned\n\n#---------------------------------------------------------\n# When a function is stopped no value is returned\n#---------------------------------------------------------\n\nanswer = addSquareRoots(49, -4)   # stop with an ERROR\n\nError in addSquareRoots(49, -4): you specified a negative number. num1 and num2 may not be negative\n\nanswer   # ERROR - answer has no value\n\nError in eval(expr, envir, enclos): object 'answer' not found\n\nanswer = addSquareRoots(49, 4)    # This time it works\nanswer   # 9\n\n[1] 9\n\nanswer = addSquareRoots(-1 , -1)   # stop with an ERROR\n\nError in addSquareRoots(-1, -1): you specified a negative number. num1 and num2 may not be negative\n\nanswer   # 9 - it never changed since the previous line ended with an error\n\n[1] 9\n\n# In general, I recommend (and require for homeworks) that you check all\n# of the arguments being passed into your functions to make sure that the\n# values make sense for what the function is supposed to do. \n# For example, if an argument is supposed to be numeric, you should stop\n# the function with an error if it is not numeric. (see more examples below)",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#practice",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#practice",
    "title": "32  “if / else if / else” constructs",
    "section": "32.10 — PRACTICE —",
    "text": "32.10 — PRACTICE —\n\n######################################################################.\n# QUESTION\n# \n# Write a function called myabs. The function should take an \n# argument named num that is expected to be passed a single number.\n# The function should return the absolute value of that number. \n# However, do NOT use the abs function to write your function. \n#\n# (a) Write the function using an if statement.\n#\n# (b) write the function using the ifelse() function\n#\n######################################################################.\n\n###########.\n# ANSWER\n###########.\n\n# YOUR CODE GOES HERE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#introducing-else-if-and-else",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#introducing-else-if-and-else",
    "title": "32  “if / else if / else” constructs",
    "section": "32.11 INTRODUCING “else if” AND “else”",
    "text": "32.11 INTRODUCING “else if” AND “else”\n\n#...............................................................\n#\n# INTRODUCING \"else if\" AND \"else\" \n#\n#   if (condition1)     { ... }\n#   else if(condition2) { ... }\n#   else if(condition3) { ... }\n#   etc ...                       # as many \"else if\" sections as you like\n#   else { ... }                  # no condition on an \"else\" section!!!\n#\n# The code in the block for the first condition that is TRUE will run.\n# NO OTHER BLOCKS OF CODE WILL RUN.\n# \n#...............................................................\n\n# In code (as below) that is structured as \n# if / else if / else if / ... etc ... / else\n# EXACTLY ONE AND ONLY ONE of the blocks of code will happen.\n\npriceOfSalad = function(size) {\n  \n  # EXACTLY ONE AND ONLY ONE of the following sections will execute.\n\n  if (size == \"small\") {\n    price = 9\n    \n  } else if (size == \"medium\") {\n    price = 12\n    \n  } else if (size == \"large\") {\n    price = 14\n    \n  } else if (size == \"xlarge\") {            \n    price = 15\n    \n  } else {  # if nothing else happened, this happens. An \"else\" does NOT have a condition\n    stop(\"size must be one of : small , medium, large, xlarge\")\n  }\n  \n  price   # return the total price   \n}\n\npriceOfSalad(\"medium\")\n\n[1] 12\n\npriceOfSalad(\"small\")\n\n[1] 9\n\npriceOfSalad(\"gargantuan\")   # ERROR - \"size must be one of : small , medium, large, xlarge\"\n\nError in priceOfSalad(\"gargantuan\"): size must be one of : small , medium, large, xlarge\n\n# another version ...\n# This one works but doesn't display a \"nice\" error message when size is not valid\n\npriceOfSalad = function(size) {\n  \n  # EXACTLY ONE AND ONLY ONE of the following sections will execute.\n  \n  if (size == \"small\") {\n    price = 9\n    \n  } else if (size == \"medium\") {\n    price = 12\n    \n  } else if (size == \"large\") {\n    price = 14\n    \n  } else if (size == \"xlarge\") {            \n    price = 15\n    \n  } \n  \n  price   # return the total price   \n}\n\npriceOfSalad(\"medium\")\n\n[1] 12\n\npriceOfSalad(\"small\")\n\n[1] 9\n\npriceOfSalad(\"gargantuan\")   # ERROR - object 'price' not found\n\nError in priceOfSalad(\"gargantuan\"): object 'price' not found\n\n# one more version - without an else\n#\n# If you specify incorrect size, then \n# price is $0 and you don't get any salad\npriceOfSalad = function(size) {\n\n  # if you don't specify a correct size, the price will be this:\n  price = 0\n  \n  # if the size were not small, medium, large or xlarge\n  # we would not have gotten this far. \n  \n  if (size == \"small\") {\n    price = 9\n    \n  } else if (size == \"medium\") {\n    price = 12\n    \n  } else if (size == \"large\") {\n    price = 14\n    \n  } else if (size == \"xlarge\") {  \n    price = 15  \n  }\n  \n  # THERE WAS NO \"else\".\n  #\n  # If none of the conditions were TRUE then none of the \"if\" or \"else if\"\n  # sections above would have been run. \n  #\n  # However, since we set the price to zero before the very first \"if\", \n  # when none of the \"if\" / \"else if\" sections run, the price will be zero.\n  \n  price\n}\n\npriceOfSalad(\"large\")        # 14\n\n[1] 14\n\npriceOfSalad(\"gargantuan\")   # 0 ... you don't have to pay, but you don't get a salad\n\n[1] 0",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#else-if-sections-that-are-arranged-in-a-specific-order",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#else-if-sections-that-are-arranged-in-a-specific-order",
    "title": "32  “if / else if / else” constructs",
    "section": "32.12 “else if” sections that are arranged in a specific order",
    "text": "32.12 “else if” sections that are arranged in a specific order\n\n#-----------------------------------------------------------------------------.\n# Sometimes the order that your write the different conditions makes a \n# difference between the code working as planned and not working at all.\n#\n# The following example makes use of \"else if\" sections that are arranged\n# in a very specific order. Remember that the FIRST condition that is TRUE\n# will cause that section of code to execute and NO OTHER sections of code\n# after that will execute.\n#-----------------------------------------------------------------------------.\n\n\n# Admission to amusement park based on age\n#\n#    65 and up :  30\n#    13 - 64:     40\n#    4 - 13:      25\n#    0 - 3:       0 (ie. free)\n\n\nadmissionPrice = function(age){\n  \n  # EXACTLY ONE OF THE PRICES WILL BE ASSIGNED\n  if (age &gt;= 65)\n    price = 30\n  \n  else if (age &gt;= 13)\n    price = 40\n  \n  else if (age &gt;= 4) \n    price = 25\n  \n  else            # DO NOT USE ANY CONDITION WITH A FINAL ELSE \n    price = 0\n  \n  price\n}\n\nadmissionPrice(70)\n\n[1] 30\n\nadmissionPrice(23)\n\n[1] 40\n\nadmissionPrice(2)\n\n[1] 0\n\n# WHY DOES THE FOLLOWING RETURN 30 ??? \nadmissionPrice(\"apple\")\n\n[1] 30\n\n# USE THE DEBUGGER TO FIGURE IT OUT\n#debugonce(admissionPrice)\nadmissionPrice(\"apple\")\n\n[1] 30\n\n# ANOTHER ATTEMPT AT THE SAME PROBLEM:\n# THIS WILL NOT WORK CORRECTLY !!!\n# TRY TO UNDERSTAND WHY NOT.\n\nadmissionPrice = function(age){\n  \n  if (age &gt;= 65) {\n    price = 30\n  }\n \n  if (age &gt;= 13) {\n    price = 40\n  }\n\n  if (age &gt;= 4) {\n    price = 25\n  }\n\n  # THIS WILL ALWAYS HAPPEN - FOR ANY AGE !!!\n  if (age &gt;= 0) {\n    price = 0\n  }\n\n  price\n}\n\nadmissionPrice(70)   # 0\n\n[1] 0\n\nadmissionPrice(25)   # 0\n\n[1] 0\n\n# You can reverse the order of the if's but that is NOT recommended\n# since you are causing R to do extra work. You are also causing someone\n# who is reading your program to think through extra logic. This\n# is NOT a good approach. Best approach is to use \"else if\" in \n# a situation where only one section of code needs to run.\n\n\n# 2nd ATTEMPT TO USE SEPARATE IFs.\n#\n# This WILL work correctly but IS NOT RECOMMENDED.\n#\n# *** REMEMBER - THE BEST APPROACH IF YOU HAVE ONLY ONE BLOCK OF CODE ***\n# *** THAT NEEDS TO EXECUTE IS TO USE \"else if\" SECTIONS.             ***\n\nadmissionPrice = function(age){\n  \n  price = 0\n  \n  if (age &gt;= 4)    \n    price = 25     # this WILL happen if the age is 70\n  \n  if (age &gt;= 13)\n    price = 40     # this will ALSO happen if the age is 70\n  \n  if (age &gt;= 65)   \n    price = 30     # this will ALSO happen if the age is 70\n  \n  price #the final price for age==70 will be 30, but price was set unnecessarily 3 different times\n}\n\n# This works but use the debugger to see why it is not ideal.\n# You are making R do extra work.\n\nadmissionPrice(70) # 30: correct result but not ideal approach. price is set 3 different times\n\n[1] 30\n\nadmissionPrice(23) # 40: correct result but not ideal approach. price is set 3 different times\n\n[1] 40\n\nadmissionPrice(2) # 40: correct result but not ideal approach. price is set 3 different times\n\n[1] 0\n\n\n\n# 3rd ATTEMPT TO USE SEPARATE IFs.\n#\n# This WILL work correctly but IS ALSO NOT RECOMMENDED.\n#\n#\n# *** REMEMBER - THE BEST APPROACH IF YOU HAVE ONLY ONE BLOCK OF CODE ***\n# *** THAT NEEDS TO EXECUTE IS TO USE \"else if\" SECTIONS.             ***\n\n\nadmissionPrice = function(age){\n  \n  price = 0\n  \n  if (age &gt;= 4 & age &lt; 13)    # code is overly complex and error prone\n    price = 25\n  \n  if (age &gt;= 13 & age &lt; 65)   # code is overly complex and error prone \n    price = 40\n  \n  if (age &gt;= 65)   \n    price = 30\n  \n  price\n}\n\nadmissionPrice(70)\n\n[1] 30\n\nadmissionPrice(23)\n\n[1] 40\n\nadmissionPrice(2)\n\n[1] 0\n\n\n\n#------------------------------------------\n# BE CAREFUL !!! \n#------------------------------------------\n\n# 4th ATTEMPT TO USE SEPARATE IFs.\n#\n# This does NOT work correctly!!!\n# Don't do this.\n#\n# *** REMEMBER - THE BEST APPROACH IF YOU HAVE ONLY ONE BLOCK OF CODE ***\n# *** THAT NEEDS TO EXECUTE IS TO USE \"else if\" SECTIONS.             ***\n\n\nadmissionPrice = function(age){\n  \n  price = 0\n  \n  if (age &gt;= 4 & age &lt; 13){    # this is NOT connected with the next if\n    price = 25\n  }\n  \n  if (age &gt;= 13 & age &lt; 65){   # this IS connected to the following else\n    price = 40\n    \n  } else {        # THIS LOGIC IS WRONG - this will happen for 5-year-olds\n    price = 30\n    \n  }\n  \n  price  # correct for adults and seniors    WRONG for children and infants\n}\n\nadmissionPrice(2)   # 30 - WRONG ANSWER - use the debugger to figure out why.\n\n[1] 30\n\nadmissionPrice(5)   # 30 - WRONG ANSWER - use the debugger to figure out why.\n\n[1] 30\n\nadmissionPrice(20)  # 40 - correct\n\n[1] 40\n\nadmissionPrice(70)  # 30 - correct\n\n[1] 30\n\n#debugonce(admissionPrice)\nadmissionPrice(2)   # 30 - WRONG ANSWER - use the debugger to figure out why.\n\n[1] 30\n\n\n\n######################################################################.\n# QUESTION\n# \n# Challenge - rewrite the previous code for the admissionPrice function.\n# However, this time DO NOT use an if statement.\n#\n# (a) write the code using nested ifelse() functions.\n#\n# (b) Write the code by using a named vector. \n#     For this version, do NOT use any if statements and do not use \n#     any ifelse() function calls.\n######################################################################.\n\n###########.\n# ANSWER\n###########.\n\n# YOUR CODE GOES HERE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#a-slightly-more-complex-example---same-ideas",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#a-slightly-more-complex-example---same-ideas",
    "title": "32  “if / else if / else” constructs",
    "section": "32.13 A slightly more complex example - same ideas",
    "text": "32.13 A slightly more complex example - same ideas\n\n#--------------------------------------------------------------\n# A slightly more complex example - same ideas\n#--------------------------------------------------------------\n\n# size and dressing options\n#\n#    small  (4 choices) : 9\n#    medium (5 choices) : 12\n#    large  (6 choices) : 14\n#    xlarge (7 choices) : 15\n#    any other size - stop with an error\n#\n#    dressing = TRUE or FALSE :  TRUE additional .50   FALSE = 0\n#    any other value stop with an error\n\npriceOfSalad = function(size, dressing) {\n  \n  # check at the beginning for one of the correct sizes\n  if ( ! size %in% c(\"small\", \"medium\", \"large\", \"xlarge\")) {\n    stop(\"size must be one of : small , medium, large, xlarge\")\n  }\n  \n  # check at the beginning for a valid value for dressing (should be TRUE or FALSE)\n  if (! is.logical(dressing) & length(dressing) == 1){\n    stop (\"dressing must be TRUE or FALSE\")\n  } \n  \n  # EXACTLY ONE OF THE FOLLOWING TWO BLOCKS OF CODE HAPPENS\n  \n  if (dressing) { # \"if(dressing)\" is the same as \"if(dressing == TRUE)\" \n    price = 0.50\n  } else {                          # an else DOES NOT HAVE a condition\n    price = 0\n  }\n\n  # STARTING A NEW \"if\"\n  #\n  # EXACTLY ONE OF THE FOLLOWING BLOCKS OF CODE HAPPENS\n  \n  if (size == \"small\") {\n    price = price + 9\n    \n  } else if (size == \"medium\") {\n    price = price + 12\n    \n  } else if (size == \"large\") {\n    price = price + 14\n    \n  } else {                          # an else DOES NOT HAVE a condition\n    price = price + 15\n  }\n  \n  price   # return the total price   \n}\n\npriceOfSalad(\"medium\", FALSE)\n\n[1] 12\n\npriceOfSalad(\"small\", TRUE)\n\n[1] 9.5\n\npriceOfSalad(\"gargantuan\", FALSE)\n\nError in priceOfSalad(\"gargantuan\", FALSE): size must be one of : small , medium, large, xlarge\n\npriceOfSalad(\"large\", \"caeser\")\n\nError in priceOfSalad(\"large\", \"caeser\"): dressing must be TRUE or FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#if-some_logical_vector-if-only-looks-at-the-first-logical-value",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#if-some_logical_vector-if-only-looks-at-the-first-logical-value",
    "title": "32  “if / else if / else” constructs",
    "section": "32.14 if ( SOME_LOGICAL_VECTOR ) # if only “looks at” the first logical value",
    "text": "32.14 if ( SOME_LOGICAL_VECTOR ) # if only “looks at” the first logical value\n\n#----------------------------------------------------------------------\n# if ( SOME_LOGICAL_VECTOR ){   # open curly brace goes here  \n#\n#    SOME CODE                  #  This is a \"block\" of code\n#    SOME MORE CODE\n#    EVEN MORE CODE\n#    ETC\n#\n# }                             # closing curly brace\n#\n# The if only \"looks at\" the first value in the logical vector.\n#\n# If the first value in the logical vector is TRUE then the \n# code in the \"block of code\" is done.\n#\n# If the first value in the logical vector is FALSE then the \n# code in the \"block of code\" is NOT done.\n#\n# In either case, the lines of code AFTER the if is done \n# whether or not the {block of code} for the if was done.\n#-----------------------------------------------------------------------------",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#vs-and-vs",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#vs-and-vs",
    "title": "32  “if / else if / else” constructs",
    "section": "32.15 & vs &&     and     | vs ||",
    "text": "32.15 & vs &&     and     | vs ||\n\n########################################################################.\n# In (conditions) of \"if\"s use && instead of & and use || instead of | \n########################################################################.\n# This topic is relevant for the following R constructs, not just \"if\": \n# \n#  - if statements\n# \n#  - while loops\n# \n#  - for loops\n#\n# Up until now, we have been using the operators & and |.\n# However, in the (conditions) of \"if\"s you should use\n# && instead of & and use || instead of |. The reasons why are explained below.\n#\n# & and | operators are \"vectorized\" - i.e. they work with vectors of\n# any length. For example, just like c(2,3,4)+c(100,200,300) returns\n# multiple answers, so too, c(TRUE,FALSE,TRUE) & c(FALSE,FALSE,TRUE)\n# returns multiple answers.\n#\n# The \"double\" version of the && and || operators are NOT \"vectorized\" \n# operators - i.e. you may only use them with single values.\n# \n# SEE EXAMPLES BELOW\n########################################################################.\n\n\n& and | are “vectorized”      && and || are NOT vectorized\n\n###########################################.\n# & is vectorized - i.e. multiple answers\n###########################################.\nc(TRUE, FALSE, TRUE, FALSE) & c(TRUE, TRUE, FALSE, FALSE)\n\n[1]  TRUE FALSE FALSE FALSE\n\n####################################################################.\n# ERROR - && is NOT vectorized - it only works with single values\n####################################################################.\nc(TRUE, FALSE, TRUE, FALSE) && c(TRUE, TRUE, FALSE, FALSE)\n\nError in c(TRUE, FALSE, TRUE, FALSE) && c(TRUE, TRUE, FALSE, FALSE): 'length = 4' in coercion to 'logical(1)'\n\n# These examples work as expected:\nFALSE && FALSE\n\n[1] FALSE\n\nFALSE && TRUE\n\n[1] FALSE\n\nTRUE && FALSE\n\n[1] FALSE\n\nTRUE && TRUE\n\n[1] TRUE\n\n#######################.\n# Same with | vs ||\n#######################.\n\n# | is vectorized - i.e. multiple answers\nc(TRUE, FALSE, TRUE, FALSE) | c(TRUE, TRUE, FALSE, FALSE)\n\n[1]  TRUE  TRUE  TRUE FALSE\n\n# ERROR - || is NOT vectorized - it only works with single values\nc(TRUE, FALSE, TRUE, FALSE) || c(TRUE, TRUE, FALSE, FALSE)\n\nError in c(TRUE, FALSE, TRUE, FALSE) || c(TRUE, TRUE, FALSE, FALSE): 'length = 4' in coercion to 'logical(1)'\n\n# These examples work as expected:\nFALSE || FALSE\n\n[1] FALSE\n\nFALSE || TRUE\n\n[1] TRUE\n\nTRUE || FALSE\n\n[1] TRUE\n\nTRUE || TRUE\n\n[1] TRUE\n\n\n\n\n&& and || are “short circuit” versions of & and |\n\n#############################################################################.\n#\n# THIS WILL BE EXPLAINED IN CLASS ON THE BOARD. THE NOTES ABOUT THIS \n# ARE IN THE SECTION ON \"for loops\". I WILL MOVE THAT INFORMATION HERE\n# LATER.\n#\n# - Prof. Rosenthal\n#\n#############################################################################.\n\n\n\nIn conditions of if statements use && instead of & and use || instead of |\n\n##############################################################################.\n# The logical condition in an \"if\" only expects one TRUE/FALSE value. Therefore\n# it is highly recommended that you use && instead of & and || instead of |.\n#\n# Also, by using && and || you can write more concise code by taking \n# advantage of the short-circuit nature of && and ||.\n#\n# (see examples below)\n#\n# The same will be true for for loops and while loops (which will be covered\n# very soon)\n##############################################################################.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#different-ways-of-writing-the-same-logic",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#different-ways-of-writing-the-same-logic",
    "title": "32  “if / else if / else” constructs",
    "section": "32.16 Different ways of writing the same logic",
    "text": "32.16 Different ways of writing the same logic\n\n#-----------------------------------------------------------\n# The following illustrates two concepts\n# \n# - Using multiple separate \"if\"s to build up an answer \n#\n# - \"Nested\" if's (i.e. an if inside of another if)\n#-----------------------------------------------------------\n\n# Write a function that determines qualities of a number\n# e.g. whole number, even, odd, positive, negative, zero, perfect square, etc.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#one-solution---using-multiple-separate-ifs-to-build-up-an-answer",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#one-solution---using-multiple-separate-ifs-to-build-up-an-answer",
    "title": "32  “if / else if / else” constructs",
    "section": "32.17 One solution - Using multiple separate “if”s to build up an answer",
    "text": "32.17 One solution - Using multiple separate “if”s to build up an answer\n\n# The following version just uses if (there is no \"else\" in this version)\n\ndescribeNumber &lt;- function(n) {\n  \n  # make sure that n is a single number and stop if it isn't\n  \n  if (!is.numeric(n) | length(n) != 1){\n    stop (\"n must be a single number\")\n  }\n  \n  # start with an empty character vector \n  answer &lt;- character(0)   # empty answer so far\n  \n  # Each of the following checks to see if the number meets some condition.\n  #\n  # If the condition is TRUE, then a new description of the number\n  # is added to the answer.\n  #\n  # If the condition is FALSE, then nothing happens with that if and \n  # the next if is checked.\n  \n  if (trunc(n) == n) {\n    answer &lt;- c(answer, \"whole number\")\n  } \n\n  if (trunc(n) != n) {\n    answer &lt;- c(answer, \"not a whole number\")\n  }\n\n  if(n%%2 == 0){\n    answer &lt;- c(answer, \"even\")   \n  } \n  \n  if(n%%2 == 1){\n    answer &lt;- c(answer, \"odd\")   \n  } \n  \n  if (n &gt; 0){\n    answer &lt;- c(answer, \"positive\")   \n  } \n  \n  if (n &lt; 0) {\n    answer &lt;- c(answer, \"negative\")   \n  } \n  \n  if (n==0) {\n    answer &lt;- c(answer, \"zero\")\n  }\n  \n  # If you take the sqrt of a negative number R will \n  # give you an error. \n  #\n  # Make sure that we don't run the sqrt function unless\n  # we know that n is not negative.\n  if (n&gt;=0){\n    \n    # If we got this far then we know that n is not negative so we \n    # can use the sqrt(n) function.\n    #\n    # An if inside of an if is known as a \"nested if\"\n    \n    if (sqrt(n) == trunc(sqrt(n))){\n      \n      # n is not negative and is a perfect square\n      answer &lt;- c(answer, \"perfect square\")\n    }\n    \n  }\n  \n  \n  return (answer)  \n}\n\ndescribeNumber(\"apple\")\n\nError in describeNumber(\"apple\"): n must be a single number\n\ndescribeNumber(c(10,20))\n\nError in describeNumber(c(10, 20)): n must be a single number\n\ndescribeNumber(2.5)\n\n[1] \"not a whole number\" \"positive\"          \n\ndescribeNumber(7)\n\n[1] \"whole number\" \"odd\"          \"positive\"    \n\ndescribeNumber(-7.5)\n\n[1] \"not a whole number\" \"negative\"          \n\ndescribeNumber(4)\n\n[1] \"whole number\"   \"even\"           \"positive\"       \"perfect square\"\n\ndescribeNumber(0)\n\n[1] \"whole number\"   \"even\"           \"zero\"           \"perfect square\"\n\n#debugonce(describeNumber)\ndescribeNumber(-7.5)\n\n[1] \"not a whole number\" \"negative\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#another-version---nested-ifs-i.e.-an-if-inside-of-another-if",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#another-version---nested-ifs-i.e.-an-if-inside-of-another-if",
    "title": "32  “if / else if / else” constructs",
    "section": "32.18 Another version - “Nested” if’s (i.e. an if inside of another if)",
    "text": "32.18 Another version - “Nested” if’s (i.e. an if inside of another if)\n\n# NEW VERSION\n#\n# The following version uses different forms of the if\n#\n# - just an if\n# - an if with an else\n# - an if with an else if and an else\n# - \"nested\" statements, i.e. one if or else or \"else if\" inside \n#   the body of another one\n#\n# This makes the code \"faster\" for R to execute and\n# can make writing the code more straight forward for\n# people. There is less repetition with this style.\n\n\ndescribeNumber &lt;- function(n) {\n  # make sure that n is a single number and stop if it isn't\n  if (!is.numeric(n) | length(n) != 1){\n    stop (\"n must be a single number\")\n  }\n  \n  answer &lt;- character(0)   # empty answer so far\n\n  # one of the following pieces of code will run , but never both  \n  if (trunc(n) == n) {\n    answer &lt;- c(answer, \"whole number\")\n    \n    if(n%%2 == 0){\n      answer &lt;- c(answer, \"even\")   \n    } else {\n      answer &lt;- c(answer, \"odd\")   \n    } \n    \n    \n  } else {\n    answer &lt;- c(answer, \"not a whole number\")\n  }\n  \n  \n  # only 1 of the follwing will happen  \n  if (n &gt; 0){\n    answer &lt;- c(answer, \"positive\")   \n  } else if (n &lt; 0) {\n    answer &lt;- c(answer, \"negative\")   \n  } else {\n    answer &lt;- c(answer, \"zero\")\n  }\n  \n  # If you take the sqrt of a negative number R will \n  # give you an error. \n  #\n  # Make sure that we don't run the sqrt function unless\n  # we know that n is not negative.\n  if (n&gt;=0){\n    if (sqrt(n) == trunc(sqrt(n))){\n      answer &lt;- c(answer, \"perfect square\")\n    }\n  }\n  \n  return (answer)  \n}\n\n\ndescribeNumber(\"apple\")\n\nError in describeNumber(\"apple\"): n must be a single number\n\ndescribeNumber(c(10,20))\n\nError in describeNumber(c(10, 20)): n must be a single number\n\ndescribeNumber(2.5)\n\n[1] \"not a whole number\" \"positive\"          \n\ndescribeNumber(7)\n\n[1] \"whole number\" \"odd\"          \"positive\"    \n\ndescribeNumber(-7.5)\n\n[1] \"not a whole number\" \"negative\"          \n\ndescribeNumber(4)\n\n[1] \"whole number\"   \"even\"           \"positive\"       \"perfect square\"\n\ndescribeNumber(0)\n\n[1] \"whole number\"   \"even\"           \"zero\"           \"perfect square\"\n\ndebugonce(describeNumber)\ndescribeNumber(-7.5)\n\ndebugging in: describeNumber(-7.5)\ndebug at &lt;text&gt;#16: {\n    if (!is.numeric(n) | length(n) != 1) {\n        stop(\"n must be a single number\")\n    }\n    answer &lt;- character(0)\n    if (trunc(n) == n) {\n        answer &lt;- c(answer, \"whole number\")\n        if (n%%2 == 0) {\n            answer &lt;- c(answer, \"even\")\n        }\n        else {\n            answer &lt;- c(answer, \"odd\")\n        }\n    }\n    else {\n        answer &lt;- c(answer, \"not a whole number\")\n    }\n    if (n &gt; 0) {\n        answer &lt;- c(answer, \"positive\")\n    }\n    else if (n &lt; 0) {\n        answer &lt;- c(answer, \"negative\")\n    }\n    else {\n        answer &lt;- c(answer, \"zero\")\n    }\n    if (n &gt;= 0) {\n        if (sqrt(n) == trunc(sqrt(n))) {\n            answer &lt;- c(answer, \"perfect square\")\n        }\n    }\n    return(answer)\n}\ndebug at &lt;text&gt;#18: if (!is.numeric(n) | length(n) != 1) {\n    stop(\"n must be a single number\")\n}\ndebug at &lt;text&gt;#22: answer &lt;- character(0)\ndebug at &lt;text&gt;#25: if (trunc(n) == n) {\n    answer &lt;- c(answer, \"whole number\")\n    if (n%%2 == 0) {\n        answer &lt;- c(answer, \"even\")\n    }\n    else {\n        answer &lt;- c(answer, \"odd\")\n    }\n} else {\n    answer &lt;- c(answer, \"not a whole number\")\n}\ndebug at &lt;text&gt;#36: answer &lt;- c(answer, \"not a whole number\")\ndebug at &lt;text&gt;#41: if (n &gt; 0) {\n    answer &lt;- c(answer, \"positive\")\n} else if (n &lt; 0) {\n    answer &lt;- c(answer, \"negative\")\n} else {\n    answer &lt;- c(answer, \"zero\")\n}\ndebug at &lt;text&gt;#41: if (n &lt; 0) {\n    answer &lt;- c(answer, \"negative\")\n} else {\n    answer &lt;- c(answer, \"zero\")\n}\ndebug at &lt;text&gt;#44: answer &lt;- c(answer, \"negative\")\ndebug at &lt;text&gt;#54: if (n &gt;= 0) {\n    if (sqrt(n) == trunc(sqrt(n))) {\n        answer &lt;- c(answer, \"perfect square\")\n    }\n}\ndebug at &lt;text&gt;#60: return(answer)\nexiting from: describeNumber(-7.5)\n\n\n[1] \"not a whole number\" \"negative\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#using-the-debugger-to-follow-which-lines-of-code-are-actually-run",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#using-the-debugger-to-follow-which-lines-of-code-are-actually-run",
    "title": "32  “if / else if / else” constructs",
    "section": "32.19 using the debugger to follow which lines of code are actually run",
    "text": "32.19 using the debugger to follow which lines of code are actually run\n\n###############################################################################\n# You can see exactly how R processes the code by using the debugger to follow\n# which lines of code are actually run. Just keep typing \"n\" or press the \"next\"\n# button  to run the \"next\" line of code.\n###############################################################################\n\n#debugonce(describeNumber)\ndescribeNumber(4)\n\n[1] \"whole number\"   \"even\"           \"positive\"       \"perfect square\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#summary-of-different-forms-of-if-statement",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#summary-of-different-forms-of-if-statement",
    "title": "32  “if / else if / else” constructs",
    "section": "32.20 Summary of different forms of if statement",
    "text": "32.20 Summary of different forms of if statement\n\n#------------------------------------------------\n# Summary of different forms of if statement\n#------------------------------------------------\n\n# 1a. if without an else\n#\n#      if( SOME_TRUE_FALSE_CONDITION ) {\n#             LINE 1\n#             LINE 2\n#             ETC ...\n#      }\n#\n#    either the code happens or it doesn't\n#\n# 1b. Multiple if's in a row\n#\n#      if( SOME_TRUE_FALSE_CONDITION ) {\n#             LINE 1\n#             LINE 2\n#             ETC ...\n#      }\n#\n#      if( SOME_TRUE_FALSE_CONDITION ) {\n#             LINE 1\n#             LINE 2\n#             ETC ...\n#      }\n#\n#      if( SOME_TRUE_FALSE_CONDITION ) {\n#             LINE 1\n#             LINE 2\n#             ETC ...\n#      }\n#\n#\n#\n# 2. if with else\n#\n#      if( SOME_TRUE_FALSE_CONDITION ) {\n#             IF CODE LINE 1\n#             IF CODE LINE 2\n#             ETC ...\n#      } else {\n#             ELSE CODE LINE 1\n#             ELSE CODE LINE 2\n#             ETC ...\n#      }\n#\n#    DEFINITELY one of the blocks of code happens\n#    when the condition on the if is TRUE the if happens\n#    when the condition on the if is FALSE the else happens\n#    they NEVER both happen.\n#\n# 3. if with one else if (but no else)\n#\n#      if( SOME_TRUE_FALSE_CONDITION ) {\n#             IF CODE LINE 1\n#             IF CODE LINE 2\n#             ETC ...\n#      } else if (ANOTHER_TRUE_FALSE_CONDITION) {\n#             ELSE IF CODE LINE 1\n#             ELSE IF CODE LINE 2\n#             ETC ...\n#      }\n#\n#    Possibly the if happens\n#    possibly the else if happens\n#    possibly neither of them happen\n#    They NEVER both happen\n#\n# 4. if with more than one else if\n#    every if and \"else if\" has a condition.\n#\n#      if( SOME_TRUE_FALSE_CONDITION ) {\n#             IF CODE LINE 1\n#             IF CODE LINE 2\n#             ETC ...\n#      } else if (ANOTHER_TRUE_FALSE_CONDITION) {\n#             ELSE IF CODE LINE 1\n#             ELSE IF CODE LINE 2\n#             ETC ...\n#      } else if (YET_A_THIRD_TRUE_FALSE_CONTISION) {\n#             ELSE IF CODE LINE 1\n#             ELSE IF CODE LINE 2\n#             ETC ...\n#      }\n#\n#    The first \n#    condition that turns out to be TRUE\n#    causes the code below that condition to run\n#\n#    BOTTOM LINE - \n#      o ONE of the if / else if  sections may run\n#      o Never more than one section will run\n#      o Possibly none of the sections will run\n#\n# 5. if with else if (possibly many else if's) and a final else\n# \n#      if( SOME_TRUE_FALSE_CONDITION ) {\n#             IF CODE LINE 1\n#             IF CODE LINE 2\n#             ETC ...\n#      } else if (ANOTHER_TRUE_FALSE_CONDITION) {\n#             ELSE IF CODE LINE 1\n#             ELSE IF CODE LINE 2\n#             ETC ...\n#      } else if (YET_A_THIRD_TRUE_FALSE_CONTISION) {\n#             ELSE IF CODE LINE 1\n#             ELSE IF CODE LINE 2\n#             ETC ...\n#      } else {\n#             ELSE CODE LINE 1\n#             ELSE CODE LINE 2\n#             ETC ...\n#      }\n#\n#    SAME as above, but when none of the if/\"else if\" conditions\n#    are TRUE then the final else section runs\n#\n# 6. nested if\n#\n#    an if \n#    (or if ... else ...\n#     or if ... else if ... else ...\n#     etc.)\n#\n#    inside another if\n#    (or if ... else ...\n#     or if ... else if ... else ...\n#     etc.)",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#another-example",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#another-example",
    "title": "32  “if / else if / else” constructs",
    "section": "32.21 another example",
    "text": "32.21 another example\n\n#------------------------------\n# another example\n#------------------------------\n\n# Write a function to return the price of admission to an amusement park.\n#\n# Business rules: admission price depends on age and weekday vs weekend\n# and age of the guest.\n\n# RULES: \n# WEEKENDS\n# adults 13 and up : $40\n# children: 4 to 12 : $30\n# children below 3 are free\n#\n# WEEKDAYS\n# adults 13 and up : $38\n# children: 4 to 12 : $22\n# children below 3 are free\n#\n# ALL TIMES adults 65 and up get 10% off\n\n# day is one of 'mon' 'tue' etc.\n# age is a single number\n\nadmissionPrice &lt;- function (day, age) {\n  # make sure that day is valid - if not then stop with an error\n  if( ! (day %in% c(\"sun\",\"mon\",\"tue\",\"wed\",\"thu\",\"fri\",\"sat\"))    ){\n    stop( \"day must be one of sun mon tue wed thu fri sat\")\n  }\n  \n  # make sure that age is valid - if not then stop with an error\n  if (!is.numeric(age) | length(age) != 1){\n    stop(\"age must be a single number\")\n  }\n  \n  if ( day %in% c(\"sun\",\"sat\")) {\n\n    # THIS IS A WEEKEND\n    if(age &gt;= 13){   # ADULT\n      price = 40\n    } else if (age &gt;= 4){\n      price = 30\n    } else {\n      price = 0\n    }\n\n  } else {\n    \n    # THIS IS A WEEK DAY\n    if(age &gt;= 13){   # ADULT\n      price = 38\n    } else if (age &gt;= 4){\n      price = 22\n    } else {\n      price = 0\n    }\n  }\n  \n  # THIS CODE WILL RUN ON BOTH WEEKENDS AND WEEKDAYS\n  if (age &gt;= 65) {\n    price &lt;- price * .9\n  }\n  \n  return (price)\n}\n\n\nadmissionPrice (\"sun\", 35)   # 40\n\n[1] 40\n\nadmissionPrice (\"tue\", 35)   # 38\n\n[1] 38\n\nadmissionPrice (\"tue\", 75)   # 34.2\n\n[1] 34.2\n\nadmissionPrice (\"sun\", 5)   #\n\n[1] 30\n\nadmissionPrice (\"sun\", 2)   #\n\n[1] 0\n\nadmissionPrice (\"xyz\", 35)   # ERROR: day must be one of sun ...\n\nError in admissionPrice(\"xyz\", 35): day must be one of sun mon tue wed thu fri sat\n\nadmissionPrice (\"tue\", 35)   # 38\n\n[1] 38",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#some-useful-functions---sample-readline-set.seed-all-any",
    "href": "000900-if_ifElse_if_elseif_else_nestedStatements-v019.html#some-useful-functions---sample-readline-set.seed-all-any",
    "title": "32  “if / else if / else” constructs",
    "section": "32.22 Some useful functions - sample , readline , set.seed , all , any",
    "text": "32.22 Some useful functions - sample , readline , set.seed , all , any\n\n############################################################################.\n# The main point of this section is to describe the \n# if / else if / else  \n# constructs in R. However, the following functions will be useful \n# in constructing examples that demonstrate the concepts\n# later.\n############################################################################.\n\n\nresponseFromUser = readline( MESSAGE_TO_DISPLAY )\n\n###############################################################################.\n# responseFromUser = readline( MESSAGE_TO_DISPLAY )  \n#\n# The readline function displays a message to the user. Then it takes whatever\n# info the user types and returns it as a character value.\n#\n# NOTE: The code in this section asks the user questions and expects\n#       the user to type an answer. Therefore you should copy this code\n#       into R to try it. The correct functioning of the code cannot\n#       be demonstrated by automatically generating the output since the \n#       output requires the user to type an answer to the questions \n#       that are displayed.\n###############################################################################.\n\n################.\n# Try this in R\n################.\n\n# x = readline(\"Please enter a number: \")\n# x   # This is a character value of whatever was entered by the user\n\n# # to use it as a number you must convert it using as.numeric\n# as.numeric(x) * 2   \n\npickRandomNumbers = function(){\nhowMany = readline(\"How many random numbers should we pick? \")\n howMany = as.numeric(howMany)\n\n largest = readline(\"What should be the largest possible number? \")\n largest = as.numeric(largest)\n \n sample(largest, howMany)\n}\n\n################.\n# Try this in R\n################.\n\n# randomNumbers = pickRandomNumbers()\n# randomNumbers\n\n# randomNumbers = pickRandomNumbers()\n# randomNumbers\n\n\n\n— Practice —\n\n\n\n\n\n\nUsing readline to ask a question\n\n\n\n\n#############################################################################.\n# Write the following function:\n#\n#   washingtonsHorse = function()\n#\n# The function takes no parameters. \n# The function asks the user \n#\n# Use the readline() function to ask the question:\n#\n#   \"What color was George Washington's white horse?\"\n#\n# If the user responds with the correct answer (i.e. white) then the function\n# should return TRUE, otherwise the function should return FALSE. Assume that\n# the correct answer must be entered lowercase. If the answer is in UPPER CASE\n# the function should return FALSE.\n#\n# For example:\n#\n#    &gt; washingtonsHorse()  # users answer is after the \"?\" (user get's it wrong)\n#    What color was George Washington's white horse? green\n#    [1] FALSE\n#\n#    &gt; washingtonsHorse()  # users answer is after the \"?\" (user get's it right)\n#    What color was George Washington's white horse? white\n#    [1] TRUE\n#\n#    &gt; washingtonsHorse()  # users answer is after the \"?\" (user get's it wrong, but wrong CASE)\n#    What color was George Washington's white horse? WHITE\n#    [1] FALSE\n#\n#############################################################################.\n\n\n\n\n\n\n\nANSWER\n\n\n\n\n\n\nwashingtonsHorse = function(){\n  answer = readline(\"What color was George Washington's white horse? \")\n  \n  if (answer == \"white\"){\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\n# NOTE: Since this code involves interaction with the user, the results of \n#       running it cannot be automatically generated for this website. \n#       To try the code copy/paste it into RStudio and run it as follows:\n#\n#          washingtonsHorse()\n\n\n\n\n\n\n\n\n\n\n\n\nUsing toupper, tolower for case insensitive responses\n\n\n\n\n#############################################################################.\n# Read the documentation for the tolower() function (i.e. ?tolower )\n# \n# Use the toupper function to modify the answer to the previous question so \n# that the function returns TRUE as long as the user types \"white\" in any of \n# the possible cases. For example, the function should return TRUE if the user \n# responds with \"white\" or \"WHITE\" or \"White\" or \"wHITe\", etc.\n#############################################################################.\n\n\n\n\n\n\n\nANSWER\n\n\n\n\n\n\nwashingtonsHorse = function(){\n  answer = readline(\"What color was George Washington's white horse? \")\n  \n  if (tolower(answer) == \"white\"){\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\n# NOTE: Since this code involves interaction with the user, the results of \n#       running it cannot be automatically generated for this website. \n#       To try the code copy/paste it into RStudio and run it as follows:\n#\n#          washingtonsHorse()\n\n\n\n\n\n\n\n\n\n\n\n\nCreate more questions (nothing new here)\n\n\n\n\n#############################################################################.\n# NOTE: This question assumes that you already answered the previous questions\n# correctly.\n#\n# Write 2 more functions that ask different questions (make up your own).\n# Your new function should return TRUE if the user gets the right answer\n# and FALSE otherwise.\n#############################################################################.\n\n\n\n\n\n\n\nANSWER\n\n\n\n\n\n\n# The following is a sample answer - you should make up your own question/answer.\n\ncapitalOfNewYork = function(){\n  answer = readline(\"What is the capital of New York state? \")\n  \n  if (tolower(answer) == \"albany\"){\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntwoPlusTwo = function(){\n  answer = readline(\"What is 2+2 ? \")\n  \n  if (answer == 4 || tolower(answer) == \"four\"){\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a quiz\n\n\n\n\n#############################################################################.\n# NOTE: This question assumes that you already answered the previous questions\n# correctly.\n#\n# Create the following function:\n#\n#   quiz = function()\n#\n# The function should make use of the three functions you created for \n# the answers to the previous questions. The function should ask the user\n# all three questions. \n#\n# The function should display RIGHT or WRONG after each answer the user gives. \n#\n# The function should then display a message that includes the number of \n# answers the user got right and wrong (see example below).\n# Use \"cat\" to display this message.\n#\n# EXAMPLE\n#   &gt; quiz()\n#   What color was George Washington's white horse? blue\n#   WRONG\n#\n#   What is the capital of New York state? albany\n#   RIGHT\n#\n#   What is 2+2 ? 3\n#   WRONG\n#\n#   You got 1 right and 2 wrong.\n#############################################################################.\n\n\n\n\n\n\n\nANSWER\n\n\n\n\n\n\n# The following is a sample answer - you should make up your own question/answer.\n\nquiz = function(){\n  totalCorrect = 0\n  totalWrong = 0\n  \n  correct = washingtonsHorse()\n  if ( correct ){\n    cat(\"RIGHT\\n\\n\")\n    totalCorrect = totalCorrect + 1\n  } else {\n    cat(\"RIGHT\\n\\n\")\n    totalWrong = totalWrong + 1\n  } \n\n  correct = capitalOfNewYork()\n  if ( correct ){\n    cat(\"RIGHT\\n\\n\")\n    totalCorrect = totalCorrect + 1\n  } else {\n    cat(\"RIGHT\\n\\n\")\n    totalWrong = totalWrong + 1\n  } \n\n  correct = twoPlusTwo()\n  if ( correct ){\n    cat(\"RIGHT\\n\\n\")\n    totalCorrect = totalCorrect + 1\n  } else {\n    cat(\"RIGHT\\n\\n\")\n    totalWrong = totalWrong + 1\n  } \n\n  # Note - the \\n below is required - try taking it out and see what happens.\n  cat(\"\\nYou got\", totalCorrect, \"right and\", totalWrong, \"wrong.\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\nBetter quiz - display the correct answers if user was wrong\n\n\n\n\n#############################################################################.\n# NOTE: This question assumes that you already answered the previous questions\n# correctly.\n#\n# Modify the code that you already wrote. In this new version, \n# if the user gets a question wrong the computer should display WRONG \n# followed by the correct answer.\n# \n# Keep the info about the questions and answer inside the\n# individual question functions. The quiz function should not have any \n# answers directly coded into it. \n# \n# Therefore to do this, modify the code so that \n# all of the messages that are displayed with cat() regarding RIGHT/WRONG a\n# specific answer is in the question function.\n# The quiz function should only contain the last message as to how many\n# the user got right/wrong. \n#\n# EXAMPLE\n#   &gt; quiz()\n#   What color was George Washington's white horse? blue\n#   WRONG - the correct answer is \"white\"\n#\n#   What is the capital of New York state? albany\n#   RIGHT\n#\n#   What is 2+2 ? 3\n#   WRONG - the correct answer is 4\n#\n#   You got 1 right and 2 wrong.\n#############################################################################.\n\n\n\n\n\n\n\nANSWER\n\n\n\n\n\n\n##################################.\n# Modify the question functions:\n##################################.\nwashingtonsHorse = function(){\n  answer = readline(\"What color was George Washington's white horse? \")\n  correctAnswer = \"white\"\n\n  if (tolower(answer) == tolower(correctAnswer)){\n    cat(\"RIGHT\\n\")\n    return(TRUE)\n  } else {\n    cat('WRONG - the correct answer is \"', correctAnswer, '\"\\n', sep=\"\")\n    return(FALSE)\n  }\n}\n\ncapitalOfNewYork = function(){\n  answer = readline(\"What is the capital of New York state? \")\n  correctAnswer = \"Albany\"\n  \n  if (tolower(answer) == tolower(correctAnswer)){\n    cat(\"RIGHT\\n\")\n    return(TRUE)\n  } else {\n    cat('WRONG - the correct answer is \"', correctAnswer, '\"\\n', sep=\"\")\n    return(FALSE)\n  }\n}\n\ntwoPlusTwo = function(){\n  answer = readline(\"What is 2+2 ? \")\n  correctAnswer = 4\n  \n  if (answer == 4 || tolower(answer) == \"four\"){\n    cat(\"RIGHT\")\n    return(TRUE)\n  } else {\n    cat('WRONG - the correct answer is ', correctAnswer, '\\n', sep=\"\")\n    return(FALSE)\n  }\n}\n\n##########################################################################.\n# Modify the quiz function: \n#\n# remove the cat(\"RIGHT\") and cat(\"WRONG\") lines from the quiz function\n##########################################################################.\nquiz = function(){\n  totalCorrect = 0\n  totalWrong = 0\n  \n  correct = washingtonsHorse()\n  if ( correct ){\n    totalCorrect = totalCorrect + 1\n  } else {\n    totalWrong = totalWrong + 1\n  } \n\n  correct = capitalOfNewYork()\n  if ( correct ){\n    totalCorrect = totalCorrect + 1\n  } else {\n    totalWrong = totalWrong + 1\n  } \n\n  correct = twoPlusTwo()\n  if ( correct ){\n    totalCorrect = totalCorrect + 1\n  } else {\n    totalWrong = totalWrong + 1\n  } \n\n  # Note - the \\n below is required - try taking it out and see what happens.\n  cat(\"\\nYou got\", totalCorrect, \"right and\", totalWrong, \"wrong.\")\n}\n\n\n\n\n\n\n\n\nsample( SOME_VECTOR , N )\n\nrm(list=ls())\n\n##############################################################################\n#\n# sample( SOME_VECTOR , SIZE ) \n#\n#    randomly select the specified number of values from the vector\n##############################################################################\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 5)   # randomly select 5 values\n\n[1]  10  80  20 100  50\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 5)   # randomly select 5 values\n\n[1]  60  10  80  70 100\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 5)   # randomly select 5 values\n\n[1] 10 20 70 60 90\n\nsample(c(\"pizza\", \"burgers\", \"chicken\", \"soup\"), 1)  # randomly select a meal\n\n[1] \"chicken\"\n\nsample(c(\"pizza\", \"burgers\", \"chicken\", \"soup\"), 1)  # randomly select a meal\n\n[1] \"chicken\"\n\nsample(c(\"pizza\", \"burgers\", \"chicken\", \"soup\"), 1)  # randomly select a meal\n\n[1] \"burgers\"\n\nsample(c(\"pizza\", \"burgers\", \"chicken\", \"soup\"), 1)  # randomly select a meal\n\n[1] \"soup\"\n\nsample(c(\"pizza\", \"burgers\", \"chicken\", \"soup\"), 1)  # randomly select a meal\n\n[1] \"chicken\"\n\n# replace = true\n#\n# If you specify replace=TRUE then the same value could be picked more than once\n# in the same sample\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 5, replace=TRUE)   # randomly select 5 values\n\n[1] 80 80 80 80 60\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 5, replace=TRUE)   # randomly select 5 values\n\n[1] 30 90 70 60 70\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 5, replace=TRUE)   # randomly select 5 values\n\n[1] 30 90 20 90 10\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 5, replace=TRUE)   # randomly select 5 values\n\n[1] 50 90 40 40 60\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 5, replace=TRUE)   # randomly select 5 values\n\n[1] 50 90 70 90 20\n\n\n\n\nsample(100, SOME_NUMBER)\n\n#--------------------------------------------\n# BE CAREFUL: \n#\n#     sample(100, SOME_NUMBER) \n#        randomly selects values from 1:100\n#--------------------------------------------\n\n# If there is a single positive number as the first argument sample \n# actually chooses from the sequence starting at 1\n\nsample(100, 1)   # a single random number from 1:100\n\n[1] 38\n\nsample(100, 1)   # a single random number from 1:100\n\n[1] 63\n\nsample(100, 1)   # a single random number from 1:100\n\n[1] 60\n\nsample(100, 3)   # 3 random number from 1:100\n\n[1] 95 45 12\n\n# This does the obvious thing ...\nsample(\"burgers\", 1)    # burgers (of course - there is only one choice)\n\n[1] \"burgers\"\n\nsample(\"burgers\", 1)    # burgers (of course - there is only one choice)\n\n[1] \"burgers\"\n\nsample(\"burgers\", 1)    # burgers (of course - there is only one choice)\n\n[1] \"burgers\"\n\n# If you sample without specifying a size R will return all of the values\n# in a random order\n\nsample(c(10,20,30,40,50,60,70,80,90,100))\n\n [1]  60  50  20  70  80  10  90 100  40  30\n\n# same as \nsample(c(10,20,30,40,50,60,70,80,90,100), 10)\n\n [1]  60  40  80  20  30  90  50 100  70  10\n\n\n\n\n“reproducible randomness” - set.seed( SOME_NUMBER )\n\n#------------------------------------------------------------------------------.\n# set.seed( SOME_NUMBER )\n#\n# The sample function is one of several functions that can be used to \n# provide \"randomness\" in a program (also see ?runif).\n#\n# If every time you run a program you get different results, it can be hard\n# to know for sure if the program is working correctly. It is therefore \n# helpful if there is would be a way to guarantee that the program produces\n# the same results every time it is run. This can be done with \n# the set.seed(SOME_NUMBER) function. The number that is passed to the \n# set.seed function is known as the \"seed\". Each time the set.seed\n# function is called with the same seed number, the same sequence of \n# randomness starts again. Different \"seed\" values cause different\n# sequences of randomness. See below for details.\n#------------------------------------------------------------------------------.\n\n# set the seed to a specific number (ie. 1) and then choose some random values.\nset.seed(1)\nsample(c(10,20,30,40,50,60,70,80,90,100), 2, replace=TRUE)   # randomly select 2 values\n\n[1] 90 40\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 2, replace=TRUE)   # randomly select 2 values\n\n[1] 70 10\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 2, replace=TRUE)   # randomly select 2 values\n\n[1] 20 70\n\n# set the seed to a different specific number (ie. 2) to get different random values\nset.seed(2)\nsample(c(10,20,30,40,50,60,70,80,90,100), 2, replace=TRUE)   # randomly select 2 values\n\n[1] 50 60\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 2, replace=TRUE)   # randomly select 2 values\n\n[1] 60 80\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 2, replace=TRUE)   # randomly select 2 values\n\n[1] 10 10\n\n# If we set the seed back to 1 again, we will get the same random values\n# that we got the first time we set the seed to 1.\nset.seed(1)\nsample(c(10,20,30,40,50,60,70,80,90,100), 2, replace=TRUE)   # randomly select 5 values\n\n[1] 90 40\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 2, replace=TRUE)   # randomly select 5 values\n\n[1] 70 10\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 2, replace=TRUE)   # randomly select 5 values\n\n[1] 20 70\n\n# another example\n\nset.seed(1567)   # the seed can be any number\nsample(1:100, 1)\n\n[1] 27\n\nsample(1:100, 1)\n\n[1] 7\n\nsample(1:100, 1)\n\n[1] 50\n\nsample(1:100, 1)\n\n[1] 89\n\nset.seed(1567)   # set the seed again to the same number to get the same results\nsample(1:100, 1)\n\n[1] 27\n\nsample(1:100, 1)\n\n[1] 7\n\nsample(1:100, 1)\n\n[1] 50\n\nsample(1:100, 1)\n\n[1] 89\n\n\n\n\n—Practice—\n\n\n\n\n\n\nCreate a quiz\n\n\n\n\n#############################################################################.\n# Write the following function:\n# \n#   additionQuestion = function()\n#\n# The function should ask the user to add two single digit positive numbers. \n# (see examples below). \n#\n# The function should return TRUE if the user gives the correct answer\n# and FALSE otherwise.\n# \n# EXAMPLES\n#\n#    &gt; additionQuestion()\n#      What is 2+5 ? 8\n#############################################################################.\n\n\n\n\n\n\n\nANSWER\n\n\n\n\n\n\n# The following is a sample answer - you should make up your own question/answer.\n\nquiz = function(){\n  totalCorrect = 0\n  totalWrong = 0\n  \n  correct = washingtonsHorse()\n  if ( correct ){\n    cat(\"RIGHT\\n\\n\")\n    totalCorrect = totalCorrect + 1\n  } else {\n    cat(\"RIGHT\\n\\n\")\n    totalWrong = totalWrong + 1\n  } \n\n  correct = capitalOfNewYork()\n  if ( correct ){\n    cat(\"RIGHT\\n\\n\")\n    totalCorrect = totalCorrect + 1\n  } else {\n    cat(\"RIGHT\\n\\n\")\n    totalWrong = totalWrong + 1\n  } \n\n  correct = twoPlusTwo()\n  if ( correct ){\n    cat(\"RIGHT\\n\\n\")\n    totalCorrect = totalCorrect + 1\n  } else {\n    cat(\"RIGHT\\n\\n\")\n    totalWrong = totalWrong + 1\n  } \n\n  # Note - the \\n below is required - try taking it out and see what happens.\n  cat(\"\\nYou got\", totalCorrect, \"right and\", totalWrong, \"wrong.\")\n}\n\n\n\n\n\n\n\n\nall(SOME_LOGICAL_VECTOR)     any(SOME_LOGICAL_VECTOR)\nThe all function can be used in lieu of multiple && operators.\nThe any function can be used in lieu of multiple || operators.\nSee below for details.\n\n#######################################################\n#\n# all(SOME_LOGICAL_VECTOR)\n#\n#    returns TRUE if ALL of the logical values are TRUE\n#    returns FALSE otherwise\n#\n#\n# any(SOME_LOGICAL_VECTOR)\n#\n#    returns TRUE if ANY of the logical values are TRUE\n#    returns FALSE otherwise\n#######################################################\n\nall(c(TRUE,TRUE,TRUE,TRUE))  # TRUE\n\n[1] TRUE\n\nall(c(TRUE,TRUE,FALSE,TRUE))  # FALSE\n\n[1] FALSE\n\nany(c(FALSE,TRUE,FALSE,FALSE,FALSE))  # TRUE\n\n[1] TRUE\n\nany(c(FALSE,FALSE,FALSE,FALSE,FALSE))  # FALSE\n\n[1] FALSE\n\nx = c(10, 5,  300)\ny = c(5,  20, 145)\nall(x&gt;y) # FALSE\n\n[1] FALSE\n\nx = c(10, 5000,  300)\ny = c(5,  20,    145)\nall(x&gt;y) # TRUE\n\n[1] TRUE\n\nx = c(1,  2,  3)\ny = c(100,200,300)\nany(x &gt; y) # FALSE\n\n[1] FALSE\n\nx = c(1,  999,  3)\ny = c(100,200,300)\nany(x &gt; y) # TRUE\n\n[1] TRUE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>\"if / else if / else\"  constructs</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html",
    "href": "001000-whileLoops-v027-afterWilfClass25.html",
    "title": "33  while loops.",
    "section": "",
    "text": "33.1 Using lapply and sapply\n#----------------------------------------------------------------\n# The factorial function above only works with a single number.\n# You can get the factorials of many numbers by using lapply\n# to get a list of the answers for several numbers\n#----------------------------------------------------------------\nlapply(c(1,3,5,10), factorial)  # find the factorials of 1,2,3 and 4\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 6\n\n[[3]]\n[1] 120\n\n[[4]]\n[1] 3628800\n\nsapply(c(1,3,5,10), factorial)  # find the factorials of 1,2,3 and 4\n\n[1]       1       6     120 3628800\n\n#---------------------------------------------------------------------\n# sapply\n#---------------------------------------------------------------------\n# The sapply function is similar to the lapply function.\n# \n# sapply dffers from lapply in the following way:\n# \n# - If every \"answer\" is a single vector of length 1, then sapply will return \n#   all of the answers in a single vector instead of returning a list of answers.\n#\n# - If every \"answer\" is a vector that has more than one value but all answers\n#   are the same length (e.g. all answers have 2 values) then sapply returns\n#   a matrix. Each column in the matrix will contain one of the answers.\n#\n# - If different \"answers\" are of different lengths or different classes\n#   of data, then sapply returns a list of answers. In this case, sapply\n#   and lapply return the same value.\n#\n# The \"s\" in \"sapply\" stands for \"simplify\". In other words, sapply \n# may return a vector or a matrix, instead of a list. Vectors and matrices\n# often look like \"simpler\" data structures than lists, hence the name \"sapply\".\n#\n# The \"l\" in \"lapply\" stands for \"list\". This is because the result\n# of calling lapply is ALWAY a list of answers.\n#---------------------------------------------------------------------\n\n#..................................................................\n# These values and functions will be used below to demonstrate the \n# differences between the lapply and sapply functions.\n#..................................................................\n\n# return a vector of 3 numbers\nf = function(num){\n  if(length(num) &gt; 1 || !is.numeric(num)){\n    stop(\"num is expected to be a single number\")\n  }\n  c(num, num+100, num+1000)\n}\nf(1)\n\n[1]    1  101 1001\n\nf(3)\n\n[1]    3  103 1003\n\nf(c(1,3))\n\nError in f(c(1, 3)): num is expected to be a single number\n\n# return different length vectors for different numbers\ng  = function(num){\n  if(length(num) &gt; 1 || !is.numeric(num)){\n    stop(\"num is expected to be a single number\")\n  }\n  rep(num, num)  \n}\ng(2)\n\n[1] 2 2\n\ng(3)\n\n[1] 3 3 3\n\ng(9)\n\n[1] 9 9 9 9 9 9 9 9 9\n\n# These are some numbers we will use with the following examples\nnums = c(1,3,5,10)\n\n# factorial always returns a single number so sapply returns a vector.\nlapply(nums, factorial)  # list of answers\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 6\n\n[[3]]\n[1] 120\n\n[[4]]\n[1] 3628800\n\nsapply(nums, factorial)  # vector of answers\n\n[1]       1       6     120 3628800\n\n# Function f always returns 3 numbers so sapply returns a matrix of 3 rows.\n# There will be as many columns in the matrix as there are numbers in nums.\nlapply(nums, f)   # a list\n\n[[1]]\n[1]    1  101 1001\n\n[[2]]\n[1]    3  103 1003\n\n[[3]]\n[1]    5  105 1005\n\n[[4]]\n[1]   10  110 1010\n\nsapply(nums, f)   # a matrix\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5   10\n[2,]  101  103  105  110\n[3,] 1001 1003 1005 1010\n\n# Function g returns different length vectors for different numbers\n# so sapply returns a list, just as lapply does.\nlapply(nums, g)   # a list\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 3 3 3\n\n[[3]]\n[1] 5 5 5 5 5\n\n[[4]]\n [1] 10 10 10 10 10 10 10 10 10 10\n\nsapply(nums, g)   # also a list\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 3 3 3\n\n[[3]]\n[1] 5 5 5 5 5\n\n[[4]]\n [1] 10 10 10 10 10 10 10 10 10 10",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#infinite-loop---press-the-stop-button-andor-esc-key",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#infinite-loop---press-the-stop-button-andor-esc-key",
    "title": "33  while loops.",
    "section": "33.2 Infinite loop - press the STOP button (and/or ESC key)",
    "text": "33.2 Infinite loop - press the STOP button (and/or ESC key)\n\n#########################################################################\n#\n# *** IMPORTANT ***\n#\n# Writing code with loops can be tricky, especially if you're new at it.\n# Watch out for potential coding errors ... be CAREFUL!!!\n#########################################################################\n\n#....................................................................\n# Infinite loops\n#....................................................................\n# IMPORTANT ... When writing code with while loops it is possible to \n# introduce errors in which the loop will \"never end\". \n# This is called an \"infinite loop\". If your code enters an \"infinite loop\",\n# RStudio will become unresponsive. If you don't know what to do it can be\n# very frustrating!!  When this happens, either: \n#\n#   - a little red \"stop sign\" button usually appears above the console\n#     window pane in RStudio. Pressing the \"stop sign\" will stop the function\n#     from running and let you once again use RStudio normally.\n#\n#   - If you don't see the stop sign, try pressing the ESC key. This can \n#     happen if you while loop is running with a call to readline() or a\n#     similar function inside the loop. \n#\n# In the following code, I purposely introduced an \"infinite loop\". You \n# will not be able to move on until you press the \"stop sign\" button that\n# is above the console window pane in RStudio.\n#....................................................................\n\n# The following version of factorial has a bug that \n# causes an infinite loop.\n\nbadFactorial &lt;- function(num){\n if (num &lt;0 || !is.numeric(num) || trunc(num) != num || length(num) != 1) {\n  stop(\"num must be a single positive whole number\")\n }\n \n answer = 1\n \n # A while loop is similar to an if in that if the condition is true\n # then the code in the body runs. If the condition is false the body does not run\n # and the next line of the program after the body runs.\n \n # For every while loop you must keep in mind the following\n # 1. The condition must depend on SOME variable\n # 2. The body must eventually cause the condition to become false.\n #    The most common way to do that is for the body to change\n #    the value of a variable in the condition in some way.\n \n while(num &gt; 1) {\n  answer &lt;- answer * num\n  #   num &lt;- num - 1       (I purposely \"commented out\" this line to cause an infinite loop)\n }\n \n return(answer)\n}\n\n# badFactorial(0)\n# badFactorial(1)\n# badFactorial(2)\n# badFactorial(5)\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n# inifinite loop - press the \"stop sign button\" (above the console window pane)\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nbadFunction = function (num){\n\n  # This is an infinite loop  \n  while (TRUE) {\n    cat ('You are in an \"infinite loop\".\\n')\n    cat('Press the \"stop sign\" button (above the console window pane) to ',\n        'stop the infinite loop\\n\\n')\n    \n    Sys.sleep(0.9)  # this causes R to \"go to sleep\" for 0.9 seconds\n  }\n}\n\n# badFunction(1)  # This will result in an \"infinite loop\". Press the \"stop button\".\n\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n# Another inifinite loop - there is no stop sign button.\n#\n# If you enter an infinite loop while the computer is waiting for the user\n# to type something, you will NOT see a \"stop sign button\". Instead to \n# get out of the loop\n# \n#   - click on the console window pane\n#   - then click on the ESC key\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nanotherBadFunction = function() {\n  \n  # This is an infinite loop. You will NOT see a stop sign button.\n  # Instead press ESC to get out of the loop.\n  while(TRUE){\n    x = readline(\"What's your name? (to stop looping, click console window, then press ESC)\")    \n  }\n\n}\n\n\n# The following will cause another infinite loop\n# Click console window then press ESC key to stop the loop and get back the prompt.\n#\n#\n# anotherBadFunction() # another infinite loop -",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#practice-with-finding-errors-in-loops",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#practice-with-finding-errors-in-loops",
    "title": "33  while loops.",
    "section": "33.3 Practice with finding errors in loops",
    "text": "33.3 Practice with finding errors in loops\n\n# The following is the same exact code as above, without all the \n# comments. There are many different subtle errors that can pop up\n# when writing while loops. Think about what would happen in each of the\n# following situations ..\n#\n# What would happen in each of the situations listed below?\n# To find out, change the code and try it.\n#\n# For each of the following questions, try to figure out what will happen\n# before actually running the code. Then change the code and run it.\n# To help you figure out what will happen, keep track of the values of all\n# the variables and arguments on a piece of paper.\n# Then, every time you \"run a line of code in your head\" keep track of any\n# changes to the variables on the piece of paper.\n#\n# You can also use the debugger ...\n#\n# What would happen if ...\n#    1. ... instead of \"answer=1\"     the programmer typed \"answer=0\" ?\n#    2. ... instead of \"while(num&gt;1)\" the programmer typed \"while(num&lt;1)\" ?\n#    3. ... instead of \"num&lt;-num+1\"   the programmer typed \"num&lt;-num-1\"\n#    4. ... the programmer forgot to type the line \"num&lt;-num-1\" and just left it out?\n#    5. ... the programmer wrote the lines \"answer&lt;-answer*num\" and \"num&lt;-num-1\"\n#           in the opposite order, i.e. \"num&lt;-num-1\" and then \"answer&lt;-answer*num\"\n\nfactorial &lt;- function(num){\n  if (num &lt;0 || !is.numeric(num) || trunc(num) != num || length(num) != 1) {\n    stop(\"num must be a single positive whole number\")\n  }\n  \n  answer = 1\n  \n  while(num &gt; 1) {  \n    answer &lt;- answer * num\n    num &lt;- num - 1\n  }\n  \n  return(answer)\n}\n\nfactorial(4)\n\n[1] 24\n\n#debugonce(factorial)\n\nfactorial(4)  # The result SHOULD BE 24\n\n[1] 24\n\nfactorial(100)\n\n[1] 9.332622e+157",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#another-example-is.primenum",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#another-example-is.primenum",
    "title": "33  while loops.",
    "section": "33.4 Another example: is.prime(num)",
    "text": "33.4 Another example: is.prime(num)\n\n#--------------------------------------\n# Another example ...\n#--------------------------------------\n\n# The following function \n# returns TRUE if num is a prime number and\n# returns FALSE is num is not a prime number\n#\n# A prime number is a whole number (2 or more) that is \n# divisible by only 1 and itself.\n#\n# Technically 1 is NOT a prime number\n# https://blogs.scientificamerican.com/roots-of-unity/why-isnt-1-a-prime-number/\n \n\nis.prime &lt;- function( num ) {\n\n  if (num &lt; 2){\n    return(FALSE)\n  }\n  \n  divisor &lt;- 2\n  \n  # if at any point you find that num is divided\n  # evenly by some divisor, return FALSE\n  \n  while ( divisor &lt; num ) {\n    if (num %% divisor == 0){\n      return(FALSE)   \n    }\n    divisor &lt;- divisor + 1    \n  }\n  \n  return(TRUE)\n}\n\nis.prime(7) # TRUE\n\n[1] TRUE\n\nis.prime(35) # FALSE\n\n[1] FALSE\n\nis.prime(37) # TRUE\n\n[1] TRUE\n\nis.prime(77) # FALSE\n\n[1] FALSE\n\n#------------------------------------------.\n# Use lapply to get multiple results\n#------------------------------------------.\n\n# check the first 20 numbers\nlapply(1:20, is.prime) \n\n[[1]]\n[1] FALSE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] FALSE\n\n[[5]]\n[1] TRUE\n\n[[6]]\n[1] FALSE\n\n[[7]]\n[1] TRUE\n\n[[8]]\n[1] FALSE\n\n[[9]]\n[1] FALSE\n\n[[10]]\n[1] FALSE\n\n[[11]]\n[1] TRUE\n\n[[12]]\n[1] FALSE\n\n[[13]]\n[1] TRUE\n\n[[14]]\n[1] FALSE\n\n[[15]]\n[1] FALSE\n\n[[16]]\n[1] FALSE\n\n[[17]]\n[1] TRUE\n\n[[18]]\n[1] FALSE\n\n[[19]]\n[1] TRUE\n\n[[20]]\n[1] FALSE\n\n# check just the odd numbers\nlapply(seq(1,19,by=2), is.prime)  # harder to read ... 2nd answer is for 3 not 2\n\n[[1]]\n[1] FALSE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] FALSE\n\n[[6]]\n[1] TRUE\n\n[[7]]\n[1] TRUE\n\n[[8]]\n[1] FALSE\n\n[[9]]\n[1] TRUE\n\n[[10]]\n[1] TRUE\n\n# add names\nx = lapply(seq(1,19,by=2), is.prime)\nnames(x) = seq(1,19,by=2)\nx      # names must start with a letter. If they don't you can include the name in `backticks`\n\n$`1`\n[1] FALSE\n\n$`3`\n[1] TRUE\n\n$`5`\n[1] TRUE\n\n$`7`\n[1] TRUE\n\n$`9`\n[1] FALSE\n\n$`11`\n[1] TRUE\n\n$`13`\n[1] TRUE\n\n$`15`\n[1] FALSE\n\n$`17`\n[1] TRUE\n\n$`19`\n[1] TRUE\n\nx$`9`  # FALSE\n\n[1] FALSE\n\nx$`17` # TRUE\n\n[1] TRUE\n\n#------------------------------------------.\n# Use sapply to get multiple results\n#------------------------------------------.\n\nsapply(1:20, is.prime)     # result is below\n\n [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE\n[13]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\n\n# FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\n\nsapply(seq(1,19,by=2), is.prime)  # # check just the odd numbers\n\n [1] FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n\n#  [1] FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n\n\n# add names\nx = sapply(seq(1,19,by=2), is.prime)\nnames(x) = seq(1,19,by=2)\n\nx      # result is below\n\n    1     3     5     7     9    11    13    15    17    19 \nFALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE \n\n#     1     3     5     7     9    11    13    15    17    19 \n# FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n\nx[9]   # result is below - we only checked odd numbers so the 9th number checked is 17\n\n  17 \nTRUE \n\n#   17 \n# TRUE \n\n\nx[\"9\"] # result is below - the value whose \"name\" is \"9\"\n\n    9 \nFALSE \n\n#     9 \n# FALSE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#making-the-code-more-efficient",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#making-the-code-more-efficient",
    "title": "33  while loops.",
    "section": "33.5 Making the code “more efficient”",
    "text": "33.5 Making the code “more efficient”\n\n#----------------------------------------------------\n# Making the code \"more efficient\"\n#----------------------------------------------------\n\n# When the number gets large the while loop will need to \"loop\" many times.\n# This can take some time even on a computer.\n\nis.prime(181) # TRUE\n\n[1] TRUE\n\n#is.prime(15485867)   # TRUE  (takes a few seconds to run)\n\n#is.prime(236887699)  # TRUE  (takes some time to run) - press \"stop button\" to cancel\n\nis.prime(236887695)  # FALSE - very fast ... why?\n\n[1] FALSE\n\n#---------------------------------------------------------------------------\n# Making a program more \"efficient\"\n#---------------------------------------------------------------------------\n# Do you really need to check all of the divisors from 2 through num-1 ?\n#\n# Obvious improvements:\n#   - if a num is even you know that result is FALSE\n#   - if num ends in 5 or 0 you know it is divisible by 5 so result is FALSE\n#\n# Non-obvious improvment:\n#   - you only need to check the divisors from 2 through the sqrt(num) ... not through num\n#     This speeds up the code A LOT.\n#\n# \"Computer science\" classes focus a lot on how to improve the \"efficiency\" of\n# programs. We will NOT focus on efficiency. However, you should be familiar\n# with the general issue.\n#---------------------------------------------------------------------------\n\n# With the knowledge of the above \"non-obvious improvement\"\n# let's write a \"more efficient\" version of the function. \n# The following version also works but is \"faster\", i.e. it doesn't need to \n# check as many numbers. \n# \n# The code is the same as the previous version except for the \n# line below that says \"#This line changed\"\n\nbetter.is.prime &lt;- function( num ) {\n  \n  if (num &lt; 2){\n    return(FALSE)\n  }\n  \n  divisor &lt;- 2\n  \n  while ( divisor &lt;= sqrt(num) ) {     # This line changed\n    \n    if (num %% divisor == 0){\n      return(FALSE)   \n    }\n    divisor &lt;- divisor + 1\n  }\n  \n  return(TRUE)\n}\n\nbetter.is.prime(181) # TRUE\n\n[1] TRUE\n\nbetter.is.prime(15485867)   # TRUE  - returns right away\n\n[1] TRUE\n\nbetter.is.prime(236887699)  # TRUE  - returns right away\n\n[1] TRUE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#more-practice-finding-errors-in-loops",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#more-practice-finding-errors-in-loops",
    "title": "33  while loops.",
    "section": "33.6 More practice finding errors in loops",
    "text": "33.6 More practice finding errors in loops\n\n# The following is the same function again, this time without the comments.\n#\n# For each of the following questions, try to figure out what will happen\n# before actually running the code. Then change the code and run it.\n# To help you figure out what will happen, keep track of the values of all the variables\n# and arguments on a piece of paper. Every time you \"run a line of code in\n# your head\" keep track of any changes to the variables on the piece\n# of paper. You can also use the debugger ...\n#\n# What would happen if ...\n# 1. ... instead of \"divisor &lt;- 2\"        the programmer typed \"divisor &lt;- 1\" ?\n# 2. ... instead of \"while(divisor&lt;num)\"  the programmer typed \"while(divisor&gt;num)\" ?\n# 3. ... instead of \"while(divisor&lt;num)\"  the programmer typed \"while(divisor&lt;=num)\" ?\n# 4. ... the line   \"divisor&lt;-divisor+1\"  was mistakenly left out?\n# 5. ... the line   \"divisor&lt;-divisor+1\"  was inside the body of the if?\n# 6. ... the line   \"divisor&lt;-divisor+1\"  was before the if instead of after the if?\n# 7. ... the line   \"divisor&lt;-divisor+1\"  was before the if instead of after the if ...\n#        and instead of \"divisor &lt;- 2\"    the programmer typed \"divisor &lt;- 1\" ?\n# 8. ... the programmer forgot to type the last line \"return(TRUE)\".\n# 9. ... instead of \"while(divisor&lt;num)\"  the programmer typed \"while(divisor&lt;num/2)\" ?\n# 10. ... instead of \"while(divisor&lt;num)\"  the programmer typed \"while(divisor&lt;sqrt(num))\" ?\n\nis.prime &lt;- function( num ) {\n  if (num &lt; 2){\n    return(FALSE)\n  }\n\n  divisor &lt;- 2\n  while ( divisor &lt; num ) {       \n    if (num %% divisor == 0){\n      return(FALSE)   \n    }\n    divisor &lt;- divisor + 1\n  }\n  return(TRUE)\n}\n\nis.prime(35)\n\n[1] FALSE\n\nis.prime(37)\n\n[1] TRUE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#there-are-many-ways-to-write-the-same-function",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#there-are-many-ways-to-write-the-same-function",
    "title": "33  while loops.",
    "section": "33.7 There are MANY ways to write the same function",
    "text": "33.7 There are MANY ways to write the same function\n\n#----------------------------------------------------\n# Another way to write the same function.\n#\n# This version has a single return statement at the end of the function.\n# Some people argue that this style is \"cleaner\" and\n# easier to understand when reading the code.\n#----------------------------------------------------\n\nis.prime2 &lt;- function( num ) {\n  answer &lt;- TRUE   # assume answer is TRUE unless we find out otherwise\n  \n  if (num &lt; 2){\n    answer &lt;- FALSE\n    \n  } else {\n  \n    divisor &lt;- 2\n    while ( divisor &lt; num ) {\n      if (num %% divisor == 0){\n        answer &lt;- FALSE\n      }\n      divisor &lt;- divisor + 1\n    }\n  }\n  \n  return(answer)\n}\n\nis.prime2(35)  # FALSE\n\n[1] FALSE\n\nis.prime2(37)  # TRUE\n\n[1] TRUE\n\n# check to make sure that both versions return the same values\n\n#all(sapply(1:100,is.prime) == sapply(1:100,is.prime2))   # TRUE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#another-example---divisorsnum",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#another-example---divisorsnum",
    "title": "33  while loops.",
    "section": "33.8 another example - divisors(num)",
    "text": "33.8 another example - divisors(num)\n\n#--------------------------------------------------\n# Write a function to find all divisors of a number\n# (assume that num is a positive whole number)\n#--------------------------------------------------\n\ndivisors &lt;- function(num){\n  if (!is.numeric(num) || trunc(num)!=num || num&lt;1 || length(num)!=1){\n    stop(\"num must be a single positive whole number\")\n  }\n  \n  # This is the variable we will return at the end of the function.\n  answer &lt;- 1  # 1 is a divisor of all positive whole numbers\n  \n  divisor &lt;- 2              \n  while(divisor &lt;= num){\n    if (num %% divisor == 0){\n      answer &lt;- c(answer, divisor)  # add another number to the answer\n    }\n    divisor &lt;- divisor + 1\n  }\n  \n  return(answer)\n}\n\n#debugonce(divisors)\ndivisors(12)\n\n[1]  1  2  3  4  6 12\n\ndivisors(15)\n\n[1]  1  3  5 15\n\ndivisors(36)\n\n[1]  1  2  3  4  6  9 12 18 36\n\ndivisors(100)\n\n[1]   1   2   4   5  10  20  25  50 100\n\ndivisors(101)  # this is prime, only divisors are 1 and 101\n\n[1]   1 101\n\n#divisors(15485863)  # This will take a few seconds.\n#divisors(67867979)  # This will take a few seconds.\n#divisors(67867970)  # This will take a few seconds.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#more-efficient-version",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#more-efficient-version",
    "title": "33  while loops.",
    "section": "33.9 more efficient version",
    "text": "33.9 more efficient version\n\n#-------------------------------------\n# a more efficient version\n#-------------------------------------\n\ndivisors.faster &lt;- function(num){\n  if (!is.numeric(num) || trunc(num)!=num || num&lt;1 || length(num)!=1){\n    stop(\"num must be a single positive whole number\")\n  }\n  \n  answer &lt;- c(1,num)                    # changed this line\n  \n  divisor &lt;- 2\n  while(divisor &lt;= sqrt(num)){          # changed this line (why?)\n    if (num %% divisor == 0){\n      answer &lt;- c(answer, divisor)\n      answer &lt;- c(answer, num/divisor)  # added this line  (why?)\n    }\n    divisor &lt;- divisor + 1\n  }\n  \n  answer &lt;- sort(unique(answer))        # added this line  (why?)\n  return(answer)\n}\n\n#debugonce(divisors.faster)\ndivisors.faster(36)\n\n[1]  1  2  3  4  6  9 12 18 36\n\ndivisors.faster(12)\n\n[1]  1  2  3  4  6 12\n\ndivisors.faster(10)\n\n[1]  1  2  5 10\n\ndivisors.faster(97)\n\n[1]  1 97\n\ndivisors.faster(100)\n\n[1]   1   2   4   5  10  20  25  50 100\n\ndivisors.faster(15485863)  # much faster now!!!\n\n[1]        1 15485863\n\ndivisors.faster(15485864)  # much faster now!!!\n\n [1]        1        2        4        8       31       41       62       82\n [9]      124      164      248      328     1271     1523     2542     3046\n[17]     5084     6092    10168    12184    47213    62443    94426   124886\n[25]   188852   249772   377704   499544  1935733  3871466  7742932 15485864\n\ndivisors.faster(67867979)  # much faster now!!!\n\n[1]        1 67867979\n\ndivisors.faster(67867970)  # much faster now!!!\n\n[1]        1        2        5       10  6786797 13573594 33933985 67867970\n\n# check to see that both functions are equivalent\n\n#all ( divisors.faster(15485864) == divisors(15485864) )  # TRUE if all nums are the same",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#more-practice---mysumnums-blastoffseconds",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#more-practice---mysumnums-blastoffseconds",
    "title": "33  while loops.",
    "section": "33.10 More practice - mysum(NUMS)      blastoff(SECONDS)",
    "text": "33.10 More practice - mysum(NUMS)      blastoff(SECONDS)\n\n###############################################################################\n# The next two \"QUESTIONS\" (i.e. to write the \"mysum\" and \"blastoff\" functions)\n# do not present any new concepts. They are just additional examples. \n###############################################################################\n\n\n#----------------------------------------------------------\n# QUESTION\n# Write a function that simulates the sum function\n#\n#    mysum = function( nums )\n#\n# nums is expected to be a numeric vector\n# mysum should return the sum of all the numbers in nums\n# DO NOT USE THE SUM FUNCTION\n#----------------------------------------------------------\n\nmysum = function( nums ){\n\n  theSum = nums[1]\n  position = 2\n  \n  while(position &lt;= length(nums)){\n    theSum = theSum + nums[position]\n    position = position + 1\n  }\n    \n  theSum  # return the answer\n}\n\nmysum(c(10,20,5)) # 35\n\n[1] 35\n\nmysum(10) # 10\n\n[1] 10\n\n# Note that the following returns NA, which makes sense because a sum\n# is not applicable (i.e. Not Available) if there are no numbers specified.\nmysum( numeric(0) ) \n\n[1] NA\n\n# You should use the debugger to understand why we get NA. \n#\n# debugonce(mysum)\nmysum( numeric(0) ) \n\n[1] NA\n\n#-------------------------------------------------------------------\n# The following is a SLIGHTLY different version of the function.\n# In this version we returned a sum of 0 when the numeric vector\n# is an empty vector. This is also a reasonable answer. \n#-------------------------------------------------------------------\n\nmysum = function( nums ){\n  \n  theSum = 0                             # this line changed\n  position = 1                           # this line changed   \n  \n  while(position &lt;= length(nums)){\n    theSum = theSum + nums[position]\n    position = position + 1\n  }\n  \n  theSum  # return the answer\n}\n\nmysum(c(10,20,5))    # 35\n\n[1] 35\n\nmysum(character(0))  # 0\n\n[1] 0\n\n#---------------------------------------------------------\n# QUESTION\n#\n# Write a function\n#\n#    countdown = function(from)\n#\n# that counts down as shown below. There should be 1 second\n# pause between each line of output HINT: use Sys.sleep(1)\n# \n# &gt; countdown(5)\n# T minus 5 seconds\n# T minus 4 seconds\n# T minus 3 seconds\n# T minus 2 seconds\n# T minus 1 second\n# BLASTOFF!!!\n#\n# &gt; countdown(3)\n# T minus 3 seconds\n# T minus 2 seconds\n# T minus 1 second\n# BLASTOFF!!!\n#\n# &gt; countdown(0)\n# BLASTOFF!!!\n#-----------------------------------------------------------\n\n###########.\n# ANSWER\n###########.\ncountdown = function(from){\n  \n  while(from &gt; 0){\n    \n    if(from == 1){\n      cat(\"T minus\", from, \"second\\n\")\n    } else {\n      cat(\"T minus\", from, \"seconds\\n\")\n    }\n    \n    Sys.sleep(1)\n    from = from - 1\n    \n  }\n  \n  cat(\"BLASTOFF!!!\")\n  \n}\n\ncountdown(5)\n\nT minus 5 seconds\nT minus 4 seconds\nT minus 3 seconds\nT minus 2 seconds\nT minus 1 second\nBLASTOFF!!!\n\n#countdown(3)\n#countdown(0)",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#random-numbers-runif",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#random-numbers-runif",
    "title": "33  while loops.",
    "section": "33.11 Random numbers : runif()",
    "text": "33.11 Random numbers : runif()\n\n####################################################################\n####################################################################\n##\n## Generating random numbers\n##\n##   - runif                       : returns a random number\n##   - set.seed(SOME_WHOLE_NUMBER) : resets the random number generator\n##   - sample\n##\n####################################################################\n####################################################################\n\n# There are several different functions that are built into R for\n# generating \"random numbers\". These are useful for \"simulations\"\n# e.g. to generate random \n?runif\n\nstarting httpd help server ... done\n\n?set.seed\n?sample\n\n#--------------------------------------------------------------\n#\n# runif  \n#\n# runif stands for \"Random number from a UNIForm distribution\n#\n#--------------------------------------------------------------\n\nrunif(1)   # one random number between 0 and 1  (not including 0.0 or 1.0)\n\n[1] 0.7451155\n\nrunif(1)   # another random number between 0 and 1  (not including 0.0 or 1.0)\n\n[1] 0.3810196\n\nrunif(3)   # three random numbers between 0 and 1\n\n[1] 0.13944404 0.03091501 0.58686499\n\nrunif(3, min=0, max=100)   # three random numbers between 0 and 100\n\n[1] 41.50637 24.76728 71.54541\n\nrunif(3, min=500, max=505)   # three random numbers between 500 and 505\n\n[1] 504.8572 504.4858 504.7748\n\ntrunc(runif(25, min=1, max=11))   # 25 random whole numbers between 1 and 10\n\n [1]  6  4  2 10  8  8  1 10  7  8  3 10  5  5 10  1  5  9  6  2  2 10  5  6  6\n\ntrunc(runif(25, min=1, max=11))   # another 25 random whole numbers between 1 and 10\n\n [1]  8  4  6  3  7  4  8  2 10  3  7  1  4  3  7  8  6  1  5  8  3  5 10  4  5\n\n#-----------------------------\n# set.seed(SOME_WHOLE_NUMBER)\n#-----------------------------\nset.seed(1)\ntrunc(runif(3, min=1, max=10))   # 5 random whole numbers between 1 and 9\n\n[1] 3 4 6\n\ntrunc(runif(3, min=1, max=10))   # another 5 random whole numbers between 1 and 9\n\n[1] 9 2 9\n\ntrunc(runif(3, min=1, max=10))   # another 5 random whole numbers between 1 and 9\n\n[1] 9 6 6\n\nset.seed(1)\ntrunc(runif(3, min=1, max=10))   # start again with same numbers\n\n[1] 3 4 6\n\nset.seed(1)\ntrunc(runif(3, min=1, max=10))   # start again with same numbers\n\n[1] 3 4 6\n\ntrunc(runif(3, min=1, max=10))   # continue in with the same numbers as when seed was 1\n\n[1] 9 2 9\n\ntrunc(runif(3, min=1, max=10))   # continue in with the same numbers as when seed was 1\n\n[1] 9 6 6\n\nset.seed(99)  # different seed starts again with different numbers\ntrunc(runif(3, min=1, max=10))   #\n\n[1] 6 2 7\n\ntrunc(runif(3, min=1, max=10))   #\n\n[1] 9 5 9\n\nset.seed(99)  # start again with same seed\ntrunc(runif(3, min=1, max=10))   #\n\n[1] 6 2 7\n\ntrunc(runif(3, min=1, max=10))   #\n\n[1] 9 5 9\n\nset.seed(1)   # back to first sequence of numbers  \ntrunc(runif(3, min=1, max=10))   # start again with same numbers\n\n[1] 3 4 6\n\ntrunc(runif(3, min=1, max=10))   # continue in with the same numbers as when seed was 1\n\n[1] 9 2 9",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#random-numbers-sample",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#random-numbers-sample",
    "title": "33  while loops.",
    "section": "33.12 Random numbers : sample()",
    "text": "33.12 Random numbers : sample()\n\n#-----------------------------------------------------------------------------\n# sample  \n# \n# NOTE: This is review. We already covered the sample function in an earlier class.\n#-----------------------------------------------------------------------------\n?sample\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 3)  # sample 3 items from the set\n\n[1] 70 20 30\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 7)  # sample 7 items from the set\n\n[1]  30  10  50  80  20  60 100\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 10)  # sample 10 items from the set\n\n [1]  90  50 100  10  70  80  60  20  30  40\n\nsample(c(10,20,30,40,50,60,70,80,90,100))  # sample 10 items from the set\n\n [1]  90  10  40  30  60  20  50  80 100  70\n\n# with replacement\nsample(c(10,20,30,40,50,60,70,80,90,100), 7, replace=TRUE)  # allow same item more than once\n\n[1]  40 100  90  70  60  90  80\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 25, replace=TRUE)  # allow same item more than once\n\n [1]  90  70  80  60 100  70  30 100  60  80  20  20  60  60  10  30  30  80  60\n[20]  70  60  80  70  10  40\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 25, replace=FALSE)  # ERROR\n\nError in sample.int(length(x), size, replace, prob): cannot take a sample larger than the population when 'replace = FALSE'\n\nsample(c(10,20,30,40,50,60,70,80,90,100), 25)  # ERROR\n\nError in sample.int(length(x), size, replace, prob): cannot take a sample larger than the population when 'replace = FALSE'\n\nsample(1:10)               # sample all items without replacement\n\n [1]  8  9 10  1  6  4  3  7  5  2\n\nsample(1:10, replace=TRUE) # sample 10 times with replacement\n\n [1] 6 1 5 6 1 9 7 7 3 6\n\n# set probabilities on specific values\nsample(c(1,2,3), 25, replace=TRUE, prob=c(.7,.2,.1)) # 70% prob 1, 20% prob 2, 10% prob 3\n\n [1] 1 1 2 1 1 1 3 1 1 1 2 1 1 1 1 1 1 1 1 1 3 1 1 1 3\n\nsample(c(1,2,3), 25, replace=TRUE, prob=c(.7,.2,.1)) # 70% prob 1, 20% prob 2, 10% prob 3\n\n [1] 1 1 1 1 1 2 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 2\n\n# set.seed works for sample too\nset.seed(9876)\nsample(c(1,2,3), 25, replace=TRUE, prob=c(.7,.2,.1)) # 70% prob 1, 20% prob 2, 10% prob 3\n\n [1] 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 3 2 1 1 1\n\nsample(c(1,2,3), 25, replace=TRUE, prob=c(.7,.2,.1)) # 70% prob 1, 20% prob 2, 10% prob 3\n\n [1] 1 1 2 1 1 1 1 3 1 1 3 3 1 1 2 2 1 2 1 1 2 1 1 1 1\n\nset.seed(9876)\nsample(c(1,2,3), 25, replace=TRUE, prob=c(.7,.2,.1)) # 70% prob 1, 20% prob 2, 10% prob 3\n\n [1] 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 3 2 1 1 1\n\nsample(c(1,2,3), 25, replace=TRUE, prob=c(.7,.2,.1)) # 70% prob 1, 20% prob 2, 10% prob 3\n\n [1] 1 1 2 1 1 1 1 3 1 1 3 3 1 1 2 2 1 2 1 1 2 1 1 1 1",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#another-exmaple---guessinggame",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#another-exmaple---guessinggame",
    "title": "33  while loops.",
    "section": "33.13 Another exmaple - guessingGame()",
    "text": "33.13 Another exmaple - guessingGame()\n\n#-------------------------------------------------------------------------\n# Write a guessing game function\n#-------------------------------------------------------------------------\n# Function should\n# 1. pick a random number between 1 and 100\n# 2. allow the user to guess the number\n# 3. keep looping until the user guesses correctly\n# 4. return the number of times it took the user to guess correctly\n#-------------------------------------------------------------------------\n# NOTE: The following line of code that appears in the function is important\n#       but easy to forget to include. This line of code converts the guess\n#       from character to numeric. Without this line you would wind up with a\n#       very hard to catch bug.\n#\n#                    guess &lt;- as.numeric(guess) \n#\n# Remember that readline always returns a character value.\n# Without the code shown above, guess would be character and num would be numeric.\n# This would have caused the following problem:\n#\n#    1. The code \"if(guess &lt; num)\", which appears in the code below will\n#       be comparing a character value with a numeric value.\n#\n#    2. Remember that character values sort and compare differently than\n#       numeric values. For the purpose of this dicussions, remember\n#       that \"29\" and \"3\" are both character values, while\n#       29 and 3 (without the quotes) are numeric values.\n#\n#         29 &lt; 3 is obviously FALSE, however ..\n#\n#         \"29\" &lt; \"3\" is TRUE!!!\n#\n#       This is because character values have different rules for \n#       comparison than numeric values do. (Remember - because the first\n#       character, in \"29\" i.e. the \"2\" is less than the first charcter\n#       in \"3\", i.e. \"3\", \"29\" is less than \"3\".\n#\n#    3. Because the code \"guess &lt; num\" compares a character value (i.e. guess)\n#       and a numeric value (i.e. guess) the rules of \"implicit conversions\"\n#       determines that both values will be implicitly converted\n#       to character values. That means that if guess was \"29\" and num was 3\n#       \"29\" &lt; 3  would be implicitly converted to \"29\" &lt; \"3\" which would\n#       be TRUE! That would cause the block of code following\n#       if(guess &lt; num) be executed and the user would be told\n#       \"higher, guess again:\" instead of the correct answer of\n#       \"lower, guess again\".\n#\n#    4. By converting the guess to numeric, the code if(guess &lt; num) will \n#       now correctly compare two numeric values and will correctly \n#       figure out that 29 &lt; 3 is FALSE and will correctly tell the user\n#       \"lower, guess again\".\n#-------------------------------------------------------------------------\n\nguessingGame &lt;- function(low=1, high=100){\n  \n  if (!is.numeric(low) || length(low) != 1 || trunc(low) != low ||\n      !is.numeric(high) || length(high) != 1 || trunc(high) != high ) {\n    stop(\"min and max must each be single whole numbers\")\n  }\n  \n  if (low &gt;= high){\n    stop(\"low must be less than high\")\n  }\n  \n  num &lt;- sample(low:high, 1)\n  \n  numGuesses &lt;- 1\n  guess &lt;- readline(\"guess: \")\n  guess &lt;- as.numeric(guess) # IMPORTANT LINE - see the NOTE in comments above\n  \n  while(guess != num) {\n    if (guess &lt; num){\n      guess &lt;- readline(\"higher, guess again: \")\n    } else if (guess &gt; num) {\n      guess &lt;- readline(\"lower, guess again: \")\n    }\n    \n    guess &lt;- as.numeric(guess) # IMPORTANT LINE - see comment above for more info\n    numGuesses &lt;- numGuesses + 1\n  } \n\n  return(numGuesses)  \n}\n\n#guessingGame()   \n#guessingGame()\n#guessingGame()",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#another-example---fibonacci-sequence",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#another-example---fibonacci-sequence",
    "title": "33  while loops.",
    "section": "33.14 Another example - Fibonacci sequence",
    "text": "33.14 Another example - Fibonacci sequence\n\n#-------------------------------------\n# Another example - Fibonacci sequence\n#-------------------------------------\n\n# The numbers 0 1 1 2 3 5 8 13 21 34 55 89 144 ...\n# are the first few number in the infinite sequence\n# of \"Fibonacci numbers\". The first two numbers are 0 and 1\n# Every other number in the sequence is the sum of the\n# two numbers that precede it. \n#\n# Write a function fib(n)  that returns the first\n# n numbers from the fibonacci sequence. \n#\n# n is expected to be a single non-negative whole number.\n# The function should stop with an appropriate \n# error message if it is not.\n#\n# EXAMPLE:\n#    &gt; fib(1)\n#    0\n#\n#    &gt; fib(4)\n#    0 1 1 2\n#\n#    &gt; fib(8)\n#    0 1 1 2 3 5 8 13\n\nfib &lt;- function(n){\n  \n  if (!is.numeric(n) || length(n) != 1 || n &lt;= 0){\n    stop(\"n must be a single whole non-negative number\")\n  }\n  \n  if (n == 1){\n    return(0)\n  } else if (n == 2) {\n    return(c(0,1))\n  }\n  \n  # set up the variables for the condition in the while\n  # (n already has a value since it is an argument to the function)\n  answer &lt;- c(0,1)    \n  \n  while(length(answer) &lt; n){   # a condition that will eventually become FALSE\n    \n    twoPrevious &lt;- answer[length(answer)-1]\n    onePrevious &lt;- answer[length(answer)]\n    \n    # change a variable that's in the condition\n    answer&lt;-c(answer,onePrevious+twoPrevious) \n    \n  }\n  \n  return(answer)\n}\n\nfib(0)\n\nError in fib(0): n must be a single whole non-negative number\n\nfib(1)\n\n[1] 0\n\nfib(4)\n\n[1] 0 1 1 2\n\nfib(8)\n\n[1]  0  1  1  2  3  5  8 13\n\nfib(20)\n\n [1]    0    1    1    2    3    5    8   13   21   34   55   89  144  233  377\n[16]  610  987 1597 2584 4181\n\nlapply(1:10, fib)\n\n[[1]]\n[1] 0\n\n[[2]]\n[1] 0 1\n\n[[3]]\n[1] 0 1 1\n\n[[4]]\n[1] 0 1 1 2\n\n[[5]]\n[1] 0 1 1 2 3\n\n[[6]]\n[1] 0 1 1 2 3 5\n\n[[7]]\n[1] 0 1 1 2 3 5 8\n\n[[8]]\n[1]  0  1  1  2  3  5  8 13\n\n[[9]]\n[1]  0  1  1  2  3  5  8 13 21\n\n[[10]]\n [1]  0  1  1  2  3  5  8 13 21 34",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#another-example---primesuptomaxnum",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#another-example---primesuptomaxnum",
    "title": "33  while loops.",
    "section": "33.15 another example - primesUpTo(maxNum)",
    "text": "33.15 another example - primesUpTo(maxNum)\n\nrm(list=ls())  # start over ...\n\n# The following code was already created above. This is the exact same \n# code. It is copied here for reference, since the next function,\n# primesUpTo, calls this code.\n\nis.prime &lt;- function( num ) {\n  if (num &lt; 2){\n    return(FALSE)\n  }\n  divisor &lt;- 2\n  \n  while ( divisor &lt;= sqrt(num) ) {\n    if (num %% divisor == 0){\n      return(FALSE)   \n    }\n    divisor &lt;- divisor + 1\n  }\n  return(TRUE)\n}\n\n#-----------------------------------------\n# Get all primes up to a certain number\n#-----------------------------------------\n\n# Things to think about in the next function.\n# \n# 1. What would happen if the line: numToCheck = numToCheck + 1\n#    were placed inside of the block of code for the if?\n\n# All primes up to n\nprimesUpTo = function( maxNum ){\n  primes = numeric(0)\n  \n  # Set up the variables that are used in the condition \n  # maxNum already has a value since it is an argument to the function\n  numToCheck = 2\n  \n  while (numToCheck &lt;= maxNum){  # a condition that will eventually become FALSE\n    \n    if(is.prime(numToCheck)){\n      primes = c(primes, numToCheck)\n    }\n    \n    # change a variable that is in the condition in a way that will eventually\n    # make the condition become FALSE\n    numToCheck = numToCheck + 1\n  }\n  \n  primes\n}\n\n# debugonce(primesUpTo)\nprimesUpTo(10)\n\n[1] 2 3 5 7\n\nprimesUpTo(100)\n\n [1]  2  3  5  7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n\nprimesUpTo(1000)\n\n  [1]   2   3   5   7  11  13  17  19  23  29  31  37  41  43  47  53  59  61\n [19]  67  71  73  79  83  89  97 101 103 107 109 113 127 131 137 139 149 151\n [37] 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251\n [55] 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359\n [73] 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463\n [91] 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593\n[109] 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701\n[127] 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827\n[145] 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953\n[163] 967 971 977 983 991 997",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#another-example---firstnprimes-n",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#another-example---firstnprimes-n",
    "title": "33  while loops.",
    "section": "33.16 another example - firstNPrimes ( N )",
    "text": "33.16 another example - firstNPrimes ( N )\n\n#---------------------------------\n# Get first n primes\n#---------------------------------\n# Things to think about in the following function.\n# \n# 1. What would happen if the line: numberToCheck = numberToCheck + 1\n#    was not typed at all?\n\nfirstNPrimes = function( numPrimes ){\n  \n  # This is the variable that will be returned.\n  # It is also a variable that is used in the condition.\n  # We MUST give it a value for both of these reasons.\n  primes = numeric(0)\n  \n  # Setup any other values that the while loop will need.\n  numberToCheck = 2\n  \n  while(length(primes)&lt;numPrimes){ # condition that will evenutually become FALSE\n    \n    if (is.prime(numberToCheck)){\n      primes = c(primes, numberToCheck)\n    }\n    \n    # change a variable that is used the the condition in a way that \n    # eventually the condition will become FALSE\n    numberToCheck = numberToCheck + 1\n  }\n\n  primes\n}\n\nfirstNPrimes(100)\n\n  [1]   2   3   5   7  11  13  17  19  23  29  31  37  41  43  47  53  59  61\n [19]  67  71  73  79  83  89  97 101 103 107 109 113 127 131 137 139 149 151\n [37] 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251\n [55] 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359\n [73] 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463\n [91] 467 479 487 491 499 503 509 521 523 541\n\nfirstNPrimes(1000)\n\n   [1]    2    3    5    7   11   13   17   19   23   29   31   37   41   43\n  [15]   47   53   59   61   67   71   73   79   83   89   97  101  103  107\n  [29]  109  113  127  131  137  139  149  151  157  163  167  173  179  181\n  [43]  191  193  197  199  211  223  227  229  233  239  241  251  257  263\n  [57]  269  271  277  281  283  293  307  311  313  317  331  337  347  349\n  [71]  353  359  367  373  379  383  389  397  401  409  419  421  431  433\n  [85]  439  443  449  457  461  463  467  479  487  491  499  503  509  521\n  [99]  523  541  547  557  563  569  571  577  587  593  599  601  607  613\n [113]  617  619  631  641  643  647  653  659  661  673  677  683  691  701\n [127]  709  719  727  733  739  743  751  757  761  769  773  787  797  809\n [141]  811  821  823  827  829  839  853  857  859  863  877  881  883  887\n [155]  907  911  919  929  937  941  947  953  967  971  977  983  991  997\n [169] 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087 1091\n [183] 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193\n [197] 1201 1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291\n [211] 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423\n [225] 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493\n [239] 1499 1511 1523 1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601\n [253] 1607 1609 1613 1619 1621 1627 1637 1657 1663 1667 1669 1693 1697 1699\n [267] 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811\n [281] 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931\n [295] 1933 1949 1951 1973 1979 1987 1993 1997 1999 2003 2011 2017 2027 2029\n [309] 2039 2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129 2131 2137\n [323] 2141 2143 2153 2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267\n [337] 2269 2273 2281 2287 2293 2297 2309 2311 2333 2339 2341 2347 2351 2357\n [351] 2371 2377 2381 2383 2389 2393 2399 2411 2417 2423 2437 2441 2447 2459\n [365] 2467 2473 2477 2503 2521 2531 2539 2543 2549 2551 2557 2579 2591 2593\n [379] 2609 2617 2621 2633 2647 2657 2659 2663 2671 2677 2683 2687 2689 2693\n [393] 2699 2707 2711 2713 2719 2729 2731 2741 2749 2753 2767 2777 2789 2791\n [407] 2797 2801 2803 2819 2833 2837 2843 2851 2857 2861 2879 2887 2897 2903\n [421] 2909 2917 2927 2939 2953 2957 2963 2969 2971 2999 3001 3011 3019 3023\n [435] 3037 3041 3049 3061 3067 3079 3083 3089 3109 3119 3121 3137 3163 3167\n [449] 3169 3181 3187 3191 3203 3209 3217 3221 3229 3251 3253 3257 3259 3271\n [463] 3299 3301 3307 3313 3319 3323 3329 3331 3343 3347 3359 3361 3371 3373\n [477] 3389 3391 3407 3413 3433 3449 3457 3461 3463 3467 3469 3491 3499 3511\n [491] 3517 3527 3529 3533 3539 3541 3547 3557 3559 3571 3581 3583 3593 3607\n [505] 3613 3617 3623 3631 3637 3643 3659 3671 3673 3677 3691 3697 3701 3709\n [519] 3719 3727 3733 3739 3761 3767 3769 3779 3793 3797 3803 3821 3823 3833\n [533] 3847 3851 3853 3863 3877 3881 3889 3907 3911 3917 3919 3923 3929 3931\n [547] 3943 3947 3967 3989 4001 4003 4007 4013 4019 4021 4027 4049 4051 4057\n [561] 4073 4079 4091 4093 4099 4111 4127 4129 4133 4139 4153 4157 4159 4177\n [575] 4201 4211 4217 4219 4229 4231 4241 4243 4253 4259 4261 4271 4273 4283\n [589] 4289 4297 4327 4337 4339 4349 4357 4363 4373 4391 4397 4409 4421 4423\n [603] 4441 4447 4451 4457 4463 4481 4483 4493 4507 4513 4517 4519 4523 4547\n [617] 4549 4561 4567 4583 4591 4597 4603 4621 4637 4639 4643 4649 4651 4657\n [631] 4663 4673 4679 4691 4703 4721 4723 4729 4733 4751 4759 4783 4787 4789\n [645] 4793 4799 4801 4813 4817 4831 4861 4871 4877 4889 4903 4909 4919 4931\n [659] 4933 4937 4943 4951 4957 4967 4969 4973 4987 4993 4999 5003 5009 5011\n [673] 5021 5023 5039 5051 5059 5077 5081 5087 5099 5101 5107 5113 5119 5147\n [687] 5153 5167 5171 5179 5189 5197 5209 5227 5231 5233 5237 5261 5273 5279\n [701] 5281 5297 5303 5309 5323 5333 5347 5351 5381 5387 5393 5399 5407 5413\n [715] 5417 5419 5431 5437 5441 5443 5449 5471 5477 5479 5483 5501 5503 5507\n [729] 5519 5521 5527 5531 5557 5563 5569 5573 5581 5591 5623 5639 5641 5647\n [743] 5651 5653 5657 5659 5669 5683 5689 5693 5701 5711 5717 5737 5741 5743\n [757] 5749 5779 5783 5791 5801 5807 5813 5821 5827 5839 5843 5849 5851 5857\n [771] 5861 5867 5869 5879 5881 5897 5903 5923 5927 5939 5953 5981 5987 6007\n [785] 6011 6029 6037 6043 6047 6053 6067 6073 6079 6089 6091 6101 6113 6121\n [799] 6131 6133 6143 6151 6163 6173 6197 6199 6203 6211 6217 6221 6229 6247\n [813] 6257 6263 6269 6271 6277 6287 6299 6301 6311 6317 6323 6329 6337 6343\n [827] 6353 6359 6361 6367 6373 6379 6389 6397 6421 6427 6449 6451 6469 6473\n [841] 6481 6491 6521 6529 6547 6551 6553 6563 6569 6571 6577 6581 6599 6607\n [855] 6619 6637 6653 6659 6661 6673 6679 6689 6691 6701 6703 6709 6719 6733\n [869] 6737 6761 6763 6779 6781 6791 6793 6803 6823 6827 6829 6833 6841 6857\n [883] 6863 6869 6871 6883 6899 6907 6911 6917 6947 6949 6959 6961 6967 6971\n [897] 6977 6983 6991 6997 7001 7013 7019 7027 7039 7043 7057 7069 7079 7103\n [911] 7109 7121 7127 7129 7151 7159 7177 7187 7193 7207 7211 7213 7219 7229\n [925] 7237 7243 7247 7253 7283 7297 7307 7309 7321 7331 7333 7349 7351 7369\n [939] 7393 7411 7417 7433 7451 7457 7459 7477 7481 7487 7489 7499 7507 7517\n [953] 7523 7529 7537 7541 7547 7549 7559 7561 7573 7577 7583 7589 7591 7603\n [967] 7607 7621 7639 7643 7649 7669 7673 7681 7687 7691 7699 7703 7717 7723\n [981] 7727 7741 7753 7757 7759 7789 7793 7817 7823 7829 7841 7853 7867 7873\n [995] 7877 7879 7883 7901 7907 7919\n\nfirstNPrimes(2000)\n\n   [1]     2     3     5     7    11    13    17    19    23    29    31    37\n  [13]    41    43    47    53    59    61    67    71    73    79    83    89\n  [25]    97   101   103   107   109   113   127   131   137   139   149   151\n  [37]   157   163   167   173   179   181   191   193   197   199   211   223\n  [49]   227   229   233   239   241   251   257   263   269   271   277   281\n  [61]   283   293   307   311   313   317   331   337   347   349   353   359\n  [73]   367   373   379   383   389   397   401   409   419   421   431   433\n  [85]   439   443   449   457   461   463   467   479   487   491   499   503\n  [97]   509   521   523   541   547   557   563   569   571   577   587   593\n [109]   599   601   607   613   617   619   631   641   643   647   653   659\n [121]   661   673   677   683   691   701   709   719   727   733   739   743\n [133]   751   757   761   769   773   787   797   809   811   821   823   827\n [145]   829   839   853   857   859   863   877   881   883   887   907   911\n [157]   919   929   937   941   947   953   967   971   977   983   991   997\n [169]  1009  1013  1019  1021  1031  1033  1039  1049  1051  1061  1063  1069\n [181]  1087  1091  1093  1097  1103  1109  1117  1123  1129  1151  1153  1163\n [193]  1171  1181  1187  1193  1201  1213  1217  1223  1229  1231  1237  1249\n [205]  1259  1277  1279  1283  1289  1291  1297  1301  1303  1307  1319  1321\n [217]  1327  1361  1367  1373  1381  1399  1409  1423  1427  1429  1433  1439\n [229]  1447  1451  1453  1459  1471  1481  1483  1487  1489  1493  1499  1511\n [241]  1523  1531  1543  1549  1553  1559  1567  1571  1579  1583  1597  1601\n [253]  1607  1609  1613  1619  1621  1627  1637  1657  1663  1667  1669  1693\n [265]  1697  1699  1709  1721  1723  1733  1741  1747  1753  1759  1777  1783\n [277]  1787  1789  1801  1811  1823  1831  1847  1861  1867  1871  1873  1877\n [289]  1879  1889  1901  1907  1913  1931  1933  1949  1951  1973  1979  1987\n [301]  1993  1997  1999  2003  2011  2017  2027  2029  2039  2053  2063  2069\n [313]  2081  2083  2087  2089  2099  2111  2113  2129  2131  2137  2141  2143\n [325]  2153  2161  2179  2203  2207  2213  2221  2237  2239  2243  2251  2267\n [337]  2269  2273  2281  2287  2293  2297  2309  2311  2333  2339  2341  2347\n [349]  2351  2357  2371  2377  2381  2383  2389  2393  2399  2411  2417  2423\n [361]  2437  2441  2447  2459  2467  2473  2477  2503  2521  2531  2539  2543\n [373]  2549  2551  2557  2579  2591  2593  2609  2617  2621  2633  2647  2657\n [385]  2659  2663  2671  2677  2683  2687  2689  2693  2699  2707  2711  2713\n [397]  2719  2729  2731  2741  2749  2753  2767  2777  2789  2791  2797  2801\n [409]  2803  2819  2833  2837  2843  2851  2857  2861  2879  2887  2897  2903\n [421]  2909  2917  2927  2939  2953  2957  2963  2969  2971  2999  3001  3011\n [433]  3019  3023  3037  3041  3049  3061  3067  3079  3083  3089  3109  3119\n [445]  3121  3137  3163  3167  3169  3181  3187  3191  3203  3209  3217  3221\n [457]  3229  3251  3253  3257  3259  3271  3299  3301  3307  3313  3319  3323\n [469]  3329  3331  3343  3347  3359  3361  3371  3373  3389  3391  3407  3413\n [481]  3433  3449  3457  3461  3463  3467  3469  3491  3499  3511  3517  3527\n [493]  3529  3533  3539  3541  3547  3557  3559  3571  3581  3583  3593  3607\n [505]  3613  3617  3623  3631  3637  3643  3659  3671  3673  3677  3691  3697\n [517]  3701  3709  3719  3727  3733  3739  3761  3767  3769  3779  3793  3797\n [529]  3803  3821  3823  3833  3847  3851  3853  3863  3877  3881  3889  3907\n [541]  3911  3917  3919  3923  3929  3931  3943  3947  3967  3989  4001  4003\n [553]  4007  4013  4019  4021  4027  4049  4051  4057  4073  4079  4091  4093\n [565]  4099  4111  4127  4129  4133  4139  4153  4157  4159  4177  4201  4211\n [577]  4217  4219  4229  4231  4241  4243  4253  4259  4261  4271  4273  4283\n [589]  4289  4297  4327  4337  4339  4349  4357  4363  4373  4391  4397  4409\n [601]  4421  4423  4441  4447  4451  4457  4463  4481  4483  4493  4507  4513\n [613]  4517  4519  4523  4547  4549  4561  4567  4583  4591  4597  4603  4621\n [625]  4637  4639  4643  4649  4651  4657  4663  4673  4679  4691  4703  4721\n [637]  4723  4729  4733  4751  4759  4783  4787  4789  4793  4799  4801  4813\n [649]  4817  4831  4861  4871  4877  4889  4903  4909  4919  4931  4933  4937\n [661]  4943  4951  4957  4967  4969  4973  4987  4993  4999  5003  5009  5011\n [673]  5021  5023  5039  5051  5059  5077  5081  5087  5099  5101  5107  5113\n [685]  5119  5147  5153  5167  5171  5179  5189  5197  5209  5227  5231  5233\n [697]  5237  5261  5273  5279  5281  5297  5303  5309  5323  5333  5347  5351\n [709]  5381  5387  5393  5399  5407  5413  5417  5419  5431  5437  5441  5443\n [721]  5449  5471  5477  5479  5483  5501  5503  5507  5519  5521  5527  5531\n [733]  5557  5563  5569  5573  5581  5591  5623  5639  5641  5647  5651  5653\n [745]  5657  5659  5669  5683  5689  5693  5701  5711  5717  5737  5741  5743\n [757]  5749  5779  5783  5791  5801  5807  5813  5821  5827  5839  5843  5849\n [769]  5851  5857  5861  5867  5869  5879  5881  5897  5903  5923  5927  5939\n [781]  5953  5981  5987  6007  6011  6029  6037  6043  6047  6053  6067  6073\n [793]  6079  6089  6091  6101  6113  6121  6131  6133  6143  6151  6163  6173\n [805]  6197  6199  6203  6211  6217  6221  6229  6247  6257  6263  6269  6271\n [817]  6277  6287  6299  6301  6311  6317  6323  6329  6337  6343  6353  6359\n [829]  6361  6367  6373  6379  6389  6397  6421  6427  6449  6451  6469  6473\n [841]  6481  6491  6521  6529  6547  6551  6553  6563  6569  6571  6577  6581\n [853]  6599  6607  6619  6637  6653  6659  6661  6673  6679  6689  6691  6701\n [865]  6703  6709  6719  6733  6737  6761  6763  6779  6781  6791  6793  6803\n [877]  6823  6827  6829  6833  6841  6857  6863  6869  6871  6883  6899  6907\n [889]  6911  6917  6947  6949  6959  6961  6967  6971  6977  6983  6991  6997\n [901]  7001  7013  7019  7027  7039  7043  7057  7069  7079  7103  7109  7121\n [913]  7127  7129  7151  7159  7177  7187  7193  7207  7211  7213  7219  7229\n [925]  7237  7243  7247  7253  7283  7297  7307  7309  7321  7331  7333  7349\n [937]  7351  7369  7393  7411  7417  7433  7451  7457  7459  7477  7481  7487\n [949]  7489  7499  7507  7517  7523  7529  7537  7541  7547  7549  7559  7561\n [961]  7573  7577  7583  7589  7591  7603  7607  7621  7639  7643  7649  7669\n [973]  7673  7681  7687  7691  7699  7703  7717  7723  7727  7741  7753  7757\n [985]  7759  7789  7793  7817  7823  7829  7841  7853  7867  7873  7877  7879\n [997]  7883  7901  7907  7919  7927  7933  7937  7949  7951  7963  7993  8009\n[1009]  8011  8017  8039  8053  8059  8069  8081  8087  8089  8093  8101  8111\n[1021]  8117  8123  8147  8161  8167  8171  8179  8191  8209  8219  8221  8231\n[1033]  8233  8237  8243  8263  8269  8273  8287  8291  8293  8297  8311  8317\n[1045]  8329  8353  8363  8369  8377  8387  8389  8419  8423  8429  8431  8443\n[1057]  8447  8461  8467  8501  8513  8521  8527  8537  8539  8543  8563  8573\n[1069]  8581  8597  8599  8609  8623  8627  8629  8641  8647  8663  8669  8677\n[1081]  8681  8689  8693  8699  8707  8713  8719  8731  8737  8741  8747  8753\n[1093]  8761  8779  8783  8803  8807  8819  8821  8831  8837  8839  8849  8861\n[1105]  8863  8867  8887  8893  8923  8929  8933  8941  8951  8963  8969  8971\n[1117]  8999  9001  9007  9011  9013  9029  9041  9043  9049  9059  9067  9091\n[1129]  9103  9109  9127  9133  9137  9151  9157  9161  9173  9181  9187  9199\n[1141]  9203  9209  9221  9227  9239  9241  9257  9277  9281  9283  9293  9311\n[1153]  9319  9323  9337  9341  9343  9349  9371  9377  9391  9397  9403  9413\n[1165]  9419  9421  9431  9433  9437  9439  9461  9463  9467  9473  9479  9491\n[1177]  9497  9511  9521  9533  9539  9547  9551  9587  9601  9613  9619  9623\n[1189]  9629  9631  9643  9649  9661  9677  9679  9689  9697  9719  9721  9733\n[1201]  9739  9743  9749  9767  9769  9781  9787  9791  9803  9811  9817  9829\n[1213]  9833  9839  9851  9857  9859  9871  9883  9887  9901  9907  9923  9929\n[1225]  9931  9941  9949  9967  9973 10007 10009 10037 10039 10061 10067 10069\n[1237] 10079 10091 10093 10099 10103 10111 10133 10139 10141 10151 10159 10163\n[1249] 10169 10177 10181 10193 10211 10223 10243 10247 10253 10259 10267 10271\n[1261] 10273 10289 10301 10303 10313 10321 10331 10333 10337 10343 10357 10369\n[1273] 10391 10399 10427 10429 10433 10453 10457 10459 10463 10477 10487 10499\n[1285] 10501 10513 10529 10531 10559 10567 10589 10597 10601 10607 10613 10627\n[1297] 10631 10639 10651 10657 10663 10667 10687 10691 10709 10711 10723 10729\n[1309] 10733 10739 10753 10771 10781 10789 10799 10831 10837 10847 10853 10859\n[1321] 10861 10867 10883 10889 10891 10903 10909 10937 10939 10949 10957 10973\n[1333] 10979 10987 10993 11003 11027 11047 11057 11059 11069 11071 11083 11087\n[1345] 11093 11113 11117 11119 11131 11149 11159 11161 11171 11173 11177 11197\n[1357] 11213 11239 11243 11251 11257 11261 11273 11279 11287 11299 11311 11317\n[1369] 11321 11329 11351 11353 11369 11383 11393 11399 11411 11423 11437 11443\n[1381] 11447 11467 11471 11483 11489 11491 11497 11503 11519 11527 11549 11551\n[1393] 11579 11587 11593 11597 11617 11621 11633 11657 11677 11681 11689 11699\n[1405] 11701 11717 11719 11731 11743 11777 11779 11783 11789 11801 11807 11813\n[1417] 11821 11827 11831 11833 11839 11863 11867 11887 11897 11903 11909 11923\n[1429] 11927 11933 11939 11941 11953 11959 11969 11971 11981 11987 12007 12011\n[1441] 12037 12041 12043 12049 12071 12073 12097 12101 12107 12109 12113 12119\n[1453] 12143 12149 12157 12161 12163 12197 12203 12211 12227 12239 12241 12251\n[1465] 12253 12263 12269 12277 12281 12289 12301 12323 12329 12343 12347 12373\n[1477] 12377 12379 12391 12401 12409 12413 12421 12433 12437 12451 12457 12473\n[1489] 12479 12487 12491 12497 12503 12511 12517 12527 12539 12541 12547 12553\n[1501] 12569 12577 12583 12589 12601 12611 12613 12619 12637 12641 12647 12653\n[1513] 12659 12671 12689 12697 12703 12713 12721 12739 12743 12757 12763 12781\n[1525] 12791 12799 12809 12821 12823 12829 12841 12853 12889 12893 12899 12907\n[1537] 12911 12917 12919 12923 12941 12953 12959 12967 12973 12979 12983 13001\n[1549] 13003 13007 13009 13033 13037 13043 13049 13063 13093 13099 13103 13109\n[1561] 13121 13127 13147 13151 13159 13163 13171 13177 13183 13187 13217 13219\n[1573] 13229 13241 13249 13259 13267 13291 13297 13309 13313 13327 13331 13337\n[1585] 13339 13367 13381 13397 13399 13411 13417 13421 13441 13451 13457 13463\n[1597] 13469 13477 13487 13499 13513 13523 13537 13553 13567 13577 13591 13597\n[1609] 13613 13619 13627 13633 13649 13669 13679 13681 13687 13691 13693 13697\n[1621] 13709 13711 13721 13723 13729 13751 13757 13759 13763 13781 13789 13799\n[1633] 13807 13829 13831 13841 13859 13873 13877 13879 13883 13901 13903 13907\n[1645] 13913 13921 13931 13933 13963 13967 13997 13999 14009 14011 14029 14033\n[1657] 14051 14057 14071 14081 14083 14087 14107 14143 14149 14153 14159 14173\n[1669] 14177 14197 14207 14221 14243 14249 14251 14281 14293 14303 14321 14323\n[1681] 14327 14341 14347 14369 14387 14389 14401 14407 14411 14419 14423 14431\n[1693] 14437 14447 14449 14461 14479 14489 14503 14519 14533 14537 14543 14549\n[1705] 14551 14557 14561 14563 14591 14593 14621 14627 14629 14633 14639 14653\n[1717] 14657 14669 14683 14699 14713 14717 14723 14731 14737 14741 14747 14753\n[1729] 14759 14767 14771 14779 14783 14797 14813 14821 14827 14831 14843 14851\n[1741] 14867 14869 14879 14887 14891 14897 14923 14929 14939 14947 14951 14957\n[1753] 14969 14983 15013 15017 15031 15053 15061 15073 15077 15083 15091 15101\n[1765] 15107 15121 15131 15137 15139 15149 15161 15173 15187 15193 15199 15217\n[1777] 15227 15233 15241 15259 15263 15269 15271 15277 15287 15289 15299 15307\n[1789] 15313 15319 15329 15331 15349 15359 15361 15373 15377 15383 15391 15401\n[1801] 15413 15427 15439 15443 15451 15461 15467 15473 15493 15497 15511 15527\n[1813] 15541 15551 15559 15569 15581 15583 15601 15607 15619 15629 15641 15643\n[1825] 15647 15649 15661 15667 15671 15679 15683 15727 15731 15733 15737 15739\n[1837] 15749 15761 15767 15773 15787 15791 15797 15803 15809 15817 15823 15859\n[1849] 15877 15881 15887 15889 15901 15907 15913 15919 15923 15937 15959 15971\n[1861] 15973 15991 16001 16007 16033 16057 16061 16063 16067 16069 16073 16087\n[1873] 16091 16097 16103 16111 16127 16139 16141 16183 16187 16189 16193 16217\n[1885] 16223 16229 16231 16249 16253 16267 16273 16301 16319 16333 16339 16349\n[1897] 16361 16363 16369 16381 16411 16417 16421 16427 16433 16447 16451 16453\n[1909] 16477 16481 16487 16493 16519 16529 16547 16553 16561 16567 16573 16603\n[1921] 16607 16619 16631 16633 16649 16651 16657 16661 16673 16691 16693 16699\n[1933] 16703 16729 16741 16747 16759 16763 16787 16811 16823 16829 16831 16843\n[1945] 16871 16879 16883 16889 16901 16903 16921 16927 16931 16937 16943 16963\n[1957] 16979 16981 16987 16993 17011 17021 17027 17029 17033 17041 17047 17053\n[1969] 17077 17093 17099 17107 17117 17123 17137 17159 17167 17183 17189 17191\n[1981] 17203 17207 17209 17231 17239 17257 17291 17293 17299 17317 17321 17327\n[1993] 17333 17341 17351 17359 17377 17383 17387 17389\n\nprimes3000 = firstNPrimes(3000)\nlength(primes3000)   # 3000\n\n[1] 3000\n\ntail(primes3000, 10)\n\n [1] 27337 27361 27367 27397 27407 27409 27427 27431 27437 27449",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#another-example---flightsbeforereturning-itineraray",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#another-example---flightsbeforereturning-itineraray",
    "title": "33  while loops.",
    "section": "33.17 Another example - flightsBeforeReturning() , itineraray()",
    "text": "33.17 Another example - flightsBeforeReturning() , itineraray()\n\n#############################################################.\n# The following example is interesting but doesn't add any new \n# concepts.\n#\n# 2022 - We skipped going over this example in class for both\n# Wilf and Beren classes but I told students to look at this example\n# on their own.\n#\n# -Prof. Rosenthal\n#############################################################.\n\n#---------------------------------------------------------------------\n# How many flights are needed before you get back to the city you \n# started?\n#---------------------------------------------------------------------\n\n# Given the following data:\n\n# The vector cities has names and values that are the same set of cities\n# just arranged in a different order. Interpret the names of the vector \n# positions as the cities where an airline has flights. The management of \n# the company schedules the flights based on the data in the vector.\n# (see below for more info)\n\ncities = c(\"new york\", \"london\", \"tokyo\", \"l.a.\", \"tel aviv\", \"brussels\", \"moscow\")\nnames(cities) = sort(cities)\ncities\n\n  brussels       l.a.     london     moscow   new york   tel aviv      tokyo \n\"new york\"   \"london\"    \"tokyo\"     \"l.a.\" \"tel aviv\" \"brussels\"   \"moscow\" \n\n# The airline has a complex scheduling system for each of their planes.\n# Each plane flies from city to city to city based on the data shown above.\n# Eventually a plane will return to its original city.\n#\n# For example, a plane that \n#    starts in Brussels will fly to New York\n#    From New york, that same plane will fly to Tel Aviv.\n#    From Tel Aviv, that same plane will fly back to Brussels\n# for a total of 3 flights before it returns to where it started.\n#\n# Similarly, a plane that \n#    starts in L.A. office will fly to London.\n#    From London, that same plane will fly to Tokyo.\n#    From Tokyo, that same plane will fly to Moscow.\n#    From Moscow that same plane will fly back to L.A.\n# for a total of 4 flights before it returns to where it started.\n#\n# Write a function\n#      flightsBeforeReturning = function(staringCity, schedulingVector)\n#\n# that figures out how many flights it will take for a plane that \n# starts in startingCity will have to fly before it returns to the same\n# startingCity based on the data in the schedulingVector.\n\nflightsBeforeReturning = function(startingCity, schedulingVector){\n  \n  currentCity = startingCity\n  numberOfFlights = 0\n  \n  while( schedulingVector[ currentCity ] != startingCity ){\n    currentCity = schedulingVector[ currentCity ]\n    numberOfFlights = numberOfFlights + 1\n  }\n  \n  if (schedulingVector[startingCity] != startingCity)\n    numberOfFlights = numberOfFlights + 1\n  \n  numberOfFlights\n}\n\ncities\n\n  brussels       l.a.     london     moscow   new york   tel aviv      tokyo \n\"new york\"   \"london\"    \"tokyo\"     \"l.a.\" \"tel aviv\" \"brussels\"   \"moscow\" \n\nflightsBeforeReturning(\"brussels\", cities)  # 3\n\n[1] 3\n\nflightsBeforeReturning(\"l.a.\", cities)      # 4\n\n[1] 4\n\nflightsBeforeReturning(\"london\", cities)    # 4\n\n[1] 4\n\nflightsBeforeReturning(\"moscow\", cities)    # 4\n\n[1] 4\n\nflightsBeforeReturning(\"new york\", cities)  # 3\n\n[1] 3\n\nflightsBeforeReturning(\"tel aviv\", cities)  # 3\n\n[1] 3\n\nflightsBeforeReturning(\"tokyo\", cities)     # 4\n\n[1] 4\n\n# Similar function to above, but this time return the actual sequence of\n# cities that are visited\nitinerary = function(startingCity, schedulingVector){\n  \n  currentCity = startingCity\n  visitedCities = startingCity\n  \n  while( schedulingVector[ currentCity ] != startingCity ){\n    \n    visitedCities = c(visitedCities, schedulingVector[currentCity])\n\n    currentCity = schedulingVector[ currentCity ]\n  }\n\n  # Add the last leg of the itinerary but only if we flew SOMEWHERE first\n  if (schedulingVector[startingCity] != startingCity){\n    visitedCities = c(visitedCities, startingCity)\n  }\n  \n  names(visitedCities) = NULL   # remove the names\n  \n  visitedCities\n}\n\ncities\n\n  brussels       l.a.     london     moscow   new york   tel aviv      tokyo \n\"new york\"   \"london\"    \"tokyo\"     \"l.a.\" \"tel aviv\" \"brussels\"   \"moscow\" \n\nitinerary(\"brussels\", cities)  # \"brussels\" \"new york\" \"tel aviv\" \"brussels\"\n\n[1] \"brussels\" \"new york\" \"tel aviv\" \"brussels\"\n\nitinerary(\"l.a.\", cities)      # \"l.a.\"   \"london\" \"tokyo\"  \"moscow\" \"l.a.\"  \n\n[1] \"l.a.\"   \"london\" \"tokyo\"  \"moscow\" \"l.a.\"  \n\nitinerary(\"london\", cities)    # \"london\" \"tokyo\"  \"moscow\" \"l.a.\"   \"london\"\n\n[1] \"london\" \"tokyo\"  \"moscow\" \"l.a.\"   \"london\"\n\nitinerary(\"moscow\", cities)    # \"moscow\" \"l.a.\"   \"london\" \"tokyo\"  \"moscow\"\n\n[1] \"moscow\" \"l.a.\"   \"london\" \"tokyo\"  \"moscow\"\n\nitinerary(\"new york\", cities)  # \"new york\" \"tel aviv\" \"brussels\" \"new york\"\n\n[1] \"new york\" \"tel aviv\" \"brussels\" \"new york\"\n\nitinerary(\"tel aviv\", cities)  # \"tel aviv\" \"brussels\" \"new york\" \"tel aviv\"\n\n[1] \"tel aviv\" \"brussels\" \"new york\" \"tel aviv\"\n\nitinerary(\"tokyo\", cities)     # \"tokyo\"  \"moscow\" \"l.a.\"   \"london\" \"tokyo\" \n\n[1] \"tokyo\"  \"moscow\" \"l.a.\"   \"london\" \"tokyo\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#nested-loops",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#nested-loops",
    "title": "33  while loops.",
    "section": "33.18 NESTED LOOPS",
    "text": "33.18 NESTED LOOPS\n\n#####################################################################\n#####################################################################\n##\n## NESTED LOOPS \n##\n## A \"nested loop\" is a loop inside of another loop (similar\n## to \"nested ifs\")\n##\n## We often refer to the \"outer loop\" and the \"inner loop\".\n##\n#####################################################################\n#####################################################################\n\nrm(list=ls())   # start over\n\nexample = function( maxOuter, maxInner){\n  outer = 1\n  while(outer &lt;= maxOuter){\n    cat(\"OUTER LOOP (before inner loop): outer=\", outer, \"\\n\\n\")\n    \n    inner = 1\n    while(inner &lt;= maxInner){\n      cat(\"   INNER LOOP: outer=\",outer,\"inner=\",inner,\"\\n\")\n      inner = inner + 1\n    }\n    \n    outer = outer + 1\n    \n  }\n}\n\nexample(maxOuter = 2, maxInner = 3)\n\nOUTER LOOP (before inner loop): outer= 1 \n\n   INNER LOOP: outer= 1 inner= 1 \n   INNER LOOP: outer= 1 inner= 2 \n   INNER LOOP: outer= 1 inner= 3 \nOUTER LOOP (before inner loop): outer= 2 \n\n   INNER LOOP: outer= 2 inner= 1 \n   INNER LOOP: outer= 2 inner= 2 \n   INNER LOOP: outer= 2 inner= 3 \n\nexample(maxOuter = 3, maxInner = 5)\n\nOUTER LOOP (before inner loop): outer= 1 \n\n   INNER LOOP: outer= 1 inner= 1 \n   INNER LOOP: outer= 1 inner= 2 \n   INNER LOOP: outer= 1 inner= 3 \n   INNER LOOP: outer= 1 inner= 4 \n   INNER LOOP: outer= 1 inner= 5 \nOUTER LOOP (before inner loop): outer= 2 \n\n   INNER LOOP: outer= 2 inner= 1 \n   INNER LOOP: outer= 2 inner= 2 \n   INNER LOOP: outer= 2 inner= 3 \n   INNER LOOP: outer= 2 inner= 4 \n   INNER LOOP: outer= 2 inner= 5 \nOUTER LOOP (before inner loop): outer= 3 \n\n   INNER LOOP: outer= 3 inner= 1 \n   INNER LOOP: outer= 3 inner= 2 \n   INNER LOOP: outer= 3 inner= 3 \n   INNER LOOP: outer= 3 inner= 4 \n   INNER LOOP: outer= 3 inner= 5",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#example---primesupto-with-nested-loops",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#example---primesupto-with-nested-loops",
    "title": "33  while loops.",
    "section": "33.19 example - primesUpTo() with nested loops",
    "text": "33.19 example - primesUpTo() with nested loops\n\n###############################################################################\n# \n# Examples of nested loops \n#\n###############################################################################\n\nrm(list=ls())  # start over ...\n\n#-----------------------------------------------------------------------------\n# Above we defined a\n#\n#     primesUpTo = function( n )\n#\n# That returns a vector of all the primes up to n. For example:\n#\n#     &gt; primesUpTo(15)\n#     [1] 2 3 5 7 11 13\n#\n# In that version of the function, we used a single loop. We also\n# called the function is.prime that we had defined earlier inside of the loop.\n# Both the funciton is.prime and the function primesUpTo, used a single \n# loop for each function.\n#\n#\n#   ***********************************************************************\n#   *** THE FOLLOWING IS ANOTHER WAY OF WRITING THE SAME FUNCTION.      ***\n#   *** THIS VERSION DOES NOT CALL is.prime AT ALL. RATHER THIS SINGLE  ***\n#   *** FUNCTION DOES ALL OF THE WORK USING TWO DIFFERENT LOOPS -       ***\n#   *** ONE INSIDE THE OTHER (i.e. a \"nested loop\")                     ***\n#   ***********************************************************************\n#\n# The following function, primesUpTo_nestedLoops, returns the exact same values \n# as the primesUpTo function above. However, this version of the function\n# does NOT call is.prime. Rather, this version calculates whether a number\n# is prime directly in the same function by using a nested loop (i.e. \n# one loop inside of another loop)\n#-----------------------------------------------------------------------------\n\nrm(list=ls())\n\nprimesUpTo_nestedLoops = function( maxNum ){\n primes = numeric(0)\n \n # Set up the variables that are used in the condition \n # maxNum already has a value since it is an argument to the function\n numToCheck = 2\n \n while (numToCheck &lt;= maxNum){  # a condition that will eventually become FALSE\n  \n  isPrime = TRUE\n  \n  # Check if numToCheck is prime. If it isn't prime set the variable\n  # isPrime to FALSE.\n  \n  divisor = 2\n  while(divisor &lt; numToCheck){\n   if ( numToCheck %% divisor == 0){\n    isPrime = FALSE\n   }\n   \n   divisor = divisor + 1\n  }\n  \n  \n  if(isPrime == TRUE){\n   primes = c(primes, numToCheck)\n  }\n  \n  # change a variable that is in the condition in a way that will eventually\n  # make the condition become FALSE\n  numToCheck = numToCheck + 1\n }\n \n primes\n}\n\nprimesUpTo_nestedLoops(10)\n\n[1] 2 3 5 7\n\nprimesUpTo_nestedLoops(100)\n\n [1]  2  3  5  7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n\n# VERSION WITH \"nested loops\"\nprimesUpTo_nestedLoops = function( maxNum ){\n primes = numeric(0)\n numToCheck = 2\n \n while (numToCheck &lt;= maxNum){\n  \n  # Use an inner loop to figure out if numToCheck is in fact prime\n  # and if it is add numToCheck to the vector primes\n  isPrime = TRUE\n  divisor = 2\n  while(divisor &lt; numToCheck){\n   if( numToCheck %% divisor == 0){\n    isPrime = FALSE\n   }\n   \n   divisor = divisor+1\n  }\n  \n  # Add the numToCheck to the primes if it in fact is prime\n  if(isPrime) {\n   primes = c(primes, numToCheck)\n  }    \n  \n  numToCheck = numToCheck + 1\n }\n \n primes\n}\n\nprimesUpTo_nestedLoops(10)\n\n[1] 2 3 5 7\n\nprimesUpTo_nestedLoops(100)\n\n [1]  2  3  5  7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n\nprimesUpTo_nestedLoops(1000)\n\n  [1]   2   3   5   7  11  13  17  19  23  29  31  37  41  43  47  53  59  61\n [19]  67  71  73  79  83  89  97 101 103 107 109 113 127 131 137 139 149 151\n [37] 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251\n [55] 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359\n [73] 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463\n [91] 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593\n[109] 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701\n[127] 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827\n[145] 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953\n[163] 967 971 977 983 991 997",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#example---firstnprimes-with-nested-loops",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#example---firstnprimes-with-nested-loops",
    "title": "33  while loops.",
    "section": "33.20 example - firstNPrimes() with nested loops",
    "text": "33.20 example - firstNPrimes() with nested loops\n\n\n\n\n\n\nQUESTION: Rewrite the function firstNPrimes to use nested loops.\n\n\n\n\n#-----------------------------------------------------------------------\n# QUESTION:\n# Rewrite the function firstNPrimes that we wrote above. The new version\n# should use nested loops instead of calling the is.prime function.\n#-----------------------------------------------------------------------\n\n#~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n# For your reference, below are the original versions of the is.prime function\n# and the firstNPimes function that calls the is.prime function and does NOT\n# use nested loops.\n#~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\nrm(list=ls())    # start over\n\nis.prime &lt;- function( num ) {\n if (num &lt; 2){\n  return(FALSE)\n }\n divisor &lt;- 2\n while ( divisor &lt;= sqrt(num) ) {\n  if (num %% divisor == 0){\n   return(FALSE)   \n  }\n  divisor &lt;- divisor + 1\n }\n return(TRUE)\n}\n\nfirstNPrimes = function( numPrimes ){\n primes = numeric(0)\n numberToCheck = 2\n while ( length(primes) &lt; numPrimes  ){\n  if (is.prime(numberToCheck)){\n   primes = c(primes, numberToCheck)\n  }\n  numberToCheck = numberToCheck + 1\n }\n primes\n}\n\nfirstNPrimes(3)\n\n[1] 2 3 5\n\nfirstNPrimes(100)\n\n  [1]   2   3   5   7  11  13  17  19  23  29  31  37  41  43  47  53  59  61\n [19]  67  71  73  79  83  89  97 101 103 107 109 113 127 131 137 139 149 151\n [37] 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251\n [55] 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359\n [73] 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463\n [91] 467 479 487 491 499 503 509 521 523 541\n\nfirstNPrimes(1000)\n\n   [1]    2    3    5    7   11   13   17   19   23   29   31   37   41   43\n  [15]   47   53   59   61   67   71   73   79   83   89   97  101  103  107\n  [29]  109  113  127  131  137  139  149  151  157  163  167  173  179  181\n  [43]  191  193  197  199  211  223  227  229  233  239  241  251  257  263\n  [57]  269  271  277  281  283  293  307  311  313  317  331  337  347  349\n  [71]  353  359  367  373  379  383  389  397  401  409  419  421  431  433\n  [85]  439  443  449  457  461  463  467  479  487  491  499  503  509  521\n  [99]  523  541  547  557  563  569  571  577  587  593  599  601  607  613\n [113]  617  619  631  641  643  647  653  659  661  673  677  683  691  701\n [127]  709  719  727  733  739  743  751  757  761  769  773  787  797  809\n [141]  811  821  823  827  829  839  853  857  859  863  877  881  883  887\n [155]  907  911  919  929  937  941  947  953  967  971  977  983  991  997\n [169] 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087 1091\n [183] 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193\n [197] 1201 1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291\n [211] 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423\n [225] 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493\n [239] 1499 1511 1523 1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601\n [253] 1607 1609 1613 1619 1621 1627 1637 1657 1663 1667 1669 1693 1697 1699\n [267] 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811\n [281] 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931\n [295] 1933 1949 1951 1973 1979 1987 1993 1997 1999 2003 2011 2017 2027 2029\n [309] 2039 2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129 2131 2137\n [323] 2141 2143 2153 2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267\n [337] 2269 2273 2281 2287 2293 2297 2309 2311 2333 2339 2341 2347 2351 2357\n [351] 2371 2377 2381 2383 2389 2393 2399 2411 2417 2423 2437 2441 2447 2459\n [365] 2467 2473 2477 2503 2521 2531 2539 2543 2549 2551 2557 2579 2591 2593\n [379] 2609 2617 2621 2633 2647 2657 2659 2663 2671 2677 2683 2687 2689 2693\n [393] 2699 2707 2711 2713 2719 2729 2731 2741 2749 2753 2767 2777 2789 2791\n [407] 2797 2801 2803 2819 2833 2837 2843 2851 2857 2861 2879 2887 2897 2903\n [421] 2909 2917 2927 2939 2953 2957 2963 2969 2971 2999 3001 3011 3019 3023\n [435] 3037 3041 3049 3061 3067 3079 3083 3089 3109 3119 3121 3137 3163 3167\n [449] 3169 3181 3187 3191 3203 3209 3217 3221 3229 3251 3253 3257 3259 3271\n [463] 3299 3301 3307 3313 3319 3323 3329 3331 3343 3347 3359 3361 3371 3373\n [477] 3389 3391 3407 3413 3433 3449 3457 3461 3463 3467 3469 3491 3499 3511\n [491] 3517 3527 3529 3533 3539 3541 3547 3557 3559 3571 3581 3583 3593 3607\n [505] 3613 3617 3623 3631 3637 3643 3659 3671 3673 3677 3691 3697 3701 3709\n [519] 3719 3727 3733 3739 3761 3767 3769 3779 3793 3797 3803 3821 3823 3833\n [533] 3847 3851 3853 3863 3877 3881 3889 3907 3911 3917 3919 3923 3929 3931\n [547] 3943 3947 3967 3989 4001 4003 4007 4013 4019 4021 4027 4049 4051 4057\n [561] 4073 4079 4091 4093 4099 4111 4127 4129 4133 4139 4153 4157 4159 4177\n [575] 4201 4211 4217 4219 4229 4231 4241 4243 4253 4259 4261 4271 4273 4283\n [589] 4289 4297 4327 4337 4339 4349 4357 4363 4373 4391 4397 4409 4421 4423\n [603] 4441 4447 4451 4457 4463 4481 4483 4493 4507 4513 4517 4519 4523 4547\n [617] 4549 4561 4567 4583 4591 4597 4603 4621 4637 4639 4643 4649 4651 4657\n [631] 4663 4673 4679 4691 4703 4721 4723 4729 4733 4751 4759 4783 4787 4789\n [645] 4793 4799 4801 4813 4817 4831 4861 4871 4877 4889 4903 4909 4919 4931\n [659] 4933 4937 4943 4951 4957 4967 4969 4973 4987 4993 4999 5003 5009 5011\n [673] 5021 5023 5039 5051 5059 5077 5081 5087 5099 5101 5107 5113 5119 5147\n [687] 5153 5167 5171 5179 5189 5197 5209 5227 5231 5233 5237 5261 5273 5279\n [701] 5281 5297 5303 5309 5323 5333 5347 5351 5381 5387 5393 5399 5407 5413\n [715] 5417 5419 5431 5437 5441 5443 5449 5471 5477 5479 5483 5501 5503 5507\n [729] 5519 5521 5527 5531 5557 5563 5569 5573 5581 5591 5623 5639 5641 5647\n [743] 5651 5653 5657 5659 5669 5683 5689 5693 5701 5711 5717 5737 5741 5743\n [757] 5749 5779 5783 5791 5801 5807 5813 5821 5827 5839 5843 5849 5851 5857\n [771] 5861 5867 5869 5879 5881 5897 5903 5923 5927 5939 5953 5981 5987 6007\n [785] 6011 6029 6037 6043 6047 6053 6067 6073 6079 6089 6091 6101 6113 6121\n [799] 6131 6133 6143 6151 6163 6173 6197 6199 6203 6211 6217 6221 6229 6247\n [813] 6257 6263 6269 6271 6277 6287 6299 6301 6311 6317 6323 6329 6337 6343\n [827] 6353 6359 6361 6367 6373 6379 6389 6397 6421 6427 6449 6451 6469 6473\n [841] 6481 6491 6521 6529 6547 6551 6553 6563 6569 6571 6577 6581 6599 6607\n [855] 6619 6637 6653 6659 6661 6673 6679 6689 6691 6701 6703 6709 6719 6733\n [869] 6737 6761 6763 6779 6781 6791 6793 6803 6823 6827 6829 6833 6841 6857\n [883] 6863 6869 6871 6883 6899 6907 6911 6917 6947 6949 6959 6961 6967 6971\n [897] 6977 6983 6991 6997 7001 7013 7019 7027 7039 7043 7057 7069 7079 7103\n [911] 7109 7121 7127 7129 7151 7159 7177 7187 7193 7207 7211 7213 7219 7229\n [925] 7237 7243 7247 7253 7283 7297 7307 7309 7321 7331 7333 7349 7351 7369\n [939] 7393 7411 7417 7433 7451 7457 7459 7477 7481 7487 7489 7499 7507 7517\n [953] 7523 7529 7537 7541 7547 7549 7559 7561 7573 7577 7583 7589 7591 7603\n [967] 7607 7621 7639 7643 7649 7669 7673 7681 7687 7691 7699 7703 7717 7723\n [981] 7727 7741 7753 7757 7759 7789 7793 7817 7823 7829 7841 7853 7867 7873\n [995] 7877 7879 7883 7901 7907 7919\n\nfirstNPrimes(2000)\n\n   [1]     2     3     5     7    11    13    17    19    23    29    31    37\n  [13]    41    43    47    53    59    61    67    71    73    79    83    89\n  [25]    97   101   103   107   109   113   127   131   137   139   149   151\n  [37]   157   163   167   173   179   181   191   193   197   199   211   223\n  [49]   227   229   233   239   241   251   257   263   269   271   277   281\n  [61]   283   293   307   311   313   317   331   337   347   349   353   359\n  [73]   367   373   379   383   389   397   401   409   419   421   431   433\n  [85]   439   443   449   457   461   463   467   479   487   491   499   503\n  [97]   509   521   523   541   547   557   563   569   571   577   587   593\n [109]   599   601   607   613   617   619   631   641   643   647   653   659\n [121]   661   673   677   683   691   701   709   719   727   733   739   743\n [133]   751   757   761   769   773   787   797   809   811   821   823   827\n [145]   829   839   853   857   859   863   877   881   883   887   907   911\n [157]   919   929   937   941   947   953   967   971   977   983   991   997\n [169]  1009  1013  1019  1021  1031  1033  1039  1049  1051  1061  1063  1069\n [181]  1087  1091  1093  1097  1103  1109  1117  1123  1129  1151  1153  1163\n [193]  1171  1181  1187  1193  1201  1213  1217  1223  1229  1231  1237  1249\n [205]  1259  1277  1279  1283  1289  1291  1297  1301  1303  1307  1319  1321\n [217]  1327  1361  1367  1373  1381  1399  1409  1423  1427  1429  1433  1439\n [229]  1447  1451  1453  1459  1471  1481  1483  1487  1489  1493  1499  1511\n [241]  1523  1531  1543  1549  1553  1559  1567  1571  1579  1583  1597  1601\n [253]  1607  1609  1613  1619  1621  1627  1637  1657  1663  1667  1669  1693\n [265]  1697  1699  1709  1721  1723  1733  1741  1747  1753  1759  1777  1783\n [277]  1787  1789  1801  1811  1823  1831  1847  1861  1867  1871  1873  1877\n [289]  1879  1889  1901  1907  1913  1931  1933  1949  1951  1973  1979  1987\n [301]  1993  1997  1999  2003  2011  2017  2027  2029  2039  2053  2063  2069\n [313]  2081  2083  2087  2089  2099  2111  2113  2129  2131  2137  2141  2143\n [325]  2153  2161  2179  2203  2207  2213  2221  2237  2239  2243  2251  2267\n [337]  2269  2273  2281  2287  2293  2297  2309  2311  2333  2339  2341  2347\n [349]  2351  2357  2371  2377  2381  2383  2389  2393  2399  2411  2417  2423\n [361]  2437  2441  2447  2459  2467  2473  2477  2503  2521  2531  2539  2543\n [373]  2549  2551  2557  2579  2591  2593  2609  2617  2621  2633  2647  2657\n [385]  2659  2663  2671  2677  2683  2687  2689  2693  2699  2707  2711  2713\n [397]  2719  2729  2731  2741  2749  2753  2767  2777  2789  2791  2797  2801\n [409]  2803  2819  2833  2837  2843  2851  2857  2861  2879  2887  2897  2903\n [421]  2909  2917  2927  2939  2953  2957  2963  2969  2971  2999  3001  3011\n [433]  3019  3023  3037  3041  3049  3061  3067  3079  3083  3089  3109  3119\n [445]  3121  3137  3163  3167  3169  3181  3187  3191  3203  3209  3217  3221\n [457]  3229  3251  3253  3257  3259  3271  3299  3301  3307  3313  3319  3323\n [469]  3329  3331  3343  3347  3359  3361  3371  3373  3389  3391  3407  3413\n [481]  3433  3449  3457  3461  3463  3467  3469  3491  3499  3511  3517  3527\n [493]  3529  3533  3539  3541  3547  3557  3559  3571  3581  3583  3593  3607\n [505]  3613  3617  3623  3631  3637  3643  3659  3671  3673  3677  3691  3697\n [517]  3701  3709  3719  3727  3733  3739  3761  3767  3769  3779  3793  3797\n [529]  3803  3821  3823  3833  3847  3851  3853  3863  3877  3881  3889  3907\n [541]  3911  3917  3919  3923  3929  3931  3943  3947  3967  3989  4001  4003\n [553]  4007  4013  4019  4021  4027  4049  4051  4057  4073  4079  4091  4093\n [565]  4099  4111  4127  4129  4133  4139  4153  4157  4159  4177  4201  4211\n [577]  4217  4219  4229  4231  4241  4243  4253  4259  4261  4271  4273  4283\n [589]  4289  4297  4327  4337  4339  4349  4357  4363  4373  4391  4397  4409\n [601]  4421  4423  4441  4447  4451  4457  4463  4481  4483  4493  4507  4513\n [613]  4517  4519  4523  4547  4549  4561  4567  4583  4591  4597  4603  4621\n [625]  4637  4639  4643  4649  4651  4657  4663  4673  4679  4691  4703  4721\n [637]  4723  4729  4733  4751  4759  4783  4787  4789  4793  4799  4801  4813\n [649]  4817  4831  4861  4871  4877  4889  4903  4909  4919  4931  4933  4937\n [661]  4943  4951  4957  4967  4969  4973  4987  4993  4999  5003  5009  5011\n [673]  5021  5023  5039  5051  5059  5077  5081  5087  5099  5101  5107  5113\n [685]  5119  5147  5153  5167  5171  5179  5189  5197  5209  5227  5231  5233\n [697]  5237  5261  5273  5279  5281  5297  5303  5309  5323  5333  5347  5351\n [709]  5381  5387  5393  5399  5407  5413  5417  5419  5431  5437  5441  5443\n [721]  5449  5471  5477  5479  5483  5501  5503  5507  5519  5521  5527  5531\n [733]  5557  5563  5569  5573  5581  5591  5623  5639  5641  5647  5651  5653\n [745]  5657  5659  5669  5683  5689  5693  5701  5711  5717  5737  5741  5743\n [757]  5749  5779  5783  5791  5801  5807  5813  5821  5827  5839  5843  5849\n [769]  5851  5857  5861  5867  5869  5879  5881  5897  5903  5923  5927  5939\n [781]  5953  5981  5987  6007  6011  6029  6037  6043  6047  6053  6067  6073\n [793]  6079  6089  6091  6101  6113  6121  6131  6133  6143  6151  6163  6173\n [805]  6197  6199  6203  6211  6217  6221  6229  6247  6257  6263  6269  6271\n [817]  6277  6287  6299  6301  6311  6317  6323  6329  6337  6343  6353  6359\n [829]  6361  6367  6373  6379  6389  6397  6421  6427  6449  6451  6469  6473\n [841]  6481  6491  6521  6529  6547  6551  6553  6563  6569  6571  6577  6581\n [853]  6599  6607  6619  6637  6653  6659  6661  6673  6679  6689  6691  6701\n [865]  6703  6709  6719  6733  6737  6761  6763  6779  6781  6791  6793  6803\n [877]  6823  6827  6829  6833  6841  6857  6863  6869  6871  6883  6899  6907\n [889]  6911  6917  6947  6949  6959  6961  6967  6971  6977  6983  6991  6997\n [901]  7001  7013  7019  7027  7039  7043  7057  7069  7079  7103  7109  7121\n [913]  7127  7129  7151  7159  7177  7187  7193  7207  7211  7213  7219  7229\n [925]  7237  7243  7247  7253  7283  7297  7307  7309  7321  7331  7333  7349\n [937]  7351  7369  7393  7411  7417  7433  7451  7457  7459  7477  7481  7487\n [949]  7489  7499  7507  7517  7523  7529  7537  7541  7547  7549  7559  7561\n [961]  7573  7577  7583  7589  7591  7603  7607  7621  7639  7643  7649  7669\n [973]  7673  7681  7687  7691  7699  7703  7717  7723  7727  7741  7753  7757\n [985]  7759  7789  7793  7817  7823  7829  7841  7853  7867  7873  7877  7879\n [997]  7883  7901  7907  7919  7927  7933  7937  7949  7951  7963  7993  8009\n[1009]  8011  8017  8039  8053  8059  8069  8081  8087  8089  8093  8101  8111\n[1021]  8117  8123  8147  8161  8167  8171  8179  8191  8209  8219  8221  8231\n[1033]  8233  8237  8243  8263  8269  8273  8287  8291  8293  8297  8311  8317\n[1045]  8329  8353  8363  8369  8377  8387  8389  8419  8423  8429  8431  8443\n[1057]  8447  8461  8467  8501  8513  8521  8527  8537  8539  8543  8563  8573\n[1069]  8581  8597  8599  8609  8623  8627  8629  8641  8647  8663  8669  8677\n[1081]  8681  8689  8693  8699  8707  8713  8719  8731  8737  8741  8747  8753\n[1093]  8761  8779  8783  8803  8807  8819  8821  8831  8837  8839  8849  8861\n[1105]  8863  8867  8887  8893  8923  8929  8933  8941  8951  8963  8969  8971\n[1117]  8999  9001  9007  9011  9013  9029  9041  9043  9049  9059  9067  9091\n[1129]  9103  9109  9127  9133  9137  9151  9157  9161  9173  9181  9187  9199\n[1141]  9203  9209  9221  9227  9239  9241  9257  9277  9281  9283  9293  9311\n[1153]  9319  9323  9337  9341  9343  9349  9371  9377  9391  9397  9403  9413\n[1165]  9419  9421  9431  9433  9437  9439  9461  9463  9467  9473  9479  9491\n[1177]  9497  9511  9521  9533  9539  9547  9551  9587  9601  9613  9619  9623\n[1189]  9629  9631  9643  9649  9661  9677  9679  9689  9697  9719  9721  9733\n[1201]  9739  9743  9749  9767  9769  9781  9787  9791  9803  9811  9817  9829\n[1213]  9833  9839  9851  9857  9859  9871  9883  9887  9901  9907  9923  9929\n[1225]  9931  9941  9949  9967  9973 10007 10009 10037 10039 10061 10067 10069\n[1237] 10079 10091 10093 10099 10103 10111 10133 10139 10141 10151 10159 10163\n[1249] 10169 10177 10181 10193 10211 10223 10243 10247 10253 10259 10267 10271\n[1261] 10273 10289 10301 10303 10313 10321 10331 10333 10337 10343 10357 10369\n[1273] 10391 10399 10427 10429 10433 10453 10457 10459 10463 10477 10487 10499\n[1285] 10501 10513 10529 10531 10559 10567 10589 10597 10601 10607 10613 10627\n[1297] 10631 10639 10651 10657 10663 10667 10687 10691 10709 10711 10723 10729\n[1309] 10733 10739 10753 10771 10781 10789 10799 10831 10837 10847 10853 10859\n[1321] 10861 10867 10883 10889 10891 10903 10909 10937 10939 10949 10957 10973\n[1333] 10979 10987 10993 11003 11027 11047 11057 11059 11069 11071 11083 11087\n[1345] 11093 11113 11117 11119 11131 11149 11159 11161 11171 11173 11177 11197\n[1357] 11213 11239 11243 11251 11257 11261 11273 11279 11287 11299 11311 11317\n[1369] 11321 11329 11351 11353 11369 11383 11393 11399 11411 11423 11437 11443\n[1381] 11447 11467 11471 11483 11489 11491 11497 11503 11519 11527 11549 11551\n[1393] 11579 11587 11593 11597 11617 11621 11633 11657 11677 11681 11689 11699\n[1405] 11701 11717 11719 11731 11743 11777 11779 11783 11789 11801 11807 11813\n[1417] 11821 11827 11831 11833 11839 11863 11867 11887 11897 11903 11909 11923\n[1429] 11927 11933 11939 11941 11953 11959 11969 11971 11981 11987 12007 12011\n[1441] 12037 12041 12043 12049 12071 12073 12097 12101 12107 12109 12113 12119\n[1453] 12143 12149 12157 12161 12163 12197 12203 12211 12227 12239 12241 12251\n[1465] 12253 12263 12269 12277 12281 12289 12301 12323 12329 12343 12347 12373\n[1477] 12377 12379 12391 12401 12409 12413 12421 12433 12437 12451 12457 12473\n[1489] 12479 12487 12491 12497 12503 12511 12517 12527 12539 12541 12547 12553\n[1501] 12569 12577 12583 12589 12601 12611 12613 12619 12637 12641 12647 12653\n[1513] 12659 12671 12689 12697 12703 12713 12721 12739 12743 12757 12763 12781\n[1525] 12791 12799 12809 12821 12823 12829 12841 12853 12889 12893 12899 12907\n[1537] 12911 12917 12919 12923 12941 12953 12959 12967 12973 12979 12983 13001\n[1549] 13003 13007 13009 13033 13037 13043 13049 13063 13093 13099 13103 13109\n[1561] 13121 13127 13147 13151 13159 13163 13171 13177 13183 13187 13217 13219\n[1573] 13229 13241 13249 13259 13267 13291 13297 13309 13313 13327 13331 13337\n[1585] 13339 13367 13381 13397 13399 13411 13417 13421 13441 13451 13457 13463\n[1597] 13469 13477 13487 13499 13513 13523 13537 13553 13567 13577 13591 13597\n[1609] 13613 13619 13627 13633 13649 13669 13679 13681 13687 13691 13693 13697\n[1621] 13709 13711 13721 13723 13729 13751 13757 13759 13763 13781 13789 13799\n[1633] 13807 13829 13831 13841 13859 13873 13877 13879 13883 13901 13903 13907\n[1645] 13913 13921 13931 13933 13963 13967 13997 13999 14009 14011 14029 14033\n[1657] 14051 14057 14071 14081 14083 14087 14107 14143 14149 14153 14159 14173\n[1669] 14177 14197 14207 14221 14243 14249 14251 14281 14293 14303 14321 14323\n[1681] 14327 14341 14347 14369 14387 14389 14401 14407 14411 14419 14423 14431\n[1693] 14437 14447 14449 14461 14479 14489 14503 14519 14533 14537 14543 14549\n[1705] 14551 14557 14561 14563 14591 14593 14621 14627 14629 14633 14639 14653\n[1717] 14657 14669 14683 14699 14713 14717 14723 14731 14737 14741 14747 14753\n[1729] 14759 14767 14771 14779 14783 14797 14813 14821 14827 14831 14843 14851\n[1741] 14867 14869 14879 14887 14891 14897 14923 14929 14939 14947 14951 14957\n[1753] 14969 14983 15013 15017 15031 15053 15061 15073 15077 15083 15091 15101\n[1765] 15107 15121 15131 15137 15139 15149 15161 15173 15187 15193 15199 15217\n[1777] 15227 15233 15241 15259 15263 15269 15271 15277 15287 15289 15299 15307\n[1789] 15313 15319 15329 15331 15349 15359 15361 15373 15377 15383 15391 15401\n[1801] 15413 15427 15439 15443 15451 15461 15467 15473 15493 15497 15511 15527\n[1813] 15541 15551 15559 15569 15581 15583 15601 15607 15619 15629 15641 15643\n[1825] 15647 15649 15661 15667 15671 15679 15683 15727 15731 15733 15737 15739\n[1837] 15749 15761 15767 15773 15787 15791 15797 15803 15809 15817 15823 15859\n[1849] 15877 15881 15887 15889 15901 15907 15913 15919 15923 15937 15959 15971\n[1861] 15973 15991 16001 16007 16033 16057 16061 16063 16067 16069 16073 16087\n[1873] 16091 16097 16103 16111 16127 16139 16141 16183 16187 16189 16193 16217\n[1885] 16223 16229 16231 16249 16253 16267 16273 16301 16319 16333 16339 16349\n[1897] 16361 16363 16369 16381 16411 16417 16421 16427 16433 16447 16451 16453\n[1909] 16477 16481 16487 16493 16519 16529 16547 16553 16561 16567 16573 16603\n[1921] 16607 16619 16631 16633 16649 16651 16657 16661 16673 16691 16693 16699\n[1933] 16703 16729 16741 16747 16759 16763 16787 16811 16823 16829 16831 16843\n[1945] 16871 16879 16883 16889 16901 16903 16921 16927 16931 16937 16943 16963\n[1957] 16979 16981 16987 16993 17011 17021 17027 17029 17033 17041 17047 17053\n[1969] 17077 17093 17099 17107 17117 17123 17137 17159 17167 17183 17189 17191\n[1981] 17203 17207 17209 17231 17239 17257 17291 17293 17299 17317 17321 17327\n[1993] 17333 17341 17351 17359 17377 17383 17387 17389\n\nrm(list=ls())\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n#############.\n# ANSWER\n#############.\n\nfirstNPrimes = function( numPrimes ){\n primes = numeric(0)\n numberToCheck = 2\n while ( length(primes) &lt; numPrimes  ){\n  \n  isPrime = TRUE\n  \n  # Check if numberToCheck is prime. If it isn't prime set the variable\n  # isPrime to FALSE.\n  \n  divisor = 2\n  while(divisor &lt; numberToCheck){\n   if ( numberToCheck %% divisor == 0){\n    isPrime = FALSE\n   }\n   \n   divisor = divisor + 1\n  }\n  \n  \n  \n  \n  if (isPrime == TRUE){\n   primes = c(primes, numberToCheck)\n  }\n  numberToCheck = numberToCheck + 1\n }\n primes\n}\n\nfirstNPrimes(100)\n\n  [1]   2   3   5   7  11  13  17  19  23  29  31  37  41  43  47  53  59  61\n [19]  67  71  73  79  83  89  97 101 103 107 109 113 127 131 137 139 149 151\n [37] 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251\n [55] 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359\n [73] 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463\n [91] 467 479 487 491 499 503 509 521 523 541\n\nfirstNPrimes(1000)\n\n   [1]    2    3    5    7   11   13   17   19   23   29   31   37   41   43\n  [15]   47   53   59   61   67   71   73   79   83   89   97  101  103  107\n  [29]  109  113  127  131  137  139  149  151  157  163  167  173  179  181\n  [43]  191  193  197  199  211  223  227  229  233  239  241  251  257  263\n  [57]  269  271  277  281  283  293  307  311  313  317  331  337  347  349\n  [71]  353  359  367  373  379  383  389  397  401  409  419  421  431  433\n  [85]  439  443  449  457  461  463  467  479  487  491  499  503  509  521\n  [99]  523  541  547  557  563  569  571  577  587  593  599  601  607  613\n [113]  617  619  631  641  643  647  653  659  661  673  677  683  691  701\n [127]  709  719  727  733  739  743  751  757  761  769  773  787  797  809\n [141]  811  821  823  827  829  839  853  857  859  863  877  881  883  887\n [155]  907  911  919  929  937  941  947  953  967  971  977  983  991  997\n [169] 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087 1091\n [183] 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193\n [197] 1201 1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291\n [211] 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423\n [225] 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493\n [239] 1499 1511 1523 1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601\n [253] 1607 1609 1613 1619 1621 1627 1637 1657 1663 1667 1669 1693 1697 1699\n [267] 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811\n [281] 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931\n [295] 1933 1949 1951 1973 1979 1987 1993 1997 1999 2003 2011 2017 2027 2029\n [309] 2039 2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129 2131 2137\n [323] 2141 2143 2153 2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267\n [337] 2269 2273 2281 2287 2293 2297 2309 2311 2333 2339 2341 2347 2351 2357\n [351] 2371 2377 2381 2383 2389 2393 2399 2411 2417 2423 2437 2441 2447 2459\n [365] 2467 2473 2477 2503 2521 2531 2539 2543 2549 2551 2557 2579 2591 2593\n [379] 2609 2617 2621 2633 2647 2657 2659 2663 2671 2677 2683 2687 2689 2693\n [393] 2699 2707 2711 2713 2719 2729 2731 2741 2749 2753 2767 2777 2789 2791\n [407] 2797 2801 2803 2819 2833 2837 2843 2851 2857 2861 2879 2887 2897 2903\n [421] 2909 2917 2927 2939 2953 2957 2963 2969 2971 2999 3001 3011 3019 3023\n [435] 3037 3041 3049 3061 3067 3079 3083 3089 3109 3119 3121 3137 3163 3167\n [449] 3169 3181 3187 3191 3203 3209 3217 3221 3229 3251 3253 3257 3259 3271\n [463] 3299 3301 3307 3313 3319 3323 3329 3331 3343 3347 3359 3361 3371 3373\n [477] 3389 3391 3407 3413 3433 3449 3457 3461 3463 3467 3469 3491 3499 3511\n [491] 3517 3527 3529 3533 3539 3541 3547 3557 3559 3571 3581 3583 3593 3607\n [505] 3613 3617 3623 3631 3637 3643 3659 3671 3673 3677 3691 3697 3701 3709\n [519] 3719 3727 3733 3739 3761 3767 3769 3779 3793 3797 3803 3821 3823 3833\n [533] 3847 3851 3853 3863 3877 3881 3889 3907 3911 3917 3919 3923 3929 3931\n [547] 3943 3947 3967 3989 4001 4003 4007 4013 4019 4021 4027 4049 4051 4057\n [561] 4073 4079 4091 4093 4099 4111 4127 4129 4133 4139 4153 4157 4159 4177\n [575] 4201 4211 4217 4219 4229 4231 4241 4243 4253 4259 4261 4271 4273 4283\n [589] 4289 4297 4327 4337 4339 4349 4357 4363 4373 4391 4397 4409 4421 4423\n [603] 4441 4447 4451 4457 4463 4481 4483 4493 4507 4513 4517 4519 4523 4547\n [617] 4549 4561 4567 4583 4591 4597 4603 4621 4637 4639 4643 4649 4651 4657\n [631] 4663 4673 4679 4691 4703 4721 4723 4729 4733 4751 4759 4783 4787 4789\n [645] 4793 4799 4801 4813 4817 4831 4861 4871 4877 4889 4903 4909 4919 4931\n [659] 4933 4937 4943 4951 4957 4967 4969 4973 4987 4993 4999 5003 5009 5011\n [673] 5021 5023 5039 5051 5059 5077 5081 5087 5099 5101 5107 5113 5119 5147\n [687] 5153 5167 5171 5179 5189 5197 5209 5227 5231 5233 5237 5261 5273 5279\n [701] 5281 5297 5303 5309 5323 5333 5347 5351 5381 5387 5393 5399 5407 5413\n [715] 5417 5419 5431 5437 5441 5443 5449 5471 5477 5479 5483 5501 5503 5507\n [729] 5519 5521 5527 5531 5557 5563 5569 5573 5581 5591 5623 5639 5641 5647\n [743] 5651 5653 5657 5659 5669 5683 5689 5693 5701 5711 5717 5737 5741 5743\n [757] 5749 5779 5783 5791 5801 5807 5813 5821 5827 5839 5843 5849 5851 5857\n [771] 5861 5867 5869 5879 5881 5897 5903 5923 5927 5939 5953 5981 5987 6007\n [785] 6011 6029 6037 6043 6047 6053 6067 6073 6079 6089 6091 6101 6113 6121\n [799] 6131 6133 6143 6151 6163 6173 6197 6199 6203 6211 6217 6221 6229 6247\n [813] 6257 6263 6269 6271 6277 6287 6299 6301 6311 6317 6323 6329 6337 6343\n [827] 6353 6359 6361 6367 6373 6379 6389 6397 6421 6427 6449 6451 6469 6473\n [841] 6481 6491 6521 6529 6547 6551 6553 6563 6569 6571 6577 6581 6599 6607\n [855] 6619 6637 6653 6659 6661 6673 6679 6689 6691 6701 6703 6709 6719 6733\n [869] 6737 6761 6763 6779 6781 6791 6793 6803 6823 6827 6829 6833 6841 6857\n [883] 6863 6869 6871 6883 6899 6907 6911 6917 6947 6949 6959 6961 6967 6971\n [897] 6977 6983 6991 6997 7001 7013 7019 7027 7039 7043 7057 7069 7079 7103\n [911] 7109 7121 7127 7129 7151 7159 7177 7187 7193 7207 7211 7213 7219 7229\n [925] 7237 7243 7247 7253 7283 7297 7307 7309 7321 7331 7333 7349 7351 7369\n [939] 7393 7411 7417 7433 7451 7457 7459 7477 7481 7487 7489 7499 7507 7517\n [953] 7523 7529 7537 7541 7547 7549 7559 7561 7573 7577 7583 7589 7591 7603\n [967] 7607 7621 7639 7643 7649 7669 7673 7681 7687 7691 7699 7703 7717 7723\n [981] 7727 7741 7753 7757 7759 7789 7793 7817 7823 7829 7841 7853 7867 7873\n [995] 7877 7879 7883 7901 7907 7919\n\nfirstNPrimes(2000)\n\n   [1]     2     3     5     7    11    13    17    19    23    29    31    37\n  [13]    41    43    47    53    59    61    67    71    73    79    83    89\n  [25]    97   101   103   107   109   113   127   131   137   139   149   151\n  [37]   157   163   167   173   179   181   191   193   197   199   211   223\n  [49]   227   229   233   239   241   251   257   263   269   271   277   281\n  [61]   283   293   307   311   313   317   331   337   347   349   353   359\n  [73]   367   373   379   383   389   397   401   409   419   421   431   433\n  [85]   439   443   449   457   461   463   467   479   487   491   499   503\n  [97]   509   521   523   541   547   557   563   569   571   577   587   593\n [109]   599   601   607   613   617   619   631   641   643   647   653   659\n [121]   661   673   677   683   691   701   709   719   727   733   739   743\n [133]   751   757   761   769   773   787   797   809   811   821   823   827\n [145]   829   839   853   857   859   863   877   881   883   887   907   911\n [157]   919   929   937   941   947   953   967   971   977   983   991   997\n [169]  1009  1013  1019  1021  1031  1033  1039  1049  1051  1061  1063  1069\n [181]  1087  1091  1093  1097  1103  1109  1117  1123  1129  1151  1153  1163\n [193]  1171  1181  1187  1193  1201  1213  1217  1223  1229  1231  1237  1249\n [205]  1259  1277  1279  1283  1289  1291  1297  1301  1303  1307  1319  1321\n [217]  1327  1361  1367  1373  1381  1399  1409  1423  1427  1429  1433  1439\n [229]  1447  1451  1453  1459  1471  1481  1483  1487  1489  1493  1499  1511\n [241]  1523  1531  1543  1549  1553  1559  1567  1571  1579  1583  1597  1601\n [253]  1607  1609  1613  1619  1621  1627  1637  1657  1663  1667  1669  1693\n [265]  1697  1699  1709  1721  1723  1733  1741  1747  1753  1759  1777  1783\n [277]  1787  1789  1801  1811  1823  1831  1847  1861  1867  1871  1873  1877\n [289]  1879  1889  1901  1907  1913  1931  1933  1949  1951  1973  1979  1987\n [301]  1993  1997  1999  2003  2011  2017  2027  2029  2039  2053  2063  2069\n [313]  2081  2083  2087  2089  2099  2111  2113  2129  2131  2137  2141  2143\n [325]  2153  2161  2179  2203  2207  2213  2221  2237  2239  2243  2251  2267\n [337]  2269  2273  2281  2287  2293  2297  2309  2311  2333  2339  2341  2347\n [349]  2351  2357  2371  2377  2381  2383  2389  2393  2399  2411  2417  2423\n [361]  2437  2441  2447  2459  2467  2473  2477  2503  2521  2531  2539  2543\n [373]  2549  2551  2557  2579  2591  2593  2609  2617  2621  2633  2647  2657\n [385]  2659  2663  2671  2677  2683  2687  2689  2693  2699  2707  2711  2713\n [397]  2719  2729  2731  2741  2749  2753  2767  2777  2789  2791  2797  2801\n [409]  2803  2819  2833  2837  2843  2851  2857  2861  2879  2887  2897  2903\n [421]  2909  2917  2927  2939  2953  2957  2963  2969  2971  2999  3001  3011\n [433]  3019  3023  3037  3041  3049  3061  3067  3079  3083  3089  3109  3119\n [445]  3121  3137  3163  3167  3169  3181  3187  3191  3203  3209  3217  3221\n [457]  3229  3251  3253  3257  3259  3271  3299  3301  3307  3313  3319  3323\n [469]  3329  3331  3343  3347  3359  3361  3371  3373  3389  3391  3407  3413\n [481]  3433  3449  3457  3461  3463  3467  3469  3491  3499  3511  3517  3527\n [493]  3529  3533  3539  3541  3547  3557  3559  3571  3581  3583  3593  3607\n [505]  3613  3617  3623  3631  3637  3643  3659  3671  3673  3677  3691  3697\n [517]  3701  3709  3719  3727  3733  3739  3761  3767  3769  3779  3793  3797\n [529]  3803  3821  3823  3833  3847  3851  3853  3863  3877  3881  3889  3907\n [541]  3911  3917  3919  3923  3929  3931  3943  3947  3967  3989  4001  4003\n [553]  4007  4013  4019  4021  4027  4049  4051  4057  4073  4079  4091  4093\n [565]  4099  4111  4127  4129  4133  4139  4153  4157  4159  4177  4201  4211\n [577]  4217  4219  4229  4231  4241  4243  4253  4259  4261  4271  4273  4283\n [589]  4289  4297  4327  4337  4339  4349  4357  4363  4373  4391  4397  4409\n [601]  4421  4423  4441  4447  4451  4457  4463  4481  4483  4493  4507  4513\n [613]  4517  4519  4523  4547  4549  4561  4567  4583  4591  4597  4603  4621\n [625]  4637  4639  4643  4649  4651  4657  4663  4673  4679  4691  4703  4721\n [637]  4723  4729  4733  4751  4759  4783  4787  4789  4793  4799  4801  4813\n [649]  4817  4831  4861  4871  4877  4889  4903  4909  4919  4931  4933  4937\n [661]  4943  4951  4957  4967  4969  4973  4987  4993  4999  5003  5009  5011\n [673]  5021  5023  5039  5051  5059  5077  5081  5087  5099  5101  5107  5113\n [685]  5119  5147  5153  5167  5171  5179  5189  5197  5209  5227  5231  5233\n [697]  5237  5261  5273  5279  5281  5297  5303  5309  5323  5333  5347  5351\n [709]  5381  5387  5393  5399  5407  5413  5417  5419  5431  5437  5441  5443\n [721]  5449  5471  5477  5479  5483  5501  5503  5507  5519  5521  5527  5531\n [733]  5557  5563  5569  5573  5581  5591  5623  5639  5641  5647  5651  5653\n [745]  5657  5659  5669  5683  5689  5693  5701  5711  5717  5737  5741  5743\n [757]  5749  5779  5783  5791  5801  5807  5813  5821  5827  5839  5843  5849\n [769]  5851  5857  5861  5867  5869  5879  5881  5897  5903  5923  5927  5939\n [781]  5953  5981  5987  6007  6011  6029  6037  6043  6047  6053  6067  6073\n [793]  6079  6089  6091  6101  6113  6121  6131  6133  6143  6151  6163  6173\n [805]  6197  6199  6203  6211  6217  6221  6229  6247  6257  6263  6269  6271\n [817]  6277  6287  6299  6301  6311  6317  6323  6329  6337  6343  6353  6359\n [829]  6361  6367  6373  6379  6389  6397  6421  6427  6449  6451  6469  6473\n [841]  6481  6491  6521  6529  6547  6551  6553  6563  6569  6571  6577  6581\n [853]  6599  6607  6619  6637  6653  6659  6661  6673  6679  6689  6691  6701\n [865]  6703  6709  6719  6733  6737  6761  6763  6779  6781  6791  6793  6803\n [877]  6823  6827  6829  6833  6841  6857  6863  6869  6871  6883  6899  6907\n [889]  6911  6917  6947  6949  6959  6961  6967  6971  6977  6983  6991  6997\n [901]  7001  7013  7019  7027  7039  7043  7057  7069  7079  7103  7109  7121\n [913]  7127  7129  7151  7159  7177  7187  7193  7207  7211  7213  7219  7229\n [925]  7237  7243  7247  7253  7283  7297  7307  7309  7321  7331  7333  7349\n [937]  7351  7369  7393  7411  7417  7433  7451  7457  7459  7477  7481  7487\n [949]  7489  7499  7507  7517  7523  7529  7537  7541  7547  7549  7559  7561\n [961]  7573  7577  7583  7589  7591  7603  7607  7621  7639  7643  7649  7669\n [973]  7673  7681  7687  7691  7699  7703  7717  7723  7727  7741  7753  7757\n [985]  7759  7789  7793  7817  7823  7829  7841  7853  7867  7873  7877  7879\n [997]  7883  7901  7907  7919  7927  7933  7937  7949  7951  7963  7993  8009\n[1009]  8011  8017  8039  8053  8059  8069  8081  8087  8089  8093  8101  8111\n[1021]  8117  8123  8147  8161  8167  8171  8179  8191  8209  8219  8221  8231\n[1033]  8233  8237  8243  8263  8269  8273  8287  8291  8293  8297  8311  8317\n[1045]  8329  8353  8363  8369  8377  8387  8389  8419  8423  8429  8431  8443\n[1057]  8447  8461  8467  8501  8513  8521  8527  8537  8539  8543  8563  8573\n[1069]  8581  8597  8599  8609  8623  8627  8629  8641  8647  8663  8669  8677\n[1081]  8681  8689  8693  8699  8707  8713  8719  8731  8737  8741  8747  8753\n[1093]  8761  8779  8783  8803  8807  8819  8821  8831  8837  8839  8849  8861\n[1105]  8863  8867  8887  8893  8923  8929  8933  8941  8951  8963  8969  8971\n[1117]  8999  9001  9007  9011  9013  9029  9041  9043  9049  9059  9067  9091\n[1129]  9103  9109  9127  9133  9137  9151  9157  9161  9173  9181  9187  9199\n[1141]  9203  9209  9221  9227  9239  9241  9257  9277  9281  9283  9293  9311\n[1153]  9319  9323  9337  9341  9343  9349  9371  9377  9391  9397  9403  9413\n[1165]  9419  9421  9431  9433  9437  9439  9461  9463  9467  9473  9479  9491\n[1177]  9497  9511  9521  9533  9539  9547  9551  9587  9601  9613  9619  9623\n[1189]  9629  9631  9643  9649  9661  9677  9679  9689  9697  9719  9721  9733\n[1201]  9739  9743  9749  9767  9769  9781  9787  9791  9803  9811  9817  9829\n[1213]  9833  9839  9851  9857  9859  9871  9883  9887  9901  9907  9923  9929\n[1225]  9931  9941  9949  9967  9973 10007 10009 10037 10039 10061 10067 10069\n[1237] 10079 10091 10093 10099 10103 10111 10133 10139 10141 10151 10159 10163\n[1249] 10169 10177 10181 10193 10211 10223 10243 10247 10253 10259 10267 10271\n[1261] 10273 10289 10301 10303 10313 10321 10331 10333 10337 10343 10357 10369\n[1273] 10391 10399 10427 10429 10433 10453 10457 10459 10463 10477 10487 10499\n[1285] 10501 10513 10529 10531 10559 10567 10589 10597 10601 10607 10613 10627\n[1297] 10631 10639 10651 10657 10663 10667 10687 10691 10709 10711 10723 10729\n[1309] 10733 10739 10753 10771 10781 10789 10799 10831 10837 10847 10853 10859\n[1321] 10861 10867 10883 10889 10891 10903 10909 10937 10939 10949 10957 10973\n[1333] 10979 10987 10993 11003 11027 11047 11057 11059 11069 11071 11083 11087\n[1345] 11093 11113 11117 11119 11131 11149 11159 11161 11171 11173 11177 11197\n[1357] 11213 11239 11243 11251 11257 11261 11273 11279 11287 11299 11311 11317\n[1369] 11321 11329 11351 11353 11369 11383 11393 11399 11411 11423 11437 11443\n[1381] 11447 11467 11471 11483 11489 11491 11497 11503 11519 11527 11549 11551\n[1393] 11579 11587 11593 11597 11617 11621 11633 11657 11677 11681 11689 11699\n[1405] 11701 11717 11719 11731 11743 11777 11779 11783 11789 11801 11807 11813\n[1417] 11821 11827 11831 11833 11839 11863 11867 11887 11897 11903 11909 11923\n[1429] 11927 11933 11939 11941 11953 11959 11969 11971 11981 11987 12007 12011\n[1441] 12037 12041 12043 12049 12071 12073 12097 12101 12107 12109 12113 12119\n[1453] 12143 12149 12157 12161 12163 12197 12203 12211 12227 12239 12241 12251\n[1465] 12253 12263 12269 12277 12281 12289 12301 12323 12329 12343 12347 12373\n[1477] 12377 12379 12391 12401 12409 12413 12421 12433 12437 12451 12457 12473\n[1489] 12479 12487 12491 12497 12503 12511 12517 12527 12539 12541 12547 12553\n[1501] 12569 12577 12583 12589 12601 12611 12613 12619 12637 12641 12647 12653\n[1513] 12659 12671 12689 12697 12703 12713 12721 12739 12743 12757 12763 12781\n[1525] 12791 12799 12809 12821 12823 12829 12841 12853 12889 12893 12899 12907\n[1537] 12911 12917 12919 12923 12941 12953 12959 12967 12973 12979 12983 13001\n[1549] 13003 13007 13009 13033 13037 13043 13049 13063 13093 13099 13103 13109\n[1561] 13121 13127 13147 13151 13159 13163 13171 13177 13183 13187 13217 13219\n[1573] 13229 13241 13249 13259 13267 13291 13297 13309 13313 13327 13331 13337\n[1585] 13339 13367 13381 13397 13399 13411 13417 13421 13441 13451 13457 13463\n[1597] 13469 13477 13487 13499 13513 13523 13537 13553 13567 13577 13591 13597\n[1609] 13613 13619 13627 13633 13649 13669 13679 13681 13687 13691 13693 13697\n[1621] 13709 13711 13721 13723 13729 13751 13757 13759 13763 13781 13789 13799\n[1633] 13807 13829 13831 13841 13859 13873 13877 13879 13883 13901 13903 13907\n[1645] 13913 13921 13931 13933 13963 13967 13997 13999 14009 14011 14029 14033\n[1657] 14051 14057 14071 14081 14083 14087 14107 14143 14149 14153 14159 14173\n[1669] 14177 14197 14207 14221 14243 14249 14251 14281 14293 14303 14321 14323\n[1681] 14327 14341 14347 14369 14387 14389 14401 14407 14411 14419 14423 14431\n[1693] 14437 14447 14449 14461 14479 14489 14503 14519 14533 14537 14543 14549\n[1705] 14551 14557 14561 14563 14591 14593 14621 14627 14629 14633 14639 14653\n[1717] 14657 14669 14683 14699 14713 14717 14723 14731 14737 14741 14747 14753\n[1729] 14759 14767 14771 14779 14783 14797 14813 14821 14827 14831 14843 14851\n[1741] 14867 14869 14879 14887 14891 14897 14923 14929 14939 14947 14951 14957\n[1753] 14969 14983 15013 15017 15031 15053 15061 15073 15077 15083 15091 15101\n[1765] 15107 15121 15131 15137 15139 15149 15161 15173 15187 15193 15199 15217\n[1777] 15227 15233 15241 15259 15263 15269 15271 15277 15287 15289 15299 15307\n[1789] 15313 15319 15329 15331 15349 15359 15361 15373 15377 15383 15391 15401\n[1801] 15413 15427 15439 15443 15451 15461 15467 15473 15493 15497 15511 15527\n[1813] 15541 15551 15559 15569 15581 15583 15601 15607 15619 15629 15641 15643\n[1825] 15647 15649 15661 15667 15671 15679 15683 15727 15731 15733 15737 15739\n[1837] 15749 15761 15767 15773 15787 15791 15797 15803 15809 15817 15823 15859\n[1849] 15877 15881 15887 15889 15901 15907 15913 15919 15923 15937 15959 15971\n[1861] 15973 15991 16001 16007 16033 16057 16061 16063 16067 16069 16073 16087\n[1873] 16091 16097 16103 16111 16127 16139 16141 16183 16187 16189 16193 16217\n[1885] 16223 16229 16231 16249 16253 16267 16273 16301 16319 16333 16339 16349\n[1897] 16361 16363 16369 16381 16411 16417 16421 16427 16433 16447 16451 16453\n[1909] 16477 16481 16487 16493 16519 16529 16547 16553 16561 16567 16573 16603\n[1921] 16607 16619 16631 16633 16649 16651 16657 16661 16673 16691 16693 16699\n[1933] 16703 16729 16741 16747 16759 16763 16787 16811 16823 16829 16831 16843\n[1945] 16871 16879 16883 16889 16901 16903 16921 16927 16931 16937 16943 16963\n[1957] 16979 16981 16987 16993 17011 17021 17027 17029 17033 17041 17047 17053\n[1969] 17077 17093 17099 17107 17117 17123 17137 17159 17167 17183 17189 17191\n[1981] 17203 17207 17209 17231 17239 17257 17291 17293 17299 17317 17321 17327\n[1993] 17333 17341 17351 17359 17377 17383 17387 17389\n\n\n\n\n\n\n\n\n\n\n\n\n\nQUESTION: Rewrite your own version of the t function\n\n\n\n\n#---------------------------------------------------------------------------\n# The t function takes a matrix and returns a copy of the matrix with the\n# rows and columns swapped, i.e. mat[i,j] becomes returnValue[j,i].\n# See the example below.\n#---------------------------------------------------------------------------\nmat = matrix(seq(10,180,10), nrow=3, ncol=6)\nmat     # 3 rows, 4 columns\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]   10   40   70  100  130  160\n[2,]   20   50   80  110  140  170\n[3,]   30   60   90  120  150  180\n\nt(mat)  # 4 rows, 3 columns (the rows became cols and the cols became rows)\n\n     [,1] [,2] [,3]\n[1,]   10   20   30\n[2,]   40   50   60\n[3,]   70   80   90\n[4,]  100  110  120\n[5,]  130  140  150\n[6,]  160  170  180\n\n#---------------------------------------------------------------------------\n# QUESTION\n#\n# Write the function myt that does the same thing as the t function.\n# Do NOT call the t function in your code.\n# HINT - use a nested loop\n#---------------------------------------------------------------------------\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n#############.\n# ANSWER\n#############.\nmyt = function( m ){\n \n # make the answer the right number of rows and columns\n answer = matrix( 0 ,  nrow=ncol(m) , ncol=nrow(m) )\n \n row = 1\n while(row &lt;= nrow(m)) {\n  \n  col = 1\n  while(col &lt;= ncol(m)) {\n   \n   # assign the value at row,col in m to the correct place in the answer\n   answer[col,row] = m[row,col]\n   col = col + 1\n  }\n  \n  row = row + 1\n }\n \n answer\n}\n\nmat\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]   10   40   70  100  130  160\n[2,]   20   50   80  110  140  170\n[3,]   30   60   90  120  150  180\n\n#debugonce(myt)\nmyt(mat)\n\n     [,1] [,2] [,3]\n[1,]   10   20   30\n[2,]   40   50   60\n[3,]   70   80   90\n[4,]  100  110  120\n[5,]  130  140  150\n[6,]  160  170  180\n\n#############.\n# ANSWER\n#############.\n\nmyt=function( m ){\n returnValue = matrix(1 ,nrow=ncol(m) ,ncol=nrow(m))\n \n row = 1\n while(row &lt;= nrow(m)) {\n  \n  col = 1\n  while(col &lt;= ncol(m)) {\n   \n   returnValue[ col , row ]   =   m[ row ,  col ]     \n   col = col + 1\n  }\n  \n  row = row + 1\n }\n returnValue\n}\n\nmat = matrix(seq(10,120,10), nrow=3, ncol=4)\nmat\n\n     [,1] [,2] [,3] [,4]\n[1,]   10   40   70  100\n[2,]   20   50   80  110\n[3,]   30   60   90  120\n\nmyt(mat)\n\n     [,1] [,2] [,3]\n[1,]   10   20   30\n[2,]   40   50   60\n[3,]   70   80   90\n[4,]  100  110  120\n\n\n\n\n\n\n\n\n#---------------------------------------------------------------------------\n# QUESTION\n#\n# Rewrite the function myt to use a single loop (not a nested loop).\n#\n# HINTS\n#\n# - Use a single loop. \n#\n#   The loop should keep updating a variable, eg. inRow, that contains\n#   the number of a row from the input matrix. For example \n#\n#     If the input matrix has 3 rows then the loop should go around 3 times. \n#     The 1st time through the loop, the variable inRowNumber, should contain 1,\n#     The 2nd time through the loop, the variable inRowNumber, should contain 2,\n#     The 3rd time through the loop, the variable inRowNumber, should contain 3\n#\n# - Inside the loop use matrix notation to assign the values from\n#   a row in the input matrix to the corresponding column\n#   in the output matrix\n#\n#---------------------------------------------------------------------------\n\n#############.\n# ANSWER\n#############.\n\nmyt=function( m ){\n returnValue = matrix(1 ,nrow=ncol(m) ,ncol=nrow(m))\n \n inRow = 1\n while(inRow &lt;= nrow(m)) {\n  \n  returnValue[ , inRow] = m[inRow , ]\n  inRow = inRow + 1\n  \n }\n returnValue\n}\n\nmat = matrix(seq(10,180,10), nrow=3, ncol=6)\nmat\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]   10   40   70  100  130  160\n[2,]   20   50   80  110  140  170\n[3,]   30   60   90  120  150  180\n\nmyt(mat)\n\n     [,1] [,2] [,3]\n[1,]   10   20   30\n[2,]   40   50   60\n[3,]   70   80   90\n[4,]  100  110  120\n[5,]  130  140  150\n[6,]  160  170  180",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001000-whileLoops-v027-afterWilfClass25.html#more-practice---drawing-shapes-with-numbers",
    "href": "001000-whileLoops-v027-afterWilfClass25.html#more-practice---drawing-shapes-with-numbers",
    "title": "33  while loops.",
    "section": "33.21 More practice - drawing shapes with numbers",
    "text": "33.21 More practice - drawing shapes with numbers\n\n#####################################################################.\n# SOME \"TOY\" FUNCTIONS\n#\n# Below are a few \"toy\" examples of using nested loops. Exercises\n# like these help you to become more familiar with the concepts \n# of nested loops. This is similar to playing \"scales\" when learning \n# to play the piano - no one will play scales in real life - but\n# it is important to get the hang of things when you're first\n# starting out.\n#####################################################################.\n\n\n#---------------------------------------------------------------------\n# The following are some simple functions that do NOT use nested loops.\n# These are provided for comparison with the equivalent versions that use\n# nested loops which we will show you below.\n#---------------------------------------------------------------------\n\nrm(list=ls())   # start over\n\n# draw a line of x's of the specified width\n# Do not use the rep function. Use the cat function and a loop.\ndrawLine_WithXs = function( width ) {\n  \n  while(width &gt; 0){\n    cat(\"x\")\n    width = width - 1\n  }\n}\n\ndrawLine_WithXs(4)  # xxxx\n\nxxxx\n\ndrawLine_WithXs(5)  # xxxxx\n\nxxxxx\n\n# draw a box of x's\ndrawBox_WithXs = function(h, w){\n  while(h &gt; 0){\n    drawLine_WithXs(w)\n    cat(\"\\n\")\n    h = h - 1\n  }\n}\n\ndrawBox_WithXs(3,4)  # box of 3 rows and 4 columns of x's\n\nxxxx\nxxxx\nxxxx\n\n# Draw a horizontal line with calls to cat that displays the numbers as shown below\ndrawLine_WithNums = function(width){\n  num1 = 1\n  while(num1 &lt;= width){\n    cat(num1)\n    num1 = num1 + 1\n  }  \n}\n\ndrawLine_WithNums(4)  # 1234\n\n1234\n\ndrawLine_WithNums(5)  # 12345\n\n12345\n\n#-----------------------------------------------------------------------\n# drawBox using nested loops\n#-----------------------------------------------------------------------\n\n# QUESTION:\n# Write a function \n#   drawBox1 = function(height, width)\n#\n# height and width are expected to be whole numbers between 1 and 9.\n# The function should draw a box that has dimensions height rows and width columns.\n# The box should be drawn with numbers such that each number represent the \n# number of the column it is in. For example:\n#\n#       &gt; drawBox1(3, 5)\n#       12345\n#       12345\n#       12345\n\ndrawBox1 = function(height, width){\n\n  rowNumber = 1\n  while(rowNumber &lt;= height){\n    \n      colNumber = 1\n      while(colNumber &lt;= width){\n        cat(colNumber)\n        colNumber = colNumber + 1\n      }  \n      \n      cat(\"\\n\")\n\n      rowNumber = rowNumber + 1      \n  }\n  \n}\n\n#debugonce(drawBox1)\ndrawBox1(3, 4)\n\n1234\n1234\n1234\n\n# 1234\n# 1234\n# 1234\n\ndrawBox1(4,9)\n\n123456789\n123456789\n123456789\n123456789\n\n#-----------------------------------------------------------------------------\n\n\n# QUESTION:\n# Write a function \n#   drawBox2 = function(height, width)\n#\n# height and width are expected to be whole numbers between 1 and 9.\n# The function should draw a box that has dimensions height rows and width columns.\n# The box should be drawn with numbers such that each number represent the \n# number of the row it is in. For example:\n#\n#       &gt; drawBox1(3, 5)\n#       11111\n#       22222\n#       33333\n\ndrawBox2 = function(height, width){\n  \n  rowNumber = 1\n  while(rowNumber &lt;= height){\n    \n    colNumber = 1\n    while(colNumber &lt;= width){\n      cat(rowNumber)\n      colNumber = colNumber + 1\n    }  \n    \n    cat(\"\\n\")\n    \n    rowNumber = rowNumber + 1      \n  }\n  \n}\n\ndrawBox2(3,4)\n\n1111\n2222\n3333\n\n# 1111\n# 2222\n# 3333\n\n#-----------------------------------------------------------------------------\n# Write the function drawBox3 to produce the results according to the pattern\n# demonstrated in the following example:\n#\n# EXAMPLE: \n#   &gt; drawBox3(3,4)\n#   3333\n#   2222\n#   1111\n#-----------------------------------------------------------------------------\n\n\ndrawBox3 = function(height, width){\n  \n  rowNumber = height\n  while(rowNumber &gt; 0){\n    \n    colNumber = 1\n    while(colNumber &lt;= width){\n      cat(rowNumber)\n      colNumber = colNumber + 1\n    }  \n    \n    cat(\"\\n\")\n    \n    rowNumber = rowNumber - 1      \n  }\n  \n}\n\ndrawBox3(3,4)\n\n3333\n2222\n1111\n\n# 3333\n# 2222\n# 1111\n\n\n\n#-----------------------------------------------------------------------------\n# Write the function drawBox4 to produce the results according to the pattern\n# demonstrated in the following example:\n#\n# EXAMPLE: \n#   &gt; drawBox3(3,4)\n#   1234\n#   1234\n#   1234\n#-----------------------------------------------------------------------------\n\ndrawBox4 = function(height, width){\n  rowNumber = 1\n  while (rowNumber &lt;= height){\n    \n    colNumber = 1\n    while(colNumber &lt;= width) {\n      cat( colNumber )\n      colNumber = colNumber + 1\n    }\n\n    cat(\"\\n\")    \n    rowNumber = rowNumber+1\n\n  }\n}\n\ndrawBox4(3,4)\n\n1234\n1234\n1234\n\n# 1234\n# 1234\n# 1234\n\n\n\n\n\n#-----------------------------------------------------------------------------\n# Write the function drawBox4 to produce the results according to the pattern\n# demonstrated in the following example:\n#\n# EXAMPLE: \n#   &gt; drawBox5(3,4)\n#   4321\n#   4321\n#   4321\n#-----------------------------------------------------------------------------\n\n#############.\n# ANSWER\n#############.\ndrawBox5 = function(height, width){\n \n  row = 1\n  while(row &lt;= height){\n    \n    col = width\n    while( col &gt;= 1){\n      cat(col)\n      \n      col = col - 1      \n    }\n    \n    cat(\"\\n\")\n    row = row + 1 \n  }\n}\n\n\ndrawBox5(3,4)\n\n4321\n4321\n4321\n\n# 4321\n# 4321\n# 4321\n\n\n#-----------------------------------------------------------------------------\n# Write the function drawTriangle1 to produce the results according to the pattern\n# demonstrated in the following example:\n#\n# EXAMPLE: \n#    &gt; drawTriangle1(3)\n#    1\n#    12\n#    123\n#\n#    &gt; drawTriangle(5)\n#    1\n#    12\n#    123\n#    1234\n#    12345\n#-----------------------------------------------------------------------------\n\n#############.\n# ANSWER\n#############.\ndrawTriangle1 = function(size){\n\n  row = 1\n  while(row &lt;= size){\n    \n    col = 1\n    while(col &lt;= row){\n      cat(col)\n      col = col + 1      \n    }\n    cat(\"\\n\")\n    row = row + 1    \n  }\n  \n}\n\ndrawTriangle1(3)\n\n1\n12\n123\n\ndrawTriangle1(9)\n\n1\n12\n123\n1234\n12345\n123456\n1234567\n12345678\n123456789\n\n# 1\n# 12\n# 123\n\n#-----------------------------------------------------------------------------\n# Write the function drawTriangle1 to produce the results according to the pattern\n# demonstrated in the following example:\n#\n# EXAMPLE: \n#    &gt; drawTriangle2(3)\n#    111\n#    22\n#    3\n#-----------------------------------------------------------------------------\n\n#############.\n# ANSWER\n#############.\ndrawTriangle2 = function(size){\n\n  outer = 1\n  while( outer &lt;= size ){\n    \n    inner = 1\n    while( inner &lt;= size - outer + 1){\n      \n      cat ( outer )\n      \n      inner = inner + 1\n    }\n    \n    cat(\"\\n\")\n    outer = outer + 1\n  }\n  \n  \n}\n\ndrawTriangle2(3)\n\n111\n22\n3\n\n# 111\n# 22\n# 3\n\ndrawTriangle2(5)\n\n11111\n2222\n333\n44\n5",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>while loops.</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html",
    "title": "34  for loops",
    "section": "",
    "text": "34.1 Example - countdown\n# This file goes through several examples of using a for loop and a while loop.\n# Be sure to see the notes at the bottom of this file for some important\n# concepts and a discussion of when a for loop is an option and when\n# you must use a while loop.\n\n#--------------------------------------------------------------------------.\n# Example of a for loop\n#\n# Everything you need to know about a for loop is in the first line of the \n# loop (i.e. the line that starts with the word \"for\").\n# In the following example, the first line says:    for(num in 10:1).\n#\n# In this example, num is a variable and 10:1 is a vector,\n# i.e. c(10,9,8,7,6,5,4,3,2,1). The for loop automatically assigns a value\n# from the vector to the variable. Then it does the body. Then it assigns\n# the next value from the vector to the variable and does the body again.\n# It keeps doing this until all of the values have been processed by the\n# body of the loop. Specifically, in this example: \n# \n#   The 1st value from the vector (i.e. 10) is assigned to the variable, num\n#   Then the body of the loop is executed. \n# \n#   The 2nd value from the vector (i.e. 9) is assigned to the variable, num\n#   Then the body of the loop is executed. \n# \n#   The 3rd value from the vector (i.e. 8) is assigned to the variable, num\n#   Then the body of the loop is executed. \n#\n#   etc ...\n#\n#   The 10th value from the vector (i.e. 1) is assigned to the variable, num\n#   Then the body of the loop is executed. \n#\n#   At this point, the loop is finished and the function continues with the\n#   code after the body of the loop.\n#--------------------------------------------------------------------------.\n\ncountdown &lt;- function (){\n  for (num in 10:1){  # each time through the loop another value from 10:1 is assigned to num\n    cat(num,\" \")      # display num followed by a space\n    Sys.sleep(1.5)   # sleep for 1.5 seconds\n  }\n  \n  cat(\"blastoff!\")    # after the loop has finished, display \"blastoff!\"\n}\n\ncountdown()\n\n10  9  8  7  6  5  4  3  2  1  blastoff!",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#you-can-rewrite-any-for-loop-as-a-while-loop",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#you-can-rewrite-any-for-loop-as-a-while-loop",
    "title": "34  for loops",
    "section": "34.2 You can rewrite any for loop as a while loop",
    "text": "34.2 You can rewrite any for loop as a while loop\n\n#----------------------------------------------------------------------\n# A for loop can ALWAYS be rewritten as a while loop.\n#\n# The following code rewrites the above example to use a while loop.\n#\n# The while loop version is usually a little harder to understand \n# than the for loop version. To understand how many times a for loop will\n# iterate (i.e. go around) you just have to look at the first line \n# of the for loop.\n# \n# To understand how the while loop works, you also have to look at the first \n# of the loop. However, you also have to track how the variables used\n# in the condition of the while loop are changed by the code in the body of \n# the while loop.\n#----------------------------------------------------------------------\n\ncountdownWithWhile &lt;- function (){\n  num = 10          # setup the variables to be used in the condition of the while\n  \n  while(num &gt;= 1){  # condition that's TRUE when loop should run and FALSE when loop should end\n    cat(num, \" \")\n    Sys.sleep(0.25)\n\n    num &lt;- num - 1  # change some variable that is part of the condition\n  }                 # END OF WHILE - code below will only happen after while finishes\n  \n  cat(\"blastoff!\")  \n}\n\ncountdownWithWhile()\n\n10  9  8  7  6  5  4  3  2  1  blastoff!",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#a-for-loop-can-use-any-vector-or-list",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#a-for-loop-can-use-any-vector-or-list",
    "title": "34  for loops",
    "section": "34.3 A “for loop” can use ANY vector or list",
    "text": "34.3 A “for loop” can use ANY vector or list\n\n#----------------------------------------------------------------------\n# A \"for loop\" can use ANY vector or list\n#\n# Other examples of vectors\n# - character and logical vectors\n# - numeric vectors that don't count by ones\n#----------------------------------------------------------------------\n\n#-----------------------------------------------.\n# Count by two's - with a for loop\n#-----------------------------------------------.\ncountByTwos_for = function(){\n  vec = seq(2,10, by=2)\n  for ( num in vec){\n    cat(\"I like number\", num, \"\\n\")\n  }\n}\n\ncountByTwos_for()\n\nI like number 2 \nI like number 4 \nI like number 6 \nI like number 8 \nI like number 10 \n\n#-----------------------------------------------.\n# rewriting the same example with a while loop\n#-----------------------------------------------.\ncountByTwos_while = function(){\n  num = 2\n  while ( num &lt;= 10){\n    cat(\"I like number\", num, \"\\n\")\n    num = num + 2\n  }\n}\n\ncountByTwos_while()\n\nI like number 2 \nI like number 4 \nI like number 6 \nI like number 8 \nI like number 10",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#how-to-convert-any-for-loop-into-a-while-loop",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#how-to-convert-any-for-loop-into-a-while-loop",
    "title": "34  for loops",
    "section": "34.4 How to convert any for loop into a while loop",
    "text": "34.4 How to convert any for loop into a while loop\n\n#-----------------------------------------------------------------------.\n# Any code with a \"for loop\" can be converted to equivalent code\n# with a while loop by following these steps:\n#\n#    step 1: before the while loop copy the vector (or list) \n#            from the for loop in to a new variable, eg. vecOrList\n#\n#    step 2: create a variable for the position in the vector (or list)\n#            to be processed at each iteration through the body of the loop\n#\n#    step 3: write the while loop with the condition\n#            while ( position &lt;= length(vecOrList) )\n#\n#    step 4: Write a line at the end of the body of code for the while loop\n#            that increments (i.e. adds 1 to) the position variable\n#            \n# We demonstrate this by following these steps to rewrite\n# the code from the countByTwos_for function to an equivalent\n# function with a while loop.\n#-----------------------------------------------------------------------.\n\n# Rewrite the for countByTwos function to use a while loop in a way that\n# we can apply the same approach to convert ANY for loop into an\n# equivalent while loop. Note that this version is not the same as\n# the previous version that used a while loop. Both versions work, but the \n# previous version is probably easier to understand. The approach\n# taken with this version can be applied to any for loop.\n\ncountByTwos_while_version2 = function(){\n \n # step 1: copy the vector from the for loop in to a variable\n vec = seq(2,10, by=2)   \n \n # step 2: create a variable for the position in the vector (or list)\n #         to be processed at each iteration through the body of the loop\n position = 1\n \n while ( position &lt;= length(vec)){  # step 3: write the condition for the while\n  \n  cat(\"I like number\", vec[position], \"\\n\")\n  \n  # step 4: at the end of the body of the loop add one to the position\n  #         variable\n  position = position + 1\n }\n}\n\ncountByTwos_while_version2()\n\nI like number 2 \nI like number 4 \nI like number 6 \nI like number 8 \nI like number 10",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#practice",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#practice",
    "title": "34  for loops",
    "section": "34.5 — Practice —",
    "text": "34.5 — Practice —\n\n##################################################################.\n# QUESTION\n##################################################################.\n# \n# Write a function that takes a matrix, m, as an argument. \n# The function should return a new matrix that\n# \n#    multiplies the 1st row by 10\n#    multiplies the 2nd row by 100\n#    multiplies the 3rd row by 1000\n#    etc ... for all rows of the matrix\n#\n# (a) - Write the function using a for loop\n# (b) - Write the function using a while loop\n#\n##################################################################.\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# ANSWER - for loop\n\nmultRows_for = function ( m ) {\n \n multiplier = 10\n for(row in    1:nrow(m) ){\n  \n  m[row,] = m[row,] * multiplier\n  \n  multiplier = multiplier * 10\n }\n \n return(m)\n}\n\nmultRows_for(m)\n\nError in eval(expr, envir, enclos): object 'm' not found\n\n# Test the answer:\n#\n# Here is some data to start you off. The code should work \n# will all possible matrices. Here are some to start you off in \n# testing your work. \nm = matrix(seq(1, 18, 1) , nrow=3, ncol=6)\nm\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    4    7   10   13   16\n[2,]    2    5    8   11   14   17\n[3,]    3    6    9   12   15   18\n\nmultRows_for(m)\n\n     [,1] [,2] [,3]  [,4]  [,5]  [,6]\n[1,]   10   40   70   100   130   160\n[2,]  200  500  800  1100  1400  1700\n[3,] 3000 6000 9000 12000 15000 18000\n\n# Another example\nset.seed(100)  # you can pick any seed \nm = matrix(trunc(runif(min=1, max=5, 15)), nrow=5, ncol=3)\nm\n\n     [,1] [,2] [,3]\n[1,]    2    2    3\n[2,]    2    4    4\n[3,]    3    2    2\n[4,]    1    3    2\n[5,]    2    1    4\n\nmultRows_for(m)\n\n      [,1]  [,2]  [,3]\n[1,] 2e+01 2e+01 3e+01\n[2,] 2e+02 4e+02 4e+02\n[3,] 3e+03 2e+03 2e+03\n[4,] 1e+04 3e+04 2e+04\n[5,] 2e+05 1e+05 4e+05\n\n\n\n\n\n\n##################################################################.\n# QUESTION\n##################################################################.\n# \n# Write a function that takes a matrix, m, as an argument. \n# The function should return a new matrix that\n# \n#    adds 2 (i.e. 1+1) the value in position 1,1 \n#    adds 3 (i.e. 1+2) the value in position 1,2 \n#    adds 4 (i.e. 1+3) the value in position 1,3 \n#    ... and similarly for the rest of the values in row 1\n#\n#    adds 3 (i.e. 2+1) the value in position 2,1 \n#    adds 4 (i.e. 2+2) the value in position 2,2 \n#    adds 5  (i.e.2+3) the value in position 2,3 \n#    ... and similarly for the rest of the values in row 2\n#\n#    etc ... for all rows in the matrix\n#\n# Use nested loops for your answer\n#\n# (a) - Write the function using nested for loops\n# (b) - Write the function using nested while loops\n# (c) - Write the function using nested loops, one should be a for loop\n#       and one a while loop (your choice which is which)\n#\n##################################################################.\n\n\n\n\n\n\n\nclick here for answer - using for loop\n\n\n\n\n\n\n# Answer - for\n\nchangeRows_for = function( m ){\n \n for( row in 1:nrow(m)){\n  \n   for (col in 1:ncol(m)){\n     m[row, col] = m[row,col] + row + col\n   }\n }\n return(m)\n}\n\n# Test the function\nm = matrix( 0 , nrow=3, ncol=6)\nm      \n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    0    0    0    0    0    0\n[2,]    0    0    0    0    0    0\n[3,]    0    0    0    0    0    0\n\nchangeRows_for(m)\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    2    3    4    5    6    7\n[2,]    3    4    5    6    7    8\n[3,]    4    5    6    7    8    9\n\n# Another test\nset.seed(100)  # you can pick any seed \nm = matrix(trunc(runif(min=1, max=5, 15)), nrow=5, ncol=3)\nm\n\n     [,1] [,2] [,3]\n[1,]    2    2    3\n[2,]    2    4    4\n[3,]    3    2    2\n[4,]    1    3    2\n[5,]    2    1    4\n\nchangeRows_for(m)\n\n     [,1] [,2] [,3]\n[1,]    4    5    7\n[2,]    5    8    9\n[3,]    7    7    8\n[4,]    6    9    9\n[5,]    8    8   12\n\n# Another test\nm = matrix(seq(10, 180, 10) , nrow=3, ncol=6)\nm\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]   10   40   70  100  130  160\n[2,]   20   50   80  110  140  170\n[3,]   30   60   90  120  150  180\n\nchangeRows_for(m)\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]   12   43   74  105  136  167\n[2,]   23   54   85  116  147  178\n[3,]   34   65   96  127  158  189\n\n\n\n\n\n::: {.callout-note icon=false collapse=“true”} #### click here for answer - using while loop\n\n# Answer - while\n\nchangeRows_while = function( m ){\n \n row = 1\n while( row &lt;= nrow(m) ){\n \n   col = 1  \n   while(col &lt;= ncol(m)){\n     m[row, col] = m[row,col] + row + col\n     col = col+1 \n   }\n  \n   row = row + 1\n }\n \n return (m)\n}\n\nm = matrix( 0 , nrow=3, ncol=6)\nm      \n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    0    0    0    0    0    0\n[2,]    0    0    0    0    0    0\n[3,]    0    0    0    0    0    0\n\nchangeRows_while(m)\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    2    3    4    5    6    7\n[2,]    3    4    5    6    7    8\n[3,]    4    5    6    7    8    9",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#another-example-display-character-values-in-a-vector",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#another-example-display-character-values-in-a-vector",
    "title": "34  for loops",
    "section": "34.6 ANOTHER EXAMPLE: display character values in a vector",
    "text": "34.6 ANOTHER EXAMPLE: display character values in a vector\n\n#----------------------------------------------------\n# ANOTHER EXAMPLE: display character values in a vector\n#----------------------------------------------------\n\n#.................\n# With a for loop\n#.................\nanotherExample_for = function( foods ){\n\n  cat(\"Hello. \\n\")\n  \n  for (item in foods) {\n    cat(item, \"is yummy.\\n\")\n    cat(\"Everyone likes\", item, \".\\n\")\n    cat(\"I hope we have\", item, \"for supper!\\n\\n\")\n  }\n  \n  cat(\"bye bye.\\n\")\n}\n\nanotherExample_for (c(\"pizza\", \"french fries\", \"burger\", \"chicken\", \"ice cream\"))\n\nHello. \npizza is yummy.\nEveryone likes pizza .\nI hope we have pizza for supper!\n\nfrench fries is yummy.\nEveryone likes french fries .\nI hope we have french fries for supper!\n\nburger is yummy.\nEveryone likes burger .\nI hope we have burger for supper!\n\nchicken is yummy.\nEveryone likes chicken .\nI hope we have chicken for supper!\n\nice cream is yummy.\nEveryone likes ice cream .\nI hope we have ice cream for supper!\n\nbye bye.\n\nanotherExample_for (c(\"cake\", \"lasanga\", \"chullent\"))\n\nHello. \ncake is yummy.\nEveryone likes cake .\nI hope we have cake for supper!\n\nlasanga is yummy.\nEveryone likes lasanga .\nI hope we have lasanga for supper!\n\nchullent is yummy.\nEveryone likes chullent .\nI hope we have chullent for supper!\n\nbye bye.\n\nanotherExample_for (character(0))\n\nHello. \nbye bye.\n\nanotherExample_for( list(\"apple\", \"orange\"))   # for loops also work with lists\n\nHello. \napple is yummy.\nEveryone likes apple .\nI hope we have apple for supper!\n\norange is yummy.\nEveryone likes orange .\nI hope we have orange for supper!\n\nbye bye.\n\n#...................\n# With a while loop\n#...................\n\n# You can convert any for loop to a while loop.\n# Use the while loop to process each position in the vector (or the list).\n# This is what the for loop actually does for you, but we can do it ourselves.\n#\n# The following shows a general way to convert ANY for loop into a while loop.\n# We highlighted the lines of code in this version that are different from \n# the previous version. All other lines of code are EXACTLY the same.\n\nanotherExample_while = function( foods ){\n  \n  cat(\"Hello. \\n\")\n  \n  position = 1                    # new line\n  while(position&lt;=length(foods)){ # new line\n    \n    item = foods[[position]]  # new line; [[ ]] works with both lists and vectors\n    \n    cat(item, \"is yummy.\\n\")\n    cat(\"Everyone likes\", item, \".\\n\")\n    cat(\"I hope we have\", item, \"for supper!\\n\\n\")\n    \n    position = position + 1       # new line\n  }\n  cat(\"bye bye.\\n\")\n}\n\n# This produces the exact same results as the for loop\nanotherExample_while (c(\"pizza\", \"french fries\", \"burger\", \"chicken\", \"ice cream\"))\n\nHello. \npizza is yummy.\nEveryone likes pizza .\nI hope we have pizza for supper!\n\nfrench fries is yummy.\nEveryone likes french fries .\nI hope we have french fries for supper!\n\nburger is yummy.\nEveryone likes burger .\nI hope we have burger for supper!\n\nchicken is yummy.\nEveryone likes chicken .\nI hope we have chicken for supper!\n\nice cream is yummy.\nEveryone likes ice cream .\nI hope we have ice cream for supper!\n\nbye bye.\n\nanotherExample_while (c(\"cake\", \"lasanga\", \"chullent\"))\n\nHello. \ncake is yummy.\nEveryone likes cake .\nI hope we have cake for supper!\n\nlasanga is yummy.\nEveryone likes lasanga .\nI hope we have lasanga for supper!\n\nchullent is yummy.\nEveryone likes chullent .\nI hope we have chullent for supper!\n\nbye bye.\n\nanotherExample_while (character(0))\n\nHello. \nbye bye.\n\nanotherExample_while( list(\"apple\", \"orange\")) # careful \n\nHello. \napple is yummy.\nEveryone likes apple .\nI hope we have apple for supper!\n\norange is yummy.\nEveryone likes orange .\nI hope we have orange for supper!\n\nbye bye.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#you-cannot-use-a-for-loop-for-some-problems",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#you-cannot-use-a-for-loop-for-some-problems",
    "title": "34  for loops",
    "section": "34.7 You CANNOT use a for loop for some problems",
    "text": "34.7 You CANNOT use a for loop for some problems\n\nguessingGame - can’t use for loop\n\n#-----------------------------------------------------------------\n# SOMETIMES you MUST use a while loop.\n#-----------------------------------------------------------------\n# Some problems that cannot be coded with a for loop\n# but rather require that you use a WHILE loop.\n#\n# To use a for loop, you must be able to construct a vector that \n# contains all possible values that you will loop through.\n#\n# However, sometimes, you don't know what those values are or how\n# many times you will need to process the loop.\n#-----------------------------------------------------------------\n\n# EXAMPLE - guessing game cannot be done with a for loop.\n# The loop can go on forever if the user keeps getting the wrong answer.\n\n# The following function is coded with a WHILE loop.\n# (you cannot write this function with a for loop)\n\nguessingGame &lt;- function(low=1, high=10){\n  num &lt;- sample(low:high, 1)\n  numGuesses &lt;- 1\n  guess &lt;- as.numeric( readline( paste0(\n             \"guess a number between \", low, \" and \", high, \": \" )))\n  while(guess != num) {\n    if (guess &lt; num){\n      guess &lt;- as.numeric( readline(\"higher, guess again: \") )\n    } else if (guess &gt; num) {\n      guess &lt;- as.numeric( readline(\"lower, guess again: \") )\n    }\n    numGuesses &lt;- numGuesses + 1\n  } \n  cat(\"You got it in\", numGuesses, \"guesses.\")\n}\n\n#guessingGame()  # run this in RStudio\n\n\n\nfirstNPrimes - can’t use for loop\n\n# EXAMPLE - firstNPrimes cannot be done with a for loop. I have \n# no idea how many numbers I'll have to check to find the 1000th prime\n# or the millionth prime. There is no simple formula that will give\n# that answer. Therefore, there is no way to know how long the vector \n# should be for the for loop.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#with-a-for-loop-you-must-use-a-variable-even-when-there-is-no-need-for-the-value.",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#with-a-for-loop-you-must-use-a-variable-even-when-there-is-no-need-for-the-value.",
    "title": "34  for loops",
    "section": "34.8 With a for loop you must use a variable even when there is no need for the value.",
    "text": "34.8 With a for loop you must use a variable even when there is no need for the value.\n\n#-----------------------------------------------------------------\n# With a for loop you must use a variable even when there \n# is no need for the value.\n#-----------------------------------------------------------------\n\n# The following for loop does NOT make reference to the num variable\n# at all. However, it is still required to be specified in the code.\n\nsayHello = function( numTimes ) {\n  \n  for (num in 1:numTimes){\n    name = readline(\"What is your name? \")\n    cat(\"Hello \", name, \".\\n\", sep=\"\")\n    cat(\"I'm fine.\\n\")\n    cat(\"How are you doing?\\n\\n\")\n  }\n  \n  cat(\"bye bye.\")\n}\n\nsayHello(3)  # say hello three times\n\nWhat is your name? \nHello .\nI'm fine.\nHow are you doing?\n\nWhat is your name? \nHello .\nI'm fine.\nHow are you doing?\n\nWhat is your name? \nHello .\nI'm fine.\nHow are you doing?\n\nbye bye.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#practice---some-toy-funcitons-to-draw-with-character-values.",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#practice---some-toy-funcitons-to-draw-with-character-values.",
    "title": "34  for loops",
    "section": "34.9 Practice - Some “toy” funcitons to “draw” with character values.",
    "text": "34.9 Practice - Some “toy” funcitons to “draw” with character values.\nThe following functions are classic exercises for students who are trying to really understand how “nested loops” wprk. The functions don’t really do anything so useful. However thinking through how these functions work will sharpen your thought process about nested loops.\nGoing through these exercises in similar to how someone learning to play a musical instrument will practice “playing scales”. No one is really interested in playing scales but the exercise sharpens the mind.\n\ndrawing a box with numbers\n\n#-------------------------------------------------------------------------\n# QUESTION: Write a function:   box = function(rows, cols)\n# to draw a box in the following pattern using nested for loops\n#\n#    &gt; box (rows = 3 , cols = 4)\n#    3333\n#    2222\n#    1111\n#-------------------------------------------------------------------------\n\nbox = function(rows, cols){\n  \n  for (rowNumber in rows:1){   # count down - we're showing row numbers in reverse\n    for (colNumber in 1:cols){ # we can count up or down - we're not using colNumber\n      \n      cat(rowNumber)\n      \n    }\n    cat(\"\\n\")\n  }\n}\n\n#debugonce(box)\n\nbox(3, 4)\n\n3333\n2222\n1111\n\nbox(4, 10)\n\n4444444444\n3333333333\n2222222222\n1111111111\n\n\n\n#-------------------------------------------------------------------------\n# QUESTION - rewrite the box function from the previous question\n#            to use nested while loops\n#-------------------------------------------------------------------------\nboxWithWhile = function( rows, cols){\n\n  rowNum = rows\n  colNum = 1      \n  while (rowNum &gt;= 1){\n    \n    colNum = 1\n    while (colNum &lt;= cols){\n      \n      cat(rowNum)\n      colNum = colNum + 1\n    }\n    cat(\"\\n\")\n   \n    rowNum = rowNum - 1 \n  }\n}\n\nboxWithWhile(3,4)\n\n3333\n2222\n1111\n\n\n\n\ndrawing a triangle with numbers\n\n#-------------------------------------------------------------------------\n# QUESTION - Write a function\n#\n#    triangle = function(size)\n#\n# that draws a triangle in the following pattern using nested for loops.\n#\n#   &gt; triangle(3)\n#   1\n#   21\n#   321\n#-------------------------------------------------------------------------\n\ntriangle = function(size){\n\n  for(row in 1:(size*2)){\n    \n    for(col in row:1){\n      \n      cat(col)\n      \n    }\n    \n    cat(\"\\n\")\n  }\n}\n\ntriangle(3)\n\n1\n21\n321\n4321\n54321\n654321\n\ntriangle(5)\n\n1\n21\n321\n4321\n54321\n654321\n7654321\n87654321\n987654321\n10987654321\n\n\n\n#-------------------------------------------------------------------------\n# QUESTION - rewrite the triangle function from the previous question\n#            to use nested while loops\n#   &gt; triangle(3)\n#   1\n#   21\n#   321\n#-------------------------------------------------------------------------\n\ntriangle = function(size){\n  row = 1\n  while(row &lt;= size) {\n\n    col = row\n    while(col &gt;= 1) {\n      \n      cat(col)  \n      col = col - 1\n    }\n    \n    cat(\"\\n\")\n    row = row + 1 \n  }\n  \n}\n\ntriangle(3)\n\n1\n21\n321\n\n\n\n\ntriangle with a different pattern\n\n#-------------------------------------------------------------------------\n# QUESTION - Write a function\n#\n#    triangle = function(size)\n#\n# that draws a triangle in the following pattern using nested for loops.\n#\n#   &gt; triangle(3)\n#     1\n#    21\n#   321\n#\n#   &gt; triangle(4)\n#      1\n#     21\n#    321\n#   4321\n#\n# HINT: you can think of this \"triangle\" as a \"box\" but where some of the \n# spots are actually spaces. It might help to view the spaces as periods\n# so that you can see them. Think about how to draw each of the rows - \n# you can split up each row into (a) drawing the periods and (b) drawing the \n# numbers\n#\n#   &gt; triangle(3)\n#   ..1\n#   .21\n#   321\n#\n#   &gt; triangle(4)\n#   ...1\n#   ..21\n#   .321\n#   4321\n#-------------------------------------------------------------------------\n\ntriangle = function(size){\n  # FILL IN THE CODE\n}",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#vs-and-vs-we-already-covered-this",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#vs-and-vs-we-already-covered-this",
    "title": "34  for loops",
    "section": "34.10 & vs && and | vs || (we already covered this)",
    "text": "34.10 & vs && and | vs || (we already covered this)\n\n############################################################################.\n# & vs &&\n# | vs ||\n#\n# There are two type of \"and\" operators and two types of \"or\" operators\n# in R. \n#       The 1st type is & and |. \n#\n#       The 2nd type is && and || (with doubled symbols).\n#\n# It is preferable to use the \"doubled\" operators for\n# conditions in both \"if statements\" and in \"while loops\". \n# The reason is based on the following two fundamental differences between the\n# single symbol operators & and | vs the double symbols operators && and ||\n#\n#\n# *** FIRST DIFFERENCE ***\n#\n#   & and | are \"vectorized operators\" while && and || are not vectorized\n#\n#   The single & and | are vectorized (i.e. they will return an entire \n#   vector of multiple TRUE/FALSE values if necessary). In the following\n#   example, there are two values in the answer\n#\n#      &gt; c(TRUE, TRUE) & c(FALSE, TRUE)\n#      [1] FALSE TRUE\n#\n#    By contrast, the double && and || operators only return \n#    the first TRUE or FALSE\n#\n#      &gt; c(TRUE, TRUE) && c(FALSE, TRUE)\n#      [1] FALSE \n#\n#\n# *** SECOND DIFFERENCE *** \n#   && and || are \"shortcut operators\", & and | are not.\n#\n#     The double && and || will only process the values up until an answer\n#     can be figured out. We call these shortcut operators.\n#\n#     By contrast, the single & and | will process ALL values\n#\n# See examples below.\n##########################################################################.\n\n\nExample 1\n\n#------------------------------.\n# Examples for difference #1 \n#------------------------------.\n\n# & and | return multiple TRUE/FALSE values \n# (i.e. & and | are \"vectorized\" operators)\n\nc(TRUE,TRUE,TRUE) | c(FALSE, TRUE, FALSE)\n\n[1] TRUE TRUE TRUE\n\nc(TRUE,TRUE,TRUE) & c(FALSE, TRUE, FALSE)\n\n[1] FALSE  TRUE FALSE\n\n# The double operators only return the first value for the answer.\n#\n# This is what you want for the conditions in \"if statements\" and\n# in \"while loops\" since the entire condition should evaluate\n# to a single TRUE or FALSE\n\nc(TRUE,TRUE,TRUE) || c(FALSE, TRUE, FALSE)\n\nError in c(TRUE, TRUE, TRUE) || c(FALSE, TRUE, FALSE): 'length = 3' in coercion to 'logical(1)'\n\nc(TRUE,TRUE,TRUE) && c(FALSE, TRUE, FALSE)\n\nError in c(TRUE, TRUE, TRUE) && c(FALSE, TRUE, FALSE): 'length = 3' in coercion to 'logical(1)'\n\n\n\n\nExample 2 - isWholeNumber\n\n#------------------------------.\n# Examples for difference #2\n#------------------------------.\n\n# && and || use \"shortcut\" logic:\n#\n#   FALSE && ANYTHING  # The answer MUST BE FALSE\n#\n#   TRUE && ______     # I don't konw the answer until I analyze the ______\n#\n#\n#\n#\n#   TRUE || ANYTHING  # The answer MUST BE TRUE\n#\n#   FALSE || ______     # I don't konw the answer until I analyze the ______\n\n\n\n# In the following code, the trunc will not be processed if\n# is.numeric is FALSE. This is appropriate since trunc would fail \n# with an error if it is passed a character value.\nisWholeNumber = function( x ){\n tf = is.numeric(x) && trunc(x) == x \n return (tf)\n}\n\nisWholeNumber(3.5)       # FALSE\n\n[1] FALSE\n\nisWholeNumber(3)         # TRUE\n\n[1] TRUE\n\nisWholeNumber(-3)         # TRUE\n\n[1] TRUE\n\nisWholeNumber(-3.5)         # TRUE\n\n[1] FALSE\n\nisWholeNumber(\"apple\")   # FALSE  (this is correct)\n\n[1] FALSE\n\n# The following code incorrectly uses & \n# Therefore the code fails with an error when passed a\n# character value.\n\nisWholeNumber_bad = function( x ){\n tf = is.numeric(x) & trunc(x) == x \n return (tf)\n}\n\nisWholeNumber_bad(3.5)       # FALSE\n\n[1] FALSE\n\nisWholeNumber_bad(3)         # TRUE\n\n[1] TRUE\n\nisWholeNumber_bad(\"apple\")   # ERROR - non-numeric argument to trunc\n\nError in trunc(x): non-numeric argument to mathematical function\n\n\n\n\nExample 3 - is.prime\n\n# In general when using && and || in conditions for \"if statements\"\n# and \"while loops\", use the double version (i.e. && and || \n# instead of & and |)\n\nis.prime &lt;- function( num ) {\n  \n  # DON'T DO THE FOLLOWING:\n  #\n  # if( !is.numeric(num) | trunc(num) != num | num &lt; 1 ){\n \n  # RATHER, DO THE FOLLOWING:\n \n  if( length(num) != 1 || !is.numeric(num) || trunc(num) != num || num &lt; 1 ){\n    stop(\"num must be a single positive whole number\")\n  }\n  \n  if (num &lt; 2){\n    return(FALSE)\n  }\n  divisor &lt;- 2\n  \n  while ( divisor &lt;= sqrt(num) ) {\n    if (num %% divisor == 0){\n      return(FALSE)   \n    }\n    divisor &lt;- divisor + 1\n  }\n  return(TRUE)\n}\n\nis.prime(\"apple\")\n\nError in is.prime(\"apple\"): num must be a single positive whole number\n\nis.prime(c(100,200,300))\n\nError in is.prime(c(100, 200, 300)): num must be a single positive whole number",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#returning-a-value-vs-displaying-a-value-with-cat",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#returning-a-value-vs-displaying-a-value-with-cat",
    "title": "34  for loops",
    "section": "34.11 returning a value    VS    displaying a value (with cat)",
    "text": "34.11 returning a value    VS    displaying a value (with cat)\n\n#-------------------------------------------------------------------\n#-------------------------------------------------------------------\n# The following is a slight digression to discuss return values ...\n#\n# STUDENTS who are new to R are often confused about these ideas ...\n#-------------------------------------------------------------------\n#-------------------------------------------------------------------\n\n#..................................................................\n# *** TL;DR *** (i.e. the main idea) ...\n# (keep reading the comments below for a more lengthy explanation): \n#..................................................................\n#\n#     The countdown function does NOT return the numbers\n#     nor the word \"blastoff!\". Rather the return value of countdown() is the \n#     value of cat(\"blastoff!\") function, which is invisible, and is NULL.\n\n# Same code as above\ncountdown &lt;- function (){\n  for (num in 10:1){  # each time through the loop another value from 10:1 is assigned to num\n    cat(num,\" \")      # display num followed by a space\n    Sys.sleep(0.25)   # sleep for 0.25 seconds\n  }\n  \n  cat(\"blastoff!\")    # after the loop has finished, display \"blastoff!\"\n}\ncountdown()  # 10 9 8 7 6 5 4 3 2 1 blastoff!\n\n10  9  8  7  6  5  4  3  2  1  blastoff!\n\nx &lt;- countdown()\n\n10  9  8  7  6  5  4  3  2  1  blastoff!\n\nx # NULL\n\nNULL\n\n#..................................................................\n# *** A SOMEWHAT MORE LENGTHY EXPLANATION OF THESE CONCEPTS ***\n#..................................................................\n# First of all, remember that if a function doesn't execute an explicit\n# return statement, then the value of the final command to be executed is returned\n# from the function.\n#\n# Therefore, in the case of the countdown function above, what is \"returned\" is the \n# value of cat(\"blastoff!\") ... (but this is NOT the word \"blastoff!\" ... keep reading).\n\n# The return value of cat is always NULL.\n# In the next line the return value is NULL, NOT \"hello\".  \n# The return value, NULL, is then assigned to the variable x.\n# Even though the word \"hello\" is NOT the return value,\n# nevertheless, the word hello (without quotes) is displayed because cat \n# will always display info to the screen.\nx &lt;- cat(\"hello\")  # displays hello (without quotes) to the screen\n\nhello\n\nx # NULL\n\nNULL\n\n# One more example ...\n# Remember, the rep function repeats the VALUE of the first argument.\nrep(\"hello\", 5)   # \"hello\" \"hello\" \"hello\" \"hello\" \"hello\"\n\n[1] \"hello\" \"hello\" \"hello\" \"hello\" \"hello\"\n\nrep(seq(1,3), 5) # 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 \n\n [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\n# In the following example, the return value of cat is NULL.\n# However, NULL is NOT repeated 5 times, only once.\n# This is due to the special nature of the value NULL (which basically\n# means \"nothing\"). NULL is special in that even 5 NULLs are displayed\n# as a single NULL - don't worry too much about the intricacies of NULL,\n# but you must know that the return value of cat is NOT \"hello\".\n\nrep(cat(\"hello\"), 5) # helloNULL\n\nhello\n\n\nNULL\n\nrep(NULL, 5) # NULL  (only once)\n\nNULL\n\n# Bottom line: You can use cat to display info to the screen\n# but don't expect that information to be \"returned\" from the function.\n\n\n# SOME TAKEAWAYS:\n# REMEMBER: \n#\n# A few things to remember ...\n#\n#  1. If a function doesn't contain a return statement, then the \n#     value of the final command to be executed in the function\n#     is returned.\n#\n#  2. Based on #1 above, the value that is returned from countdown()\n#     is the value cat(\"blastoff!\"). HOWEVER ... keep reading ...\n#\n#  3. It is very important to understand that the cat function \n#     does NOT \"return\" the information that is displayed. \n# \n#     The purpose of cat is TO DISPLAY INFORMATION TO THE SCREEN.\n#     The purpose of cat is NOT to return a value.\n#     Programmers use the cat function to display information,\n#     NOT to generate a \"value\".The actual return value of cat\n#     is NULL. You never really need to use this NULL value,\n#     but technically, NULL is the return value. \n#\n#  4. You don't actually see the word NULL on the screen when you \n#     run the countdown function since the return value of cat is \n#     an \"invisible\" value - we explained the concept of invisible\n#     return values earlier in the semester when we first discussed\n#     the cat function.)\n\n#-------------------------------------------------------------------\n#-------------------------------------------------------------------\n#\n# END OF THE DIGRESSION ...\n# Let's get back to discussing the for loop and the while loop\n#\n#-------------------------------------------------------------------\n#-------------------------------------------------------------------",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#use-vector-operations-intsead-of-loops-when-possible.",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#use-vector-operations-intsead-of-loops-when-possible.",
    "title": "34  for loops",
    "section": "34.12 Use vector operations intsead of loops when possible.",
    "text": "34.12 Use vector operations intsead of loops when possible.\n\n# The R language has the ability to preform repetitive tasks by using\n# vector operations. For example:\n#\n#    sum(c(1,2,3,4))\n# \n# actually performs several different additions. This code actually calculates:\n#\n#    total = 1\n#    total = total + 2\n#    total = total + 3\n#    total = total + 4\n#\n# the resulting total is then returned from the sum function. In most other\n# languages you would need to write a loop to do this. However, because\n# R has built in vector operations many times you can avoid writing loops and\n# use R's built in vector operations instead. \n#\n# Loops in R are used for more complex situations.\n# Therefore it's not so easy to come up with many simple examples\n# that require loops in R. However, when practicing loops it's easier to \n# work with simple examples until you master the ideas. Therefore even though\n# the following examples are best accomplished with other R constructs\n# you are asked to try these problems using loops instead.",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#practice-1",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#practice-1",
    "title": "34  for loops",
    "section": "34.13 — Practice —",
    "text": "34.13 — Practice —\n\nQUESTION: splitVector\n\n#------------------------------------------------------------\n# Write a function, splitVector, that takes a single argument, vec, that\n# is expected to be a vector. The function should returns a list\n# that contains 3 different vectors. \n#\n#   - The 1st vector in the list should contain the the values from vec\n#     that are negative\n#\n#   - The 2nd vector in the list should contain the the values from vec \n#     that are between 0 and 100\n#\n#   - The 3rd vector in the list should contain the the values from vec \n#     that are larger than 100\n# \n# PART A - answer the question without using loops\n#\n# PART B - answer the question using a for loop\n#          DO NOT USE VECTOR OPERATIONS\n#\n# PART C - answer the question using a while loop\n#          DO NOT USE VECTOR OPERATIONS\n#------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for the answer - no loops\n\n\n\n\n\n\n############.\n# PART A\n############.\n\n# In R this is the preferred way to do it - i.e. using vector operations.\nsplitVector = function ( vec ){\n \n answer = list()\n \n answer$negNums = vec[ vec &lt; 0 ]\n \n answer$smallNums = vec[  vec&gt;0 & vec&lt;100  ] \n \n answer$largeNums = vec[ vec &gt;= 100 ]\n \n answer\n \n}\n\n\nsplitVector(c(-23, 197, -5, 92, 5, 3, -111, 1234, 5))\n\n$negNums\n[1]  -23   -5 -111\n\n$smallNums\n[1] 92  5  3  5\n\n$largeNums\n[1]  197 1234\n\n\n\n\n\n\n\n\n\n\n\nclick here for the answer - for loop\n\n\n\n\n\n\n# Write the code again - this time do NOT use vector operations.\n# Rather use a loop to process the values in the \n# vector.  \n#\n# Note that in R it is always preferable to use vector operations\n# instead of loops. This is just a practice exercise to help you \n# learn how to work with loops.\n\n#---------------------------------.\n# for loop version\n#---------------------------------.\nsplitVector = function( vec ){\n \n answer = list()\n \n for( value in vec) {\n  \n   if(  value &lt; 0  )   {\n     answer$negValues = c(answer$negValues, value)\n     \n   } else if( value &lt; 100 ){\n    answer$smallValues = c(answer$smallValues, value)\n\n   } else {\n    answer$largeValues = c(answer$largeValues, value)\n   }\n  \n }\n \n answer\n \n}\n\nnums &lt;- c(-10, 20, 1005, 32, -297)\nsplitVector( nums )\n\n$negValues\n[1]  -10 -297\n\n$smallValues\n[1] 20 32\n\n$largeValues\n[1] 1005\n\nsplitVector(c(-23, 197, -5, 92, 5, 3, -111, 1234, 5))\n\n$negValues\n[1]  -23   -5 -111\n\n$largeValues\n[1]  197 1234\n\n$smallValues\n[1] 92  5  3  5\n\n\n\n\n\n\n\n\n\n\n\nclick here for the answer - while loop\n\n\n\n\n\n\n#---------------------------------.\n# while loop version\n#---------------------------------.\n\nsplitVector &lt;- function( vec ){\n  answer &lt;- list()  \n\n  position = 1\n  while(  position &lt;= length(vec) )  {\n    num = vec[position]\n    \n    # add num to either answer$negNums, answer$smallNums or answer$largeNums\n    if (num &lt; 0){\n      answer$negNums = c(answer$negNums, num)\n    } else if ( num &lt;= 100  )  {\n      answer$smallNums = c(answer$smallNums, num)      \n    } else {\n      answer$largeNums = c(answer$largeNums, num)\n    }\n    \n    position = position + 1\n  }\n  \n  return(answer)\n}\n\nnums &lt;- c(-10, 20, 1005, 32, -297)\nsplitVector( nums )\n\n$negNums\n[1]  -10 -297\n\n$smallNums\n[1] 20 32\n\n$largeNums\n[1] 1005\n\nsplitVector(c(-23, 197, -5, 92, 5, 3, -111, 1234, 5))\n\n$negNums\n[1]  -23   -5 -111\n\n$largeNums\n[1]  197 1234\n\n$smallNums\n[1] 92  5  3  5\n\n\n\n\n\n\n\nQUESTION: isPrime(num)\n\n#----------------------------------------------------\n# Write isPrime(num) \n#\n# Part a - do it using a while loop (we did this in an earlier class)\n# Part b - do it using a for loop (we did this in an earlier class)\n#----------------------------------------------------\n\n\n\n\n\n\n\nclick here for the answer - part a - while loop\n\n\n\n\n\n\nisPrime &lt;- function(num) {\n  divisor &lt;- 2\n\n  while ( divisor &lt; sqrt(num) ){\n    if (num %% divisor == 0){\n      return(FALSE)\n    }\n    divisor &lt;- divisor + 1\n  }\n  \n  return(TRUE)\n}\n\nisPrime(35) # FALSE\n\n[1] FALSE\n\nisPrime(37) # TRUE\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\nclick here for the answer - part b - for loop\n\n\n\n\n\n\nisPrime_for = function( num ){\n\n  for(divisor in 2:sqrt(num)) {\n    if ( num %% divisor == 0){\n     return (FALSE)\n    }\n  }\n  return(TRUE)\n}\n\n\nisPrime_for(49) # FALSE\n\n[1] FALSE\n\nisPrime_for(37) # TRUE\n\n[1] TRUE\n\n\n\n\n\n\n\nQUESTION: myUnlist(SOME_LIST)\n\n#------------------------------------------------------------\n# The unlist function can be used on a dataframe (since a dataframe is a list).\n# (see example below)\n#\n# Write a function myUnlist that does the same thing as the unlist \n# function. However, your function does NOT need to create names for\n# the answer vector.\n#\n# ARGUMENTS: lst is a list (remember a dataframe is also a list) \n#\n# The function should return a character vector that combines all\n# the values from the list (or all the columns from the dataframe)\n# into a single vector. \n#------------------------------------------------------------\n\n\nmyUnlist = function( lst ) {\n \n answer = vector()\n \n for( listEntry in lst ){\n  \n    answer = c(answer, listEntry)\n  \n }\n \n answer\n \n}\n\nstudents &lt;- data.frame(student=c(\"joe\", \"sue\"),\n                       test1= c(100,90),\n                       test2 = c(85, 95),\n                       honors = c(FALSE, TRUE), stringsAsFactors = FALSE)\nstudents\n\n  student test1 test2 honors\n1     joe   100    85  FALSE\n2     sue    90    95   TRUE\n\nmyUnlist(students)\n\n[1] \"joe\"   \"sue\"   \"100\"   \"90\"    \"85\"    \"95\"    \"FALSE\" \"TRUE\" \n\nmyUnlist &lt;- function ( lst ){\n  answer &lt;- character(0)  \n  position &lt;- 1\n  while ( position &lt;= length(lst)  )  {\n    answer &lt;- c( answer ,   lst[[position]]   )\n    position &lt;- position + 1\n  }\n\n  return(answer)\n}\n\nstudents &lt;- data.frame(student=c(\"joe\", \"sue\"),\n                       test1= c(100,90),\n                       test2 = c(85, 95),\n                       honors = c(FALSE, TRUE), stringsAsFactors = FALSE)\nstudents\n\n  student test1 test2 honors\n1     joe   100    85  FALSE\n2     sue    90    95   TRUE\n\nmyUnlist(students)\n\n[1] \"joe\"   \"sue\"   \"100\"   \"90\"    \"85\"    \"95\"    \"FALSE\" \"TRUE\" \n\n#------------------------------------------------------------\n# Rewrite myUnlist to use a for loop\n#------------------------------------------------------------\nmyUnlist &lt;- function ( lst ){\n  answer &lt;- character(0)\n  for( value in lst ){\n    answer &lt;- c(answer , value)\n  }\n  return(answer)\n}\n\nstudents &lt;- data.frame(student=c(\"joe\", \"sue\"),\n                       test1= c(100,90),\n                       test2 = c(85, 95),\n                       honors = c(FALSE, TRUE), stringsAsFactors = FALSE)\nstudents\n\n  student test1 test2 honors\n1     joe   100    85  FALSE\n2     sue    90    95   TRUE\n\nmyUnlist(students)\n\n[1] \"joe\"   \"sue\"   \"100\"   \"90\"    \"85\"    \"95\"    \"FALSE\" \"TRUE\" \n\n\n\n\nQUESTION: dfToVec - only character columns\n\n#------------------------------------------------------------\n# Modify the code for dfToVec so that the vector \n# that is returned ONLY INCLUDES the values that\n# are in character columns of the dataframe.\n#------------------------------------------------------------\n\ndfToVec &lt;- function ( df ){\n  answer &lt;- character(0)\n  \n  for ( column in df ) {\n    if ( is.character(column) ){\n      answer &lt;- c(answer, column)\n    }\n  }\n  \n  return ( answer )\n}\n\nstudents &lt;- data.frame(student=c(\"joe\", \"sue\"),\n                       test1= c(100,90),\n                       test2 = c(85, 95),\n                       year = c(\"fr\", \"so\"),\n                       honors = c(FALSE, TRUE), stringsAsFactors = FALSE)\nstudents\n\n  student test1 test2 year honors\n1     joe   100    85   fr  FALSE\n2     sue    90    95   so   TRUE\n\ndfToVec(students)\n\n[1] \"joe\" \"sue\" \"fr\"  \"so\" \n\n\n\n\nQUESTION: dfToVec - only positive numbers, TRUE values and words that start with “a”\n\n#------------------------------------------------------------\n# Write a function that takes a dataframe, df\n# and returns a character vector.\n# \n# The vector should contain\n#  - all positive numbers from numeric columns\n#  - all TRUE values from logical columns\n#  - all character values that start with an \"a\" from character columns\n#------------------------------------------------------------\n\n\ndfToVec &lt;- function( df ){\n  \n  answer &lt;- character(0)\n  \n  for ( column in df ) {  # start of \"outer\" for loop\n    \n    for ( value in column) {  # start of \"inner\" for loop\n      \n      if( is.character(value) ){\n        if ( value &gt;= \"a\" & value &lt; \"b\" ){\n          answer &lt;- c(answer, value)\n        }\n      } else if ( is.numeric(value)) {\n        if( value &gt; 0){\n          answer &lt;- c(answer, value)\n        }\n      } else if (is.logical(value) ) {\n        if (value == TRUE){\n          answer &lt;- c(answer, value)\n        }\n        \n      }  \n      \n    } # end of \"inner\" for loop\n    \n  } # end of \"outer\" for loop\n  return(answer)\n}\n\nstudents &lt;- data.frame(student=c(\"joe\", \"alice\", \"mike\", \"anne\"),\n                       test1= c(100,90,-20,-30),\n                       test2 = c(-10, -40, 85, 95),\n                       favFood = c(\"orange\", \"pear\", \"apple\", \"artichoke\"),\n                       honors = c(TRUE, FALSE, FALSE, FALSE), stringsAsFactors = FALSE)\nstudents\n\n  student test1 test2   favFood honors\n1     joe   100   -10    orange   TRUE\n2   alice    90   -40      pear  FALSE\n3    mike   -20    85     apple  FALSE\n4    anne   -30    95 artichoke  FALSE\n\ndfToVec(students) # \"alice\" \"anne\" \"100\" \"90\" \"85\" 95\" \"TRUE\"\n\n[1] \"alice\"     \"anne\"      \"100\"       \"90\"        \"85\"        \"95\"       \n[7] \"apple\"     \"artichoke\" \"TRUE\"     \n\n#------------------------------------------------------------\n# another way\n#------------------------------------------------------------\n#    loop through the column numbers  (outer loop)\n#       loop through the row numbers    (inner loop)\n#          check a particular value from a given row,column\n\ndfToVec &lt;- function( df ){\n  \n  answer &lt;- character(0)\n  \n  for ( colNumber in 1:ncol(df)) {  # \"outer\" for loop\n    \n    for ( rowNumber in 1:nrow(df)) {  # \"inner\" for loop\n      \n      value = df[rowNumber, colNumber]  # get a single value\n      \n      if( is.character(value) ){\n        if ( value &gt;= \"a\" & value &lt; \"b\" ){\n          answer &lt;- c(answer, value)\n        }\n      } else if ( is.numeric(value)) {\n        if( value &gt; 0){\n          answer &lt;- c(answer, value)\n        }\n      } else if (is.logical(value) ) {\n        if (value == TRUE){\n          answer &lt;- c(answer, value)\n        }\n      }\n      \n    }  # end of \"inner\" for loop\n    \n  }  # end of \"outer\" for loop\n  \n  return(answer)\n}\n\n\nstudents &lt;- data.frame(student=c(\"joe\", \"alice\", \"mike\", \"anne\"),\n                       test1= c(100,90,-20,-30),\n                       test2 = c(-10, -40, 85, 95),\n                       favFood = c(\"orange\", \"pear\", \"apple\", \"artichoke\"),\n                       honors = c(TRUE, FALSE, FALSE, FALSE), stringsAsFactors = FALSE)\nstudents\n\n  student test1 test2   favFood honors\n1     joe   100   -10    orange   TRUE\n2   alice    90   -40      pear  FALSE\n3    mike   -20    85     apple  FALSE\n4    anne   -30    95 artichoke  FALSE\n\ndfToVec(students) # \"alice\" \"anne\" \"100\" \"90\" \"85\" 95\" \"TRUE\"\n\n[1] \"alice\"     \"anne\"      \"100\"       \"90\"        \"85\"        \"95\"       \n[7] \"apple\"     \"artichoke\" \"TRUE\"",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#important-concepts-about-for-loops",
    "href": "001020-forLoops_sleep_strsplit-v017-maybeChanged.html#important-concepts-about-for-loops",
    "title": "34  for loops",
    "section": "34.14 *** IMPORTANT CONCEPTS ABOUT FOR LOOPS ***",
    "text": "34.14 *** IMPORTANT CONCEPTS ABOUT FOR LOOPS ***\n\n#####################################################################\n#####################################################################\n##\n## *** IMPORTANT CONCEPTS ABOUT FOR LOOPS ***\n##\n## DO NOT CHANGE THE VALUE OF THE FOR LOOP **VARIABLE** IN THE BODY!!!\n## DO NOT CHANGE THE VALUE OF THE FOR LOOP **VECTOR**   IN THE BODY!!!\n##\n## - The code in the body should NEVER change the value of the \n##   for loop variable directly.\n##\n##   All changes to the value of the for loop variable should only\n##   be done automatically by the for loop mechanism, \n##   i.e. the next value from the vector is AUTOMATICALLY assigned\n##   to the for loop variable each time through the loop.\n##\n##   Explicitly changing the value of the for loop variable in \n##   the body of the loop is very confusing and is considered\n##   VERY VERY sloppy coding by programmers everywhere.\n##\n## - Similarly, the code in the body should NEVER change the value of the \n##   for loop vector. The vector should have a value when the for \n##   loop starts and the value of the vector should NEVER change \n##   as the for loop is executing.\n##\n##   Changing the value of the vector of the for loop\n##   in the body of the loop is very confusing and is considered\n##   VERY VERY sloppy coding by programmers everywhere.\n## \n##\n##\n##\n##\n##\n## *** DIFFERENCE BETEWEN FOR LOOPS AND WHILE LOOPS ***\n##\n## A for loop is a convenience but NOT a necessity. \n##\n## It IS TRUE that any code written with a for loop CAN be converted to use\n## a while loop instead.\n## \n## HOWEVER, it is NOT TRUE that any code written with a while loop can be\n## converted to use a for loop.\n##\n## A for loop can only be used when you can anticipate how many times\n## the code will loop before the loop starts. \n##\n## For example, the guessing game program that we wrote in an earlier class\n## cannot be written with a for loop since it is impossible to know in\n## advance how many times the loop will need to \"go around\".\n##\n## isPrime CAN be written with a for loop since you know that you even\n## before the for loop needs to \"go around\" at most sqrt(n) times.\n##\n## firstNprimes cannot be written with a for loop since we have no idea\n## in advance how large the nth prime will be, e.g. how large is the \n## one millionth prime number??? Therefore we cannot anticipate before \n## the loop starts how many times the code needs to be repeated.\n##\n##############################################################\n##############################################################\n\n\nQUESTION: isPalindrome(x)\n\n#--------------------------------------------------------------\n# A plaindrome is a word that reads the same forwards and \n# backwards. \n# Example:   racecar is a palindrome\n#            pineapple is not\n#            abcdxba is NOT a palindrome\n#            abcdcba is a palindrome\n#\n# Write a function isPalindrome(x)\n# \n# ARGUMENTS\n#   - x is expected to be a character vector with one item in it\n#\n# isPalindrome(x) should return TRUE if x is a palindrome\n# and return FALSE if it isn't\n#--------------------------------------------------------------\n\n# The following info about strsplit will help with your answer\n\n\nstrsplit function\n\n#...............\n# strsplit \n#...............\n\n# strsplit will split up each value in a \n# character vector into multiple values.\n#\n# IMPORTANT: The return value of strsplit is a LIST.\n?strsplit\n\nstarting httpd help server ... done\n\n# multiple values in the original vector\npeople = c(\"Cohen,Sam\",\"Jones,Bob\",\"Andrews,Claire\")\npeople\n\n[1] \"Cohen,Sam\"      \"Jones,Bob\"      \"Andrews,Claire\"\n\nlength(people) \n\n[1] 3\n\nsplitPeople &lt;-strsplit(people,\",\")\nsplitPeople\n\n[[1]]\n[1] \"Cohen\" \"Sam\"  \n\n[[2]]\n[1] \"Jones\" \"Bob\"  \n\n[[3]]\n[1] \"Andrews\" \"Claire\" \n\n# print the first name (i.e. the 2nd position) for \"Andrews,Claire\"\nsplitPeople[[3]][2]\n\n[1] \"Claire\"\n\n# use a colon as a separator\nplaces &lt;- c(\"New York:NY:USA\", \"Jerusalem::IL\", \"LA:CA:USA\", \"Miami:FL:USA\")\nplaces\n\n[1] \"New York:NY:USA\" \"Jerusalem::IL\"   \"LA:CA:USA\"       \"Miami:FL:USA\"   \n\nstrsplit(places, \":\")\n\n[[1]]\n[1] \"New York\" \"NY\"       \"USA\"     \n\n[[2]]\n[1] \"Jerusalem\" \"\"          \"IL\"       \n\n[[3]]\n[1] \"LA\"  \"CA\"  \"USA\"\n\n[[4]]\n[1] \"Miami\" \"FL\"    \"USA\"  \n\n# Note that strsplit returns a LIST even if there is only one \n# value in the character vector\nfruit = c(\"apple,orange,pear\")\nfruit\n\n[1] \"apple,orange,pear\"\n\nlength(fruit)\n\n[1] 1\n\nsplitFruit &lt;- strsplit(fruit,   \",\")\nsplitFruit\n\n[[1]]\n[1] \"apple\"  \"orange\" \"pear\"  \n\n# display just the 2nd fruit (notice the [[double-brackets]][single-brackets])\nsplitFruit[[1]][2]\n\n[1] \"orange\"\n\n# If the separator is the \"empty string\" (i.e. \"\") then \n# every character (e.g. letter, digit, space,!,@,#,$,%, etc)\n# is split into separate character values\nwords = c(\"racecar\", \"pineapple\", \"cart\")\nstrsplit(words,\"\")\n\n[[1]]\n[1] \"r\" \"a\" \"c\" \"e\" \"c\" \"a\" \"r\"\n\n[[2]]\n[1] \"p\" \"i\" \"n\" \"e\" \"a\" \"p\" \"p\" \"l\" \"e\"\n\n[[3]]\n[1] \"c\" \"a\" \"r\" \"t\"\n\n# Remember that strsplit returns a list EVEN if there\n# is only one character value being split. You will need to \n# keep this in mind when writing the code.\nword &lt;- \"racecar\"\ny &lt;- strsplit(word,\"\")\ny\n\n[[1]]\n[1] \"r\" \"a\" \"c\" \"e\" \"c\" \"a\" \"r\"\n\ny[1]       # still a list \n\n[[1]]\n[1] \"r\" \"a\" \"c\" \"e\" \"c\" \"a\" \"r\"\n\ny[[1]]     # the vector without the surrounding list\n\n[1] \"r\" \"a\" \"c\" \"e\" \"c\" \"a\" \"r\"\n\nunlist(y)  # the vector without the surrounding list\n\n[1] \"r\" \"a\" \"c\" \"e\" \"c\" \"a\" \"r\"\n\n# display the 2nd letter of the word\ny[[1]][2]    # one way\n\n[1] \"a\"\n\nunlist(y)[2] # another way\n\n[1] \"a\"\n\nz &lt;- y[[1]]  # you could use a variable\nz[2]\n\n[1] \"a\"\n\n\n\n\n\nisPalindrome(x) with a while loop\n\n#.........................................................\n#\n# Let's get back to coding the isPalindrome function ...\n#\n#    ... first let's do it with a while loop\n#\n#.........................................................\n\nisPalindrome &lt;- function(x) {\n  if (!is.character(x) | length(x) !=1){\n    stop(\"x must have a single character value\")\n  }\n  \n  lets &lt;- strsplit(x, \"\")[[1]]   # get the individual letters in a vector\n  \n  left  = 1\n  right = length(lets)\n  \n  while ( left &lt; right) {\n    if(lets[left] != lets[right]){\n      return(FALSE)\n    }\n    left = left + 1\n    right = right - 1\n  }\n  \n  return(TRUE)\n}\n\nisPalindrome(\"abcdxba\")  # FALSE\n\n[1] FALSE\n\nisPalindrome(\"abcdcba\")  # TRUE\n\n[1] TRUE\n\nisPalindrome(\"racecar\")  # TRUE\n\n[1] TRUE\n\nisPalindrome(\"amanaplanacanalpanama\")  # TRUE\n\n[1] TRUE\n\nisPalindrome(\"a man a plan a canal panama\")  # FALSE - because of the spaces\n\n[1] FALSE\n\n\n\n#.........................................................\n# Rewrite the function so that it removes spaces before\n# checking to see if x is a palindrome\n#.........................................................\nisPalindrome &lt;- function(x) {\n  if (!is.character(x) | length(x) !=1){\n    stop(\"x must have a single character value\")\n  }\n  \n  lets &lt;- strsplit(x, \"\")[[1]]\n  \n  lets &lt;- lets [ lets != \" \" ]  # get rid of the spaces from lets\n  \n  left  = 1\n  right = length(lets)\n  \n  while ( left &lt; right) {\n    if(lets[left] != lets[right]){\n      return(FALSE)\n    }\n    left = left + 1\n    right = right - 1\n  }\n  \n  return(TRUE)\n}\n\nisPalindrome(\"a man a plan a canal panama\")  # TRUE\n\n[1] TRUE\n\n\n\n\nisPalindrome(x) with a for loop\n\n#................................................\n#\n# Rewrite the code to use a for loop\n#\n#................................................\n\nisPalindrome &lt;- function(x) {\n\n  if (!is.character(x) | length(x) !=1){\n    stop(\"x must have a single character value\")\n  }\n  \n  lets &lt;- strsplit(x, \"\")[[1]]   # get the individual letters in a vector\n  \n  # get rid of the spaces from lets\n  lets &lt;- lets [ lets != \" \" ]\n\n  for ( num in 1:trunc(length(lets)/2) ){\n    # note: num will start at 1, then 2, then 3, up until 1/2 the length of the word\n    # exmpale: for \"racecar\" num will be 1 then 2 then 3 then stop\n    first = num\n    last = length(lets)-num+1\n    if( lets[first] !=  lets[last]){\n      return(FALSE)\n    }\n  }\n  return(TRUE)  \n  \n}\n\nisPalindrome(\"abcdxba\")  # FALSE\n\n[1] FALSE\n\nisPalindrome(\"abcdcba\")  # TRUE\n\n[1] TRUE\n\nisPalindrome(\"racecar\")  # TRUE\n\n[1] TRUE\n\nisPalindrome(\"amanaplanacanalpanama\")  # TRUE\n\n[1] TRUE\n\nisPalindrome(\"a man a plan a canal panama\")  # TRUE\n\n[1] TRUE",
    "crumbs": [
      "After the midterm",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>for loops</span>"
    ]
  },
  {
    "objectID": "000354-quartoBook_part_morePracticeQuestions.html",
    "href": "000354-quartoBook_part_morePracticeQuestions.html",
    "title": "Practice Questions (also see “More Practice Questions” below)",
    "section": "",
    "text": "Final exam",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>"
    ]
  },
  {
    "objectID": "000354-quartoBook_part_morePracticeQuestions.html#final-exam",
    "href": "000354-quartoBook_part_morePracticeQuestions.html#final-exam",
    "title": "Practice Questions (also see “More Practice Questions” below)",
    "section": "",
    "text": "All of these question are applicable.\nFor additional questions, also see the next section entitled “More Practice Questions (added recently)”. I may continue to add additional practice questions to the end of that section.\nNote that in addition to the questions in this section, there are also many practice questions that are included in the actual text of the chapters.",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>"
    ]
  },
  {
    "objectID": "000354-quartoBook_part_morePracticeQuestions.html#midterm-exam",
    "href": "000354-quartoBook_part_morePracticeQuestions.html#midterm-exam",
    "title": "Practice Questions (also see “More Practice Questions” below)",
    "section": "Midterm exam",
    "text": "Midterm exam\n\nBelow is a list of practice questions that were relevant to study for the midterm exam.\nNote that in addition to the questions in this section, there are also many practice questions that are included in the actual text of the chapters.\n\nThe following questions are related to the material for the midterm.\n\nPractice Questions - TOPIC Vectors1\n1-17 (all questions)\nPractice Questions - TOPIC Vectors2\n1,2,3,4,5,6,\n8,9,10,11,\n14,15,16,17,18,19,20,21,22,23,\n25,26,27,28,29,30,31,\n33,34,35,36,37,38,39,40,41,42\nPractice Questions - TOPIC: User Defined Functions\n67, 68,\n71a, 71b\nPractice Questions - TOPIC: Assorted Topics\n73,\n75, 76, 77, 78, 79,\n81\nPractice Questions - TOPIC: Parallel Vectors, other assorted questions\n1,2,\n4,5,6,\n19,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>"
    ]
  },
  {
    "objectID": "000555-midtermQuestionsToStudy.html",
    "href": "000555-midtermQuestionsToStudy.html",
    "title": "35  FINAL EXAM (2023) - Questions to study (ie. everything)",
    "section": "",
    "text": "36 Sections on this page (click to get to the section you want)",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>FINAL EXAM (2023) - Questions to study (ie. everything)</span>"
    ]
  },
  {
    "objectID": "000555-midtermQuestionsToStudy.html#about-these-questionsanswers",
    "href": "000555-midtermQuestionsToStudy.html#about-these-questionsanswers",
    "title": "35  FINAL EXAM (2023) - Questions to study (ie. everything)",
    "section": "36.1 About these questions/answers",
    "text": "36.1 About these questions/answers\nThe answers to each question were written to explain how to think about arriving at the answer.\nThe actual answer is on the line containing the comment #ANSWER. All other lines are there to demonstrate the answer working on actual data or to demonstrate portions of the whole answer so that the whole answer is more easily understood. If the actual required code for an answer takes up several lines then the comment will say #ANSWER (MULTIPLE LINES).\nIf different possible answers are shown, then the different answers will be displayed with the comment #ALTERNATE ANSWER or #ANOTHER ANSWER.\nNote that it is very possible that there are valid answers other than the ones shown below.",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>FINAL EXAM (2023) - Questions to study (ie. everything)</span>"
    ]
  },
  {
    "objectID": "000555-midtermQuestionsToStudy.html#final-exam",
    "href": "000555-midtermQuestionsToStudy.html#final-exam",
    "title": "35  FINAL EXAM (2023) - Questions to study (ie. everything)",
    "section": "36.2 Final Exam",
    "text": "36.2 Final Exam\nThe final is cumulative in that you MUST KNOW the material from before the midterm in order to be able to answer questions that cover material from after the midterm. See below for the list of questions from the midterm material.\nWith that said, ALL of the questions on this website are good study material for the final.\nFor your convenience I listed below those questions on this website that were not listed in the study material for the midterm.\nThere are plenty of practice questions here but I will try to continue to post additional practice questions.\n\nFINAL Practice Questions - TOPIC: Vectors 1\nAll of this material was already on the midterm.\n\n\nFINAL Practice Questions - TOPIC Vectors2\n(See below for which questions were in the midterm study material.)\nThe following questions were NOT listed in midterm study material:\nQuestions: 12, 13 (Topic: named vectors)\nQuestions: 24 (Topic: parallel vectors - wasn’t included for midterm - should have been)\nQuestions: 32\nQuestions: 45 - end\n\n\nFINAL Practice Questions - TOPIC: User Defined Functions\n(The midterm material only included four of these questions - see below.)\nALL of this material is relevant for the final exam.\nIn addition to basic idea of user defined functions, these questions also cover\nif, while loop, for loop (we will cover the for loop soon)\n\n\nFINAL Practice Questions - TOPIC: Dataframes\nNone of this material was on the midterm.\nALL of this material is relevant for the final exam.\nIn addition to basic data.frame concepts these questions also cover &, |, sample, lapply\n\n\nFINAL Practice Questions - TOPIC: Assorted Topics\n(See below for which questions were in the midterm study material.)\nThe following questions were not in midterm study material: \nQuestions: 74 (topic: dataframes)\nQuestions: 80 (topics: lists, loops)\n\n\nFINAL Practice Questions - TOPIC: Parallel Vectors, other assorted questions\n(See below for which questions were in the midterm study material.)\nThe following questions were not in midterm study material:\nQuestions: 3 (&, |)\nQuestions: 7,8,9,10,11,12,13,14,15,16,17,18 (&, |)\nQuestions: 39, 40 (topics: scientific notation)\n\nBELOW ARE THE QUESTIONS THAT WERE FROM THE MATERIAL BEFORE THE MIDTERM. IF YOU AREN’T YET COMFORTABLE WITH THIS MATERIAL YET YOU SHOULD ALSO STUDY THESE AS THE LATER MATERIAL DEPENDS ON THIS EARLIER MATERIAL.",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>FINAL EXAM (2023) - Questions to study (ie. everything)</span>"
    ]
  },
  {
    "objectID": "000600-HW-vectorsFunctionsRecyclingrule-v004.html",
    "href": "000600-HW-vectorsFunctionsRecyclingrule-v004.html",
    "title": "36  Practice Questions - TOPIC: Vectors1",
    "section": "",
    "text": "##################################################################\n##################################################################\n## INSTRUCTIONS\n## \n## Answer the questions below by writing R commands.\n## There are hints after many of the questions. You can follow those\n## hints. However, there are many different ways to write code to \n## accomplish something. Feel free to experiment with different ways\n## to accomplish the same thing.\n##\n## - In general, each question should be completed using a SINGLE\n##   command (unless specified otherwise).\n##\n## - If a question asks you to create a variable - do \n##   that in one command.\n##\n## - If another part of the same question then asks you to use that\n##   variable - do that in another command. \n##\n## - In general each question is independent of other questions.\n##   However, a multi-part question (e.g. (a), (b), etc) may refer to the\n##   earlier steps\n##\n## - For the purpose of grading all steps in each multi-step question\n##   i.e. (a), (b), etc. counts as a full question\n##   (i.e. each part of every question is worth the same amount of points).\n##################################################################\n##################################################################\n\n\n# Question 1 (a).\n#\n#     Create a variable named \"nums\" that contains numbers starting with 100.\n#     Each successive number should be 7 less than the previous number. Follow\n#     this pattern through the negative numbers. Do not go past -100.\n#     Remember to store the vector in the variable named \"nums\".\n#     (i.e. nums should contain the vector\n#          100 93 86 79 ... 9 2 -5 -12 ... -82  -89 -96 )\n#\n#     Hints\n#       - use the seq function with the from, to and by arguments\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# since we're counting DOWN, the by value must be negative\nnums = seq(100,-100,by=-7)  \n\n# Here are the numnbers\nnums\n\n [1] 100  93  86  79  72  65  58  51  44  37  30  23  16   9   2  -5 -12 -19 -26\n[20] -33 -40 -47 -54 -61 -68 -75 -82 -89 -96\n\n\n\n\n\n# Question 1 (b).\n#     Create a vector starting with the pattern 1 2 3 etc ...\n#     The vector should be as long as the nums vector from\n#     part (a). \n#\n#     Hints:\n#       - use the seq function or the colon operator (your choice)\n#       - use the length function as part of your answer\n#       - use the length function to check the length of nums from \n#         part (a) to make sure that your answer is correct\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# one way - with seq function\nseq(1, length(nums))\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29\n\n# another way - with : operator\n1:length(nums)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29\n\n\n\n\n\n# Question 1 (c).\n#     Do part (b) again, but this time generate the numbers\n#     2 4 6 etc ... The vector should be as long as the nums \n#     vector from part (a).\n#     The answer should display the numbers: 2 4 6 ... 56 58\n#\n#     Hints: \n#       - use the seq function with the from, by and length.out arguments\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n# Note that you don't have to type \n# from= since from is the first argument as defined in the help info (i.e. ?seq) \n# and the value 2 is typed in the 1st position of the function call. \n# However, it is required to specify by= and length.out=\n# since these arguments as specified in the function call below \n# are not in the same positions as defined in the help info.\nseq(from=2, by=2, length.out=length(nums))\n\n [1]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50\n[26] 52 54 56 58\n\n# As noted in the comment above, the following is the same as the previous line\nseq(2, by=2, length.out=length(nums))\n\n [1]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50\n[26] 52 54 56 58\n\n\n\n\n\n# Question 1 (d).\n#     Subtract the vector in part (c) from the \"nums\" vector you created\n#     in part (a). Since the answer to part (a) should contain \n#       100 93 86 ... -89 -96\n#     and the answer to part (c) should contain the values\n#       2   4  6  ...  56  58\n#     the answer for this question should display the values\n#       98  89 80 ... -145 -154\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\nnums - seq(from=2,by=2, length.out=length(nums))\n\n [1]   98   89   80   71   62   53   44   35   26   17    8   -1  -10  -19  -28\n[16]  -37  -46  -55  -64  -73  -82  -91 -100 -109 -118 -127 -136 -145 -154\n\n\n\n\n\n# Question 1 (e).\n#     Do part (c) again, but this time do NOT use the length\n#     function. Instead use the along.with\n#     argument to the seq function. We did NOT cover along.with\n#     in class, but you should get used to learning how to \n#     learn about R functions. See the documentation for the seq\n#     function or search online for more information.\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# along.with \nseq(2, along.with=nums, by=2)\n\n [1]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50\n[26] 52 54 56 58\n\n\n\n\n\n# Question 2.\n#    Create a vector with the pattern 5 10 15 ... 50 repeated\n#    four times (i.e. 5 10 15 ... 50 5 ... 50 5 ... 50 5 ... 50)\n#    Hints:\n#      - create the vector 5 10 15 ... 50 using the seq function\n#        by specifying the from, to and by arguments\n#\n#      - modify your answer by using the rep function to repeat that\n#        vector four times\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\nrep(seq(from=5,to=50,by=5), times=4)\n\n [1]  5 10 15 20 25 30 35 40 45 50  5 10 15 20 25 30 35 40 45 50  5 10 15 20 25\n[26] 30 35 40 45 50  5 10 15 20 25 30 35 40 45 50\n\n\n\n\n\n# Question 3.\n#\n# Create a vector that contains 3 copies of each of the even numbers\n# from 2 through 100. Store this in a variable named trippleEvens. \n# i.e. trippleEvens should contain the values\n#         2 2 2 4 4 4 6 6 6 ... 98 98 98 100 100 100\n#\n# Hints:\n#   - create a vector of just the even numbers (i.e. 2 4 6 ... 100)\n#     by using the seq function with arguments, from, to, by\n#\n#   - extend your code by using the rep function with the \"each\" argument\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\nrep( seq(from=2, to=100, by=2), each=3)\n\n  [1]   2   2   2   4   4   4   6   6   6   8   8   8  10  10  10  12  12  12\n [19]  14  14  14  16  16  16  18  18  18  20  20  20  22  22  22  24  24  24\n [37]  26  26  26  28  28  28  30  30  30  32  32  32  34  34  34  36  36  36\n [55]  38  38  38  40  40  40  42  42  42  44  44  44  46  46  46  48  48  48\n [73]  50  50  50  52  52  52  54  54  54  56  56  56  58  58  58  60  60  60\n [91]  62  62  62  64  64  64  66  66  66  68  68  68  70  70  70  72  72  72\n[109]  74  74  74  76  76  76  78  78  78  80  80  80  82  82  82  84  84  84\n[127]  86  86  86  88  88  88  90  90  90  92  92  92  94  94  94  96  96  96\n[145]  98  98  98 100 100 100\n\n\n\n\n\n# Question 4.\n#        Repeat the values 3 6 9 ... 60 as many times as \n#        a necessary until you reach a vector of length 150\n#        (i.e. 3 6 9 ... 60 3 6 9 ... 60 3 ... etc until a total length of 150)\n#        Store the result in the variable named \"tens\".\n#\n#        Hints: \n#          - use the seq function to create the vector 3 6 9 ... 60 \n#          - expand your answer by using the rep function with the length.out\n#            argument\n#          - Make sure that the vector has 150 values by using the length\n#            function.\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\nrep( seq(from=3, to=60, by=3), length.out=150)\n\n  [1]  3  6  9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60  3  6  9 12 15\n [26] 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60  3  6  9 12 15 18 21 24 27 30\n [51] 33 36 39 42 45 48 51 54 57 60  3  6  9 12 15 18 21 24 27 30 33 36 39 42 45\n [76] 48 51 54 57 60  3  6  9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60\n[101]  3  6  9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60  3  6  9 12 15\n[126] 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60  3  6  9 12 15 18 21 24 27 30\n\n\n\n\n\n# Question 5 (a).\n#\n#    Display the powers of 10 from 10^9 down to 10^1.\n#\n#        Hints: \n#          - Use vector arithmetic. Raise 10 to the power of\n#            a vector that contains the numbers 1 2 3 ... 9\n#            You can create the vector 1 2 3 ... 9 with the \n#            colon operator.\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n# Note that the parentheses ARE required since ^ comes before : in the \n# order of operations ( see ?Syntax )\n#\n# 10^1:9 would NOT produce the correct results.\n#\n# Also note that since 10^9 is a rather large number, R displays the values in\n# \"scientific notation\". (We will learn more about scientific notation later)\n10^(1:9)\n\n[1] 1e+01 1e+02 1e+03 1e+04 1e+05 1e+06 1e+07 1e+08 1e+09\n\n\n\n\n\n\n# Question 5 (b).\n#\n#     Display the square roots of the powers of \n#     ten starting from the square root of 10^9 down to the \n#     square root of 10. \n#\n#        Hints: \n#          - create the vector 9 8 7 ... 1 using the colon operator\n#          - raise 10 to the power of that vector\n#          - pass the whole expression to the sqrt function\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\nsqrt(10^(9:1))\n\n[1] 31622.776602 10000.000000  3162.277660  1000.000000   316.227766\n[6]   100.000000    31.622777    10.000000     3.162278\n\n\n\n\n\n# Question 6 (a).\n#\n#     Create a vector that contains 30 numbers, starting with 1 and \n#     ending with 5. The numbers should be evenly spaced.\n#\n#        Hints:\n#          - use the seq function with the from, to and length.out arguments\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\nseq(from=1, to=5, length.out=30)\n\n [1] 1.000000 1.137931 1.275862 1.413793 1.551724 1.689655 1.827586 1.965517\n [9] 2.103448 2.241379 2.379310 2.517241 2.655172 2.793103 2.931034 3.068966\n[17] 3.206897 3.344828 3.482759 3.620690 3.758621 3.896552 4.034483 4.172414\n[25] 4.310345 4.448276 4.586207 4.724138 4.862069 5.000000\n\n\n\n\n\n# Question 6 (b).\n#\n#     Do the same as (a) but round the values to the nearest hundredth\n#     place (i.e. 2nd number after decimal point)\n#\n#        Hints:\n#          - use the round function with the digits argument\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\nround ( seq(from=1, to=5, length.out=30), digits=2)\n\n [1] 1.00 1.14 1.28 1.41 1.55 1.69 1.83 1.97 2.10 2.24 2.38 2.52 2.66 2.79 2.93\n[16] 3.07 3.21 3.34 3.48 3.62 3.76 3.90 4.03 4.17 4.31 4.45 4.59 4.72 4.86 5.00\n\n\n\n\n\n# Question 7.\n#    Create a vector that contains the 1st, 2nd, 3rd and 4th powers \n#    of the numbers from 1 through 10 - there should be 40 values in all.\n#    (i.e.  1^1 1^2 1^3 1^4 2^1  2^2 2^3 2^4 3^1 3^2 3^3 3^4 ... 10^1 10^2 10^3 10^4 \n#     which should be displayed as:\n#           1   1   1   1   2    4   8   16  3   9   27  81  ... 10   100  1000 10000)\n#\n#    Hints:\n#      - There should be 40 numbers in all. We will use vector arithmetic ...\n#      - Therefore create 2 different vectors ... each will have 40 values.\n#      - The first vector should contain the numbers\n#           1 1 1 1 2 2 2 2 3 3 3 3 ... 10 10 10 10\n#      - The 2nd vector should contain the powers 1 2 3 4 1 2 3 4 etc.\n#      - Raise the first vector to the power of the 2nd vector using the ^ operator.\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# One answer - this version uses the recycling rule - this is the preferred answer.\n# Note that according to the order of operations (see ?Syntax) the ^ operator\n# (i.e. exponentiation) has a higher precedence than the colon operator (i.e. :)\n# Therefore, the parentheses around (1:4) ARE necessary.\nrep(1:10, each=4) ^ (1:4)\n\n [1]     1     1     1     1     2     4     8    16     3     9    27    81\n[13]     4    16    64   256     5    25   125   625     6    36   216  1296\n[25]     7    49   343  2401     8    64   512  4096     9    81   729  6561\n[37]    10   100  1000 10000\n\n# Another answer - this version doesn't rely on the recycling rule.\n# In this version the 2nd vector is explicitly repeated to a length of 40.\n# As shown in the previous answer, this is actually not necessary.\nrep(1:10, each=4) ^ rep(1:4, length.out=40)\n\n [1]     1     1     1     1     2     4     8    16     3     9    27    81\n[13]     4    16    64   256     5    25   125   625     6    36   216  1296\n[25]     7    49   343  2401     8    64   512  4096     9    81   729  6561\n[37]    10   100  1000 10000\n\n\n\n\n\n# Question 8.\n#\n# Write code that displays the 4th value from the vector nums.\n# (nums could contain anything)\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\nnums = c(10,20,30,40,50,60,70,80,90,100)   # make up some sample data\nnums[4]  # Answer\n\n[1] 40\n\n\n\n\n\n# Question 10.\n#\n# Write code that displays the 4th and 6th values from the vector nums.\n# (nums could contain anything)\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# make up some sample data\nnums = c(10,20,30,40,50,60,70,80,90,100)   \n\n# Answer - the c() IS REQUIRED here since there must be only a single\n# vector between the [brackets]\nnums[c(4,6)]  \n\n[1] 40 60\n\n\n\n\n\n# Question 11.\n#\n# Write code that displays 3 copies of the 2nd value from the vector nums.\n# (nums could contain anything)\n# For example if nums contains 10 20 30 40\n# Then your code should display 20 20 20\n#\n# Hints:\n#   - pass the 2nd value of nums to the rep function\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# make up some sample data\nnums = c(10,20,30,40,50,60,70,80,90,100)   \n\n# Answer\nrep(nums[2] , 3)\n\n[1] 20 20 20\n\n\n\n\n\n# Question 12.\n#\n# Write code that displays the 3rd through the 30th values from the vector nums.\n# (nums could contain anything)\n#\n# Hints:\n#   - create a vector that contains the numbers 3 4 5 ... 30\n#   - display the values in those positions from nums by \n#     placing the code that creates the vector 3 4 5 ... 30\n#     between [brackets] next to the name \"nums\"\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# make up some sample data\nnums = seq(10,length.out=40,by=10)\nnums\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120 130 140 150 160 170 180 190\n[20] 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380\n[39] 390 400\n\n# Answer\nnums [ 3:30 ]\n\n [1]  30  40  50  60  70  80  90 100 110 120 130 140 150 160 170 180 190 200 210\n[20] 220 230 240 250 260 270 280 290 300\n\n\n\n\n\n# Question 13.\n#\n# Display the values that are in the even positions of nums. \n# nums may contain anything. For example if nums contains\n# the values 10 20 30 40 50 60 70 80\n# then your code should display 20 40 60 80.\n#\n# Hints:\n#   - use the seq function to create a vector of even numbers.\n#     2 4 6 ... The vector should have as many numbers in it\n#     as 1/2 the length of nums. For example, if nums contains\n#     10 20 30 40 50 60 70 80 then the vector of even numbers\n#     should contain 2 4 6 8\n#\n#   - use the vector of even numbers between the [brackets]\n#     used to retrive specific positions from the nums\n#     vector\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# Setup some sample data\nnums = c(10,20,30,40,50,60,70,80)\n\n# One answer - in two lines\nevenPositions = seq(2,length(nums),2)\nnums[evenPositions]   \n\n[1] 20 40 60 80\n\n# Another answer - all in one line\nnums[seq(2,length(nums),2)]\n\n[1] 20 40 60 80\n\n\n\n\n\n\n# Question 14.\n#\n# Display all values from the vector nums EXCEPT for the\n# 2nd and 5th values. nums can contain any values.\n# For example if nums contains 10 20 30 40 50 60\n# then your code should display the numbers 10 30 40 60\n# Hints: \n#   - use a negative indexes between the [brackets], i.e. -2\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# Setup some sample data\nnums = c(10,20,30,40,50,60)\n\n# One answer\nnums[c(-2,-5)]\n\n[1] 10 30 40 60\n\n# Another answer, use the negation operator (i.e. minus sign) \n# to change the values to negatives\nnums[- c(2,5)]\n\n[1] 10 30 40 60\n\n\n\n\n\n# Question 15. \n#\n# Display all values from the vector nums EXCEPT for the\n# 3rd, 6th, 9th, etc values.\n#\n# For example if nums contains 10 20 30 40 50 60 70 80 90 100\n# then your code should display 1st, 2nd, 4th, 5th, 7th, 8th and 10th values\n# i.e. the numbers 10 20 40 50 70 80 100\n#\n# Hints:\n#   - write code to create a vector that contains the numbers 3 6 9 ... etc\n#     The last number of this vector should not be larger than \n#     the number of values in nums.\n#\n#   - negate those values to get -3 -6 -9 ... etc\n#\n#   - use that vector between the [brackets] next to nums to get\n#     all values from nums except the numbers in the specified positions.\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# Setup some sample data\nnums = seq(from=10, to=100, by=10)\nnums \n\n [1]  10  20  30  40  50  60  70  80  90 100\n\n# One answer, use one - sign before the call to seq\nnums[ - seq(3,length(nums), by=3) ]\n\n[1]  10  20  40  50  70  80 100\n\n# Another answer, use negative from to and by arguments to seq\nnums[ seq(-3,-length(nums), by=-3) ]\n\n[1]  10  20  40  50  70  80 100\n\n\n\n\n\n# Question 16. \n#\n# Create a vector named \"rainbow\" that contains the names of colors of the \n# rainbow - i.e. red orange yellow green blue indigo violet.\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n\n# One answer - with \"double quotes\"\nrainbow = c(\"red\",\"orange\",\"yellow\",\"green\",\"blue\",\"indigo\",\"violet\")\nrainbow\n\n[1] \"red\"    \"orange\" \"yellow\" \"green\"  \"blue\"   \"indigo\" \"violet\"\n\n# Another answer - with 'single quotes' (i.e. apostrophes)\nrainbow = c('red','orange','yellow','green','blue','indigo','violet')\n\n# Note that even though we defined the variable with 'single quotes'\n# it gets displayed by R with \"double quotes\" (see the output)\nrainbow\n\n[1] \"red\"    \"orange\" \"yellow\" \"green\"  \"blue\"   \"indigo\" \"violet\"\n\n\n\n\n\n# Question 17.\n#\n# (a) Create a vector that contains the following two sentences. \n#     Store the vector in a variable named sentences. \n#     When you are done, the command :  length(sentences) \n#     should return the number 2.\n#\n#     Sue said \"Hi\" to Joe.\n#     What's up with you?\n#\n# (b) Dispaly the sentences to the screen so that they appear exactly \n#     as shown above.\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#################.\n# ONE ANSWER \n#################.\n\n# answer to part (a) - using backslashes\nsentences = c(\"Sue said \\\"Hi\\\" to Joe.\", \"What's up with you?\")\nsentences\n\n[1] \"Sue said \\\"Hi\\\" to Joe.\" \"What's up with you?\"    \n\nlength(sentences)\n\n[1] 2\n\n# answer to part (b) \ncat(sentences, sep=\"\\n\")\n\nSue said \"Hi\" to Joe.\nWhat's up with you?\n\n#################.\n# ANOTHER ANSWER\n#################.\n\n# answer to part (a) - no backslashes necessary\nsentences = c('Sue said \"Hi\" to Joe.', \"What's up with you?\")\nsentences\n\n[1] \"Sue said \\\"Hi\\\" to Joe.\" \"What's up with you?\"    \n\nlength(sentences)\n\n[1] 2\n\n# answer to part (b) - same as previous answer\ncat(sentences, sep=\"\\n\")\n\nSue said \"Hi\" to Joe.\nWhat's up with you?\n\n\n\n\n\n\n# Question 18.\n#\n# Create a vector with the powers of 3 from 1 to 10. \n# This should get you ten numbers:\n#    3 9 27 81 243 729 2187 6561 19683 59049\n#\n# Then create a vector with the products 30*1 30*2 ... 30*10\n# This should get you ten numbers:\n#    30 60 90 120 150 180 210 240 270 300\n#\n# Compare the first list of numbers to the second list of \n# numbers with the greater than sign. This should get the\n# following logical vector \n# FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n# (i.e. 4 FALSE values followed by 6 TRUE values)\n#\n# Explain in your own words why the result is\n#    FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#############.\n# ANSWER \n#############.\n3^(1:10) &gt; 30*(1:10)\n\n [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\n# The result will be comprised of TRUE/FALSE values since the \n# \"greater than\" operator i.e. &gt; results in TRUE/FALSE values. \n#\n# There will be 10 values in the result since each of the numeric vectors\n# in the command has 10 values. \n#\n# The result is FALSE wherever the 1st vector\n# i.e. 3 9 27 81 243 729 2187 6561 19683 59049\n# is not greater than the corresponding value in the 2nd vector\n# i.e. 30 60 90 120 150 180 210 240 270 300\n# The result is TRUE for every other position.\n\n\n\n\n\n# Question 19.\n# TOPICS: character vectors, nchar, rep, recycling rule between arguments of a single function\n#\n# charvec is a character vector.\n# Write a command that repeats each value in charvec by as many characters \n# that are in that value. See the example below.\n#\n# EXAMPLE:\n#\n#    &gt; charvec = c(\"a\", \"bc\", \"def\")\n#    &gt; YOUR CODE GOES HERE\n#    [1] \"a\"   \"bc\"  \"bc\"  \"def\" \"def\" \"def\"\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\n# setup some sample data\ncharvec = c(\"a\", \"bc\", \"def\")\n\n# answer\nrep(charvec, nchar(charvec))\n\n[1] \"a\"   \"bc\"  \"bc\"  \"def\" \"def\" \"def\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Practice Questions - TOPIC: Vectors1</span>"
    ]
  },
  {
    "objectID": "99900-qstns-10-vectors-v035-ANSWERS.html",
    "href": "99900-qstns-10-vectors-v035-ANSWERS.html",
    "title": "37  Practice Questions - TOPIC: Vectors2",
    "section": "",
    "text": "37.1 Vectors",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Practice Questions - TOPIC: Vectors2</span>"
    ]
  },
  {
    "objectID": "99900-qstns-10-vectors-v035-ANSWERS.html#vectors",
    "href": "99900-qstns-10-vectors-v035-ANSWERS.html#vectors",
    "title": "37  Practice Questions - TOPIC: Vectors2",
    "section": "",
    "text": "QUESTION 1 (vectors, rep/seq/:/etc)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION:\n#\n# Write an R command that displays all the even numbers between 100 and 1000 (including 100 and 1000) \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nseq(100,1000,by=2)  #&lt;&lt;ANSWER&gt;&gt;\n\n  [1]  100  102  104  106  108  110  112  114  116  118  120  122  124  126  128\n [16]  130  132  134  136  138  140  142  144  146  148  150  152  154  156  158\n [31]  160  162  164  166  168  170  172  174  176  178  180  182  184  186  188\n [46]  190  192  194  196  198  200  202  204  206  208  210  212  214  216  218\n [61]  220  222  224  226  228  230  232  234  236  238  240  242  244  246  248\n [76]  250  252  254  256  258  260  262  264  266  268  270  272  274  276  278\n [91]  280  282  284  286  288  290  292  294  296  298  300  302  304  306  308\n[106]  310  312  314  316  318  320  322  324  326  328  330  332  334  336  338\n[121]  340  342  344  346  348  350  352  354  356  358  360  362  364  366  368\n[136]  370  372  374  376  378  380  382  384  386  388  390  392  394  396  398\n[151]  400  402  404  406  408  410  412  414  416  418  420  422  424  426  428\n[166]  430  432  434  436  438  440  442  444  446  448  450  452  454  456  458\n[181]  460  462  464  466  468  470  472  474  476  478  480  482  484  486  488\n[196]  490  492  494  496  498  500  502  504  506  508  510  512  514  516  518\n[211]  520  522  524  526  528  530  532  534  536  538  540  542  544  546  548\n[226]  550  552  554  556  558  560  562  564  566  568  570  572  574  576  578\n[241]  580  582  584  586  588  590  592  594  596  598  600  602  604  606  608\n[256]  610  612  614  616  618  620  622  624  626  628  630  632  634  636  638\n[271]  640  642  644  646  648  650  652  654  656  658  660  662  664  666  668\n[286]  670  672  674  676  678  680  682  684  686  688  690  692  694  696  698\n[301]  700  702  704  706  708  710  712  714  716  718  720  722  724  726  728\n[316]  730  732  734  736  738  740  742  744  746  748  750  752  754  756  758\n[331]  760  762  764  766  768  770  772  774  776  778  780  782  784  786  788\n[346]  790  792  794  796  798  800  802  804  806  808  810  812  814  816  818\n[361]  820  822  824  826  828  830  832  834  836  838  840  842  844  846  848\n[376]  850  852  854  856  858  860  862  864  866  868  870  872  874  876  878\n[391]  880  882  884  886  888  890  892  894  896  898  900  902  904  906  908\n[406]  910  912  914  916  918  920  922  924  926  928  930  932  934  936  938\n[421]  940  942  944  946  948  950  952  954  956  958  960  962  964  966  968\n[436]  970  972  974  976  978  980  982  984  986  988  990  992  994  996  998\n[451] 1000\n\n\n\n\n\n\n\n\nQUESTION 2 (vectors , rep/seq/:/etc)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION:\n#\n# Write an R command that displays the values:   10, 13, 16, 19, 22, etc. There\n# should be 500 numbers in all.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nseq(10,by=3,length.out=500)  #ANSWER\n\n  [1]   10   13   16   19   22   25   28   31   34   37   40   43   46   49   52\n [16]   55   58   61   64   67   70   73   76   79   82   85   88   91   94   97\n [31]  100  103  106  109  112  115  118  121  124  127  130  133  136  139  142\n [46]  145  148  151  154  157  160  163  166  169  172  175  178  181  184  187\n [61]  190  193  196  199  202  205  208  211  214  217  220  223  226  229  232\n [76]  235  238  241  244  247  250  253  256  259  262  265  268  271  274  277\n [91]  280  283  286  289  292  295  298  301  304  307  310  313  316  319  322\n[106]  325  328  331  334  337  340  343  346  349  352  355  358  361  364  367\n[121]  370  373  376  379  382  385  388  391  394  397  400  403  406  409  412\n[136]  415  418  421  424  427  430  433  436  439  442  445  448  451  454  457\n[151]  460  463  466  469  472  475  478  481  484  487  490  493  496  499  502\n[166]  505  508  511  514  517  520  523  526  529  532  535  538  541  544  547\n[181]  550  553  556  559  562  565  568  571  574  577  580  583  586  589  592\n[196]  595  598  601  604  607  610  613  616  619  622  625  628  631  634  637\n[211]  640  643  646  649  652  655  658  661  664  667  670  673  676  679  682\n[226]  685  688  691  694  697  700  703  706  709  712  715  718  721  724  727\n[241]  730  733  736  739  742  745  748  751  754  757  760  763  766  769  772\n[256]  775  778  781  784  787  790  793  796  799  802  805  808  811  814  817\n[271]  820  823  826  829  832  835  838  841  844  847  850  853  856  859  862\n[286]  865  868  871  874  877  880  883  886  889  892  895  898  901  904  907\n[301]  910  913  916  919  922  925  928  931  934  937  940  943  946  949  952\n[316]  955  958  961  964  967  970  973  976  979  982  985  988  991  994  997\n[331] 1000 1003 1006 1009 1012 1015 1018 1021 1024 1027 1030 1033 1036 1039 1042\n[346] 1045 1048 1051 1054 1057 1060 1063 1066 1069 1072 1075 1078 1081 1084 1087\n[361] 1090 1093 1096 1099 1102 1105 1108 1111 1114 1117 1120 1123 1126 1129 1132\n[376] 1135 1138 1141 1144 1147 1150 1153 1156 1159 1162 1165 1168 1171 1174 1177\n[391] 1180 1183 1186 1189 1192 1195 1198 1201 1204 1207 1210 1213 1216 1219 1222\n[406] 1225 1228 1231 1234 1237 1240 1243 1246 1249 1252 1255 1258 1261 1264 1267\n[421] 1270 1273 1276 1279 1282 1285 1288 1291 1294 1297 1300 1303 1306 1309 1312\n[436] 1315 1318 1321 1324 1327 1330 1333 1336 1339 1342 1345 1348 1351 1354 1357\n[451] 1360 1363 1366 1369 1372 1375 1378 1381 1384 1387 1390 1393 1396 1399 1402\n[466] 1405 1408 1411 1414 1417 1420 1423 1426 1429 1432 1435 1438 1441 1444 1447\n[481] 1450 1453 1456 1459 1462 1465 1468 1471 1474 1477 1480 1483 1486 1489 1492\n[496] 1495 1498 1501 1504 1507\n\n\n\n\n\n\n\n\nQUESTION 3. (vectors , rep/seq/:/etc)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION\n#\n# Write an R command that displays alternating values of positive and\n# negatives of 1,2,3 ie.:  1,2,3,-1,-2,-3,1,2,3,-1,-2,-3,1,2,3 ... etc.\n# There should be a total of 60 numbers in all.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nrep(c(1:3,-1:-3),length.out=60)   # ANSWER\n\n [1]  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1\n[26]  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2\n[51]  3 -1 -2 -3  1  2  3 -1 -2 -3\n\nrep(c(1,2,3,-1,-2,-3),length.out=60)   # ANOTHER ANSWER\n\n [1]  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1\n[26]  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2  3 -1 -2 -3  1  2\n[51]  3 -1 -2 -3  1  2  3 -1 -2 -3\n\n\n\n\n\n\n\n\nQUESTION 4. (vectors , recycling)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 4    TOPICS: vectors , recycling  ####\n# \n# Write an R command that displays all the powers of 2 from \n# 2 to the power of minus 20 (i.e. -20) until\n# 2 to the power of positive 20 (i.e. +20)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n-20:20      # this gives the numbers -20 -19 -18 ... -2 -1 0 1 2 ... 18 19 20\n\n [1] -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2\n[20]  -1   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n[39]  18  19  20\n\n2^(-20:20)  # ANSWER\n\n [1] 9.536743e-07 1.907349e-06 3.814697e-06 7.629395e-06 1.525879e-05\n [6] 3.051758e-05 6.103516e-05 1.220703e-04 2.441406e-04 4.882812e-04\n[11] 9.765625e-04 1.953125e-03 3.906250e-03 7.812500e-03 1.562500e-02\n[16] 3.125000e-02 6.250000e-02 1.250000e-01 2.500000e-01 5.000000e-01\n[21] 1.000000e+00 2.000000e+00 4.000000e+00 8.000000e+00 1.600000e+01\n[26] 3.200000e+01 6.400000e+01 1.280000e+02 2.560000e+02 5.120000e+02\n[31] 1.024000e+03 2.048000e+03 4.096000e+03 8.192000e+03 1.638400e+04\n[36] 3.276800e+04 6.553600e+04 1.310720e+05 2.621440e+05 5.242880e+05\n[41] 1.048576e+06\n\n2^-20:20    # NOTE: This is WRONG because order of operations makes this work like (2^-20):20\n\n [1] 9.536743e-07 1.000001e+00 2.000001e+00 3.000001e+00 4.000001e+00\n [6] 5.000001e+00 6.000001e+00 7.000001e+00 8.000001e+00 9.000001e+00\n[11] 1.000000e+01 1.100000e+01 1.200000e+01 1.300000e+01 1.400000e+01\n[16] 1.500000e+01 1.600000e+01 1.700000e+01 1.800000e+01 1.900000e+01\n\n\n\n\n\n\n\n\nQUESTION 5 (vectors , indexingWithLogicalValues)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION \n#\n# Write an R command that displays every entry in the vector x whose value is 10 or more.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(3,10,11,2,-5,100,21)  # setup some example data\nx\n\n[1]   3  10  11   2  -5 100  21\n\nx &gt;= 10       # This gives TRUE/FALSE values - there will be one \n\n[1] FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE\n\n              # TRUE or FALSE for each value in x. Given the data above,\n              # this will be: c(FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,TRUE)\n\nx[x&gt;=10]      # ANSWER - The first \"x\" outside the [brackets] is the vector\n\n[1]  10  11 100  21\n\n              #          whose values are going to be displayed. The \n              #          \"x&gt;=10\" inside the [brackets] is used to generate\n              #          a logical vector (i.e. TRUE/FALSE values) to indicate\n              #          which values will be displayed. Only those values\n              #          from x whose positions correspond to a TRUE value\n              #          in the logical vector, will be displayed. Given the\n              #          sample data above, the 2nd, 3rd, 5th and 7th values\n              #          will be displayed, i.e. 10,11,100,21\n\n\n\n\n\n\n\nQUESTION 6 TOPICS: vectors , indexingWithLogicalValues\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 6    TOPICS: vectors , indexingWithLogicalValues ####\n#\n# x and y are two numeric vectors whose lengths are equal.\n# Show every value from the vector, x, that is less than the corresponding value in the vector y\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(3,10,11,2,-5,100,21)  # setup some example data \ny &lt;- c(10,1,11,15,5,9,999)   # setup some example data\nlength(x)\n\n[1] 7\n\nlength(y)\n\n[1] 7\n\nx &lt; y         # This gives TRUE/FALSE values - there will be one \n\n[1]  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE\n\n              # TRUE or FALSE for each value in x. Given the data above,\n              # this will be: c(FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,TRUE)\n\nx[x&lt;y]     # ANSWER\n\n[1]  3  2 -5 21\n\ny[x&lt;y]     # FYI - this wasn't asked but these are the corresponding\n\n[1]  10  15   5 999\n\n           # values from y that are greater than those in x\n\n\n\n\n\n\n\nQUESTION 7 TOPICS: vectors , round , runif , RHelpPages\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 7    TOPICS: vectors , round , runif , RHelpPages  ####\n#\n# SOME BACKGROUND - runif function\n#\n#     The runif function returns a numeric vector that contains \"random numbers\n#     with a uniform distribution\". The R help page for runif shows that the\n#     arguments and default values for those arguments are:\n#         runif(n, min=0, max=1)     \n#     where\n#         n is the number of numbers to generate\n#         min is the smallest value that a number could have\n#         max is the largest value that a number could have. \n#\n#     EXAMPLES: \n#  \n#     &gt; # return a vector of 3 random numbers whose values fall between 0 and 10\n#     &gt; runif(3,0,10)   \n#     [1] 3.785233 9.672244 2.857430\n# \n#     &gt; # return a vector of 10 random numbers whose values fall between -5 and +5\n#     &gt; runif(10,-5,5)\n#     [1] -1.84032071  4.28685602  2.59656498 -1.09880205 -3.90202237 -1.89618831  3.37193245\n#     [8]  0.08757248 -1.10848900 -1.90661883\n# \n#     &gt; # return a vector of 5 random numbers. The min and max are not specified so \n#     &gt; # use the default values of min (ie. 0) and max (i.e. 1)\n#     &gt; runif(5)\n#     [1] 0.4098594 0.8771700 0.5610475 0.8928674 0.4863841 \n#\n#   WHAT YOU HAVE TO DO:\n#\n#     Generate 10 random numbers that are between 50 and 51. The numbers should have\n#     2 values after the decimal point. (HINT: use the   runif   and the   round\n#     functions). Note that every time you run this command the actual numbers will\n#     be different.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nrunif(10,50,51)                  # generate 10 random numbers between 50 and 51\n\n [1] 50.57660 50.49521 50.07277 50.23558 50.95212 50.94293 50.66618 50.45062\n [9] 50.04120 50.23597\n\nround(runif(10,50,51),digits=2)  # ANSWER \n\n [1] 50.57 50.94 50.35 50.23 50.69 50.64 50.95 50.70 50.82 50.79\n\n\n\n\n\n\n\n\nQUESTION 8 TOPICS: vectors , c\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 8    TOPICS: vectors , c ####\n#\n# Insert the number 5 in the beginning of the vector named x.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(7,8,2,1)  # start with some data for x (this could be ANY data)\nx &lt;- c(5,x)      # ANSWER -  x is now c(5,7,8,2,1)\nx             \n\n[1] 5 7 8 2 1\n\nx[1] &lt;- 5    # WRONG: This will change the first position to 5\n# given the example data above the 7 will be overwritten with the 5\n# and x will be c(5,8,2,1)\n\n\n\n\n\n\n\nQUESTION 9 TOPICS: vectors , c , length\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 9   TOPICS: vectors , c , length  ####\n#\n# Insert the number 6 at the end of the vector named x.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# ONE WAY\nx &lt;- c(7,8,2,1)    # setup some example data\nx &lt;- c(x,6)    # ANSWER\nx\n\n[1] 7 8 2 1 6\n\n# ANOTHER WAY\nx &lt;- c(7,8,2,1)    # setup some example data\nx[length(x)+1] = 6   # ANOTHER ANSWER\nx\n\n[1] 7 8 2 1 6\n\n\n\n\n\n\n\n\nQUESTION 10 TOPICS: vectors , c , indexingWithNumbers\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 10   TOPICS: vectors , c , indexingWithNumbers\n#\n# x is a vector that contains 11 or more values.\n# Insert the number 7 between the 10th and 11th values in the vector named x.\n#\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- seq(10,100,by=10)    # setup some example data - x is now:\nx &lt;- seq(10,150,by=10)    # setup some example data - x is now:\n#   c(10,20,30,40,50,60,70,80,90,100,110,120,130,140,150)\nx\n\n [1]  10  20  30  40  50  60  70  80  90 100 110 120 130 140 150\n\nx &lt;- c(x[1:10],7,x[11:length(x)])  # ANSWER \nx\n\n [1]  10  20  30  40  50  60  70  80  90 100   7 110 120 130 140 150\n\n#   x is now :\n#   c(10,20,30,40,50,60,70,80,90,100,7,110,120,130,140,150)\n#\n#   The \"length(x)\" is necessary so that this answer\n#   will work no matter how many values the vector, x, contains.\n#   the data above was just and example, but the command should \n#   now matter what values x contains. \n\nx\n\n [1]  10  20  30  40  50  60  70  80  90 100   7 110 120 130 140 150\n\n\n\n\n\n\n\n\nQUESTION 11 TOPICS: vectors , c , indexingWithNumbers\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 11   TOPICS: vectors , c , indexingWithNumbers ####\n#\n# The vector x contains 10 values. Swap the first 5 and \n#     the last 5 values in x. For example, if x contains the \n#     values 1,2,3,4,5,6,7,8,9,10  then after your command runs, \n#     x should contain the values 6,7,8,9,10,1,2,3,4,5\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- seq(10,100,by=10) # setup example data x contains c(10,20,30,40,50,60,70,80,90,100)\n\nx\n\n [1]  10  20  30  40  50  60  70  80  90 100\n\nx &lt;- c(x[6:10],x[1:5]) # ANSWER -  x now contains c(60,70,80,90,100,10,20,30,40,50)\nx\n\n [1]  60  70  80  90 100  10  20  30  40  50\n\n\n\n\n\n\n\n\nQUESTION 12 TOPICS: namedVectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 12   TOPICS: namedVectors ####\n#\n# Grades is a named vector that contains test scores.\n#     The names of the entries are the names of the students.\n#     Exchange the value of Tom's grade with Joe's grade where\n#     \"tom\" and \"joe\" are the names of the values that contain\n#     the grades for Tom and Joe.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ngrades &lt;- c(90,80,70,100,85)                        # setup some example data: set the values in the vector\nnames(grades) &lt;- c(\"sue\",\"tom\",\"bill\",\"ann\",\"joe\")  # setup some example data: set the names of the values\nnames(grades)                                       # this displays just the names: \"sue\",\"tom\",etc.\n\n[1] \"sue\"  \"tom\"  \"bill\" \"ann\"  \"joe\" \n\ngrades                                              # this displays the values:  90,80,70,100,85\n\n sue  tom bill  ann  joe \n  90   80   70  100   85 \n\ngrades[c(\"tom\",\"joe\")]                              # this displays tom's grade and joe's grade: 80  85\n\ntom joe \n 80  85 \n\ngrades[c(\"joe\",\"tom\")]                              # this displays joe's grade and tom's grade: 85  80\n\njoe tom \n 85  80 \n\ngrades[c(\"tom\",\"joe\")] &lt;- grades[c(\"joe\",\"tom\")]  # ANSWER: this puts the value of \n# Joe's grade into the position for Tom's grade and\n# Tom's grade into the position for Joe's grade.\ngrades                                              # show the new vector\n\n sue  tom bill  ann  joe \n  90   85   70  100   80 \n\n\n\n\n\n\n\n\nQUESTION 13 TOPICS: namedVectors , indexingWithLogicalValues\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 13   TOPICS: namedVectors , indexingWithLogicalValues ####\n#\n# Grades is a named vector that contains test scores. The names \n# of the entries are the names of the students. Change susan's name to sue\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ngrades &lt;- c(90,80,70,100,85)\nnames(grades) &lt;- c(\"susan\",\"tom\",\"bill\",\"ann\",\"joe\")\ngrades\n\nsusan   tom  bill   ann   joe \n   90    80    70   100    85 \n\nnames(grades)==\"susan\"   # Shows TRUE/FALSE values\n\n[1]  TRUE FALSE FALSE FALSE FALSE\n\nnames(grades) [ names(grades)==\"susan\" ]  # identify item in the names vector that contains susan\n\n[1] \"susan\"\n\n# The following line is the ONLY line that is required for the answer.\n# The code puts the value \"sue\" into the position of the vector, names(grades)\n# that currently contains the value \"susan\"\n\nnames(grades) [ names(grades)==\"susan\" ] &lt;- \"sue\"       # ANSWER \n\ngrades\n\n sue  tom bill  ann  joe \n  90   80   70  100   85 \n\n\n\n\n\n\n\n\nQUESTION 14 TOPICS: vectors , indexingWithNumbers , vectorAssignment\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 14   TOPICS: vectors , indexingWithNumbers , vectorAssignment ####\n#\n# Exchange the 4th and 7th value in the vector nums.\n#\n#      a.  Do this using 3 different commands. Hint, you may create new variables. \n#          (Hint, you may create new variables. For example, I'll start you off:\n#              fourth &lt;- x[4]\n#              seventh &lt;- x[7]\n#              # fill in the rest of the R code to answer the question.\n#\n#      b. Do this using only a single R command\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#14a\nnums &lt;- seq(10,100,by=10)\nx &lt;- nums[7]        # ANSWER (MULTIPLE LINES)\nnums[7] &lt;- nums[4]  # ANSWER (MULTIPLE LINES)\nnums[4] &lt;- x        # ANSWER (MULTIPLE LINES)\nnums\n\n [1]  10  20  30  70  50  60  40  80  90 100\n\n#14b\nnums &lt;- seq(10,100,by=10)\nnums[c(4,7)] &lt;- nums[c(7,4)]   # ANSWER\nnums\n\n [1]  10  20  30  70  50  60  40  80  90 100\n\n\n\n\n\n\n\n\nQUESTION 15 TOPICS: vectors , indexingWithNumbers , length\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 15   TOPICS: vectors , indexingWithNumbers , length\n#\n# Display the last value from the vector x.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(10,20,30,40,50)\nx[length(x)]    # ANSWER\n\n[1] 50\n\n\n\n\n\n\n\n\nQUESTION 16 TOPICS: vectors , indexingWithNumbers , length\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 16   TOPICS: vectors , indexingWithNumbers , length\n#\n# Display the 2nd to last value in x.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(10,20,30,40,50)\nx[length(x)-1]          # ANSWER\n\n[1] 40\n\n\n\n\n\n\n\n\nQUESTION 17 TOPICS: vectors , indexingWithNumbers , mean , orderOfOperations\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 17   TOPICS: vectors , indexingWithNumbers , mean , orderOfOperations ####\n#\n# Display the average of the last 5 values in x.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(1,5,2,3,1,20,4,10,6,50)\nmean(x[(length(x)-4):length(x)])   # ANSWER\n\n[1] 18\n\n# Note, in the answer above, notice the parentheses around (length(x)-4).\n# These parentheses are REQUIRED due to order of operations. Without the parentheses\n# the command, length(x)-4:length(x) would actually be interpreted by R as \n# length(x)-(4:length(x)) which would give the WRONG result. For more information, \n# see the \"recipe\" about \"order of operations in R\" in the \"R Cookbook\" published by O'Reilly\n\n\n\n\n\n\n\nQUESTION 18a TOPICS: vectors , vectorArithmetic\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 18a\n# TOPICS: vectors, vectorArithmetic, seqColon, indexingWithLogicalValues, length, sciNotation, Inf\n#\n# Inf is used for \"Infinity\"\n# \n# R can only work with numbers up to a certain size. Any value that is more\n# than the maximum is returned as Inf (which stands for Infinity).\n#\n# Example:\n#\n# SCIENTIFIC NOTATION\n#\n# By default R displays very large and very small numbers using a mathematical\n# notation called \"scientific notation\". \"Scientific notation\" is just a\n# fancy way of writing very large and very small numbers using very little\n# typing.\n#\n# To understand \"scientific notation\", let's start with a simple example.\n# 1e+3 is the scientific notation way to write the number 1000.\n# 1e+3 can be understood as 1*10^3 (as explained in the next paragraph)\n#\n# People who are not familiar with scientific notation might read\n# \"1e+3\" as \"one e plus 3\". However, that is NOT the right way to read it.\n# Instead, whenever you see \"e\" in scientific notation, read it as though\n# instead of \"e\" it said \"... times 10 to the power of ...\", so \"1e+3\" should\n# be read as \"one times 10 to the power of positive 3\"\n# i.e., \"1e+3\" is the same as 1*10^3. \n# ( By the way, the letter \"e\" is used because, \"e\" is short for \"exponent\". )\n#\n# In a similar way, 2.3e+12 is the scientific notation way of writing the\n# number 2300000000000 which is the same as \"2.3 times 10 to the power of 12\"\n# i.e. 2.3*10^12\n#\n# To see that R \"understands\" scientific notation, just type 1e+3 into R.\n# Because 1e+3 is the same as 1000, R just displays 1000. For example:\n#\n#   &gt; 1e+3      # this is scientific notation for 1000.\n#   [1] 1000\n#\n# By default if a number is small enough then R displays it in it's \"regular\"\n# form (i.e. NOT in scientific notation). However, if a number is very large or\n# extremely small, then R displays the number in scientific notation:\n#\n#   &gt; # \"regular numbers\" get displayed normally\n#   &gt; 1000      \n#   [1] 1000\n#\n#   &gt; # very large numbers get displayed in scientific notation (with a positive exponent)\n#   &gt; 1000000000000  \n#   [1] 1e+12\n#\n#   &gt; # extremely small numbers get displayed in scientific notation (with a negative exponent)\n#   &gt; 0.0000000000001   \n#   [1] 1e-13\n#\n# -----------------------------------------------------------------------------\n# Write code that answers the following question:\n#\n#    What is the highest power of 4 that is less than one million?\n#\n# Your code should produce the answer 9. \n#\n# The answer is 9 since 4^9=262,144 which is less than 1 million\n# but 4^10=1,048,576 is more than one million.\n# \n# Write R code to calculate this answer (i.e. 9) automatically.\n# Your code should work for any base that is between 2 and 1000 (because 1000 is the\n# square root of one million), not only for a base of 4. For example, if instead of\n# the number 4, your code used the variable \"n\", your code should print the\n# highest power of \"n\" that is less than one million. You may write the answer\n# using several lines of R code. \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nn &lt;- 4               # ANSWER (MULTIPLE LINES)\nn2 &lt;- n^(1:1000)     # ANSWER (MULTIPLE LINES)\nn2\n\n   [1]  4.000000e+00  1.600000e+01  6.400000e+01  2.560000e+02  1.024000e+03\n   [6]  4.096000e+03  1.638400e+04  6.553600e+04  2.621440e+05  1.048576e+06\n  [11]  4.194304e+06  1.677722e+07  6.710886e+07  2.684355e+08  1.073742e+09\n  [16]  4.294967e+09  1.717987e+10  6.871948e+10  2.748779e+11  1.099512e+12\n  [21]  4.398047e+12  1.759219e+13  7.036874e+13  2.814750e+14  1.125900e+15\n  [26]  4.503600e+15  1.801440e+16  7.205759e+16  2.882304e+17  1.152922e+18\n  [31]  4.611686e+18  1.844674e+19  7.378698e+19  2.951479e+20  1.180592e+21\n  [36]  4.722366e+21  1.888947e+22  7.555786e+22  3.022315e+23  1.208926e+24\n  [41]  4.835703e+24  1.934281e+25  7.737125e+25  3.094850e+26  1.237940e+27\n  [46]  4.951760e+27  1.980704e+28  7.922816e+28  3.169127e+29  1.267651e+30\n  [51]  5.070602e+30  2.028241e+31  8.112964e+31  3.245186e+32  1.298074e+33\n  [56]  5.192297e+33  2.076919e+34  8.307675e+34  3.323070e+35  1.329228e+36\n  [61]  5.316912e+36  2.126765e+37  8.507059e+37  3.402824e+38  1.361129e+39\n  [66]  5.444518e+39  2.177807e+40  8.711229e+40  3.484491e+41  1.393797e+42\n  [71]  5.575186e+42  2.230075e+43  8.920298e+43  3.568119e+44  1.427248e+45\n  [76]  5.708991e+45  2.283596e+46  9.134385e+46  3.653754e+47  1.461502e+48\n  [81]  5.846007e+48  2.338403e+49  9.353610e+49  3.741444e+50  1.496578e+51\n  [86]  5.986311e+51  2.394524e+52  9.578097e+52  3.831239e+53  1.532496e+54\n  [91]  6.129982e+54  2.451993e+55  9.807971e+55  3.923189e+56  1.569275e+57\n  [96]  6.277102e+57  2.510841e+58  1.004336e+59  4.017345e+59  1.606938e+60\n [101]  6.427752e+60  2.571101e+61  1.028440e+62  4.113761e+62  1.645505e+63\n [106]  6.582018e+63  2.632807e+64  1.053123e+65  4.212492e+65  1.684997e+66\n [111]  6.739987e+66  2.695995e+67  1.078398e+68  4.313591e+68  1.725437e+69\n [116]  6.901746e+69  2.760699e+70  1.104279e+71  4.417118e+71  1.766847e+72\n [121]  7.067388e+72  2.826955e+73  1.130782e+74  4.523128e+74  1.809251e+75\n [126]  7.237006e+75  2.894802e+76  1.157921e+77  4.631684e+77  1.852673e+78\n [131]  7.410694e+78  2.964277e+79  1.185711e+80  4.742844e+80  1.897138e+81\n [136]  7.588550e+81  3.035420e+82  1.214168e+83  4.856672e+83  1.942669e+84\n [141]  7.770676e+84  3.108270e+85  1.243308e+86  4.973232e+86  1.989293e+87\n [146]  7.957172e+87  3.182869e+88  1.273147e+89  5.092590e+89  2.037036e+90\n [151]  8.148144e+90  3.259258e+91  1.303703e+92  5.214812e+92  2.085925e+93\n [156]  8.343699e+93  3.337480e+94  1.334992e+95  5.339968e+95  2.135987e+96\n [161]  8.543948e+96  3.417579e+97  1.367032e+98  5.468127e+98  2.187251e+99\n [166]  8.749003e+99 3.499601e+100 1.399840e+101 5.599362e+101 2.239745e+102\n [171] 8.958979e+102 3.583592e+103 1.433437e+104 5.733747e+104 2.293499e+105\n [176] 9.173994e+105 3.669598e+106 1.467839e+107 5.871356e+107 2.348543e+108\n [181] 9.394170e+108 3.757668e+109 1.503067e+110 6.012269e+110 2.404908e+111\n [186] 9.619630e+111 3.847852e+112 1.539141e+113 6.156563e+113 2.462625e+114\n [191] 9.850502e+114 3.940201e+115 1.576080e+116 6.304321e+116 2.521728e+117\n [196] 1.008691e+118 4.034765e+118 1.613906e+119 6.455625e+119 2.582250e+120\n [201] 1.032900e+121 4.131600e+121 1.652640e+122 6.610560e+122 2.644224e+123\n [206] 1.057690e+124 4.230758e+124 1.692303e+125 6.769213e+125 2.707685e+126\n [211] 1.083074e+127 4.332296e+127 1.732919e+128 6.931674e+128 2.772670e+129\n [216] 1.109068e+130 4.436272e+130 1.774509e+131 7.098034e+131 2.839214e+132\n [221] 1.135686e+133 4.542742e+133 1.817097e+134 7.268387e+134 2.907355e+135\n [226] 1.162942e+136 4.651768e+136 1.860707e+137 7.442829e+137 2.977131e+138\n [231] 1.190853e+139 4.763410e+139 1.905364e+140 7.621456e+140 3.048583e+141\n [236] 1.219433e+142 4.877732e+142 1.951093e+143 7.804371e+143 3.121749e+144\n [241] 1.248699e+145 4.994798e+145 1.997919e+146 7.991676e+146 3.196671e+147\n [246] 1.278668e+148 5.114673e+148 2.045869e+149 8.183477e+149 3.273391e+150\n [251] 1.309356e+151 5.237425e+151 2.094970e+152 8.379880e+152 3.351952e+153\n [256] 1.340781e+154 5.363123e+154 2.145249e+155 8.580997e+155 3.432399e+156\n [261] 1.372960e+157 5.491838e+157 2.196735e+158 8.786941e+158 3.514776e+159\n [266] 1.405911e+160 5.623642e+160 2.249457e+161 8.997828e+161 3.599131e+162\n [271] 1.439652e+163 5.758610e+163 2.303444e+164 9.213775e+164 3.685510e+165\n [276] 1.474204e+166 5.896816e+166 2.358727e+167 9.434906e+167 3.773962e+168\n [281] 1.509585e+169 6.038340e+169 2.415336e+170 9.661344e+170 3.864538e+171\n [286] 1.545815e+172 6.183260e+172 2.473304e+173 9.893216e+173 3.957286e+174\n [291] 1.582915e+175 6.331658e+175 2.532663e+176 1.013065e+177 4.052261e+177\n [296] 1.620905e+178 6.483618e+178 2.593447e+179 1.037379e+180 4.149516e+180\n [301] 1.659806e+181 6.639225e+181 2.655690e+182 1.062276e+183 4.249104e+183\n [306] 1.699642e+184 6.798566e+184 2.719427e+185 1.087771e+186 4.351082e+186\n [311] 1.740433e+187 6.961732e+187 2.784693e+188 1.113877e+189 4.455508e+189\n [316] 1.782203e+190 7.128813e+190 2.851525e+191 1.140610e+192 4.562441e+192\n [321] 1.824976e+193 7.299905e+193 2.919962e+194 1.167985e+195 4.671939e+195\n [326] 1.868776e+196 7.475103e+196 2.990041e+197 1.196016e+198 4.784066e+198\n [331] 1.913626e+199 7.654505e+199 3.061802e+200 1.224721e+201 4.898883e+201\n [336] 1.959553e+202 7.838213e+202 3.135285e+203 1.254114e+204 5.016457e+204\n [341] 2.006583e+205 8.026330e+205 3.210532e+206 1.284213e+207 5.136851e+207\n [346] 2.054741e+208 8.218962e+208 3.287585e+209 1.315034e+210 5.260136e+210\n [351] 2.104054e+211 8.416217e+211 3.366487e+212 1.346595e+213 5.386379e+213\n [356] 2.154552e+214 8.618207e+214 3.447283e+215 1.378913e+216 5.515652e+216\n [361] 2.206261e+217 8.825044e+217 3.530017e+218 1.412007e+219 5.648028e+219\n [366] 2.259211e+220 9.036845e+220 3.614738e+221 1.445895e+222 5.783581e+222\n [371] 2.313432e+223 9.253729e+223 3.701492e+224 1.480597e+225 5.922387e+225\n [376] 2.368955e+226 9.475818e+226 3.790327e+227 1.516131e+228 6.064524e+228\n [381] 2.425810e+229 9.703238e+229 3.881295e+230 1.552518e+231 6.210072e+231\n [386] 2.484029e+232 9.936116e+232 3.974446e+233 1.589779e+234 6.359114e+234\n [391] 2.543646e+235 1.017458e+236 4.069833e+236 1.627933e+237 6.511733e+237\n [396] 2.604693e+238 1.041877e+239 4.167509e+239 1.667004e+240 6.668014e+240\n [401] 2.667206e+241 1.066882e+242 4.267529e+242 1.707012e+243 6.828047e+243\n [406] 2.731219e+244 1.092487e+245 4.369950e+245 1.747980e+246 6.991920e+246\n [411] 2.796768e+247 1.118707e+248 4.474829e+248 1.789931e+249 7.159726e+249\n [416] 2.863890e+250 1.145556e+251 4.582225e+251 1.832890e+252 7.331559e+252\n [421] 2.932624e+253 1.173050e+254 4.692198e+254 1.876879e+255 7.507517e+255\n [426] 3.003007e+256 1.201203e+257 4.804811e+257 1.921924e+258 7.687697e+258\n [431] 3.075079e+259 1.230032e+260 4.920126e+260 1.968050e+261 7.872202e+261\n [436] 3.148881e+262 1.259552e+263 5.038209e+263 2.015284e+264 8.061135e+264\n [441] 3.224454e+265 1.289782e+266 5.159126e+266 2.063651e+267 8.254602e+267\n [446] 3.301841e+268 1.320736e+269 5.282945e+269 2.113178e+270 8.452712e+270\n [451] 3.381085e+271 1.352434e+272 5.409736e+272 2.163894e+273 8.655578e+273\n [456] 3.462231e+274 1.384892e+275 5.539570e+275 2.215828e+276 8.863311e+276\n [461] 3.545325e+277 1.418130e+278 5.672519e+278 2.269008e+279 9.076031e+279\n [466] 3.630412e+280 1.452165e+281 5.808660e+281 2.323464e+282 9.293856e+282\n [471] 3.717542e+283 1.487017e+284 5.948068e+284 2.379227e+285 9.516908e+285\n [476] 3.806763e+286 1.522705e+287 6.090821e+287 2.436329e+288 9.745314e+288\n [481] 3.898126e+289 1.559250e+290 6.237001e+290 2.494800e+291 9.979202e+291\n [486] 3.991681e+292 1.596672e+293 6.386689e+293 2.554676e+294 1.021870e+295\n [491] 4.087481e+295 1.634992e+296 6.539970e+296 2.615988e+297 1.046395e+298\n [496] 4.185580e+298 1.674232e+299 6.696929e+299 2.678772e+300 1.071509e+301\n [501] 4.286034e+301 1.714414e+302 6.857655e+302 2.743062e+303 1.097225e+304\n [506] 4.388899e+304 1.755560e+305 7.022239e+305 2.808896e+306 1.123558e+307\n [511] 4.494233e+307           Inf           Inf           Inf           Inf\n [516]           Inf           Inf           Inf           Inf           Inf\n [521]           Inf           Inf           Inf           Inf           Inf\n [526]           Inf           Inf           Inf           Inf           Inf\n [531]           Inf           Inf           Inf           Inf           Inf\n [536]           Inf           Inf           Inf           Inf           Inf\n [541]           Inf           Inf           Inf           Inf           Inf\n [546]           Inf           Inf           Inf           Inf           Inf\n [551]           Inf           Inf           Inf           Inf           Inf\n [556]           Inf           Inf           Inf           Inf           Inf\n [561]           Inf           Inf           Inf           Inf           Inf\n [566]           Inf           Inf           Inf           Inf           Inf\n [571]           Inf           Inf           Inf           Inf           Inf\n [576]           Inf           Inf           Inf           Inf           Inf\n [581]           Inf           Inf           Inf           Inf           Inf\n [586]           Inf           Inf           Inf           Inf           Inf\n [591]           Inf           Inf           Inf           Inf           Inf\n [596]           Inf           Inf           Inf           Inf           Inf\n [601]           Inf           Inf           Inf           Inf           Inf\n [606]           Inf           Inf           Inf           Inf           Inf\n [611]           Inf           Inf           Inf           Inf           Inf\n [616]           Inf           Inf           Inf           Inf           Inf\n [621]           Inf           Inf           Inf           Inf           Inf\n [626]           Inf           Inf           Inf           Inf           Inf\n [631]           Inf           Inf           Inf           Inf           Inf\n [636]           Inf           Inf           Inf           Inf           Inf\n [641]           Inf           Inf           Inf           Inf           Inf\n [646]           Inf           Inf           Inf           Inf           Inf\n [651]           Inf           Inf           Inf           Inf           Inf\n [656]           Inf           Inf           Inf           Inf           Inf\n [661]           Inf           Inf           Inf           Inf           Inf\n [666]           Inf           Inf           Inf           Inf           Inf\n [671]           Inf           Inf           Inf           Inf           Inf\n [676]           Inf           Inf           Inf           Inf           Inf\n [681]           Inf           Inf           Inf           Inf           Inf\n [686]           Inf           Inf           Inf           Inf           Inf\n [691]           Inf           Inf           Inf           Inf           Inf\n [696]           Inf           Inf           Inf           Inf           Inf\n [701]           Inf           Inf           Inf           Inf           Inf\n [706]           Inf           Inf           Inf           Inf           Inf\n [711]           Inf           Inf           Inf           Inf           Inf\n [716]           Inf           Inf           Inf           Inf           Inf\n [721]           Inf           Inf           Inf           Inf           Inf\n [726]           Inf           Inf           Inf           Inf           Inf\n [731]           Inf           Inf           Inf           Inf           Inf\n [736]           Inf           Inf           Inf           Inf           Inf\n [741]           Inf           Inf           Inf           Inf           Inf\n [746]           Inf           Inf           Inf           Inf           Inf\n [751]           Inf           Inf           Inf           Inf           Inf\n [756]           Inf           Inf           Inf           Inf           Inf\n [761]           Inf           Inf           Inf           Inf           Inf\n [766]           Inf           Inf           Inf           Inf           Inf\n [771]           Inf           Inf           Inf           Inf           Inf\n [776]           Inf           Inf           Inf           Inf           Inf\n [781]           Inf           Inf           Inf           Inf           Inf\n [786]           Inf           Inf           Inf           Inf           Inf\n [791]           Inf           Inf           Inf           Inf           Inf\n [796]           Inf           Inf           Inf           Inf           Inf\n [801]           Inf           Inf           Inf           Inf           Inf\n [806]           Inf           Inf           Inf           Inf           Inf\n [811]           Inf           Inf           Inf           Inf           Inf\n [816]           Inf           Inf           Inf           Inf           Inf\n [821]           Inf           Inf           Inf           Inf           Inf\n [826]           Inf           Inf           Inf           Inf           Inf\n [831]           Inf           Inf           Inf           Inf           Inf\n [836]           Inf           Inf           Inf           Inf           Inf\n [841]           Inf           Inf           Inf           Inf           Inf\n [846]           Inf           Inf           Inf           Inf           Inf\n [851]           Inf           Inf           Inf           Inf           Inf\n [856]           Inf           Inf           Inf           Inf           Inf\n [861]           Inf           Inf           Inf           Inf           Inf\n [866]           Inf           Inf           Inf           Inf           Inf\n [871]           Inf           Inf           Inf           Inf           Inf\n [876]           Inf           Inf           Inf           Inf           Inf\n [881]           Inf           Inf           Inf           Inf           Inf\n [886]           Inf           Inf           Inf           Inf           Inf\n [891]           Inf           Inf           Inf           Inf           Inf\n [896]           Inf           Inf           Inf           Inf           Inf\n [901]           Inf           Inf           Inf           Inf           Inf\n [906]           Inf           Inf           Inf           Inf           Inf\n [911]           Inf           Inf           Inf           Inf           Inf\n [916]           Inf           Inf           Inf           Inf           Inf\n [921]           Inf           Inf           Inf           Inf           Inf\n [926]           Inf           Inf           Inf           Inf           Inf\n [931]           Inf           Inf           Inf           Inf           Inf\n [936]           Inf           Inf           Inf           Inf           Inf\n [941]           Inf           Inf           Inf           Inf           Inf\n [946]           Inf           Inf           Inf           Inf           Inf\n [951]           Inf           Inf           Inf           Inf           Inf\n [956]           Inf           Inf           Inf           Inf           Inf\n [961]           Inf           Inf           Inf           Inf           Inf\n [966]           Inf           Inf           Inf           Inf           Inf\n [971]           Inf           Inf           Inf           Inf           Inf\n [976]           Inf           Inf           Inf           Inf           Inf\n [981]           Inf           Inf           Inf           Inf           Inf\n [986]           Inf           Inf           Inf           Inf           Inf\n [991]           Inf           Inf           Inf           Inf           Inf\n [996]           Inf           Inf           Inf           Inf           Inf\n\nn2 &lt; 1000000\n\n   [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n  [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n  [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n  [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n  [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n  [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n  [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n  [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n  [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [169] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [181] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [193] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [205] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [217] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [229] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [241] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [253] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [265] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [277] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [289] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [301] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [313] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [325] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [337] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [349] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [361] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [373] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [385] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [397] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [409] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [421] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [433] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [445] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [457] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [469] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [481] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [493] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [505] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [517] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [529] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [541] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [553] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [565] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [577] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [589] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [601] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [613] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [625] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [637] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [649] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [661] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [673] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [685] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [697] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [709] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [721] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [733] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [745] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [757] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [769] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [781] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [793] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [805] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [817] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [829] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [841] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [853] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [865] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [877] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [889] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [901] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [913] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [925] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [937] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [949] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [961] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [973] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [985] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [997] FALSE FALSE FALSE FALSE\n\nn2 &lt;- n2[n2&lt;1000000] # ANSWER (MULTIPLE LINES)\nn2\n\n[1]      4     16     64    256   1024   4096  16384  65536 262144\n\nlength(n2)           # ANSWER (MULTIPLE LINES) (this will display the number 9)\n\n[1] 9\n\n\n\n\n\n\n\n\nQUESTION 18b TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 18b\n# TOPICS: vectors, vectorArithmetic, seqColon, indexingWithLogicalValues, length\n#\n# Same as previous question, but this time n contains a \"base\" as before and\n# x contains the maximum value (In the previous question this was one million.\n# In this question it can be any number that is contained in x.) The question\n# now is what is the maximum whole-number power that n can be raised to whose\n# result is less than x.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- 200\nn &lt;- 3               # ANSWER (MULTIPLE LINES)\nn2 &lt;- n^(1:sqrt(x))  # ANSWER (MULTIPLE LINES)\nn2 &lt;- n2[n2&lt;x]       # ANSWER (MULTIPLE LINES)\nlength(n2)           # ANSWER (MULTIPLE LINES)\n\n[1] 4\n\n\n\n\n\n\n\n\nQUESTION 19 TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 19\n# TOPICS: vectors, seqColon, indexingWithNumbers, vectorArithmetic\n#\n# nums is a vector that contains 100 numbers. \n#\n# Use nums to create a vector that contains 50 numbers, as described below. \n# The first value should be the sum of the first two numbers from nums. \n# The 2nd value should be the sum of the 3rd and 4th values from nums. \n# For example, if nums contains 1,2,3,4,5,6 ... 99,100, then your answer \n# should contain 3,7,11 ... 199. \n#\n# For example, if nums contains\n#     3,6,2,8,1,-2, ... ninety-one-other-numbers ... 8,5,-5,2\n#\n# then your answer should contain\n#     9,10,-1, ... forty-five-other-numbers ... 13,-3. \n#\n# You may write the answer using several lines of R code.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnums &lt;- 1:100\nfirstThirdFifthEtc &lt;- nums[seq(1,100,by=2)]   # ANSWER (MULTIPLE LINES)\nsecondFourthSixthEtc &lt;- nums[seq(2,100,by=2)]     # ANSWER (MULTIPLE LINES)\nanswer &lt;- firstThirdFifthEtc + secondFourthSixthEtc  # ANSWER (MULTIPLE LINES)\nlength(answer)\n\n[1] 50\n\nfirstThirdFifthEtc\n\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n\nsecondFourthSixthEtc\n\n [1]   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38\n[20]  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76\n[39]  78  80  82  84  86  88  90  92  94  96  98 100\n\nanswer\n\n [1]   3   7  11  15  19  23  27  31  35  39  43  47  51  55  59  63  67  71  75\n[20]  79  83  87  91  95  99 103 107 111 115 119 123 127 131 135 139 143 147 151\n[39] 155 159 163 167 171 175 179 183 187 191 195 199\n\n\n\n\n\n\n\n\nQUESTION 20 TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 20\n# TOPICS: vectors, ==and!=, indexingWithLogicalValues, seqColon\n#\n# x and y are vectors that each contain 5 numbers. \n#\n# PART A:   Show the values from x whose corresponding values in y are the same.\n# PART B:   Show the position numbers that contain the same values in x and in y.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#20a\nx &lt;- c(30,50,-20,10,40) # setup some example data\ny &lt;- c(99,50,-20,88,40) # setup some example data\nx == y                  # This generates a vector that contains five TRUE/FALSE values\n\n[1] FALSE  TRUE  TRUE FALSE  TRUE\n\nx[x==y]                 # ANSWER - \"x==y\" generates a logical vector (i.e. TRUE/FALSE values).\n\n[1]  50 -20  40\n\n#          There will be one TRUE or FALSE value for each pair of values\n#          in x and y. The \"x\" outside of the [brackets] indicates the \n#          vector whose values will be displayed. The values from x\n#          that occupy the same positions as the TRUE values from \"x==y\"\n#          will be displayed. The values from x that occupy the same positions\n#          as the FALSE values from \"x==y\" will NOT be displayed.\n\n\n#20b\nx &lt;- c(30,50,-20,10,40) # setup some example data\ny &lt;- c(99,50,-20,88,40) # setup some example data\n\n(1:length(x))[x==y]     # ANSWER - NOTE: \"x==y\" generates a logical vector (i.e. TRUE/FALSE values).\n\n[1] 2 3 5\n\n#          There will be one TRUE or FALSE value for each pair of values\n#          in x and y.\n# \n#          The code: \"(1:length(x))\" that appears outside the [brackets]\n#          generates a vector whose values are:\n# \n#                   1  2  3  ... etc (up to the length of x).                        # \n#          Given the data above, x contains 5 values. Therefore \n#          the value of (1:length(x))will be:    1  2  3  4  5\n# \n#          The code \"[x==y]\" is used to specify which of the values from the vector\n#          should be displayed. The values from \"(1:length(x))\"\n#          that occupy the same positions as the TRUE values from \"x==y\"\n#          will be displayed. The values from x that occupy the same positions\n#          as the FALSE values from \"x==y\" will NOT be displayed.\n\n\n\n\n\n\n\nQUESTION 21 TOPICS: vectors, sumMean, indexingWithLogicalValues\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 21\n# TOPICS: vectors, sumMean, indexingWithLogicalValues\n#\n# Show all values from the vector x that are greater than the average of the values in x. \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(30,50,-20,10,40)\nmean(x)\n\n[1] 22\n\nx[x &gt; mean(x)]    # ANSWER\n\n[1] 30 50 40\n\n\n\n\n\n\n\n\nQUESTION 22 TOPICS: vectors, sumMean, roundTruncCeilingFloor\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 22\n# TOPICS: vectors, sumMean, roundTruncCeilingFloor\n#\n# The sd() function returns the standard deviation of a vector.\n#    Show all of the numbers in the vector x that are at least 1.5 standard deviations\n#    away from the mean of x. You can show the numbers in any order you like. They do not\n#    have to be in the same order that they appear in the vector x.\n#\n# HINT:  Standard Deviation is a concept that is covered in statistics. If you didn't take\n# stats yet, I can understand why you're confused.  Bottom line, is that sd(c(3,10,76,32,23,31))\n# will return a SINGLE number that is called the \"standard deviation\" of the values\n# 3,10,76,32,23,31. sd(c(3,10,76,32,23,31) is 25.67. The mean of those same values\n# is 29.16.  Therefore, numbers that are at least 1.5 standard deviations away from the mean are \n#    greater than 29.16 + 1.5 * 25.67    = 67.67\n#    or less than 29.16 - 1.5 * 25.67    =  -9.34\n# Therefore, if x contained the numbers shown, then you should only display the number 76 as\n# that is the only number that is outside of the specified range.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- floor(runif(50,1,100))\nx\n\n [1] 73 27 53 93 90 77 86 40  1 55 28 31 42  7 76  7 53 53 74 72 60 30 72 55 50\n[26] 79 35  7 99 39 11 39 80 73 65 81 90 46 47 59 26 98 20  9 14 97 73 96 23 88\n\nsd(x)\n\n[1] 28.86597\n\nmean(x)\n\n[1] 53.98\n\nmean(x) - 1.5 * sd(x)\n\n[1] 10.68104\n\nmean(x) + 1.5 * sd(x)\n\n[1] 97.27896\n\nx[x &lt;= mean(x) - 1.5 * sd(x)]\n\n[1] 1 7 7 7 9\n\nx[x &gt;= mean(x) + 1.5 * sd(x)]\n\n[1] 99 98\n\nc ( x[x &lt;= mean(x) - 1.5 * sd(x)]  ,  x[x &gt;= mean(x) + 1.5 * sd(x)]  )    # ANSWER\n\n[1]  1  7  7  7  9 99 98\n\n\n\n\n\n\n\n\nQUESTION 23 TOPICS: vectors, parallelVectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 23\n# TOPICS: vectors, parallelVectors\n#\n# The following variables are parallel vectors that contain info\n# about 4 different rectangles.\n#\n#   colors  &lt;- c(\"red\",\"blue\",\"green\",\"yellow)\n#   lengths &lt;- c(4,5,6,7)\n#   widths  &lt;- c(5,6,2,4)\n#            \n# In other words:\n#   the 1st rectangle is \"red\",    it's length is 4 and it's width is 5\n#\n#   the 2nd rectangle is \"blue\",   it's length is 5 and it's width is 6\n#\n#   the 3rd rectangle is \"green\",  it's length is 6 and it's width is 2\n#\n#   the 4th rectangle is \"yellow\", it's length is 7 and it's width is 4\n#\n# QUESTIONS:\n#\n#    The actual numbers and colors shown above are just an example.\n#    Your answers must work even if the vectors contain different \n#    numbers and colors and even if the vectors contains fewer or more values.\n#\n#    a. Show the AREAS of all the rectangles.\n#\n#            Given the example data above, \n#            your code should evaluate to: 20  30  12 28\n#\n#    b. Show the COLORS of the rectangles whose areas are at least 25.\n# \n#            Given the example data above, \n#            your code should evaluate to: \"blue\"  \"yellow\"\n#\n#    c. Show the COLORS of the rectangles \n#       whose length is at least 5\n#       or whose width is at least 5.\n#\n#           Given the example data above,\n#           your code should evaluate to: \"red\"  blue\"  \"green\" \"yellow\"\n#\n#    d. Show the COLORS of the rectangles \n#       whose length and width are both at least 5.\n#\n#           Given the example data above,\n#           your code should evaluate to: \"blue\"\n# \n#    e. Show the COLORS of the rectangles whose area is at least 25.\n#\n#           Given the example data above,\n#           your code should evaluate to: \"blue\"  \"yellow\"\n# \n#    f. Show the LENGTHS of the blue rectangles whose area is at least 25\n#\n#           Given the example data above,\n#           your code should evaluate to: 5\n# \n#    g. Show the LENGTHS of the rectangles whose area is at least 25 \n#       and whose color is any one of blue, green or yellow.\n#\n#           Given the example data above,\n#           your code should evaluate to: 5 7\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# 23a.\n\n# setup some sample data as described in the question\nlengths &lt;- c(4,5,6,7)\nwidths &lt;- c(5,6,2,4)\ncolors &lt;- c(\"red\",\"blue\",\"green\",\"yellow\")\n\nlengths * widths                          # ANSWER\n\n[1] 20 30 12 28\n\n# 23b. \n\n# setup some sample data as described in the question\nlengths &lt;- c(4,5,6,7)\nwidths &lt;- c(5,6,2,4)\ncolors &lt;- c(\"red\",\"blue\",\"green\",\"yellow\")\n\ncolors[(lengths * widths) &gt;= 25]           # ANSWER\n\n[1] \"blue\"   \"yellow\"\n\n# 23c.\n\n# setup some sample data as described in the question\nlengths &lt;- c(4,5,6,7)\nwidths &lt;- c(5,6,2,4)\ncolors &lt;- c(\"red\",\"blue\",\"green\",\"yellow\")\n\ncolors[lengths&gt;=5 | widths&gt;=5]           # ANSWER\n\n[1] \"red\"    \"blue\"   \"green\"  \"yellow\"\n\n# 23d.\n\n# setup some sample data as described in the question\nlengths &lt;- c(4,5,6,7)\nwidths &lt;- c(5,6,2,4)\ncolors &lt;- c(\"red\",\"blue\",\"green\",\"yellow\")\n\ncolors[lengths&gt;=5 & widths&gt;=5]           # ANSWER\n\n[1] \"blue\"\n\n#23e.\n# setup some sample data as described in the question\nlengths &lt;- c(4,5,6,7)\nwidths &lt;- c(5,6,2,4)\ncolors &lt;- c(\"red\",\"blue\",\"green\",\"yellow\")\n\ncolors[lengths*widths&gt;=25]           # ANSWER\n\n[1] \"blue\"   \"yellow\"\n\n# 23f.\n\n# setup some sample data as described in the question\nlengths &lt;- c(4,5,6,7)\nwidths &lt;- c(5,6,2,4)\ncolors &lt;- c(\"red\",\"blue\",\"green\",\"yellow\")\n\nlengths[colors==\"blue\" & lengths*widths&gt;=25]           # ANSWER\n\n[1] 5\n\n# 23g. Show the lengths of the rectangles whose area is at least 25 and whose color\n#       is any one of blue, green or yellow.\n\n# setup some sample data as described in the question\nlengths &lt;- c(4,5,6,7)\nwidths &lt;- c(5,6,2,4)\ncolors &lt;- c(\"red\",\"blue\",\"green\",\"yellow\")\n\n# ONE ANSWER: the parentheses are necessary due to the order of operations of & before |\nlengths[lengths*widths&gt;=25 & (colors==\"blue\" | colors==\"green\" | colors==\"yellow\") ]    # ANSWER\n\n[1] 5 7\n\n# ANOTHER ANSWER: this uses the %in% operator\nlengths[lengths*widths&gt;=25 & colors %in% c(\"blue\",\"green\",\"yellow\") ]    # ANOTHER ANSWER\n\n[1] 5 7\n\n\n\n\n\n\n\n\nQUESTION 24 TOPICS: vectors, parallelVectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 24\n# TOPICS: vectors, parallelVectors\n#\n# The vector \"roomDimensions\" is used to store the lengths, widths and\n# heights of several rooms in the following format:\n# lengthRoom1,widthRoom1,heightRoom1,lengthRoom2,widthRoom2,heightRoom2, etc. \n#\n# FOR EXAMPLE, the following code :\n#\n#         &gt; roomDimensions &lt;- c(10,4,10,11,5,9,12,5,10.5,8,5,9.5)\n#\n# represents information about four different rooms with the following dimensions. \n#\n#          first room:  length is 10, width is 4, height is 10\n#          second room: length is 11, width is 5  height is 9\n#          third room: length is 12, width is 5, height is 10.5\n#          fourth room: length is 8,  width is 5, height is 9.5\n#\n# Different numbers may be assigned to roomDimensions, but the structure is as \n# described above. \n#\n#    ANSWER PARTS a,b,c,d,e SHOWN BELOW\n#      The answer to (a) should display:   4\n#      The answer to (b) should display:   11  5  9\n#      The answer to (c) should display:   40  55  60  40\n#      The answer to (d) should display:   2  3\n#      The answer to (e) should display:   9  10\n# \n#      NOTE that your code for (a),(b),(c),(d) and (e)  should work no\n#      matter what values are placed in the variable, roomDimensions\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\nQUESTION 24a (see the intro to question 24 above) # TOPICS: vectors, length\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 24a (see the intro to question 24 above)\n# TOPICS: vectors, length\n#\n# Write R code to display how many \"rooms\" are represented in the vector,\n# i.e. 1/3 of the number of values in the vector.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# set the roomDimensions vector to some sample data as described in the question\n#\n#   The first  room is 10ft long, 4ft wide, 10ft tall (ie. the first three numbers in the vector)\n#   The second room is 11ft long, 5ft wide, 12ft tall (ie. the next three numbers in the vector)\n#   The third  room is 10ft long, 4ft wide, 10ft tall (ie. the next three numbers in the vector)\n#   The fourth room is 11ft long, 5ft wide, 12ft tall (ie. the next three numbers in the vector)\nroomDimensions &lt;- c(10,4,10,11,5,9,12,5,10.5,8,5,9.5)\n\n# The number of rooms is 1/3 the number of numbers (since each room is described with 3  numbers)\nlength(roomDimensions) / 3   # ANSWER\n\n[1] 4\n\n\n\n\n\n\n\n\nQUESTION 24b (see the intro to question 24 above) TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 24b (see the intro to question 24 above)\n# TOPICS: vectors\n#\n#    Write R code to display the length, width and height of the nth room \n#    where n is a variable that contains a number. For example, if \"n\" contains \n#    the number 4 then your code should display the 3 numbers that represent the \n#    length, width and height of the 4th room.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# setup some sample data (see the question above)\nroomDimensions &lt;- c(10,  4,  10,  11,  5,  9,  12,  5,  10.5,  8,  5,  9.5)\n\nn &lt;- 4    # This is the number of the room we want (i.e. 1 for 1st room, 2 for 2nd room, etc)\n\n# Display the dimensions for just the nth room\n#\n# To explain the following answer, it helps to think of a particular example.\n# Suppose we were trying to get the dimensions for the 4th room ...\n# ... keep in mind, that the first number for the 4th room appears right after the last number for the 3rd room.\n# ... since there are 3 numbers for each room there are 9 numbers before the first number for the 4th room.\n# ... i.e. there are 3*3 = 9 numbers for the first 3 rooms so the 4th room starts at position 10.\n# ... to generalize, the first number for the nth room starts at (n-1)*3+1. In the example I just mentioned\n# ... n is 4, so (n-1) is 3, so (n-1)*3 is 9 so the first number for the 4th room starts at position\n# ... (n-1)*3+1 which is position 10.\n\n\nroomDimensions[c(10,11,12)]\n\n[1] 8.0 5.0 9.5\n\nn=4\nroomDimensions[c(10,11,n*3)]\n\n[1] 8.0 5.0 9.5\n\nroomDimensions[ c( (n-1)*3+1 , (n-1)*3+2 , (n-1)*3+3 ) ] # ANSWER\n\n[1] 8.0 5.0 9.5\n\n# Another way to think of this problem is that the last number for the 4th room is\n# at position 4*3 i.e. the 12th number. Since each room as 3 numbers, the first number\n# for the 4th room is at position 4*3-1 and the second number for the 4th room is at position 4*3-2.\n# Therefore the 3 numbers for the 4th room are at positions 4*3-2 (i.e. 10) , 4*3-1 (i.e. 11) and 4*3 (i.e. 12)\n# To generalize, the 3 numbers for the nth room are at positions n*3-2 , n*3-1 and n*3 \n\nroomDimensions[ c(n*3-2, n*3-1, n*3) ]                   # ANOTHER ANSWER\n\n[1] 8.0 5.0 9.5\n\n\n\n\n\n\n\n\nQUESTION 24c (see the intro to question 24 above) # TOPICS: vectors, parallelVectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 24c (see the intro to question 24 above)\n# TOPICS: vectors, parallelVectors\n#\n# Write R code to display the number of square feet of floor space in each room.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# setup some sample data (see the question above)\nroomDimensions &lt;- c(10,4,10,11,5,9,12,5,10.5,8,5,9.5)        \n\n# Get a vector with just the lengths of each room (i.e. 10,11,12,8)\nlengths &lt;- roomDimensions[ seq(1,length(roomDimensions),by=3) ] # ANSWER (MULTIPLE LINES)   10 11 12 8\nlengths\n\n[1] 10 11 12  8\n\n# Get a vector with just the widths of each room (i.e. 4,5,5,5)\nwidths &lt;- roomDimensions[ seq(2,length(roomDimensions),by=3)  ] # ANSWER (MULTIPLE LINES) 4 5 5 5\nwidths\n\n[1] 4 5 5 5\n\n# multiply the lengths and widths to get the square feet of floor space\nlengths * widths                                                # ANSWER (MULTIPLE LINES) 40 55 60 40\n\n[1] 40 55 60 40\n\n\n\n\n\n\n\n\nQUESTION 24d (see the intro to question 24 above) TOPICS: vectors, parallelVectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 24d (see the intro to question 24 above)\n# TOPICS: vectors, parallelVectors\n#\n# Write R code to display the room numbers of those rooms that have \n# at least 50 square feet of floor space.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# setup some sample data (see the question)\nroomDimensions &lt;- c(10,4,10,11,5,9,12,5,10.5,8,5,9.5)        \n\n# extract just the lengths into a new vector (10 11 9 10.5)\nlengths &lt;- roomDimensions[ seq(1,length(roomDimensions),by=3) ] # ANSWER (MULTIPLE LINES) 10 11 9 10.5\nlengths\n\n[1] 10 11 12  8\n\n# extract just the widths into a new vector (4 5 5 5)\nwidths &lt;- roomDimensions[ seq(2,length(roomDimensions),by=3) ]  # ANSWER (MULTIPLE LINES) 4 5 5 5\nwidths\n\n[1] 4 5 5 5\n\n# create a vector with the room numbers, i.e. 1 2 3 4\nroomNumbers &lt;- 1:(length(roomDimensions)/3)                     # ANSWER (MULTIPLE LINES) 1 2 3 4\nroomNumbers\n\n[1] 1 2 3 4\n\n# display the room numbers for those rooms whose length*width is at least 50\nroomNumbers[lengths * widths &gt;= 50]                             # ANSWER (MULTIPLE LINES)  2 3\n\n[1] 2 3\n\n\n\n\n\n\n\n\nQUESTION 24e (see the intro to question 24 above) TOPICS: vectors, parallelVectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 24e (see the intro to question 24 above)\n# TOPICS: vectors, parallelVectors\n#\n# Write R code to display the heights of those rooms that have \n# at least 50 square feet of floor space.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n######################.\n# ONE POSSIBLE ANSWER\n######################.\n# setup some sample data (see the question)\nroomDimensions &lt;- c(10,4,10,11,5,9,12,5,10.5,8,5,9.5)        \n\n# extract just the lengths into a new vector (10 11 9 10.5)\nlengths &lt;- roomDimensions[ seq(1,length(roomDimensions),by=3) ] # ANSWER (MULTIPLE LINES) 10 11 9 10.5\nlengths\n\n[1] 10 11 12  8\n\n# extract just the widths into a new vector (4 5 5 5)\nwidths &lt;- roomDimensions[ seq(2,length(roomDimensions),by=3) ]  # ANSWER (MULTIPLE LINES) 4 5 5 5\nwidths\n\n[1] 4 5 5 5\n\n# extract just the heights into a new vector (10 9 10.5 9.5)\nheights &lt;- roomDimensions[ seq(3,length(roomDimensions),by=3) ] # ANSWER (MULTIPLE LINES)\nheights\n\n[1] 10.0  9.0 10.5  9.5\n\n# get the heights for just the rooms whose area is at least 50 (final answer)\nheights[lengths * widths &gt;= 50]                                # FINAL ANSWER (MULTIPLE LINES)  9 10\n\n[1]  9.0 10.5\n\n###########################.\n# ANOTHER POSSIBLE ANSWER\n###########################.\n\n# setup some sample data (see the question)\nroomDimensions &lt;- c(10,4,10,11,5,9,12,5,10.5,8,5,9.5)        \n\n# extract just the lengths into a new vector (10 11 9 10.5)\nlengths &lt;- roomDimensions[ seq(1,length(roomDimensions),by=3) ] # ANSWER (MULTIPLE LINES) 10 11 9 10.5\nlengths\n\n[1] 10 11 12  8\n\n# extract just the widths into a new vector (4 5 5 5)\nwidths &lt;- roomDimensions[ seq(2,length(roomDimensions),by=3) ]  # ANSWER (MULTIPLE LINES) 4 5 5 5\nwidths\n\n[1] 4 5 5 5\n\n# extract just the heights into a new vector (10 9 10.5 9.5)\nheights &lt;- roomDimensions[ seq(3,length(roomDimensions),by=3) ] # ANSWER (MULTIPLE LINES)\nheights\n\n[1] 10.0  9.0 10.5  9.5\n\n# create a vector with the room numbers, i.e. 1 2 3 4\nroomNumbers &lt;- 1:(length(roomDimensions)/3)                     # ANSWER (MULTIPLE LINES) 1 2 3 4 \nroomNumbers\n\n[1] 1 2 3 4\n\n# find the room numbers for the rooms that have at least 50sq feet of floor space \ndesiredRooms &lt;- roomNumbers[lengths * widths &gt;= 50]             # ANSWER (MULTIPLE LINES)  2 3 \ndesiredRooms\n\n[1] 2 3\n\n# get the heights for just those rooms (final answer)\nheights[desiredRooms]                                           # FINAL ANSWER (MULTIPLE LINES)  9 10\n\n[1]  9.0 10.5\n\n\n\n\n\n\n\n\n\nQUESTION 25 # TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 25\n# TOPICS: vectors\n#\n# Display the sum of the squares of the numbers in the vector nums.\n# For example, if nums contains the values 4 2 and 5 then your command should\n# display the number 45, (i.e. 16 + 4 + 25)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnums &lt;- c(4,2,5)\nsum(nums^2)        # ANSWER\n\n[1] 45\n\n\n\n\n\n\n\n\nQUESTION 26 TOPICS: vectors, indexingWithLogicalValues, vectorAssignment\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 26\n# TOPICS: vectors, indexingWithLogicalValues, vectorAssignment\n#\n# Grades is a vector that contains grades on a test. \n# Modify the vector, grades, by adding 5 points to all grades that are below 60.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ngrades &lt;- c(53,70,49,60,90)\ngrades[grades &lt; 60] &lt;- grades[grades &lt; 60] + 5   # ANSWER\ngrades\n\n[1] 58 70 54 60 90\n\n\n\n\n\n\n\n\nQUESTION 27 TOPICS: vectors, indexingWithNumbers\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 27\n# TOPICS: vectors, indexingWithNumbers\n#\n#  Reverse the contents of the vector x. DO NOT USE THE rev FUNCTION. \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- seq(10,50,by=10)\nx\n\n[1] 10 20 30 40 50\n\nx &lt;- x[length(x):1]     # ANSWER\nx\n\n[1] 50 40 30 20 10\n\n\n\n\n\n\n\n\nQUESTION 28 TOPICS: vectors, mean, length, indexingWithLogicalValues\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 28\n# TOPICS: vectors, mean, length, indexingWithLogicalValues\n#\n# grades is a vector that contains grades on a test. Display the number of students \n# whose grade is equal to the average grade. For example, if grades contains\n# c(80,85,85,85,90) then the answer should be 3 since the average is 85 and 3 students\n# received exactly and 85. \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ngrades &lt;- c(80,85,85,85,90)\nmean(grades)\n\n[1] 85\n\nlength( grades[grades == mean(grades)] )  # ANSWER\n\n[1] 3\n\n\n\n\n\n\n\n\nQUESTION 29 TOPICS: vectors, seqOrColon, minMax\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 29\n# TOPICS: vectors, seqOrColon, minMax\n#\n# store in the vector nums a sequence of values from the smallest value in the\n# vector x to the largest value in x. For example if x would contain c(7,8,7,3,5),\n# your code should set the value of nums to the sequence 3 4 5 6 7 8\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(7,10,7,3,5)\nmin(x)\n\n[1] 3\n\nmax(x)\n\n[1] 10\n\nnums &lt;- min(x):max(x)   # ANSWER\nnums\n\n[1]  3  4  5  6  7  8  9 10\n\n\n\n\n\n\n\n\nQUESTION 30 TOPICS: vectors, minMax, c\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 30\n# TOPICS: vectors, minMax, c\n#\n# Write a single command that shows the lowest and the highest values from the\n# vector x. For example if x contains c(20,-5,-2,40,25,-2,18), then your answer\n# should display -5 40\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(20,-5,-2,40,25,-2,18)    # start with some data for x\nc(min(x),max(x))                # ANSWER\n\n[1] -5 40\n\n\n\n\n\n\n\n\nQUESTION 31 TOPICS: vectors, roundTruncCeilingFloor, sqrt, ==and!= , %/%and%%\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 31\n# TOPICS: vectors, roundTruncCeilingFloor, sqrt, ==and!= , %/%and%%\n#\n# Determine if the number stored in n is a \"perfect square\". For example 25 is\n# a \"perfect square\" because 5*5 is 25. Similarly, 49 is a perfect square because\n# 7*7 is 49. However, 50 is NOT a perfect square since its square root is not an integer.\n# Your code should display the value TRUE is n is a perfect square and FALSE if n is\n# not a perfect square. Hint: the sqrt(x) function returns the square root of x.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nn &lt;- 25                   # let's try with a number that IS a perfect square\ntrunc(sqrt(n)) == sqrt(n) # ANSWER    (TRUE)\n\n[1] TRUE\n\nfloor(sqrt(n)) == sqrt(n) # ANOTHER POSSIBLE ANSWER   (TRUE)\n\n[1] TRUE\n\nn%%sqrt(n) == 0           # YET ANOTHER POSSIBLE ANSWER   (TRUE)\n\n[1] TRUE\n\n# ------- CHECK -------\nn &lt;- 30                   # now, just to make sure, let's try with a number that is NOT a perfect square\nsqrt(n)\n\n[1] 5.477226\n\ntrunc(sqrt(n))\n\n[1] 5\n\ntrunc(sqrt(n)) == sqrt(n) # ANSWER   (FALSE)\n\n[1] FALSE\n\nfloor(sqrt(n)) == sqrt(n) # ALTERNATE ANSWER   (FALSE)\n\n[1] FALSE\n\nn%%sqrt(n) == 0           # YET ANOTHER POSSIBLE ANSWER   (FALSE)\n\n[1] FALSE\n\n\n\n\n\n\n\n\nQUESTION 32 TOPICS: vectors, roundTruncCeilingFloor, &|, ==!=\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 32\n# TOPICS: vectors, roundTruncCeilingFloor, &_|, ==_!=\n#\n# Write a command that shows the numbers in the vector nums that are both even\n# and perfect squares. For example, if nums contains c(81, 6, 36, 10, 4, 25)\n# then your answer should display 36  4\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx[sqrt(x)^2 == floor(x)  &  x%%2 == 0]    # ANSWER\n\nWarning in sqrt(x): NaNs produced\n\n\n[1] NA NA\n\n\n\n\n\n\n\n\nQUESTION 33 TOPICS: vectors\n\n############################################################################################################.\n# NOTE: The sort(x) function will return a vector with the values from the vector x in sorted order. \n#       The unique(x) function will return a copy of the vector x with all of the duplicate values removed. \n#       These functions will help you to answer the following questions\n############################################################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 33\n# TOPICS: vectors\n#\n# Write a command that displays the 2nd lowest value in the vector x. If the lowest value appears\n# more than once in the vector, then your code should display that value. For example, if x contains\n# the numbers 7 3 3 7 3 5 20, the function should return the number 3. Even though 3 is the lowest\n# value, it appears more than once, so in that sense, it is the 2nd lowest value.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(7,3,3,7,3,5,20)\nsort(x)\n\n[1]  3  3  3  5  7  7 20\n\nsort(x)[2]            # ANSWER\n\n[1] 3\n\n# The following is just another example. It is NOT a new answer. \nx &lt;- c(7,7,3,5,20) # ANOTHER EXAMPLE\nsort(x)            # \n\n[1]  3  5  7  7 20\n\nsort(x)[2]         # \n\n[1] 5\n\n\n\n\n\n\n\n\nQUESTION 34 TOPICS: vectors\n\n############################################################################################################.\n# NOTE: The sort(x) function will return a vector with the values from the vector x in sorted order. \n#       The unique(x) function will return a copy of the vector x with all of the duplicate values removed. \n#       These functions will help you to answer the following questions\n############################################################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 34\n# TOPICS: vectors\n#\n# Write a command that displays the 2nd lowest value in the vector x. For this question, you\n# should ignore duplicate values. For example, if x contains the numbers 7 3 3 7 3 5 20, the function\n# should return the number 5. Even though 3 appears more than once, 5 is the 2nd lowest value.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# ONE ANSWER\nx &lt;- c(7,3,3,7,3,5,20)\nunique(x)\n\n[1]  7  3  5 20\n\nsort(x)\n\n[1]  3  3  3  5  7  7 20\n\nsort(unique(x))\n\n[1]  3  5  7 20\n\nsort(unique(x))[2]            # ANSWER\n\n[1] 5\n\n# ANOTHER ANSWER\nx &lt;- c(7,3,3,7,3,5,20)\nxWithoutLowestNumber = x[ x != min(x) ]  # ANSWER MULTIPLE LINES\nmin(xWithoutLowestNumber)                # ANSWER MULTIPLE LINES\n\n[1] 5\n\n\n\n\n\n\n\n\nQUESTION 35 TOPICS: vectors\n\n############################################################################################################.\n# NOTE: The sort(x) function will return a vector with the values from the vector x in sorted order. \n#       The unique(x) function will return a copy of the vector x with all of the duplicate values removed. \n#       These functions will help you to answer the following questions\n############################################################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 35\n# TOPICS: vectors\n#\n# Write a command that displays the n lowest values in the vector x where n is\n# a variable that contains a positive integer. The values should be displayed\n# in increasing order.\n#\n# For example if x contains c(67,2,40,5,2,99) and n contains the number 3 then\n# the command should display the numbers 2 2 and 5\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nn &lt;- 3\nx &lt;- c(67,2,40,5,2,99)\nx\n\n[1] 67  2 40  5  2 99\n\nsort(x)\n\n[1]  2  2  5 40 67 99\n\nsort(x)[1:n]            # ANSWER\n\n[1] 2 2 5\n\n\n\n\n\n\n\n\nQUESTION 36 TOPICS: vectors\n\n############################################################################################################.\n# NOTE: The sort(x) function will return a vector with the values from the vector x in sorted order. \n#       The unique(x) function will return a copy of the vector x with all of the duplicate values removed. \n#       These functions will help you to answer the following questions\n############################################################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 36\n# TOPICS: vectors\n#\n# Same as previous question, but the numbers should be in decreasing order. \n# For example, given the values from the previous question, the answer should\n# display 5 2 2. Hint, see the help for the sort command and focus on the\n# \"decreasing\" argument to sort.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nn &lt;- 3\nx &lt;- c(67,2,40,5,2,99)\nx\n\n[1] 67  2 40  5  2 99\n\nsort(x)\n\n[1]  2  2  5 40 67 99\n\nsort(x)[1:n]\n\n[1] 2 2 5\n\nsort(sort(x)[1:n], decreasing=TRUE)   # ANSWER\n\n[1] 5 2 2\n\n# ALTERNATE ANSWER\n\nn &lt;- 3\nx &lt;- c(67,2,40,5,2,99)\nx\n\n[1] 67  2 40  5  2 99\n\nx &lt;- sort(x, decreasing=TRUE)  # ANOTHER ANSWER (MULTIPLE LINES)\nx\n\n[1] 99 67 40  5  2  2\n\n(length(x)-n+1)\n\n[1] 4\n\n(length(x)-n+1):length(x)\n\n[1] 4 5 6\n\nx[(length(x)-n+1):length(x)]   # ANOTHER ANSWER (MULTIPLE LINES)\n\n[1] 5 2 2\n\n\n\n\n\n\n\n\nQUESTION 37 TOPICS: vectors\n\n############################################################################################################.\n# NOTE: The sort(x) function will return a vector with the values from the vector x in sorted order. \n#       The unique(x) function will return a copy of the vector x with all of the duplicate values removed. \n#       These functions will help you to answer the following questions\n############################################################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 37\n# TOPICS: vectors\n#\n# Same as previous question, but the numbers should be displayed in the same order\n# as they appear in the original vector x. Given the same values from the previous\n# question, the answer should display the numbers  2  5  2  in that order. \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nn &lt;- 3\nx &lt;- c(67,2,40,5,2,99)\nsort(x)[n]\n\n[1] 5\n\nx[x &lt;= sort(x)[n]]     # ANSWER\n\n[1] 2 5 2\n\n\n\n\n\n\n\n\nQUESTION 38 TOPICS: vectors\n\n############################################################################################.\n# QUESTION_GROUP:\n#\n# (The next two questions are related to each other. I would have numbered them a,b,etc but \n#  I thought it would be better for each question to have its own number.)\n##########################################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 38\n# TOPICS: vectors\n#\n# x and y each contain a single integer. nums is a vector that contains many numbers. \n# You are told that the value of x is guaranteed to be less than the value of y.\n# Change the vector nums so that it only contains the values that are in the range\n# between x and y (including x and y). For example, if x contains 3, y contains 7 and\n# nums contains c(10,3,2,11,6,4,1) then your code should change the value of nums to a vector\n# containing 3 6 and 4..\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# ONE POSSIBLE ANSWER\n# The following answer is done in two different steps\nx &lt;- 3 # setup some example data\ny &lt;- 7 # setup some example data\nnums &lt;- c(10,3,2,11,6,4,1) # setup some example data\n\nnums &lt;- nums[nums&gt;=x]      # ANSWER (MULTIPLE LINES) - nums will now contain all the values that\n# are greater than or equal to x. Given the example data above, nums,\n# will now contain c(10,3,11,6,4). The 2 and 1 were eliminated from nums.\n\nnums                       # show the new values in nums\n\n[1] 10  3 11  6  4\n\nnums &lt;- nums[nums&lt;=y]      # ANSWER (MULTIPLE LINES) -  nums will now contain only those values \n# that are less than or equal to y. Given the example data above, nums\n# will now contain c(3,6,4). The 10, and 11 were eliminated from nums.\n\nnums                       # show the final value of nums\n\n[1] 3 6 4\n\n# ANOTHER POSSIBLE ANSWER  -  this answer is \"shorter\" and more \"to the point\". However, this answer\n#                             requires the use of the & operator.\nx &lt;- 3   # setup some example data\ny &lt;- 7   # setup some example data\nnums &lt;- c(10,3,2,11,6,4,1)   # setup some example data\n\nnums &gt;= x      # given the example data above, this is a logical vector that contains TRUE for every value\n\n[1]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE\n\n# of nums that is &gt;= x. Since nums contains c(10,3,2,11,6,4,1) and x contains the number 3,\n# the logical vector will be c(TRUE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE)\n\nnums &lt;= y      # given the example data above, this is a logical vector that contains TRUE for every value\n\n[1] FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\n\n# of nums that is &lt;= y. Since nums contains c(10,3,2,11,6,4,1) and y contains the number 7,\n# the logical vector will be c(FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE)\nnums&gt;=x & nums &lt;= y   # This will combine the two logical vectors shown above using the & operator.\n\n[1] FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE\n\n# That will result in a vector where there is a TRUE in the positions that had\n# TRUE for both nums&gt;=x and for num&lt;=y (see above). In other words, the resulting\n# logical vector will contain a TRUE in those positions that correspond to values\n# in nums that are BOTH &gt;=x AND &lt;=y.\n# \n#    as explained above, \"nums &gt;= x\" is:    c(TRUE ,TRUE ,FALSE,TRUE ,TRUE ,TRUE ,FALSE)\n#    as explained above, \"nums &lt;= y\" is:    c(FALSE,TRUE ,TRUE ,FALSE,TRUE ,TRUE ,TRUE)\n# \n# Therefore, \"nums&gt;=x & nums &lt;= y\" is:      c(FALSE,TRUE ,FALSE,FALSE,TRUE ,TRUE ,FALSE)\n\nnums &lt;- nums[nums&gt;=x & nums &lt;= y]  # ANSWER - \"nums &lt;-\" simply means that we are going to replace \n#          the values in \"nums\" with the result of the code from the \n#          right hand side of the arrow.\n#     \n#          The code on the \"Right Hand Side\" (RHS) of the arrow is:\n#          \"nums[nums&gt;=x & nums&lt;=y]\". The first \"nums\" on the RHS of \n#          the arrow indicates that we will be taking values from \"nums\".\n#          the [brackets] that surround the rest of the code indicate \n#          that the code inside the [brackets] will be used to identify\n#          which values from nums we will be \"taking\". As shown above\n#          the code inside the brackets results in a logical vector\n#          that contains a TRUE for each value that we want from nums. \n#          \n#          Given the example data above, this code therefore becomes the \n#          equivalent of: \n#          nums &lt;- nums[c(FALSE,TRUE ,FALSE,FALSE,TRUE ,TRUE ,FALSE)]\n#          \n#          This results in replacing nums with the 2nd 5th and 6th values\n#          from nums (i.e. those positions that contains TRUE). Therefore\n#          since \"nums\" originally contained c(10,3,2,11,6,4,1), the \n#          new value of \"nums\" will be c(3,6,4)\n\n\n\n\n\n\n\nQUESTION 39 TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 39\n# TOPICS: vectors\n#\n# Same as previous question, except for this question the value in x may be less than,\n# greater than or equal to y. Hint: use the sort() function to isolate the smaller\n# of x and y and the larger of x and y. Then proceed similarly to the way you answered\n# the previous question. \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# ONE ANSWER:\n#\n# To understand the answer to this question, you must first understand the answer to the \n# previous question. Please first review the answer to the previous question before continuing.\n#\n# The difference between this question and the previous question is that in the previous \n# question, you were told that the value of the variable \"x\" is a number that is LESS THAN\n# the value in the variable \"y\". For example, in the previous question, it would be possible\n# for x to be 3 and y to be 7 or x to b 2 and y to b 5, but it would NOT be possible for x\n# to be 7 and y to be 3. HOWEVER, in this version of the question, x could be ANY number\n# and y could be ANY number. \n#\n# Therefore when you write the code to find the values in \"nums\" that are between x and y \n# you know that the numbers that you desire are all greater than x and less than y. Therefore\n# in the previous question, you knew that nums&gt;=x needed to be TRUE and nums&lt;=y needed to be TRUE.\n#\n# However, in this question you DON'T know which number is less, x or y. Therefore\n# if x is less than y then the code from the previous question would work. For example,\n# if x is 3 and y is 7 then the expression   5&gt;=3 & 5&lt;=7   would result in a TRUE value.\n#\n# However, if y were less then x (e.g. x is 7 and y is 3) then \"nums&gt;=x & nums&lt;=y\" would\n# result in a FALSE value for EVERY number. For example the number 5 is obviously between\n# x=7 and y=3. However, the expression    5&gt;=7 & 5&lt;=3 would be FALSE.\n#\n# One approach to answer this question is given the values in x and y, to have your code\n# \"figure out\" which value is higher and which is lower. You can store the lower value in a\n# variable named \"lower\" and the higher value in a variable named \"higher\". Then you can simply use \"lower\"\n# value as you used \"x\" in the previous question and use \"higher\" as you used \"y\" in the \n# previous question. This is exactly what is done by the code below …\n\n\nx &lt;- 7   # setup some example data\ny &lt;- 3   # setup some example data\nnums &lt;- c(10,3,2,11,6,4,1)   # setup some example data\n\nsort(c(x,y))                # \"c(x,y)\" is a vector that contains the values of x and y. Given the\n\n[1] 3 7\n\n# example data above, since x is 7 and y is 3, c(x,y) is c(7,3). \n#\n# The \"sort\" function takes a vector and sorts its contents. So\n# sort(c(7,3)) results in the vector c(3,7)\n\nlower &lt;- sort(c(x,y))[1]  # As described above, given the example data above, the code:\n# \"sort(c(x,y))\" will result in the vector c(3,7). The \"[1]\" that\n# appears after \"sort(c(x,y))\" extracts the first value from the \n# sorted vector. Given the data above, the first value of c(3,7) is 3.\n# This number, 3, is then assigned to the variable \"lower\".\nlower\n\n[1] 3\n\nhigher&lt;- sort(c(x,y))[2]  # In a similar way, this code assigns the 2nd value from the sorted vector\n# to the variable \"higher\". Specifically, given the example data, the value\n# 7 will be assigned to the variable \"higher\".\n# \n# Note that if the values in x and y were initially 3 and 7 instead of 7 and 3,\n# we would still get the 3 being assigned to lower and 7 being assigned to higher.\n# Now that we have variables \"lower\" and \"higher\", the answer is exactly\n# the same as the answer to the previous question, except that instead of using\n# x and y in the answer we will use \"lower\" and \"higher\".\nhigher\n\n[1] 7\n\nnums &lt;- nums[nums&gt;=lower]       # ANSWER (MULTIPLE LINES)\nnums\n\n[1] 10  3 11  6  4\n\nnums &lt;- nums[nums&lt;=higher]      # ANSWER (MULTIPLE LINES)\nnums\n\n[1] 3 6 4\n\n# ANOTHER POSSIBLE ANSWER  -  this answer is \"shorter\" and more \"to the point\". However, this answer\n#                             requires the use of the & operator. See the explanation of the answer \n#                             to the previous question for more detail.\nx &lt;- 7\ny &lt;- 3\nlower &lt;- sort(c(x,y))[1]\nhigher&lt;- sort(c(x,y))[2]\nnums &lt;- c(10,3,2,11,6,4,1)\nnums &lt;- nums[nums&gt;=lower & nums &lt;= higher]      # ANSWER\n\n\n\n\n\n\n\nQUESTION 40 TOPICS: vectors\n\n############################################################################################.\n# QUESTION_GROUP:\n#\n# The next few questions are related to each other.\n# I would have numbered them a,b,etc but I thought it would be better\n# for each question to have its own number.\n############################################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 40\n# TOPICS: vectors\n#\n# nums is a vector that contains several numbers. n contains a single positive integer.\n# Write code that \"shifts\" the values in nums over to the right \"n\" times. For example,\n# if nums contains 10 20 30 40 50 60 70 80 90 100 and n is 2 then your command should\n# reset nums to 90 100 10 20 30 40 50 60 70 80. If n were 3, your command should\n# reset nums to 80 90 100 10 20 30 40 50 60 70\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# The following breaks up the answer into several lines so that it is easier to understand.\n# The general idea of the solution below is to figure out which values from the original vector\n# will be moved to the beginning of the vector. \n\nnums &lt;- seq(10,100,by=10)   # setup some example data\nnums\n\n [1]  10  20  30  40  50  60  70  80  90 100\n\nn &lt;- 3                      # setup some example data\npositionOfLastNumber &lt;- length(nums)-n                     #ANSWER (MULTIPLE LINES) - This is the position\n#   of the value from the original vector that \n#   will be in the last position of the answer.\n#   For example if nums is:\n#        c(10,20,30,40,50,60,70,80,90,100)\n#   and n is 3 then the final answer will be\n#        c(80,90,100, 10,20,30,40,50,60,70)\n#   Therefore the 70 which is the last number \n#   in the answer, is in the 7th position in nums.\n\npositionOfLastNumber\n\n[1] 7\n\nnums[positionOfLastNumber]\n\n[1] 70\n\nfirstPiece &lt;- nums[ (positionOfLastNumber+1):length(nums)] #ANSWER (MULTIPLE LINES) - this code captures\n#   the first few numbers in the answer, which\n#   are the last few numbers in nums. These numbers\n#   start at the position after the position we \n#   calculated above and extend until the end of\n#   the nums vector. \n# \n#   For example if nums is:\n#        c(10,20,30,40,50,60,70,80,90,100)\n#   and n is 3 then the final answer will be\n#        c(80,90,100, 10,20,30,40,50,60,70)\n#   Therefore the 70 which is the last number \n#   in the answer, is in the 7th position in nums.\n#   However, the 80 (which is in the 7th+1 postion,\n#   (i.e. the 8th position) in nums will be in the \n#   first position in the final answer. The rest\n#   of the numbers in nums from the 80 through 100\n#   will be in the first few positions of the answer.\n# \n#   We use the variable \"firstPiece\" to capture\n#   those numbers that will be in the first few \n#   positions in the answer.\nfirstPiece\n\n[1]  80  90 100\n\nlastPiece &lt;- nums[1:(positionOfLastNumber)]                #ANSWER (MULTIPLE LINES) -  the last few numbers\n#   in the answer will start from the first positon\n#   in \"nums\" and extend until the postion that we\n#   calculated above. We store those numbers\n#   in the variable, \"lastPiece\".\nlastPiece\n\n[1] 10 20 30 40 50 60 70\n\nnums &lt;- c(firstPiece, lastPiece)                           #ANSWER (MULTIPLE LINES) - at this point we have\n#   the first few numbers for the answer stored in \n#   the variable \"firstPiece\" and the last few\n#   numbers from the answer stored in the variable\n#   \"lastPiece\". All that remains to be done is \n#   to create a new vector with the numbers in that\n#   order and assign the result back to the variable\n#   \"nums\".\nnums          \n\n [1]  80  90 100  10  20  30  40  50  60  70\n\n# Alternatively, you could write the answer in one line\nnums &lt;- seq(10,100,by=10)\nnums\n\n [1]  10  20  30  40  50  60  70  80  90 100\n\nn &lt;- 3\nnums &lt;- c(nums[ (length(nums)-n+1):length(nums)] , nums[1:(length(nums)-n)] )   # ALTERNATIVE ANSWER\nnums          \n\n [1]  80  90 100  10  20  30  40  50  60  70\n\n\n\n\n\n\n\n\nQUESTION 41 TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 41\n# TOPICS: vectors\n#\n# Same as previous question, but the numbers at the end of nums should be\n# removed and the beginning of nums should be filled in with \"n\" zeros. For example,\n# if nums contains 10 20 30 40 50 60 70 80 90 100 and n is 2 then your command should\n# reset nums to 0 0 10 20 30 40 50 60 70 80. If n were 3, your command should\n# reset nums to 0 0 0 10 20 30 40 50 60 70\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnums &lt;- seq(10,100,by=10)\nnums\n\n [1]  10  20  30  40  50  60  70  80  90 100\n\nn &lt;- 3\nnums &lt;- c(rep(0,n) , nums[1:(length(nums)-n)] )  # ANSWER\nnums          \n\n [1]  0  0  0 10 20 30 40 50 60 70\n\n\n\n\n\n\n\n\nQUESTION 42 TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 42\n# TOPICS: vectors\n#\n# Same as above, but replace the numbers at the beginning of nums with 1,2,3,etc.\n# For example, if nums contains 10 20 30 40 50 60 70 80 90 100 and n is 2 then your\n# command should reset nums to 1 2 10 20 30 40 50 60 70 80. If n were 3, your command\n# should reset nums to 1 2 3 10 20 30 40 50 60 70\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnums &lt;- seq(10,100,by=10)\nnums\n\n [1]  10  20  30  40  50  60  70  80  90 100\n\nn &lt;- 3\nnums &lt;- c(1:n , nums[1:(length(nums)-n)] )   # ANSWER\nnums          \n\n [1]  1  2  3 10 20 30 40 50 60 70\n\n\n\n\n\n\n\n\nQUESTION 43 TOPICS: vectors\n\n############################################################################################.\n# QUESTION_GROUP: \n# (The next few questions are related to each other. I would have numbered them a,b,etc but \n#  I thought it would be better for each question to have its own number.)\n############################################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 43\n# TOPICS: vectors\n#\n# The vector nums contains several numbers. Display the values of nums without the\n# smallest numbers. For example, if nums contains c(30,5,20,5,30,15) then your command\n# should display 30 20 30 15(none of the 5's are displayed since 5 is the smallest number).\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnums &lt;- c(30,5,20,5,30,15) \nmin(nums)\n\n[1] 5\n\nnums != min(nums)\n\n[1]  TRUE FALSE  TRUE FALSE  TRUE  TRUE\n\nnums[nums != min(nums)]    # ANSWER\n\n[1] 30 20 30 15\n\nnums[nums &gt; min(nums)]     # ALTERNATIVE ANSWER\n\n[1] 30 20 30 15\n\n\n\n\n\n\n\n\nQUESTION 44 TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 44\n# TOPICS: vectors\n#\n# Same as the previous question, but do not display any of the smallest or the\n# largest numbers. For example, if nums contains c(30,5,20,5,30,15) then your command\n# should display 20 15 (none of the 5's are displayed since 5 is the smallest number and\n# none of the 30's are displayed since 30 is the largest number).\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n##############################################################################################.\n# END_OF_QUESTION_GROUP\n##############################################################################################.\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# The best way to do this is with the \"&\" operator. If you haven't learned the \"&\" operator yet\n# There are alternatives below\nnums &lt;- c(30,5,20,5,30,15) \nnums[nums != min(nums) & nums != max(nums)]   # ANSWER\n\n[1] 20 15\n\nnums[nums &gt; min(nums) & nums &lt; max(nums)]     # ALTERNATIVE ANSWER\n\n[1] 20 15\n\n# This version of the answer does NOT use the & operator, but requires two lines of code.\n# These alternatives use the != (i.e. \"not equal to\") operator\nnums &lt;- c(30,5,20,5,30,15) \ntemp &lt;- nums[nums != min(nums)]  #ANSWER (MULTIPLE LINES)\ntemp[temp != max(nums)]          #ANSWER (MULTIPLE LINES)\n\n[1] 20 15\n\n# This version of the answer does NOT use the & operator, but requires two lines of code.\n# These alternatives use the &gt; and &lt; operators instead of the != operator\nnums &lt;- c(30,5,20,5,30,15) \ntemp &lt;- nums[nums &gt; min(nums)]  #ALTERNATIVE ANSWER (MULTIPLE LINES)\ntemp[temp &lt; max(nums)]          #ALTERNATIVE ANSWER (MULTIPLE LINES)\n\n[1] 20 15\n\n\n\n\n\n\n\n\nQUESTION 45 TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 45\n# TOPICS: vectors\n#\n# x and y are two vectors whose lengths are the same. Merge the contents of\n# vector y into vector x in the following way. If x1,x2,x3,x4,... represent the\n# initial values in x and y1,y2,y3,y4,... represent the values in y, then after\n# your commands run, the values in x should be x1,y1,x2,y2,x3,y3,x4,y4,...\n#\n# For example, if x contains the values 1 2 3 4 and y contains the values 11 22 33 44 \n# then after your code runs the values in x should be 1 11 2 22 3 33 4 44. \n# (You may use more than one command to accomplish this result).\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx &lt;- c(1,2,3,4)\nx\n\n[1] 1 2 3 4\n\ny &lt;- c(11,22,33,44)\ny\n\n[1] 11 22 33 44\n\nseq(1,2*length(x),by=2)\n\n[1] 1 3 5 7\n\nx[seq(1,2*length(x),by=2)] &lt;- x    # ANSWER (MULTIPLE LINES)\n\nx\n\n[1]  1  2  2  4  3 NA  4\n\nseq(2,2*length(y),by=2)\n\n[1] 2 4 6 8\n\nx[seq(2,2*length(y),by=2)] &lt;- y    # ANSWER (MULTIPLE LINES)\nx\n\n[1]  1 11  2 22  3 33  4 44",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Practice Questions - TOPIC: Vectors2</span>"
    ]
  },
  {
    "objectID": "99900-qstns-40-assortedTopics-v035-ANSWERS.html",
    "href": "99900-qstns-40-assortedTopics-v035-ANSWERS.html",
    "title": "38  Practice Questions - TOPIC: Assorted Topics",
    "section": "",
    "text": "38.1 Additional Questions - Assorted Topics",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Practice Questions - TOPIC: Assorted Topics</span>"
    ]
  },
  {
    "objectID": "99900-qstns-40-assortedTopics-v035-ANSWERS.html#additional-questions---assorted-topics",
    "href": "99900-qstns-40-assortedTopics-v035-ANSWERS.html#additional-questions---assorted-topics",
    "title": "38  Practice Questions - TOPIC: Assorted Topics",
    "section": "",
    "text": "QUESTION 73 TOPIC: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 73\n# TOPIC: vectors\n# \n# Show the last 5% of the values in a vector named v.\n# For example \n# - if there are 100 values in v, show the last 5 values\n# - if there are 200 values in v, show the last 10 values\n# - etc.\n# - if there are 43 values in v, 5% of 43 is 2.15 so round up (use ceiling function)\n#   to show 3 last values\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nv = seq(10,1000,by=10)                                    # test data - 100 values\nv [ (length(v) - ceiling(.05*length(v)) + 1):length(v) ]  # ANSWER\n\n[1]  960  970  980  990 1000\n\nv = seq(10,2000,by=10)                                       # test data - 200 values\nv [ (length(v) - ceiling(.05*length(v)) + 1):length(v) ]     # ANSWER (same as above)\n\n [1] 1910 1920 1930 1940 1950 1960 1970 1980 1990 2000\n\nv = seq(10,430,by=10)                                        # test data - 43 values\nv [ (length(v) - ceiling(.05*length(v)) + 1):length(v) ]     # ANSWER (same as above)\n\n[1] 410 420 430\n\n\n\n\n\n\n\n\nQUESTION 74 TOPIC: dataframes\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 74\n# TOPIC: dataframes\n#\n# Show the last 5% of the rows of the data in the dataframe named df.\n# For example \n# - if there are 100 rows, show the last 5 rows\n# - if there are 200 rows, show the last 10 rows\n# - etc.\n# - if there are 43 rows, 5% of 43 is 2.15 so round up (use ceiling function)\n#   to show 3 last rows\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n######################################.\n# Setup some sample data\n######################################.\ndf = data.frame(\n  fruit = \n    c(\"apple\",\"apricot\",\"avocado\",\"banana\",\"bell pepper\",\n      \"bilberry\",\"blackberry\",\"blackcurrant\",\"blood orange\",\n      \"blueberry\",\"boysenberry\",\"breadfruit\",\"canary melon\",\n      \"cantaloupe\",\"cherimoya\",\"cherry\",\"chili pepper\",\n      \"clementine\",\"cloudberry\",\"coconut\",\"cranberry\",\"cucumber\",\"currant\",\n      \"damson\",\"date\",\"dragonfruit\",\"durian\",\"eggplant\",\"elderberry\",\n      \"feijoa\",\"fig\",\"goji berry\",\"gooseberry\",\"grape\",\"grapefruit\",\n      \"guava\",\"honeydew\",\"huckleberry\",\"jackfruit\",\"kiwi fruit\"\n      ),\n  price = round(runif(n=40, min=0.99, max=6.99), 2)\n)\n\n# show the full dataframe\ndf\n\n          fruit price\n1         apple  2.68\n2       apricot  1.76\n3       avocado  1.91\n4        banana  6.90\n5   bell pepper  1.53\n6      bilberry  6.00\n7    blackberry  6.43\n8  blackcurrant  2.72\n9  blood orange  3.61\n10    blueberry  6.04\n11  boysenberry  4.38\n12   breadfruit  5.13\n13 canary melon  6.28\n14   cantaloupe  4.16\n15    cherimoya  5.71\n16       cherry  6.87\n17 chili pepper  3.79\n18   clementine  6.70\n19   cloudberry  5.05\n20      coconut  5.21\n21    cranberry  5.96\n22     cucumber  4.81\n23      currant  4.43\n24       damson  1.41\n25         date  3.93\n26  dragonfruit  5.31\n27       durian  1.62\n28     eggplant  5.68\n29   elderberry  3.35\n30       feijoa  1.23\n31          fig  1.51\n32   goji berry  6.24\n33   gooseberry  4.37\n34        grape  3.24\n35   grapefruit  2.25\n36        guava  4.32\n37     honeydew  3.09\n38  huckleberry  1.37\n39    jackfruit  6.78\n40   kiwi fruit  2.04\n\n# Show just the las 5% of the rows\n\n###############.\n# BEST ANSWER\n###############.\ntail(df, .05 * nrow(df))    # BEST ANSWER\n\n        fruit price\n39  jackfruit  6.78\n40 kiwi fruit  2.04\n\n##############################################################.\n# Another answer - don't forget the last comma (see below)\n##############################################################.\nrowNumbers = 1:nrow(df)\ndf[ rowNumbers &gt; .95*nrow(df) ,  ]\n\n        fruit price\n39  jackfruit  6.78\n40 kiwi fruit  2.04\n\n\n\n\n\n\n\n\nQUESTION 75 TOPIC: user defined functions\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 75\n# TOPIC: user defined functions (creating your own functions)\n#\n# Write a function with the \"signature\", evensBetween = function(x,y). \n# x and y are expected to be numbers (they may be even or odd).\n# The function should return the even numbers between x and y (including x and y)\n# You may assume that the value of x is less than the value of y.\n#\n# For example:\n# &gt; evensBetween(3,9)    \n# [1] 4 6 8\n#\n# &gt; evensBetween(2,10)\n# [1] 2 4 6 8 10\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nevensBetween = function(x,y){\n  numsBetweenXandY = x:y\n  numsBetweenXandY[ numsBetweenXandY %% 2 == 0 ]\n}\n\n# test it:\nevensBetween(3,9)    # 4 6 8\n\n[1] 4 6 8\n\nevensBetween(2,10)   # 2 4 6 8 10\n\n[1]  2  4  6  8 10\n\n\n\n\n\n\n\n\nQUESTION 76 TOPIC: user defined functions\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 76\n# TOPIC: user defined functions\n# SEE ALSO: question 11 for a similar question that doesn't require the creation of a function\n#\n# Create a function with the signature, swapFirstAndLast = function(vec,num).\n# The vector vec is expected to contain at least 2*num values.\n# The function should return a vector that contains the same values as vec except\n# the first \"num\" values in vec should be last and the last \"num\" values in vec should be first\n# (see the examples). \n#\n# Examples:  \n#       &gt; swapFirstAndLast( seq(10,100,by=10), 3)\n#       [1] 80 90 100 40 50 60 70 10 20 30\n#\n#       &gt; swapFirstAndLast( seq(10,100,by=10), 2)\n#       [1] 90 100 30 40 50 60 70 80 10 20\n#\n#       &gt; swapFirstAndLast( c(\"abe\",\"bob\",\"carla\",\"dana\",\"ed\",\"frank\"), 1)\n#       [1] \"frank\"  \"bob\"  \"carla\"  \"dana\"  \"ed\"  \"abe\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nswapFirstAndLast = function(vec , num) {\n  firstPositions = 1:num\n  lastPositions = (length(vec)-num+1):length(vec) \n  middlePositions = (num+1):(length(vec)-num)\n  vec[ c( lastPositions , middlePositions, firstPositions) ]\n}\n\n# Test the answer\nswapFirstAndLast( seq(10,100,by=10), 3)\n\n [1]  80  90 100  40  50  60  70  10  20  30\n\nswapFirstAndLast( seq(10,100,by=10), 2)\n\n [1]  90 100  30  40  50  60  70  80  10  20\n\nswapFirstAndLast( c(\"abe\",\"bob\",\"carla\",\"dana\",\"ed\",\"frank\"), 1)\n\n[1] \"frank\" \"bob\"   \"carla\" \"dana\"  \"ed\"    \"abe\"  \n\n\n\n\n\n\n\n\nQUESTION 77 TOPIC: user defined functions (creating your own functions)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION  77\n# TOPIC: user defined functions (creating your own functions)\n# (see question 11 for a similar question that doesn't require the creation of a function)\n#\n# Define a function with the signature:  collapsevector = function( vec )\n# vec is expected to be a vector with an even number of entries.\n#\n# The function should return a vector that contains \n# the sum of the first two items from vec\n# followed by the sum of the next two items from vec\n# followed by the sum of the next two items from vec\n# etc.\n# \n# Examples:\n#    &gt; collapseVector( c(10,20,30,40,50,60,70,80) )\n#    [1]  30  70  110  150\n# \n#    &gt; collapseVector( c(3,4,10,2,100,3))\n#    [1]  7  12  103\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ncollapseVector = function( nums ){\n  firstThirdFifthEtc &lt;- nums[seq(1,length(nums),by=2)]   # ANSWER (MULTIPLE LINES)\n  secondFourthSixthEtc &lt;- nums[seq(2,length(nums),by=2)]     # ANSWER (MULTIPLE LINES)\n  answer &lt;- firstThirdFifthEtc + secondFourthSixthEtc  # ANSWER (MULTIPLE LINES)\n  answer\n}\n\n# Test the answer\ncollapseVector( c(10,20,30,40,50,60,70,80) )\n\n[1]  30  70 110 150\n\ncollapseVector( c(3,4,10,2,100,3))\n\n[1]   7  12 103\n\n\n\n\n\n\n\n\nQUESTION 78 TOPICS: user defined functions (creating your own functions)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 78\n# TOPICS:  user defined functions (creating your own functions)\n#\n# Define a function with the signature:  get2ndLowest = function( vec )\n# that returns the 2nd lowest value in vec.\n#\n# EXAMPLES:\n# &gt; get2ndLowest(c(423,6,234,3,7,1))\n# [1] 3\n#\n# &gt; get2ndLowest(c(3,9,10,-23,-59,200))\n# [1] -23\n#\n# &gt; get2ndLowest( c(\"grapes\", \"apple\", \"plum\", \"banana\", \"pear\") )\n# [1] \"banana\" \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nget2ndLowest = function( x ){\n  xWithoutLowestNumber = x[ x != min(x) ]\n  answer = min(xWithoutLowestNumber) \n  answer\n}\n\n# Test the answer\nget2ndLowest(c(423,6,234,3,7,1))    # 3 \n\n[1] 3\n\nget2ndLowest(c(3,9,10,-23,-59,200))        # -23\n\n[1] -23\n\nget2ndLowest( c(\"grapes\", \"apple\", \"plum\", \"banana\", \"pear\") )  # \"banana\"\n\n[1] \"banana\"\n\n\n\n\n\n\n\n\nQUESTION 79 TOPICS: vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 79\n# TOPICS: vectors\n#\n# x and y are two vectors of the same length \n# combine x and y into a new vector named answer that contains \n# the odd position values from x and the even position values of y.\n#\n# EXAMPLES\n#    &gt; x = c(10,20,30,40)\n#    &gt; y = c(100, 200, 300, 400)\n#    &gt; # YOUR CODE GOES HERE (it can be a few lines if you like)\n#    &gt; answer\n#   [1] 10 200 30 400\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nx = c(10,20,30,40)\n\ny = c(100, 200, 300, 400)\n\nanswer = x                                                     # ANSWER MULTIPLE LINES  - set answer to x\n\nanswer[ seq(2,length(y), by=2) ] = y [ seq(2,length(y), by=2)] # ANSWER MULTIPLE LINES - set even positions to the even positions from y\n\nanswer # show the result\n\n[1]  10 200  30 400\n\n\n\n\n\n\n\n\nQUESTION 80 TOPICS: lists, loops, user defined functions\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 80\n# TOPICS: lists, loops, user defined functions\n# SEE ALSO: question 72 for a similar question that doesn't use loops\n# \n# Write a function with the following \"signature\":\n#\n# SIGNATURE:  getAllPairs = function (vec)\n#\n# ARGUMENTS/PARAMETERS \n#\n#   vec - a vector that contains 2 or more different values\n#         (you may assume that all values are different from each other)\n#\n# RETURNS: \n#   A list that contains a separate vector for each pair of values\n#   from vec. The list should include separate entries for each order of\n#   the pair of values (see below). Do not insert entries in the \n#   list for which both values are the same.\n#\n# EXAMPLE 1: \n#\n#   &gt; getAllPairs(c(\"apple\", \"orange\"))\n#   [[1]]\n#   [1] \"apple\"  \"orange\"\n#   \n#   [[2]]\n#   [1] \"orange\" \"apple\" \n#\n# EXAMPLE 2: \n#   &gt; getAllPairs(c(\"apple\", \"orange\", \"pear\"))\n#   [[1]]\n#   [1] \"apple\"  \"orange\"\n#   \n#   [[2]]\n#   [1] \"apple\" \"pear\" \n#  \n#   [[3]]\n#   [1] \"orange\" \"apple\" \n#   \n#   [[4]]\n#   [1] \"orange\" \"pear\"  \n#   \n#   [[5]]\n#   [1] \"pear\"  \"apple\"\n#   \n#   [[6]]\n#   [1] \"pear\"   \"orange\"#\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n##########################.\n# ANSWER - with for loops\n##########################.\n\ngetAllPairs = function( vec ){\n  answerList = list()\n\n  for (pos1 in 1:(length(vec) ) ){\n    value1 = vec[pos1]\n    for (pos2 in 1:length(vec) ){\n      value2 = vec[pos2]\n      if(value1 != value2){\n        twoValues = c(value1, value2)\n        answerList = c(answerList , list(twoValues) )    \n      }\n    }\n  }\n  \n  answerList\n}\n\n#-----------.\n# Example 1\n#-----------.\ngetAllPairs(c(\"apple\", \"orange\"))\n\n[[1]]\n[1] \"apple\"  \"orange\"\n\n[[2]]\n[1] \"orange\" \"apple\" \n\n#-----------.\n# Example 2\n#-----------.\ngetAllPairs(c(\"apple\", \"orange\", \"pear\"))\n\n[[1]]\n[1] \"apple\"  \"orange\"\n\n[[2]]\n[1] \"apple\" \"pear\" \n\n[[3]]\n[1] \"orange\" \"apple\" \n\n[[4]]\n[1] \"orange\" \"pear\"  \n\n[[5]]\n[1] \"pear\"  \"apple\"\n\n[[6]]\n[1] \"pear\"   \"orange\"\n\n##########################.\n# ANSWER - with while loops\n##########################.\n\ngetAllPairs = function( vec ){\n  answerList = list()\n\n  pos1 = 1\n  while (pos1 &lt;= length(vec) ){\n    value1 = vec[pos1]\n    \n    pos2 = 1\n    while (pos2 &lt;= length(vec) ){\n      value2 = vec[pos2]\n      \n      if(value1 != value2){\n        twoValues = c(value1, value2)\n        answerList = c(answerList , list(twoValues) )    \n      }\n      \n      pos2 = pos2 + 1\n    }\n    \n    pos1 = pos1 + 1\n  }\n  \n  answerList\n}\n\n#-----------.\n# Example 1\n#-----------.\ngetAllPairs(c(\"apple\", \"orange\"))\n\n[[1]]\n[1] \"apple\"  \"orange\"\n\n[[2]]\n[1] \"orange\" \"apple\" \n\n#-----------.\n# Example 2\n#-----------.\ngetAllPairs(c(\"apple\", \"orange\", \"pear\"))\n\n[[1]]\n[1] \"apple\"  \"orange\"\n\n[[2]]\n[1] \"apple\" \"pear\" \n\n[[3]]\n[1] \"orange\" \"apple\" \n\n[[4]]\n[1] \"orange\" \"pear\"  \n\n[[5]]\n[1] \"pear\"  \"apple\"\n\n[[6]]\n[1] \"pear\"   \"orange\"\n\n\n\n\n\n\n\n\nQUESTION 81 TOPICS: user defined functions, vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 81   TOPICS: user defined functions, vectors\n#\n# Write a function with the following \"signature\":\n#\n# SIGNATURE:  getTopTwoValues = function (vec)\n#\n# ARGUMENTS/PARAMETERS \n#\n#   vec - a vector that contains 2 or more values\n#\n# Returns a vector that contains the two largest\n# values from the vector,vec . The values should \n# be returned IN INCREASING ORDER regardless\n# of the order in the original vector. For example:\n#     &gt; getTopTwoValues(c(1,4,2,5,3))\n#     4  5\n#     &gt; getTopTwoValues(c(1,5,2,4,3))\n#     4  5\n# If the largest value in vec appears more than once\n# then the return value should include that value twice.\n# For example:\n#     &gt; getTopTwoValues(c(1,4,2,4,3,4))\n#     4  4\n#\n# Hints: You can write the function in many different ways. \n# Some functions that might help are: sort, head, tail \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n##############.\n# ONE ANSWER\n##############.\ngetTopTwoValues = function( vec ) {\n  tail( sort(vec), 2)\n}  \n    \n\n# Try it\ngetTopTwoValues(c(1,4,2,5,3))\n\n[1] 4 5\n\ngetTopTwoValues(c(1,5,2,4,3))\n\n[1] 4 5\n\ngetTopTwoValues(c(1,4,2,4,3,4))\n\n[1] 4 4\n\n##################.\n# ANOTHER ANSWER\n##################.\ngetTopTwoValues = function( vec ) {\n  positions = (length(vec) - 1):length(vec)\n  sort(vec) [ positions ]\n}\n# Try it\ngetTopTwoValues(c(1,4,2,5,3))\n\n[1] 4 5\n\ngetTopTwoValues(c(1,5,2,4,3))\n\n[1] 4 5\n\ngetTopTwoValues(c(1,4,2,4,3,4))\n\n[1] 4 4",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Practice Questions - TOPIC: Assorted Topics</span>"
    ]
  },
  {
    "objectID": "99900-qstns-20-dataframes-v035-ANSWERS.html",
    "href": "99900-qstns-20-dataframes-v035-ANSWERS.html",
    "title": "39  Practice Questions - TOPIC: Dataframes",
    "section": "",
    "text": "39.1 Dataframes\n##############################################################################################.\n##############################################################################################.\n##\n##            TOPIC:  DATAFRAMES\n##\n##############################################################################################.\n##############################################################################################.\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 46\n# TOPICS: dataframes\n#\n# Write R code that creates a dataframe that has 2 columns.\n#\n# The first column should contain the even numbers \n# from 2 through 1000, ie. 2,4,6 ... 1000.\n#\n# The 2nd column should contain the odd numbers\n# from 999 counting down to 1, i.e. 999, 997, 995, ... 1\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 47\n# TOPICS: dataframes\n#\n# Write R code that creates a dataframe that contains the following information:\n#  \n# The name of the 1st column should be: \"department\"\n# The values in this column should be: produce, bakery, produce, produce, bakery. \n#\n# The name of the 2nd column should be: \"product\"\n# The values in this column should be: apple, chocolate cake, orange, pear, rye bread. \n#\n# The name of the 3rd column should be: \"price\"\n# The values in this column should be: 1.99 , 1.59, 0.99, 1.99, 4.99.\n#\n# Store the dataframe in a variable named \"prices\".\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 48\n# TOPICS: dataframes\n#\n# Write a command that changes the names of the columns in the dataframe\n# from the previous question. The first column should now be named itemName and\n# the 2nd column should be named pricePerLb. Hint: use the colnames function.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 49\n# TOPICS: dataframes\n#\n# Challenge: Write a command that changes the names of the rows in the\n# \"prices\" dataframe from the previous question. The new names of the rows\n# should be item1, item2 , etc. Write the code so that no matter how many rows\n# the dataframe would contain the names of the rows would follow the same pattern.\n# For example, if the dataframe happened to contain 1000 rows, then after your\n# command executed, they would be named: item1,item2,item3,item4,... item1000\n#\n# Hint: As part of your answer, you will need to use the paste function\n# with sep=\"\" (nothing between the quotes). Note that we did not cover the paste\n# function in class. You should look at the help for the paste function and try a\n# few examples of your own. You can also type the R command example(paste) to\n# automatically run the examples that appear at the end of the help page for the\n# paste function.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 50 (a)\n# TOPICS: dataframes\n#\n# a. Write a command that modifies the dataframe from the previous question.\n#    The command should change the word \"apple\" to \"mcintosh apple\".\n#\n# b. Do this again, but this time DO NOT refer to the actual row number or \n#    column number in your answer. Your answer should work successfully, \n#    no matter what row contains \"apple\". \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 51\n# TOPICS: dataframes\n#\n# Write a command that modifies the dataframe from the previous question.\n# The command should increase the pricePerLb of oranges by 10%. Round the increased\n# price to the nearest penny.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 52\n# TOPICS: dataframes\n#\n# Write a command that modifies the \"prices\" dataframe from the previous question.\n# The command should increase the price of all items by 10%. Round the increased prices\n# to the nearest penny.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 53\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question. Write a command that adds\n# a new column named salePrice. The new column should contain the values from\n# the price column reduced by 25%. Round the prices in the new column to the nearest penny.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 54\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question.\n# Write a command that displays the itemName and price of all items from the\n# produce department. Write the code so that it will continue work even if the\n# specific data in the dataframe changes.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 55\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question.\n# Write a command that displays the itemName and price of all items whose price\n# is 2.00 or more. Write the code so that it will continue work even if the\n# specific data in the dataframe changes.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 56\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question.\n# Write a command that displays all of the columns for all items whose\n# price is 2.00 or more. Write the code so that it will continue work\n# even if the specific data in the dataframe changes.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 57\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question. \n# Write a command that calculates the average pricePerLb of all\n# items in the produce department.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 58\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question. \n# Write a command that displays all of the data from just the odd numbered rows.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 59\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question.\n# Write a command that displays just the name of the items whose\n# pricePerLb is at least 1.00 but not more than 2.00.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 60\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question.\n# Write a command that displays just the name of the items whose\n# pricePerLb is either less than 1.00 or more than 2.00.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 61\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question.\n# Write a command that displays just the name of the produce whose pricePerLb is at\n# least 1.00 but not more than 2.00.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 62\n# TOPICS: dataframes\n#\n# Refer to the dataframe from the previous question.\n# Write a single command that displays \n#      the name of the produce whose pricePerLb is less than 1.00 and also \n#      the produce whose pricePerLb is greater than 2.00\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 63\n# TOPICS: dataframes\n#\n# a. Write a command that displays all of the data for a \"randomly chosen\" row\n#    from the dataframe. Your answer should work even if the data in the dataframe changes.\n#\n#    Hint: as part of your answer, use the nrow function to determine the number of rows\n#    that are in the dataframe.\n#\n# b. Write a command that displays the rows in the reverse order (ie last row first).\n#\n# c. Write a command that displays the rows in the dataframe in a randomly\n#    chosen order.\n#\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 64\n# TOPICS: dataframes\n#\n# Write a command that displays the average pricePerLb of those items\n# whose pricePerLb is at least 1.50\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 65\n# TOPICS: dataframes\n#\n# Write a command that displays the number of items that are listed in\n# the \"produce\" department.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 66\n# TOPICS: dataframes\n#\n# Write a command that displays the number of items that are listed\n# in the \"produce\" department whose pricePerLb is at least 1.50.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Practice Questions - TOPIC: Dataframes</span>"
    ]
  },
  {
    "objectID": "99900-qstns-20-dataframes-v035-ANSWERS.html#dataframes",
    "href": "99900-qstns-20-dataframes-v035-ANSWERS.html#dataframes",
    "title": "39  Practice Questions - TOPIC: Dataframes",
    "section": "",
    "text": "click here for answer\n\n\n\n\n\n\n##############.\n# ANSWER 1\n##############.\n\n# This answer creates the data.frame in one command.\nnumbers &lt;- data.frame(evens=seq(2,1000,by=2), odds = seq(999,1,by=-2))   # ANSWER\n\n# show the first 3 and last 3 rows of numbers (this is not part of the answer)\nhead(numbers,3)   # show the first 3 rows\n\n  evens odds\n1     2  999\n2     4  997\n3     6  995\n\ntail(numbers,3)   # show the last 3 rows\n\n    evens odds\n498   996    5\n499   998    3\n500  1000    1\n\n##############.\n# ANSWER 2 \n##############.\n\n# This answer creates variables for the vectors first.\n# The column names will be the same as the variable names of the vectors.\nevens &lt;- seq(2,1000,by=2)              # ANSWER (MULTIPLE LINES)\nodds &lt;- seq(999,1, by=-2)              # ANSWER (MULTIPLE LINES)\nnumbers &lt;- data.frame(evens,odds)      # ANSWER (MULTIPLE LINES)\n\n# show the first 3 and last 3 rows of numbers (this is not part of the answer)\nhead(numbers,3)   # show the first 3 rows\n\n  evens odds\n1     2  999\n2     4  997\n3     6  995\n\ntail(numbers,3)   # show the last 3 rows\n\n    evens odds\n498   996    5\n499   998    3\n500  1000    1\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########################################################.\n# ANSWER 1 - create the data.frame with a single command\n###########################################################.\n\nprices &lt;- data.frame(department=c(\"produce\",\"bakery\",\"produce\",\"produce\",\"bakery\"),   # ANSWER (MULTIPLE LINES)\n                     product=c(\"apple\",\"chocolate cake\",\"orange\",\"pear\",\"rye bread\"), # ANSWER (MULTIPLE LINES)\n                     price=c(1.99 , 1.59, 0.99, 1.99, 4.99))                          # ANSWER (MULTIPLE LINES)\n\n\n# check our answer (this is NOT part of the answer)\nprices\n\n  department        product price\n1    produce          apple  1.99\n2     bakery chocolate cake  1.59\n3    produce         orange  0.99\n4    produce           pear  1.99\n5     bakery      rye bread  4.99\n\n###########################################################.\n# ANSWER 2 - create variables for the columns first\n###########################################################.\n\ndepartment &lt;- c(\"produce\",\"bakery\",\"produce\",\"produce\",\"bakery\")   # ANSWER (MULTIPLE LINES)\nproduct &lt;- c(\"apple\",\"chocolate cake\",\"orange\",\"pear\",\"rye bread\") # ANSWER (MULTIPLE LINES)\nprice &lt;- c(1.99 , 1.59, 0.99, 1.99, 4.99)                          # ANSWER (MULTIPLE LINES)\nprices &lt;- data.frame(department,product,price)                     # ANSWER (MULTIPLE LINES)\n\n# check our answer (this is NOT part of the answer)\nprices\n\n  department        product price\n1    produce          apple  1.99\n2     bakery chocolate cake  1.59\n3    produce         orange  0.99\n4    produce           pear  1.99\n5     bakery      rye bread  4.99\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###############.\n# ANSWER 1\n###############.\ncolnames(prices)[c(2,3)] &lt;- c(\"itemName\",\"pricePerLb\")  # ANSWER\n# check ...\nprices\n\n  department       itemName pricePerLb\n1    produce          apple       1.99\n2     bakery chocolate cake       1.59\n3    produce         orange       0.99\n4    produce           pear       1.99\n5     bakery      rye bread       4.99\n\n################.\n# ANSWER 2\n################.\ncolnames(prices)[2] &lt;- \"itemName\"     # ANSWER (MULTIPLE LINES)\ncolnames(prices)[3] &lt;- \"pricePerLb\"   # ANSWER (MULTIPLE LINES)\n# check ...\nprices\n\n  department       itemName pricePerLb\n1    produce          apple       1.99\n2     bakery chocolate cake       1.59\n3    produce         orange       0.99\n4    produce           pear       1.99\n5     bakery      rye bread       4.99\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the prices dataframe.\n\n#############################.\n# sample answer:\n#############################.\n\n# To generate the new rownames you can use the following command:\npaste(\"item\", 1:length(rownames(prices)), sep=\"\")\n\n[1] \"item1\" \"item2\" \"item3\" \"item4\" \"item5\"\n\n# or the following command\npaste(\"item\", 1:nrow(prices), sep=\"\")\n\n[1] \"item1\" \"item2\" \"item3\" \"item4\" \"item5\"\n\n# now just assign the result of one of these commands to the rownames:\nrownames(prices) &lt;- paste(\"item\", 1:nrow(prices), sep=\"\")    # ANSWER  (THIS IS THE ONLY LINE YOU NEED)\n\n# check:\nprices\n\n      department       itemName pricePerLb\nitem1    produce          apple       1.99\nitem2     bakery chocolate cake       1.59\nitem3    produce         orange       0.99\nitem4    produce           pear       1.99\nitem5     bakery      rye bread       4.99\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n# ANSWER - part a\nprices[1,2] &lt;- \"mcintosh apple\"    # ANSWER\n\n# ANSWER - part b\nprices[prices$itemName == \"apple\" , \"itemName\"] &lt;- \"mcintosh apple\"    # ANSWER\nprices\n\n      department       itemName pricePerLb\nitem1    produce mcintosh apple       1.99\nitem2     bakery chocolate cake       1.59\nitem3    produce         orange       0.99\nitem4    produce           pear       1.99\nitem5     bakery      rye bread       4.99\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the prices dataframe.\n\n###############################.\n# ANSWER 1 \n#    - using $ notation  \n#    - answer the question using two commands (may be easier to understand than a single command)\n###############################.\n# first let's identify which row contains oranges:\nrows &lt;- prices$itemName == \"orange\"                                      # ANSWER (MULTIPLE LINES)\nrows\n\n[1] FALSE FALSE  TRUE FALSE FALSE\n\n# now lets change the price for that row. Note that we are rounding the new price to the nearest penny.\nprices[rows,\"pricePerLb\"] &lt;- round( prices[rows,\"pricePerLb\"] * 1.1, 2)  # ANSWER (MULTIPLE LINES)\n\n# check our answer\nprices\n\n      department       itemName pricePerLb\nitem1    produce mcintosh apple       1.99\nitem2     bakery chocolate cake       1.59\nitem3    produce         orange       1.09\nitem4    produce           pear       1.99\nitem5     bakery      rye bread       4.99\n\n#########################################.\n# ANSWER 2\n#    - using [[double-bracket]] notation\n#    - answer the question using two commands (may be easier to understand than a single command)\n#########################################.\n# first let's identify which row contains oranges:\nrows &lt;- prices[[\"itemName\"]] == \"orange\"                                 # ANSWER (MULTIPLE LINES)\nrows\n\n[1] FALSE FALSE  TRUE FALSE FALSE\n\n# now lets change the price for that row. Note that we are rounding the new price to the nearest penny.\nprices[rows,\"pricePerLb\"] &lt;- round( prices[rows,\"pricePerLb\"] * 1.1, 2)  # ANSWER (MULTIPLE LINES)\n\n# check our answer\nprices\n\n      department       itemName pricePerLb\nitem1    produce mcintosh apple       1.99\nitem2     bakery chocolate cake       1.59\nitem3    produce         orange       1.20\nitem4    produce           pear       1.99\nitem5     bakery      rye bread       4.99\n\n#########################################.\n# ANSWER 3\n#    - using $ notation  \n#    - answer using ONE command (avoids the need to create new variables that are otherwise unnecessary)\n#########################################.\n\n# we can avoid the need to create a new variable using the following approach to \n# answer the question using a single command (for readability, the command is typed on two lines)\nprices[prices$itemName==\"orange\",\"pricePerLb\"] &lt;-                    # ANSWER (MULTIPLE LINES)\n  round(prices[prices$itemName==\"orange\",\"pricePerLb\"]*1.1, 2) # ANSWER (MULTIPLE LINES)\n\n# check our answer\nprices\n\n      department       itemName pricePerLb\nitem1    produce mcintosh apple       1.99\nitem2     bakery chocolate cake       1.59\nitem3    produce         orange       1.32\nitem4    produce           pear       1.99\nitem5     bakery      rye bread       4.99\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the prices dataframe.\n\n##############################.\n# ANSWER 1 - using $ notation\n##############################.\n\nprices$pricePerLb &lt;- round( prices$pricePerLb * 1.1 , 2 )              # ANSWER\n\n# check\nprices\n\n      department       itemName pricePerLb\nitem1    produce mcintosh apple       2.19\nitem2     bakery chocolate cake       1.75\nitem3    produce         orange       1.45\nitem4    produce           pear       2.19\nitem5     bakery      rye bread       5.49\n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\nprices[[\"pricePerLb\"]] &lt;- round ( prices[[\"pricePerLb\"]] * 1.1 , 2)   # ANSWER\n\n# check\nprices\n\n      department       itemName pricePerLb\nitem1    produce mcintosh apple       2.41\nitem2     bakery chocolate cake       1.93\nitem3    produce         orange       1.59\nitem4    produce           pear       2.41\nitem5     bakery      rye bread       6.04\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the prices dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n\nprices$salePrice &lt;- round ( prices$pricePerLb * 0.75 , 2)     # ANSWER\n\n# check \nprices\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\nitem2     bakery chocolate cake       1.93      1.45\nitem3    produce         orange       1.59      1.19\nitem4    produce           pear       2.41      1.81\nitem5     bakery      rye bread       6.04      4.53\n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n\nprices[[\"salePrice\"]] &lt;- round ( prices[[\"pricePerLb\"]] * 0.75 , 2)   # ANSWER\n\n# check \nprices\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\nitem2     bakery chocolate cake       1.93      1.45\nitem3    produce         orange       1.59      1.19\nitem4    produce           pear       2.41      1.81\nitem5     bakery      rye bread       6.04      4.53\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the prices dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices$department == \"produce\"\nrows\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n# now get the data for those rows from the specified columns:\nprices[rows,c(\"itemName\",\"pricePerLb\")]\n\n            itemName pricePerLb\nitem1 mcintosh apple       2.41\nitem3         orange       1.59\nitem4           pear       2.41\n\n#\n# Alternatively, we can do all this in one line:\nprices[     prices$department == \"produce\"    ,c(\"itemName\",\"pricePerLb\")]\n\n            itemName pricePerLb\nitem1 mcintosh apple       2.41\nitem3         orange       1.59\nitem4           pear       2.41\n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices[[\"department\"]] == \"produce\"\nrows\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n# now get the data for those rows from the specified columns:\nprices[rows,c(\"itemName\",\"pricePerLb\")]\n\n            itemName pricePerLb\nitem1 mcintosh apple       2.41\nitem3         orange       1.59\nitem4           pear       2.41\n\n# Alternatively, we can do all this in one line:\nprices[     prices[[\"department\"]] == \"produce\"    ,c(\"itemName\",\"pricePerLb\")]\n\n            itemName pricePerLb\nitem1 mcintosh apple       2.41\nitem3         orange       1.59\nitem4           pear       2.41\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices$pricePerLb &gt;= 2\nrows\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# now get the data for those rows from the specified columns:\nprices[rows,c(\"itemName\",\"pricePerLb\")]\n\n            itemName pricePerLb\nitem1 mcintosh apple       2.41\nitem4           pear       2.41\nitem5      rye bread       6.04\n\n# Alternatively, we can do all this in one line:\nprices[     prices$pricePerLb &gt;= 2    ,c(\"itemName\",\"pricePerLb\")]\n\n            itemName pricePerLb\nitem1 mcintosh apple       2.41\nitem4           pear       2.41\nitem5      rye bread       6.04\n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices[[\"pricePerLb\"]] &gt;= 2\nrows\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# now get the data for those rows from the specified columns:\nprices[rows,c(\"itemName\",\"pricePerLb\")]\n\n            itemName pricePerLb\nitem1 mcintosh apple       2.41\nitem4           pear       2.41\nitem5      rye bread       6.04\n\n#\n# Alternatively, we can do all this in one line:\nprices[     prices[[\"pricePerLb\"]] &gt;= 2    ,c(\"itemName\",\"pricePerLb\")]\n\n            itemName pricePerLb\nitem1 mcintosh apple       2.41\nitem4           pear       2.41\nitem5      rye bread       6.04\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices$pricePerLb &gt;= 2\nrows\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# now get the data for those rows from the specified columns:\nprices[rows,]\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\nitem4    produce           pear       2.41      1.81\nitem5     bakery      rye bread       6.04      4.53\n\n# Alternatively, we can do all this in one line:\nprices[     prices$pricePerLb &gt;= 2  ,   ]\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\nitem4    produce           pear       2.41      1.81\nitem5     bakery      rye bread       6.04      4.53\n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices[[\"pricePerLb\"]] &gt;= 2\nrows\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# now get the data for those rows from the specified columns:\nprices[rows,]\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\nitem4    produce           pear       2.41      1.81\nitem5     bakery      rye bread       6.04      4.53\n\n# Alternatively, we can do all this in one line:\nprices[     prices[[\"pricePerLb\"]] &gt;= 2  ,   ]\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\nitem4    produce           pear       2.41      1.81\nitem5     bakery      rye bread       6.04      4.53\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n# First identify the rows we want:\nrows &lt;- prices$department == \"produce\"\nrows\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n# now get the data for those rows from the specified columns:\nmean( prices[rows,\"pricePerLb\"] )\n\n[1] 2.136667\n\n# Alternatively, we can do all this in one line:\nmean( prices[   prices$department == \"produce\"   ,\"pricePerLb\"] )\n\n[1] 2.136667\n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n# First identify the rows we want:\nrows &lt;- prices[[\"department\"]] == \"produce\"\nrows\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n# now get the data for those rows from the specified columns:\nmean( prices[rows,\"pricePerLb\"] )\n\n[1] 2.136667\n\n# Alternatively, we can do all this in one line:\nmean( prices[   prices[[\"department\"]] == \"produce\"   ,\"pricePerLb\"] )\n\n[1] 2.136667\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n##########.\n# ANSWER \n##########.\n\n# First identify the rows we want:\nrows &lt;- seq(1,nrow(prices),by=2)\nrows\n\n[1] 1 3 5\n\n# now get the data for those rows from the specified columns:\nprices[ rows , ]\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\nitem3    produce         orange       1.59      1.19\nitem5     bakery      rye bread       6.04      4.53\n\n# Alternatively, we can do all this in one line:\nprices[  seq(1,nrow(prices),by=2)   ,  ]\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\nitem3    produce         orange       1.59      1.19\nitem5     bakery      rye bread       6.04      4.53\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices$pricePerLb &gt;= 1 & prices$pricePerLb &lt;= 2\nrows\n\n[1] FALSE  TRUE  TRUE FALSE FALSE\n\n# now get the data for those rows from the specified columns:\nprices[ rows , \"itemName\"]\n\n[1] \"chocolate cake\" \"orange\"        \n\n# Alternatively, we can do all this in one line:\nprices[    prices$pricePerLb &gt;= 1 & prices$pricePerLb &lt;= 2    , \"itemName\"]\n\n[1] \"chocolate cake\" \"orange\"        \n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n# First identify the rows we want:\nrows &lt;- prices[[\"pricePerLb\"]] &gt;= 1 & prices[[\"pricePerLb\"]] &lt;= 2\nrows\n\n[1] FALSE  TRUE  TRUE FALSE FALSE\n\n# now get the data for those rows from the specified columns:\nprices[ rows , \"itemName\"]\n\n[1] \"chocolate cake\" \"orange\"        \n\n# Alternatively, we can do all this in one line:\nprices[    prices[[\"pricePerLb\"]] &gt;= 1 & prices[[\"pricePerLb\"]] &lt;= 2    , \"itemName\"]\n\n[1] \"chocolate cake\" \"orange\"        \n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices$pricePerLb &lt; 1 | prices$pricePerLb &gt; 2\nrows\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# now get the data for those rows from the specified columns:\nprices[ rows , \"itemName\"]\n\n[1] \"mcintosh apple\" \"pear\"           \"rye bread\"     \n\n# Alternatively, we can do all this in one line:\nprices[    prices$pricePerLb &lt; 1 | prices$pricePerLb &gt; 2    , \"itemName\"]\n\n[1] \"mcintosh apple\" \"pear\"           \"rye bread\"     \n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices[[\"pricePerLb\"]] &lt; 1 | prices[[\"pricePerLb\"]] &gt; 2\nrows\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# now get the data for those rows from the specified columns:\nprices[ rows , \"itemName\"]\n\n[1] \"mcintosh apple\" \"pear\"           \"rye bread\"     \n\n# Alternatively, we can do all this in one line:\nprices[    prices[[\"pricePerLb\"]] &lt; 1 | prices[[\"pricePerLb\"]] &gt; 2    , \"itemName\"]\n\n[1] \"mcintosh apple\" \"pear\"           \"rye bread\"     \n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices$department == \"produce\" & prices$pricePerLb &gt;= 1 & prices$pricePerLb &lt;= 2\nrows\n\n[1] FALSE FALSE  TRUE FALSE FALSE\n\n# now get the data for those rows from the specified columns:\nprices[ rows , \"itemName\"]\n\n[1] \"orange\"\n\n# Alternatively, we can do all this in one line:\nprices[prices$department == \"produce\" & prices$pricePerLb &gt;= 1 & prices$pricePerLb &lt;= 2      , \"itemName\"]\n\n[1] \"orange\"\n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n\n# First identify the rows we want:\nrows &lt;- prices[[\"department\"]] == \"produce\" & prices[[\"pricePerLb\"]] &gt;= 1 & prices[[\"pricePerLb\"]] &lt;= 2\nrows\n\n[1] FALSE FALSE  TRUE FALSE FALSE\n\n# now get the data for those rows from the specified columns:\nprices[ rows , \"itemName\"]\n\n[1] \"orange\"\n\n# Alternatively, we can do all this in one line:\nprices[prices[[\"department\"]]==\"produce\" & prices[[\"pricePerLb\"]]&gt;=1 & prices[[\"pricePerLb\"]]&lt;=2  , \"itemName\"]\n\n[1] \"orange\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n# First identify the rows we want (notice the parentheses - they ARE necessary)\nrows &lt;- prices$department == \"produce\" & ( prices$pricePerLb &lt; 1 | prices$pricePerLb &gt; 2 )\nrows\n\n[1]  TRUE FALSE FALSE  TRUE FALSE\n\n# now get the data for those rows from the specified columns:\nprices[ rows , \"itemName\"]\n\n[1] \"mcintosh apple\" \"pear\"          \n\n# Alternatively, we can do all this in one line:\nprices[prices$department==\"produce\" & (prices$pricePerLb&lt;1 | prices$pricePerLb&gt;2 ) , \"itemName\"]\n\n[1] \"mcintosh apple\" \"pear\"          \n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n# First identify the rows we want (notice the parentheses - they ARE necessary)\nrows&lt;-prices[[\"department\"]]==\"produce\" & (prices[[\"pricePerLb\"]]&lt;1 | prices[[\"pricePerLb\"]]&gt;2)\nrows\n\n[1]  TRUE FALSE FALSE  TRUE FALSE\n\n# now get the data for those rows from the specified columns:\nprices[ rows , \"itemName\"]\n\n[1] \"mcintosh apple\" \"pear\"          \n\n# Alternatively, we can do all this in one line:\nprices[prices[[\"department\"]]==\"produce\" & (prices[[\"pricePerLb\"]]&lt;1 | prices[[\"pricePerLb\"]]&gt;2 ) , \"itemName\"]\n\n[1] \"mcintosh apple\" \"pear\"          \n\n\n\n\n\n\n\n\n\n\n\n\n\npart a - click here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############.\n# Answer (a)\n###############.\n\n# First identify a random row number.\n# You can do this with the sample function.\n\nrow  &lt;- sample(1:nrow(prices), 1)\nrow\n\n[1] 1\n\n# Alternatively, the following uses the runif function to do the same thing.\n# Either the code above or the following code will work just fine.\n# The \"+1\" in the code below is because we are \"truncating\" this number.\n#\n# row &lt;- trunc( runif(1,1,nrow(prices) + 1) )\n# row\n\n# now display the data for the randomly chosen row:\nprices[ row , ]\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\n\n# Alternatively, we can do all this in one line.\n# (Note that, we might get a different random row this time.)\nprices[   sample(1:nrow(prices), 1) ,   ]\n\n      department itemName pricePerLb salePrice\nitem4    produce     pear       2.41      1.81\n\n\n\n\n\n\n\n\n\n\n\npart b - click here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############.\n# Answer (b)\n###############.\n\n# Get the row numbers in reverse order\n# You can do this with the sample function.\n\nrows  &lt;- sort( 1:nrow(prices), decreasing=TRUE)\nrows  \n\n[1] 5 4 3 2 1\n\n# now display the data from the randomly chosen rows:\nprices[ rows , ]\n\n      department       itemName pricePerLb salePrice\nitem5     bakery      rye bread       6.04      4.53\nitem4    produce           pear       2.41      1.81\nitem3    produce         orange       1.59      1.19\nitem2     bakery chocolate cake       1.93      1.45\nitem1    produce mcintosh apple       2.41      1.81\n\n# Alternatively, we can do all this in one line:\nprices[   sort(1:nrow(prices), decreasing=TRUE) ,   ]\n\n      department       itemName pricePerLb salePrice\nitem5     bakery      rye bread       6.04      4.53\nitem4    produce           pear       2.41      1.81\nitem3    produce         orange       1.59      1.19\nitem2     bakery chocolate cake       1.93      1.45\nitem1    produce mcintosh apple       2.41      1.81\n\n\n\n\n\n\n\n\n\n\n\npart c - click here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############.\n# Answer (c)\n###############.\n\n# First chose a random order for the rows. \n# You can do this with the sample function.\n\nrows  &lt;- sample(1:nrow(prices), size=length(row))\nrows  \n\n[1] 3\n\n# Another way to do this with sample is just to leave out the size parameter.\nrows  &lt;- sample(1:nrow(prices))\nrows  \n\n[1] 1 3 4 5 2\n\n# now display the data from the randomly chosen rows:\nprices[ rows , ]\n\n      department       itemName pricePerLb salePrice\nitem1    produce mcintosh apple       2.41      1.81\nitem3    produce         orange       1.59      1.19\nitem4    produce           pear       2.41      1.81\nitem5     bakery      rye bread       6.04      4.53\nitem2     bakery chocolate cake       1.93      1.45\n\n# Alternatively, we can do all this in one line:\n# (Note that, we might get a different order this time.)\nprices[   sample(1:nrow(prices))   ,   ]\n\n      department       itemName pricePerLb salePrice\nitem5     bakery      rye bread       6.04      4.53\nitem1    produce mcintosh apple       2.41      1.81\nitem3    produce         orange       1.59      1.19\nitem2     bakery chocolate cake       1.93      1.45\nitem4    produce           pear       2.41      1.81\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n###############################################.\n# ANSWER 1 - using $ notation\n###############################################.\n\n# First identify the rows we want\nrows &lt;- prices$pricePerLb &gt;= 1.5\nrows\n\n[1] TRUE TRUE TRUE TRUE TRUE\n\n# now get the data for those rows from the specified columns:\nmean( prices[ rows , \"pricePerLb\"] )\n\n[1] 2.876\n\n# Alternatively, we can do all this in one line:\nmean( prices[ prices$pricePerLb &gt;= 1.5 , \"pricePerLb\"] )\n\n[1] 2.876\n\n###############################################.\n# ANSWER 2 - using [[double-bracket]] notation\n###############################################.\n# First identify the rows we want\nrows &lt;- prices[[\"pricePerLb\"]] &gt;= 1.5\nrows\n\n[1] TRUE TRUE TRUE TRUE TRUE\n\n# now get the data for those rows from the specified columns:\nmean( prices[ rows , \"pricePerLb\"] )\n\n[1] 2.876\n\n# Alternatively, we can do all this in one line:\nmean( prices[ prices[[\"pricePerLb\"]] &gt;= 1.5 , \"pricePerLb\"] )\n\n[1] 2.876\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n#########.\n# ANSWER \n#########.\n\n# First identify the rows we want as a logical vector\nrows &lt;- prices$department == \"produce\"\nrows\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n# Now sum the logical vector to get the total number of TRUEs\nsum(rows)\n\n[1] 3\n\n# Alternatively, we can do all this in one line:\nsum(  prices$department == \"produce\"  )\n\n[1] 3\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# NOTE: see the answers to questions 47 and 48 for code to create the dataframe.\n\n#########.\n# ANSWER \n#########.\n\n# First identify the rows we want as a logical vector\nrows &lt;- prices$department == \"produce\"  &  prices$pricePerLb &gt;= 1.5\nrows\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n# Now sum the logical vector to get the total number of TRUEs\nsum(rows)\n\n[1] 3\n\n# Alternatively, we can do all this in one line:\nsum(     prices$department == \"produce\"  &  prices$pricePerLb &gt;= 1.5    )\n\n[1] 3",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Practice Questions - TOPIC: Dataframes</span>"
    ]
  },
  {
    "objectID": "99900-qstns-30-userDefinedFunctions-v035-ANSWERS.html",
    "href": "99900-qstns-30-userDefinedFunctions-v035-ANSWERS.html",
    "title": "40  Practice Questions - TOPIC: User Defined Functions",
    "section": "",
    "text": "40.1 User Defined Functions",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Practice Questions - TOPIC: User Defined Functions</span>"
    ]
  },
  {
    "objectID": "99900-qstns-30-userDefinedFunctions-v035-ANSWERS.html#user-defined-functions",
    "href": "99900-qstns-30-userDefinedFunctions-v035-ANSWERS.html#user-defined-functions",
    "title": "40  Practice Questions - TOPIC: User Defined Functions",
    "section": "",
    "text": "QUESTION 67 TOPICS: user defined functions\n\n##############################################################.\n##############################################################.\n##\n##   TOPIC: USER DEFINED FUNCTIONS  (i.e. creating your own functions\n##     For each of the following questions, write a function that\n##     matches the description in the comment and that \n##     has the \"signature\" shown below the comment.\n##\n##############################################################.\n##############################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 67\n# TOPICS: user defined functions\n#\n# getGpa calculates a student's Grade Point Average (GPA)\n# as a \"weighted average\" of the grades for the courses\n# the student has taken, weighted by the number of credits\n# for each course. \n#\n# The grades argument is expected to be a vector that \n# contains one numeric grade for each course. The expected \n# numeric values are 4,3,2,1 or 0 for grades of A,B,C,D or F \n# respectively. \n# \n# The credits argument is expected to be a vector the same \n# length as the grades argument. The values in the credits\n# vector represent the credits for each course from the \n# corresponding grades vector.\n# \n# The function should return a single number that represents\n# the GPA.\n#\n# Example: The following function call is used to calculate\n# the GPA of a student who took 3 classes. The grades in the\n# three classes were A,B,B (i.e. 4,3,3) and the credits for\n# the classes were 2, 4 and 3 credits respectively.\n# This is calculated as (4*2 + 3*4 + 3*3)/9  to get 3.222222\n#\n#    &gt; getGpa(c(4,3,3), c(2,4,3))\n#    3.222222\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ngetGpa &lt;- function(grades , credits) {\n  sum(grades * credits) / sum(credits) \n}\n\n\n\n\n\n\n\nQUESTION 68a. TOPICS: user defined functions\n\n############################################################################################.\n# QUESTION_GROUP: 68\n# TOPICS: user defined functions\n#\n# The next few questions are related to each other.\n#\n# For each part below, create the function as described\n############################################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 68a.\n# TOPICS: user defined functions\n#\n# ARGUMENTS/PARAMETERS \n#\n#   vec - a vector that contains 2 or more values\n#\n# Returns a vector that contains the two largest\n# values from the vector,vec . The values should \n# be returned IN INCREASING ORDER regardless\n# of the order in the original vector. For example:\n#     &gt; getTopTwoValues(c(1,4,2,5,3))\n#     4  5\n#     &gt; getTopTwoValues(c(1,5,2,4,3))\n#     4  5\n# If the largest value in vec appears more than once\n# then the return value should include that value twice.\n# For example:\n#     &gt; getTopTwoValues(c(1,4,2,4,3,4))\n#     4  4\n#\n# Hints: You can write the function in many different ways. \n# Some functions that might help are: sort, head, tail \n#\n# Signature:    getTopTwoValues &lt;- function(vec) \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ngetTopTwoValues &lt;- function(vec) {\n  sorted &lt;- sort(vec)\n  sorted[ c ( length(vec)-1 , length(vec) ) ]\n}\n\n\n\n\n\n\n\nQUESTION 68b. TOPICS: user defined functions\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 68b.\n# TOPICS: user defined functions\n#\n# Same as previous question but this function takes a parameter\n# named \"n\" that indicates how many values to return. \"n\" has a default\n# value of 2. Also vec, may contain 1 or more values instead of 2 or more values.\n# If there are fewer values in vec than \"n\" then the function should\n# return all of the values from vec.\n#\n# ARGUMENTS/PARAMETERS \n#\n#   vec - any vector\n#\n#   n - the number of largest values to return\n#\n# Returns a vector that contains the \"n\" largest\n# values from the vector. If \"n\" is larger than the number of \n# values in vec then the function should return all of the \n# values in vec.\n#\n# Examples:\n#     &gt; getTopValues(c(1,9,2,5,3),3)\n#     3  5  9\n#     &gt; getTopValues(c(1,5,2,9,3))\n#     5  9\n#     &gt; getTopValues(c(1,99,55,2,99),3)\n#     55  99  99\n#     &gt; getTopValues(c(1,99),3)\n#     1  99\n#\n# SIGNATURE:  getTopValues &lt;- function(vec, n=2)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# ONE ANSWER\ngetTopValues &lt;- function(vec, n=2) {\n  n = min( n , length(vec) )  # ensure n is not longer than length(vec)\n  sorted &lt;- sort(vec)\n  position &lt;- length(vec)-(n-1)\n  sorted[ position : length(vec) ]\n}\n\n# Test the answer\ngetTopValues(c(1,9,2,5,3),3)   #     3  5  9\n\n[1] 3 5 9\n\ngetTopValues(c(1,5,2,9,3))     #     5  9\n\n[1] 5 9\n\ngetTopValues(c(1,99,55,2,99),3)#     55  99  99\n\n[1] 55 99 99\n\ngetTopValues(c(1,99),3)        #     1  99\n\n[1]  1 99\n\n# ANOTHER ANSWER\ngetTopValues &lt;- function(vec, n=2) {\n  sorted &lt;- sort(vec)\n  position &lt;- length(vec)-(n-1)\n  if (position &lt; 1) {\n    position &lt;- 1\n  }\n  sorted[ position : length(vec) ]\n}\n\n# Test the answer\ngetTopValues(c(1,9,2,5,3),3)   #     3  5  9\n\n[1] 3 5 9\n\ngetTopValues(c(1,5,2,9,3))     #     5  9\n\n[1] 5 9\n\ngetTopValues(c(1,99,55,2,99),3)#     55  99  99\n\n[1] 55 99 99\n\ngetTopValues(c(1,99),3)        #     1  99\n\n[1]  1 99\n\n\n\n\n\n\n\n\nQUESTION 68c TOPICS: user defined functions\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 68c\n# TOPICS: user defined functions\n#\n# same as previous question except the values that are \n# returned should NOT be the same, unless, the vector contains \n# too few unique values\n#\n# For example:\n#     &gt; getTopValues(c(1,9,3,9), 2)\n#     3  9\n#     &gt; getTopValues(c(9,9,9,9), 2)\n#     9  9\n#     &gt; getTopValues(c(9,1,9,2), 3)\n#     1  2  9\n#\n# Hints: You can write the function in many different ways. \n# The following are some functions that might help. If you are\n# not familiar with any of these functions, search the R help\n# pages: unique, sort, head, tail\n#\n# FUNCTION SIGNATURE: getTopValues &lt;- function(vec, n=2)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ngetTopValues &lt;- function(vec, n=2) {\n  sortedUnique &lt;- sort(unique(vec))\n  numValues &lt;- min(n,length(sortedUnique))\n  sortedUnique[ (length(sortedUnique)-(numValues-1)) : length(sortedUnique) ]\n}\n\n\n\n\n\n\n\nQUESTION 68d TOPICS: user defined functions\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 68d\n# TOPICS: user defined functions\n#\n# The following is similar to part (a) above, \n# with the following change: \"The largest values should\n# appear IN THE SAME ORDER AS THOSE VALUES APPEAR IN vec.\"\n# See the description below for more info:\n#\n# ARGUMENTS/PARAMETERS \n#\n#   vec - a vector that contains 2 or more values\n#\n# Returns a vector that contains the two largest\n# values from the vector,vec . The largest values\n# should appear IN THE SAME ORDER AS THOSE VALUES\n# APPEAR IN vec. For example:\n#     &gt; getTopTwoValues(c(1,9,2,5,3))\n#     9  5\n#     &gt; getTopTwoValues(c(1,5,2,9,3))\n#     5  9\n# If the largest value in vec appears more than once\n# then the return value should include that value twice.\n# For example:\n#     &gt; getTopTwoValues(c(1,9,2,9,3,9,9))\n#     9  9\n#\n# FUNCTION SIGNATURE: getTopTwoValues &lt;- function(vec)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n################.\n#  68d - ANSWER\n################.\n\n# The following solution works in the following way to make sure\n# that the 2 values that are returned are in the same order\n# as in the original list:\n#\n# \"Psuedo-code\" for the answer:\n#\n#     First find the POSITION number of the highest value. \n#     \n#     Copy the vector,x , into another variable, y.\n#\n#     In the new copy of the vector, REPLACE the highest\n#     value with the min of the vector.\n#\n#     Then get the POSITION number of the next highest value\n#     in the same way.\n#\n#     Now you know the position numbers of the two highest\n#     values. You should be able to get just the values from\n#     those two positions in the original vector.\n\ngetTopTwoValues &lt;- function(x) {\n  positions &lt;- 1:length(x)\n  positionOfTopValue &lt;- positions[ x == max(x) ][1]\n  y &lt;- x       # save a copy of x in y\n  y[positionOfTopValue] &lt;- min(x)\n  positionOf2ndValue &lt;- positions[ y ==  max(y) ][1]\n  x[positions==positionOfTopValue | positions==positionOf2ndValue]\n}\n\n##############################################################################################.\n# END_OF_QUESTION_GROUP: 68\n##############################################################################################.\n\n\n\n\n\n\n\nQUESTION 69. TOPICS: user defined functions, if_elseif_else\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 69.\n# TOPICS: user defined functions, if_elseif_else\n#\n# For the purposes of the following questions, the following definition of\n# \"prime number\" is assumed:   \"An integer greater than one is called a prime number\n# if its only positive divisors (factors) are one and itself.\"  Therefore, 1 is not\n# a prime and neither is any negative number.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 69a.\n#\n# ARGUMENTS/PARAMETERS:\n# \n#    num - a single numerical value\n#\n# Returns TRUE if num is a prime number and returns FALSE if num is not a prime number \n#\n# Examples:\n#    &gt; is.prime1(-1)\n#    FALSE \n#    &gt; is.prime1(1)\n#    FALSE \n#    &gt; is.prime1(2)\n#    TRUE \n#    &gt; is.prime1(7)\n#    TRUE\n#    &gt; is.prime1(9)\n#    FALSE \n#\n# FUNCTION SIGNATURE:   is.prime1 &lt;- function( num )\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nis.prime1 &lt;- function( num ) {\n  if (num &lt; 2) {\n    return (FALSE)\n  } else if(num == 2) {\n    return (TRUE)  # the code in the else will not work for 2 (try it to see why)\n  } else {\n    divisors &lt;- 2:(num/2)    # note, the following is more efficient: 2:sqrt(num)    \n    remainders &lt;- num %% divisors\n    numberOfRemaindersThatAreZero &lt;- sum (remainders == 0)\n    return (numberOfRemaindersThatAreZero == 0)\n  }\n}\n\n\n\n\n\n\n\nQUESTION 69b. TOPICS: user defined functions, sapply_lapply\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 69b.\n# TOPICS: user defined functions, sapply_lapply\n#\n# ARGUMENTS/PARAMETERS:\n# \n#    vec - a numeric vector \n#\n# Returns a logical vector that describes if each corresponding\n# number in vec is a prime number. \n#\n# Examples:\n#    &gt; is.prime(c(1,2,3,4,5,6,7))\n#    FALSE  TRUE  TRUE  FALSE  TRUE  FALSE  TRUE\n#\n#    &gt; is.prime(c(107,109,111,1000))   # note 111 is divisble by 3 (3*37 is 111)\n#    TRUE  TRUE  FALSE  FALSE\n#\n# HINT: You can actually use the sapply and the lapply functions with a vector \n# (technically a \"vector\" is known as an \"atomic list\"). Use the sapply function \n# and the is.prime1 function from the previous question to generate the answer\n# for this function. (Why did I say to use the sapply and not the lapply function???)\n#\n# FUNCTION SIGNATURE:   is.prime &lt;- function( vec )\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n##############\n# ANSWER - \n##############\n\n\n# ONE ANSWER (preferred approach)\nis.prime &lt;- function(vec) {\n  sapply(vec,is.prime1)\n}\n\n\n# ANOTHER ANSWER (if you haven't learned \"sapply\" yet)\nis.prime &lt;- function(vec) {\n  answers = lapply(vec,is.prime1)\n  unlist(answers)\n}\n\n\n\n\n\n\n\nQUESTION 69c. TOPICS: user defined functions, loops\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 69c.\n# TOPICS: user defined functions, loops\n#\n# ARGUMENTS/PARAMETERS:\n#\n#    n - return all primes that are less than or equal to this value\n#\n# Returns a vector that contains all of the prime numbers that are less than or\n# equal to \"n\".\n# \n# EXAMPLES:\n#    &gt; primes.up.to(15)\n#    2  3  5  7  11  13\n#\n# FUNCTION SIGNATURE:   primes.up.to &lt;- function(n = 100)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n#################################################################.\n# ANSWER #1  -  BEST ANSWER\n# The following version is the best. It does not use any loops.\n# However, you should still understand the code for the other\n# answers below.\n#################################################################.\nprimes.up.to &lt;- function(n = 100){\n  tfVector &lt;- is.prime(2:n)   # tfVector will be a vector of TRUE/FALSE values\n  return ( (2:n)[tfVector] )  # Return the numbers whose values from tfVector are TRUE. NOTE: the word \"return\" is optional.\n}\n\n#################################################################.\n# ANSWER #2 \n# The following version uses a \"for\" loop\n#################################################################.\nprimes.up.to &lt;- function(n = 100){\n  primes &lt;- vector()          # start with an empty vector\n  \n  for (num in 2:n) {          # check each number from 2 until n\n    if (is.prime1(num)) {     # if the current value of num is a prime number ...\n      primes &lt;- c(primes,num)   # ... add it to the vector of primes\n    }\n  }\n  \n  return (primes)        # the word \"return\" is optional. The following will work too:   primes  \n}\n\n\n#################################################################.\n# ANSWER #3\n# The following version uses a \"while\" loop\n#################################################################.\nprimes.up.to &lt;- function(n = 100){\n  primes &lt;- vector()          # start with an empty vector\n  num &lt;- 2                    # set num to the first value to check\n  \n  while  (num &lt;= n) {          # keep checking as long as num is less than n\n    if (is.prime1(num)) {      # if the current value of num is a prime number ...\n      primes &lt;- c(primes,num)  # ... add it to the vector of primes\n    }\n    \n    num &lt;- num + 1  # get the next num to check. Note that this\n    # must be done OUTSIDE of the if since this should be done\n    # whether or not the last number checked turned out to be prime or not.\n  }\n  \n  return (primes)        # the word \"return\" is optional. The following will work too:   primes  \n}\n\n\n\n\n\n\n\nQUESTION 69d. TOPICS: user defined functions, loops\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 69d.\n# TOPICS: user defined functions, loops\n#\n# ARGUMENTS/PARAMETERS:\n#\n#    n - the number of prime numbers to return\n#\n# Returns a vector that contains the first \"n\" prime numbers&gt;\n#\n# FUNCTION SIGNATURE:   first.n.primes &lt;- function(n = 10)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nget.first.n.primes &lt;- function(n) {\n  \n  # The next few lines prepare the variables that will be needed by the while loop below\n  \n  answer &lt;- vector()      # setup an empty vector to contain the primes\n  nextNumberToCheck &lt;- 2  # The first number we will check to see if it is a prime is 2. \n  # (Yes I know that 2 is a prime, but you have to start somewhere ...)\n  numberPrimesFoundSoFar &lt;- 0  # Before we start the loop, we havent \"found\" any primes yet.\n  \n  while(numberPrimesFoundSoFar &lt; n) {  # If we haven't \"found\" n primes yet, keep looping to find another prime.\n    if (is.prime1(nextNumberToCheck)){  # check to see if the \"nextNumberToCheck\" is a prime number\n      answer &lt;- c(answer,nextNumberToCheck) # If the number is a prime then add it to the \"answer\" vector.\n      # Note that the line \"answer &lt;- vector()\" that appears above was\n      # necessary so that this line works the first time it is run. \n      # If \"answer\" wasn't set to something at the top of this function \n      # then the first time we would execute this line we would get\n      # an error since \"answer\" in \"c(answer,nextNumberToCheck)\" would not \n      # have had been defined.\n      numberPrimesFoundSoFar &lt;- numberPrimesFoundSoFar + 1  # If the number was a prime then add one to the\n      # variable \"numberPrimesFoundSoFar\"\n    }  # end of code for the \"if\"\n    nextNumberToCheck &lt;- nextNumberToCheck + 1  # Whether or not the last number was a prime, move on to\n    # check the next number by adding one to \"nextNumberToCheck\"\n  } # end of code for the \"while\"\n  \n  return (answer)\n}\n\n\n\n\n\n\n\nQUESTION 70. TOPICS: user defined functions, matrices\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 70.   TOPICS: user defined functions, matrices\n#\n#   For the following question refer to the following definitions:\n#   A \"square matrix\" is a matrix that has the same number of rows and columns.\n#\n#   A \"diagonal matrix\" is a square matrix that has 1's (or another value) on the\n#     \"main diagonal\" that runs from the upper left hand corner to the lower right\n#     hand corner and zeros everywhere else. Examples:\n#                               1  0  0     3 0 0 0\n#                               0  1  0     0 3 0 0 \n#                               0  0  1     0 0 3 0\n#                                           0 0 0 3\n# An \"upper triangular\" matrix is a square matrix that has non-zero values on\n#   the main diagonal and in the upper right hand \"triangle\" of the matrix and\n#   zeros everywhere else. Examples:\n#                               1  1  1     3 3 3 3\n#                               0  1  1     0 3 3 3 \n#                               0  0  1     0 0 3 3\n#                                           0 0 0 3\n# A \"lower triangular\" matrix is a square matrix that has non-zero values on\n#   the main diagonal and in the upper right hand \"triangle\" of the matrix and\n#   zeros everywhere else. Examples:\n#                               1  0  0     3 0 3 0\n#                               1  1  0     3 3 0 0 \n#                               1  1  1     3 3 3 0\n#                                           3 3 3 3\n# ARGUMENTS/PARAMETERS:\n#\n#     size - a single number that represents the number of rows (and hence\n#            the number of columns) of a square matrix\n#\n#     shape - expected to be either \"diagonal\", \"upperTriangular\" or \"lowerTriangular\"\n#\n#     fillValue - a value that is used to fill the nonzero entries in the resulting matrix\n#\n# Returns a square matrix of the specified \"size\" and \"shape\". The nonzero entries in the\n# matrix should be filled with the value of \"fillValue\"\n#\n# HINTS: See the R documentation for the row() and col() functions. Try a \n#        few examples of using the row() and col() functions. Then try to\n#        use those functions to implement the solution to this question. \n#\n# FUNCTION SIGNATURE: \n#     makeSquareMatrix &lt;- function (size = 3 , shape = \"diagonal\" , fillValue = 1)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nmakeSquareMatrix &lt;- function (size = 3 , shape = \"diagonal\" , fillValue = 1) {\n  mat &lt;- matrix ( rep(0,size^2), nrow=size, ncol=size)\n  \n  if (shape == \"upperTriangular\") {\n    \n    mat[ row(mat) &lt;= col(mat)] &lt;- fillValue\n    \n  } else if (shape == \"lowerTriangular\") {\n    \n    mat[ row(mat) &gt;= col(mat)] &lt;- fillValue\n    \n  } else {\n    mat [ row(mat) == col(mat) ] &lt;- fillValue\n  }\n  \n  mat\n}\n\n# Examples of using the function:\nmakeSquareMatrix(4,\"upperTriangular\", 99)\n\n     [,1] [,2] [,3] [,4]\n[1,]   99   99   99   99\n[2,]    0   99   99   99\n[3,]    0    0   99   99\n[4,]    0    0    0   99\n\nmakeSquareMatrix(3,\"lowerTriangular\", 2)\n\n     [,1] [,2] [,3]\n[1,]    2    0    0\n[2,]    2    2    0\n[3,]    2    2    2\n\nmakeSquareMatrix(3,\"diagonal\", 1)\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\nmakeSquareMatrix(3,\"bogusValueForShape\", 1)  # based on the code above this will create a \"diagonal\" matrix\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n\n\n\n\n\n\nQUESTION 71a. TOPICS: user defined functions, vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 71a.   TOPICS: user defined functions, vectors\n#\n# This function returns the \"middle\" values from a vector in the same order\n# that they appear in the vector (see the examples below).\n#\n# ARGUMENTS/PARAMETERS:\n#\n#    data - a vector\n#    n   - the number of middle values to return. This defaults \n#          to the entire vector.\n#\n# Examples: \n#    &gt; middle.values( c(40,30,20,10), 2)  # return the middle 2 values\n#    30  20 \n#\n#    &gt; middle.values( c(40,30,20,10))   # n wasn't specified so default is entire vector\n#    40  30  20  10\n#\n#    &gt; # If there aren't exactly \"n\" \"middle values\" (i.e. if n is odd and length(data) is even\n#    &gt; # or n is even and length(data) is odd) then the function should return\n#    &gt; # one more value from the first half of \"data\" and one fewer value from\n#    &gt; # the second half of \"data\". For example in the following, \n#    &gt; # there isn't just one middle value - there are two, so return the first \"middle value\".\n#    &gt;\n#    &gt; middle.values( c(40,30,20,10), 1)  \n#    30\n#\n#    &gt; # similarly:\n#    &gt; middle.values( c(40,30,20,10), 3)    # rerurn the 40, but not the 10\n#    40  30  20\n#\n#    &gt; # SOME OTHER EXAMPLES:\n#    &gt; middle.values( c(2,9,3,8,4,7,5), 4)\n#    9  3  8  4\n#    &gt; middle.values( c(2,9,3,8,4,7,5), 2)\n#    3  8 \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nmiddle.values &lt;- function ( data , n = length(data)) {\n \n  middlePosition = length(data) %/% 2  \n  \n  startOfMiddleValues = middlePosition - n / 2 + 1\n  \n  endOfMiddleValues = startOfMiddleValues + n -1\n  \n  data[ startOfMiddleValues:endOfMiddleValues ]\n  \n}\n\nmiddle.values( c(40,30,20,10), 2)   # 30  20 \n\n[1] 30 20\n\nmiddle.values( c(40,30,20,10))      # 40  30  20  10\n\n[1] 40 30 20 10\n\nmiddle.values( c(40,30,20,10), 1)   # 30\n\n[1] 30\n\nmiddle.values( c(40,30,20,10), 3)   # 40  30  20\n\n[1] 40 30 20\n\nmiddle.values( c(2,9,3,8,4,7,5), 4) # 9  3  8  4\n\n[1] 9 3 8 4\n\nmiddle.values( c(2,9,3,8,4,7,5), 2) # 3  8 \n\n[1] 3 8\n\n\n\n\n\n\n\n\nQUESTION 71 b. TOPICS: user defined functions, vectors\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION\n# 71 b. \n# TOPICS: user defined functions, vectors\n#\n# Modify the middle.values function from the previous question so that it takes \n# an additional argument named \"percent\". \"percent\" specifies the percent of\n# values that should be returned as the middle values. The value of \"percent\" \n# should only be used if \"n\" is not specified. If both \"n\" and \"percent\" are\n# specified then the value of \"n\" should be used. If neither \"n\" nor \"percent\"\n# are specified then return all of the values.\n#\n# ARTUMENTS/PARAMETERS:\n#    n       - the number of middle values to be returned\n#    percent = a number between 0 and 1 (ie. 1 is 100 percent)\n#\n# EXAMPLES:\n#   &gt; # return the middle 40% of the values\n#   &gt; middle.values( c(100,90,80,70,60,50,40,30,20,10),  percent=0.4)\n#   70 60 50 40\n#\n#   &gt; # return the middle 6 values\n#   &gt; middle.values( c(100,90,80,70,60,50,40,30,20,10),  n=6)\n#   80 70 60 50 40 30\n#\n#   &gt; # both n and percent are specified, so use \"n\" and NOT \"percent\"\n#   &gt; middle.values( c(100,90,80,70,60,50,40,30,20,10),  n=6, percent=0.4)\n#   80 70 60 50 40 30\n#\n#   &gt; # neither n nor percent are specified, so return ALL of the values.\n#   &gt; middle.values( c(100,90,80,70,60,50,40,30,20,10),  n=6, percent=0.4)\n#   100 90 80 70 60 50 40 30 20 10 \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nmiddle.values &lt;- function ( data , n = NA, percent = NA) {\n   # TODO - finish this\n}\n\n\n\n\n\n\n\nQUESTION 71c. TOPICS: user defined functions, vectors, if_elseif_else\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 71c.\n#\n# Modify the middle.value function from the previous question that that it takes \n# an additional argument named \"sort\".\n#\n# If the value of \"sort\" is specified as  \"asc\" then the middle values that\n# are returned should be sorted in \"ascending\" order (e.g. 1,2,3,...)\n# \n# If the value of \"sort\" is specified as  \"desc\" then the middle values that\n# are returned should be sorted in \"descending\" order (e.g. 10,9,8,,...)\n#\n# If the value of \"sort\" is specified as  \"none\" (or as any other value) \n# then the middle values should be returned in the same order in which they \n# appear in the original vector.\n# \n# EXAMPLES:\n#     &gt; middle.values(c(10,1,9,2,8,3), 4,  sort = \"asc\" )\n#     1  2  8  9\n#\n#     &gt; middle.values(c(10,1,9,2,8,3), 4,  sort = \"desc\" )\n#     9  8  1  2\n#\n#     &gt; middle.values(c(10,1,9,2,8,3), 4,  sort = \"none\" )\n#     1  9  2  8\n#\n#     &gt; middle.values(c(10,1,9,2,8,3), 4 )   # default is sort = \"none\"\n#     1  9  2  8\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nmiddle.values &lt;- function ( data , n = NA, percent = NA, sort=\"none\") {\n  # TODO - finish this  \n}\n\n\n\n\n\n\n\nQUESTION 71. d. TOPICS: user defined functions\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION\n# 71. d.\n# TOPICS: user defined functions\n#\n# Modify the middle.values function from the previous question so that the \"data\"\n# argument may be a vector, a dataframe or a generic list that contains several vectors. \n#\n# If data is a vector then this function should work exactly the same way as\n# described in the previous question.\n#\n# If data is a dataframe then the function should return a dataframe that contains \n# the middle values (as specified) for each column of the dataframe. \n#\n# If data is a generic list, thet contains several vectors, then the function should\n# return a list that contains several vectors. Each vector in the returned list \n# should contain the middle values from the corresponding vector in the original\n# list.\n# \n# EXAMPLES:\n#     You should be able to understand the question from the description above,\n#     but I'll try to post some examples later.\n#\n# HINTS:  \n#    - create two functions, the first function should do what the previous\n#      question required. The 2nd function should be the function described here.\n#      This 2nd function (i.e. the one that you need to write for THIS question) \n#      should \"apply\" the first function to the columns of a dataframe or the elements\n#      of a generic list as necessary by using one of the \"apply\" functions.\n#    - the is.data.frame() function can be used to determine if a variable contains a dataframe.\n#    - mode() can be used to determine if a variable contains a list. Note that a \"dataframe\"\n#      is also technically a \"list\".\n#    - use if/else if/else    as necessary\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nmiddle.values &lt;- function ( data , n = NA, percent = NA, sort=\"none\") {\n  # TODO - finish this\n}\n\n\n\n\n\n\n\nQUESTION 71e. TOPICS: user defined functions\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 71e.\n# TOPICS: user defined functions\n#\n# Write a function that returns a vector of the means of different increasing\n# amounts of \"middle values\" from a vector. If the number of values in the original\n# vector are even, then the means returned should start with the means of the 2 \n# middle values. If the number of values in the original vector are odd, then the\n# means should start with the means of the 1 middle value. For example, \n# \n#    &gt; # even number of values in vector\n#    &gt; get.middle.means( c(5,4,1,2,3,6) )   # means of  1,2    4,1,2,3  and  5,4,1,2,3,6\n#    1.5  2.5  5.25    \n#\n#    &gt; # odd number of values in vector\n#    &gt; get.middle.means( c(5,4,1,2,3,6,7) ) # means of  2   1,2,3   4,1,2,3,6  and  5,4,1,2,3,6,7\n#    2   2   3.2   4    \n#\n# HINTS: \n#  - use the middle.values function that you created above to get the middle values\n#  - use a loop   (either a for loop or a while loop)  to keep getting different \n#    numbers of middle.values and getting the mean of those middle values.\n#  - you \"answer\" can start as an \"empty vector\" by using the code:   answer &lt;- vector()\n#    Then add a new number to the answer vector each time your loop finds a new mean.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nget.middle.means = function( vec ) {\n  # TODO - finish this  \n}\n\n\n\n\n\n\n\nQUESTION 72a. TOPICS: loops\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 72a.   TOPICS: loops\n# Write a function, numPairs, that takes a single argument, nums that is\n# expected to be a numeric vector.  The function should return the number of\n# pairs of numbers in nums that add up to a multiple of 60.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnumPairs &lt;- function(nums){\n  answer &lt;- list()\n  for(pos1 in 1:(length(nums)-1)){\n    n1 &lt;- nums[pos1]\n    \n    for(pos2 in (pos1+1):length(nums)){\n      n2 &lt;- nums[pos2]\n      if( (n1+n2) %% 60 == 0 ){\n        answer[[length(answer)+1]] &lt;- c(n1,n2)\n      }\n    }\n  }\n  length(answer)\n}\n\n# check to see it works\namounts &lt;- c(70,5,50,20,40,10,100)\nx &lt;- numPairs(amounts)\nx\n\n[1] 4\n\n\n\n\n\n\n\n\nQUESTION 72b. TOPICS: loops\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 72b. TOPICS: loops\n#\n# Modify the function, numPairs, so that it takes a 2nd argument, sumAmount.\n# The default value of sumAmount should be 60. The function should return the\n#  number of pairs of numbers in nums that add up to a multiple of sumAmount.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnumPairs &lt;- function(nums, sumAmount=60){\n  answer &lt;- list()\n  for(pos1 in 1:(length(nums)-1)){\n    n1 &lt;- nums[pos1]\n    \n    for(pos2 in (pos1+1):length(nums)){\n      n2 &lt;- nums[pos2]\n      if( (n1+n2) %% sumAmount == 0 ){\n        answer[[length(answer)+1]] &lt;- c(n1,n2)\n      }\n    }\n  }\n  length(answer)\n}\n\n# check to see it works\namounts &lt;- c(70,5,50,20,40,10,100)\nx &lt;- numPairs(amounts)\nx\n\n[1] 4\n\n\n\n\n\n\n\n\nQUESTION 72c. TOPICS: loops\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 72c.  TOPICS: loops\n#\n# Write a function, getPairs, that takes a single argument, nums that is\n# expected to be a numeric vector. The function should return a list that\n# contains the pairs of numbers in nums that add up to a multiple of 60.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnumPairs &lt;- function(nums){\n  answer &lt;- list()\n  for(pos1 in 1:(length(nums)-1)){\n    n1 &lt;- nums[pos1]\n    \n    for(pos2 in (pos1+1):length(nums)){\n      n2 &lt;- nums[pos2]\n      if( (n1+n2) %% 60 == 0 ){\n        answer[[length(answer)+1]] &lt;- c(n1,n2)\n      }\n    }\n  }\n  answer\n}\n\n# check to see it works\namounts &lt;- c(70,5,50,20,40,10,100)\nx &lt;- numPairs(amounts)\nx\n\n[[1]]\n[1] 70 50\n\n[[2]]\n[1] 50 10\n\n[[3]]\n[1] 20 40\n\n[[4]]\n[1]  20 100\n\n\n\n\n\n\n\n\nQUESTION 72d. TOPICS: loops\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 72d. TOPICS: loops\n#\n# Write a function, getPairs, that takes a single argument, nums that is \n# expected to be a numeric vector. The function should return a dataframe that\n# contains the pairs of numbers in nums that add up to a multiple of 60.\n# Each pair should be in a new column on the dataframe. The names of the columns\n# should be pair1, pair2, pair3, etc.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnumPairs &lt;- function(nums){\n  answer &lt;- list()\n  for(pos1 in 1:(length(nums)-1)){\n    n1 &lt;- nums[pos1]\n    \n    for(pos2 in (pos1+1):length(nums)){\n      n2 &lt;- nums[pos2]\n      if( (n1+n2) %% 60 == 0 ){\n        answer[[length(answer)+1]] &lt;- c(n1,n2)\n      }\n    }\n  }\n  answer = data.frame(answer)\n  colnames(answer) = paste0(\"pair\", 1:ncol(answer))\n  answer\n}\n\n# check to see it works\namounts &lt;- c(70,5,50,20,40,10,100)\nx &lt;- numPairs(amounts)\nx\n\n  pair1 pair2 pair3 pair4\n1    70    50    20    20\n2    50    10    40   100\n\n\n\n\n\n\n\n\nQUESTION 72e. TOPICS: loops\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 72e. TOPICS: loops\n#\n# Write a function, getPairs, that takes a single argument, nums that is\n# expected to be a numeric vector. The function should return a matrix that\n# is 2 rows by n columns where n is the number of pairs of numbers from nums\n# that add up to 60. Each column of the matrix should contain a pair of numbers.\n# The names of the columns should be pair1, pair2, pair3, etc\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnumPairs &lt;- function(nums){\n  answer &lt;- numeric(0)\n  for(pos1 in 1:(length(nums)-1)){\n    n1 &lt;- nums[pos1]\n    \n    for(pos2 in (pos1+1):length(nums)){\n      n2 &lt;- nums[pos2]\n      if( (n1+n2) %% 60 == 0 ){\n        answer[length(answer)+c(1,2)] &lt;- c(n1,n2)\n      }\n    }\n  }\n  answer = matrix(answer, nrow=2, ncol=length(answer)/2)\n  colnames(answer) = paste0(\"pair\", 1:ncol(answer))\n  answer\n}\n\n# check to see it works\namounts &lt;- c(70,5,50,20,40,10,100)\nx &lt;- numPairs(amounts)\nx\n\n     pair1 pair2 pair3 pair4\n[1,]    70    50    20    20\n[2,]    50    10    40   100\n\n\n\n\n\n\n\n\nQUESTION 72f. TOPICS: loops\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION 72f. TOPICS: loops\n#\n# Write a function, getPairs, that takes a single argument, nums that is\n# expected to be a numeric vector. The function should return a matrix that\n# is n rows by 2 columns where n is the number of pairs of numbers from nums\n# that add up to 60. Each row of the matrix should contain a pair of numbers.\n# The names of the rows should be pair1, pair2, pair3, etc\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnumPairs &lt;- function(nums){\n  answer &lt;- numeric(0)\n  for(pos1 in 1:(length(nums)-1)){\n    n1 &lt;- nums[pos1]\n    \n    for(pos2 in (pos1+1):length(nums)){\n      n2 &lt;- nums[pos2]\n      if( (n1+n2) %% 60 == 0 ){\n        answer[length(answer)+c(1,2)] &lt;- c(n1,n2)\n      }\n    }\n  }\n  answer = matrix(answer, nrow=length(answer)/2, ncol=2, byrow = TRUE)\n  rownames(answer) = paste0(\"pair\", 1:nrow(answer))\n  answer\n}\n\n# check to see it works\namounts &lt;- c(70,5,50,20,40,10,100)\nx &lt;- numPairs(amounts)\nx\n\n      [,1] [,2]\npair1   70   50\npair2   50   10\npair3   20   40\npair4   20  100",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Practice Questions - TOPIC: User Defined Functions</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "",
    "text": "41.1 QUESTION 1\n#-----------------------------------------------------------------------------------\n# QUESTION 1  \n# Show the number of grades on test1 that were below 70\n#-----------------------------------------------------------------------------------",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-1",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-1",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "",
    "text": "click here for answer\n\n\n\n\n\n\nsum( test1 &lt; 70 )\n\n[1] 1",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-2",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-2",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.2 QUESTION 2",
    "text": "41.2 QUESTION 2\n\n#-----------------------------------------------------------------------------------\n# QUESTION 2\n# Show the number of grades below 70 on any of the tests\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nsum(c ( test1&lt;70, test2&lt;70, test3&lt;70) )\n\n[1] 4",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-3",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-3",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.3 QUESTION 3",
    "text": "41.3 QUESTION 3\n\n#-----------------------------------------------------------------------------------\n# QUESTION 3\n# Show the percent of seniors who are from NY\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nsum(year == \"senior\" & homeState == \"ny\") / sum(year == \"senior\")\n\n[1] 0.25",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-4",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-4",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.4 QUESTION 4",
    "text": "41.4 QUESTION 4\n\n#-----------------------------------------------------------------------------------\n# QUESTION 4\n# Show the number of students who have not yet declared a major (i.e. major is NA)\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nsum ( is.na(major) )\n\n[1] 2",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-5",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-5",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.5 QUESTION 5",
    "text": "41.5 QUESTION 5\n\n#-----------------------------------------------------------------------------------\n# QUESTION 5\n# Show the number of students \n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nlength (students)   # or length(ANY_OF_THE_VECTORS)\n\n[1] 8",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-6",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-6",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.6 QUESTION 6",
    "text": "41.6 QUESTION 6\n\n#-----------------------------------------------------------------------------------\n# QUESTION 6\n# Show the names of the students who scored at least 5 points above average on test1\n# test1\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents[ test1 &gt;= mean(test1) + 5]\n\n[1] \"anne\"   \"esther\" \"bob\"    \"carla\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-7",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-7",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.7 QUESTION 7",
    "text": "41.7 QUESTION 7\n\n#-----------------------------------------------------------------------------------\n# QUESTION 7\n# Show the names of the students who scored at least 5 points above average on test1\n# and also on test2\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents[ test1 &gt;= mean(test1) + 5 & test2 &gt;= mean(test2) + 5]\n\n[1] \"anne\"   \"esther\" \"bob\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-8",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-8",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.8 QUESTION 8",
    "text": "41.8 QUESTION 8\n\n#-----------------------------------------------------------------------------------\n# QUESTION 8\n# Show the names of the students who scored at least 5 points above average\n# on either test1 or test2\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents[ test1 &gt;= mean(test1) + 5 | test2 &gt;= mean(test2) + 5]\n\n[1] \"joe\"    \"anne\"   \"esther\" \"bob\"    \"carla\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-9",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-9",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.9 QUESTION 9",
    "text": "41.9 QUESTION 9\n\n#-----------------------------------------------------------------------------------\n# QUESTION 9\n# Show the names of the male students \n# who scored at least 5 points above average on either test1 or on test2\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents[ gender == \"m\" & (test1 &gt;= mean(test1) + 5 | test2 &gt;= mean(test2) + 5)]\n\n[1] \"joe\" \"bob\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-10",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-10",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.10 QUESTION 10",
    "text": "41.10 QUESTION 10\n\n#-----------------------------------------------------------------------------------\n# QUESTION 10\n# Show the number of accounting (acc) majors. \n#\n# NOTE: Be careful - some of the entries in the majors vector are NA.\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nsum( major == \"acc\" & !is.na(major))\n\n[1] 3",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-11",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-11",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.11 QUESTION 11",
    "text": "41.11 QUESTION 11\n\n#-----------------------------------------------------------------------------------\n# QUESTION 11\n# Show the number of students who have NOT declared that \n# they are acc majors (this includes students who have not yet declared a major). \n#\n# NOTE: Be careful - some of the entries in the majors vector are NA.\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nsum ( major != \"acc\" | is.na(major))\n\n[1] 5",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-12",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-12",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.12 QUESTION 12",
    "text": "41.12 QUESTION 12\n\n#-----------------------------------------------------------------------------------\n# QUESTION 12\n# Show the percent of the students who have declared that they are acc majors.\n#\n# NOTE: Be careful - some of the entries in the majors vector are NA.\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# ANSWER\nmean( major==\"acc\" & !is.na(major) )\n\n[1] 0.375\n\n# ANOTHER ANSWER \nsum(major == \"acc\" & !is.na(major)) / length(major)\n\n[1] 0.375",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-13",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-13",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.13 QUESTION 13",
    "text": "41.13 QUESTION 13\n\n#-----------------------------------------------------------------------------------\n# QUESTION 13\n# Show the percent of the seniors who have declared that they are acc majors.\n# \n#\n# NOTE: Be careful - some of the entries in the majors vector are NA.\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nsum(major == \"acc\" & !is.na(major) & year == \"senior\") / sum(year == \"senior\")\n\n[1] 0.5",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-14",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-14",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.14 QUESTION 14",
    "text": "41.14 QUESTION 14\n\n#-----------------------------------------------------------------------------------\n# QUESTION 14\n# Write code to show the names of the students who continually got lower grades.\n# ie test1 was the highest and test3 was the lowest grade\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents [ test1 &gt; test2 & test2 &gt; test3 ]\n\n[1] \"anne\" \"bob\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-15",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-15",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.15 QUESTION 15",
    "text": "41.15 QUESTION 15\n\n#-----------------------------------------------------------------------------------\n# QUESTION 15\n# Show the students who got 100 on all three tests\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# Note - When you run the command below using the data above, the \n# result is \"character(0)\".  This simply means that R is returning a character vector \n# that has zero entries. This is because in the data above, no one got 100 on all\n# three tests. R reports this by showing \"character(0)\" as the result.\n#\n# The code WOULD produce the name of any student who got 100 on all 3 tests. \n# This is the correct answer since the code should work even if the actual\n# data is different. If you want to check this you can add a new student whose\n# test grades are all 100 or change the test grades for one or more of the students.\n\nstudents [  test1==100 & test2==100 & test3==100   ]\n\ncharacter(0)",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-16",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-16",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.16 QUESTION 16",
    "text": "41.16 QUESTION 16\n\n#-----------------------------------------------------------------------------------\n# QUESTION 16\n# Show the students who got the same grade for all three tests\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents [  test1==test2 & test2==test3 ]\n\n[1] \"esther\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-17",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-17",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.17 QUESTION 17",
    "text": "41.17 QUESTION 17\n\n#-----------------------------------------------------------------------------------\n# QUESTION 17\n# Show the freshemn and sophomores whose highest grade was on the third test\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents [  (year==\"freshman\" | year==\"sophomore\") & test3 &gt; test1 & test3 &gt; test2 ]\n\n[1] \"larry\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-18",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-18",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.18 QUESTION 18",
    "text": "41.18 QUESTION 18\n\n#-----------------------------------------------------------------------------------\n# QUESTION 18\n# Show the average grade on test1 of honors students who are also seniors\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nmean( test1[ honors == TRUE & year == \"senior\"]  )\n\n[1] 85",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-19",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-19",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.19 QUESTION 19",
    "text": "41.19 QUESTION 19\n\n#-----------------------------------------------------------------------------------\n# QUESTION 19\n# Use a single command to create a vector that contains \n# the average grade on test1 the honors students in the first position and\n# the average grade on test1 for the non honors students in the 2nd position\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nc(mean(test1[honors == TRUE]) , mean(test1[honors==FALSE]))\n\n[1] 90.0 76.8",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-20",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-20",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.20 QUESTION 20",
    "text": "41.20 QUESTION 20\n\n#-----------------------------------------------------------------------------------\n# QUESTION 20\n# Write a command that shows the names of the honors students who are from NY, NJ or CT\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents [ honors == TRUE & (homeState == \"ny\" | homeState == \"nj\" | homeState == \"ct\") ]\n\n[1] \"anne\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-21",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-21",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.21 QUESTION 21",
    "text": "41.21 QUESTION 21\n\n#-----------------------------------------------------------------------------------\n# QUESTION 21\n# Answer the previous question without using the | operator. \n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents [ honors == TRUE & homeState %in% c(\"ny\",\"nj\",\"ct\") ]\n\n[1] \"anne\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-22",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-22",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.22 QUESTION 22",
    "text": "41.22 QUESTION 22\n\n#-----------------------------------------------------------------------------------\n# QUESTION 22\n# \n# Create a vector that shows the students name, gender and homeState\n# for all of the female students in the following format:\n#\n#     \"sue;f;nj\"  \"anne;f;ny\" \"esther;f;ny\" \"carla;f;wa\" \n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\npaste(students[gender==\"f\"], gender[gender==\"f\"], homeState[gender==\"f\"], sep=\";\")\n\n[1] \"sue;f;nj\"    \"anne;f;ny\"   \"esther;f;ny\" \"carla;f;wa\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-23",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-23",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.23 QUESTION 23",
    "text": "41.23 QUESTION 23\n\n#-----------------------------------------------------------------------------------\n# QUESTION 23\n# \n# Create a single value that has one \"m\" for each male student and one \"f\" for\n# each female student. The f's should be first before the m's. The f's and m's should\n# be separated from each other with dashes (see example below).\n# For example, if there would be 5 female and 2 male students your code should show:\n#\n#   \"f-f-f-f-f-m-m\"\n#\n# Remember that your code should work even if the current data changes. (I don't know\n# what the data that you get will be.)\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\npaste(sort(gender), sep=\"\", collapse=\"-\")\n\n[1] \"f-f-f-f-m-m-m-m\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-24",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-24",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.24 QUESTION 24",
    "text": "41.24 QUESTION 24\n\n#-----------------------------------------------------------------------------------\n# QUESTION 24\n# Write a command that displays the names and majors of the studets who are NOT honors students.\n# The output should be in the following format: each student should be on a separate line.\n# There should be a tab between the student's name and their major. See example output below.\n# (NOTE that the results should be correct even if the actual data changes):\n#\n#    sue    NA\n#    al     acc\n#    esther mar\n#    bob    acc\n#    larry  acc\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ncat( paste( students[!honors] , major[!honors], sep=\"\\t\", collapse=\"\\n\") )\n\nsue NA\nal  acc\nesther  mar\nbob acc\nlarry   acc",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-25",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-25",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.25 QUESTION 25",
    "text": "41.25 QUESTION 25\n\n#-----------------------------------------------------------------------------------\n# QUESTION 25\n# Write a function named isEven that takes a single argument named nums that is \n# expected to be a numeric vector.\n# The function should return a logical vector. \n# Each entry in the logical vector should be TRUE if the corresponding number is even\n# and FALSE if the corresponding number is odd.\n#\n# EXAMPLE: \n# # DEFINE THE FUNCTION isEven HERE\n# &gt; isEven ( c(2, 13, 23, 14) )\n# [1] TRUE FALSE FALSE TRUE\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nisEven = function(nums){\n  nums %% 2 == 0\n}",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-26",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-26",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.26 QUESTION 26",
    "text": "41.26 QUESTION 26\n\n#-----------------------------------------------------------------------------------\n# QUESTION 26\n# Write a command that uses the function isEven that you created in the \n# previous question to display those test1 grades that are even.\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ntest1[isEven(test1)]\n\n[1]  82  70 100  90",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-27",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-27",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.27 QUESTION 27",
    "text": "41.27 QUESTION 27\n\n#-----------------------------------------------------------------------------------\n# QUESTION 27\n# Use the isEven function that you created above to create a new function named isOdd.\n# isOdd should work similarly to isEvn but isOdd  should return a vector that contains\n# TRUE if a number is odd and FALSE if the number is even.\n#\n# EXAMPLE:\n# # DEFINE THE FUNCTION isEven HERE\n# &gt; isOdd ( c(2, 13, 23, 14) )\n# [1] FALSE TRUE TRUE FALSE\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nisOdd = function(nums){\n  !isEven(nums)\n}",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-28",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-28",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.28 QUESTION 28",
    "text": "41.28 QUESTION 28\n\n#-----------------------------------------------------------------------------------\n# QUESTION 28\n# Use the isOdd function that you described above to display the names\n# of the students who got odd numbered grades on test1. \n# Show their grades below their names.\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nstudents [ isOdd(test1) ]\n\n[1] \"joe\"    \"anne\"   \"esther\" \"larry\" \n\ntest1 [ isOdd(test1) ]\n\n[1] 85 95 93 39",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-29",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-29",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.29 QUESTION 29",
    "text": "41.29 QUESTION 29\n\n#-----------------------------------------------------------------------------------\n# QUESTION 29\n# Write a single command to display the following. The 2nd and 3rd lines \n# should each be indented by one tab. Make sure to get all the 'apostrophes'\n# and \"quotes\" displayed correctly.\n#\n#    Joe's parrot said:\n#        \"I want a cracker.\n#         I want it now.\"\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\ncat(\"Joe's parrot said:\\n\\t\\\"I want a cracker.\\n\\t I want it now.\\\"\")\n\nJoe's parrot said:\n    \"I want a cracker.\n     I want it now.\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-30",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-30",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.30 QUESTION 30",
    "text": "41.30 QUESTION 30\n\n#-----------------------------------------------------------------------------------\n# QUESTION 30\n# \n# The following \"numbers\" were entered using \"quotes\".\n# What will be the output from the following line of code?\n#\n#   &gt; nums = c(\"2000\", \"9\", \"1\", \"350\", \"3\" )\n#   &gt; sort(nums)\n#\n# Fill in the blank in the following code so that the numbers \n# sort in numeric order. Do not change anything else in the code.\n# You answer should work no matter what \"numbers\" are actually in\n# the code.\n# \n#   &gt; nums = c(\"2000\", \"9\", \"1\", \"350\", \"3\" )\n#   &gt; FILL IN YOUR ANSWER HERE SO THAT THE NEXT LINE PRODUCES THE OUTPUT SHOWN BELOW\n#   &gt; sort(nums)\n#   [1] 1 3 9 350 2000\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnums = c(\"2000\", \"9\", \"1\", \"350\", \"3\" )\nnums = as.numeric(nums)\nsort(nums)\n\n[1]    1    3    9  350 2000",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-31",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-31",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.31 QUESTION 31",
    "text": "41.31 QUESTION 31\n\n#-----------------------------------------------------------------------------------\n# QUESTION 31\n# \n# The grades vector shown below shows the grades for a test. \n# The grades for some students who missed the test were entered as NA.\n# Fill in a command to get the average of the grades - not counting the NA grades.\n#  \n#   &gt; grades = c(NA, 75,  NA, 85, 90, 70 )\n#   &gt; # COMMAND TO GET AVERAGE - IGNORE THE \"missing\" or NA grades\n#   [1] \n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# one answer (using na.rm)\ngrades = c(NA, 75,  NA, 85, 90, 70 )\nmean( grades, na.rm=TRUE)\n\n[1] 80\n\n# another answer (wihtout na.rm)\ngrades = c(NA, 75,  NA, 85, 90, 70 )\nmean( grades[!is.na(grades)] )\n\n[1] 80",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-32",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-32",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.32 QUESTION 32",
    "text": "41.32 QUESTION 32\n\n#-----------------------------------------------------------------------------------\n# QUESTION 32\n# \n# The grades vector shown below shows the grades for a test. \n# The numbers were incorrectly entered using \"quotes\".\n# The grades for some students who missed the test were entered as NA\n# and for others the grades were entered as \"missing\".\n# Fill in code as shown below so that you generate average.\n# Note that a warning may be shown - that is fine.\n#  \n#   &gt; grades = c(NA, \"75\",  NA, \"85\", \"90\", \"missing\", \"70\" )\n#   &gt; # COMMAND TO GET AVERAGE - IGNORE THE \"missing\" or NA grades\n#   [1] 80\n#   Warning message: ..... (some warning messages may be shown)\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# one answer\ngrades = c(\"NA\", \"75\",  \"NA\", \"85\", \"90\", \"missing\", \"70\" )\nmean( as.numeric(grades), na.rm=TRUE)\n\nWarning in mean(as.numeric(grades), na.rm = TRUE): NAs introduced by coercion\n\n\n[1] 80\n\n# another answer\ngrades = c(\"NA\", \"75\",  \"NA\", \"85\", \"90\", \"missing\", \"70\" )\nmean( as.numeric(grades)[!is.na(as.numeric(grades))])\n\nWarning in mean(as.numeric(grades)[!is.na(as.numeric(grades))]): NAs introduced\nby coercion\n\n\nWarning in mean(as.numeric(grades)[!is.na(as.numeric(grades))]): NAs introduced\nby coercion\n\n\n[1] 80",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-33",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-33",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.33 QUESTION 33",
    "text": "41.33 QUESTION 33\n\n#-----------------------------------------------------------------------------------\n# QUESTION 33\n# \n# It is VERY important to understand how to use R's debugger.\n# This question tests your knowledge of how to use R's debugger.\n# You do NOT have to write code to answer this question.\n# Rather your job is to write what you see as the debugger runs\n# as described in the instructions below.\n#\n# Refer to the function, strangeFunction, that appears below these instructions.\n# This function is written with several advanced R concepts that you did not learn\n# about yet. You are not expected to understand all of this code. Keep reading\n# to understand what you ARE supposed to do.\n#\n#\n#     strangeFunction = function(){\n#       yourName = \"John Doe\"\n#       functionText = paste0(capture.output(strangeFunction),collapse=\"\")\n#       functionText = strsplit(functionText,\"\")[[1]]\n#       functionText = functionText[ ! ( functionText %in% c(\"\\n\",\"\\t\",\" \",\"\\r\")) ]\n#       endOfFunction = max(which (functionText == \"}\"))\n#       functionText = functionText[ 1:endOfFunction ]\n#       s = sum(sapply(functionText,function(c)as.numeric(charToRaw(c))))\n#       set.seed(s)\n#       x = trunc(runif(1) * 10000)\n#       message = paste0(\"Don't pay attention to this return value.\",\n#                        \" What is the value of x as the function runs?\",\n#                        \" Use the debugger to figure it out.\",\n#                        \" By the way, if you change the code in the function AT ALL\",\n#                        \" the answer will be different :). The only way to\",\n#                        \" get the right answer is to use the debugger.\")\n#       return(message)\n#     }\n#\n# strangeFunction, doesn't seem to do anything useful \n# strangeFunction() will always output the following message:\n#\n#   &gt; strangeFunction()\n#   [1] \"Don't pay attention to this return value. \n#        What is the value of x as the function runs? \n#        Use the debugger to figure it out. \n#        By the way, if you change the code in the \n#        function AT ALL the answer will be different :). \n#        The only way to get the right answer is to use the debugger.\"\n#\n# To answer this question do the following:\n# \n#    1. Change the value of the variable yourName to your actual name.\n#       The function currently has:\n#           yourName = \"John Doe\"\n#\n#       Change \"John Doe\" to your actual name, for example:\n#           yourName = \"Michael Greenspilzingower\"\n#\n#       \n#    2. The following line appears in the function:\n#\n#           x = trunc(runif(1,1,100000))\n#\n#       Use the debugger to find the value of x as the function runs.\n#\n#       Note that everyone should have their own name in the variable yourName.\n#       This function uses some advanced R concepts to ensure that \n#       changing the code of the function will change the value that is \n#       assigned to x in unpredictable ways. Therefore since everyone \n#       changed the code of the function by adding their own name, everyone should\n#       have a different answer to this question.\n#\n#       Your answer should include a copy of your version of the function as well \n#       as the value of x that you got from the debugger.\n#       For example, Michael Greenspilzingower should report his answer as follows:\n#\n#               For my version of the function, the value of x is : 9281\n#               My version of the function is below.\n#\n#                   strangeFunction = function(){\n#                      yourName = \"Michael Greenspilzingower\"\n#                      functionText = paste0(capture.output(strangeFunction),collapse=\"\")\n#                      functionText = strsplit(functionText,\"\")[[1]]\n#                      functionText = functionText[ ! ( functionText %in% c(\"\\n\",\"\\t\",\" \",\"\\r\")) ]\n#                      endOfFunction = max(which (functionText == \"}\"))\n#                      functionText = functionText[ 1:endOfFunction ]\n#                      s = sum(sapply(functionText,function(c)as.numeric(charToRaw(c))))\n#                      set.seed(s)\n#                      x = trunc(runif(1) * 10000)\n#                      message = paste0(\"Don't pay attention to this return value.\",\n#                                       \" What is the value of x as the function runs?\",\n#                                       \" Use the debugger to figure it out.\",\n#                                       \" By the way, if you change the code in the function AT ALL\",\n#                                       \" the answer will be different :). The only way to\",\n#                                       \" get the right answer is to use the debugger.\")\n#                      return(message)\n#                   }\n#\n#       NOTE: If you leave the name as John Doe, then the value of x is 7388.\n#       You can use this to check to make sure that you are doing the question\n#       correctly before trying your own name.\n#-----------------------------------------------------------------------------------",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-34",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-34",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.34 QUESTION 34",
    "text": "41.34 QUESTION 34\n\n#-----------------------------------------------------------------------------------\n# QUESTION 34\n#\n# create a function named equal values that takes two vectors, v1 and v2,\n# and returns a vector of those values that are equal and in the same\n# positions in the two vectors.\n#\n#  EXAMPLE\n#    &gt; equal( c(100,200,300,400), c(50, 200, 60, 400))\n#    [1] 200 400\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nequal = function( v1, v2) {\n  return ( v1 [ v1 == v2])\n}\n\nequal( c(100,200,300,400), c(50, 200, 60, 400))\n\n[1] 200 400",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-35",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-35",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.35 QUESTION 35",
    "text": "41.35 QUESTION 35\n\n#-----------------------------------------------------------------------------------\n# QUESTION 35\n#\n# Create a function named mixAndPaste that takes the following arguments and \n# returns the value described below.\n#\n# Arguments\n#    x   -   a vector\n#    y   -   a vector of the same length as x\n#\n# Return value\n#    A character vector that pastes the values of x and y together. \n#    The 1st, 3rd, 5th, etc positions of the return value should have the \n#    x value before the y value.\n#    The 2nd, 4th, 6th, etc positions of the return value should have the\n#    y value before the x value.\n#\n# EXAMPLE1\n#   &gt; mixAndPaste( c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"), c(\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"))\n#   [1] \"au\" \"vb\" \"cw\" \"xd\" \"ey\" \"zf\"\n#\n# EXAMPLE2\n#   &gt; mixAndPaste(c(\"apple\", \"pear\", \"lemon\", \"plum\"),c(\"RED\", \"GREEN\", \"YELLOW\", \"PURPLE\"))\n#   [1] \"appleRED\"    \"GREENpear\"   \"lemonYELLOW\" \"PURPLEplum\" \n#\n# HINTS\n#   a. You can use more than one line of code in the function definition.\n#   b. You can create new \"local\" variables in the function definition.\n#   c. Figure out how to create two new local variables in the function.\n#      One of the local variables should contain the first vector to be pasted \n#         (e.g. using the values from EXAMPLE1 above, this first vector\n#          would contain \"a\" \"v\" \"c\" \"x\" \"e\" \"z\")\n#      and another vector should contain the second vector to be pasted\n#         (e.g. using the values from EXAMPLE1 above, this second vector\n#          would contain \"u\" \"b\" \"w\" \"d\" y\" \"f\".\n#      Then the function should reutrn the values of those vectors pasted together.\n#   d. To accomplish c. above, remember that you can assign values to specific\n#      locations in a vector, as long as that vector already exists.\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# The following is one possible suggested answer.\n# There can be many other correct answers.\n\nmixAndPaste = function(x,y) {\n  # To explain how this code works let's assume for example that \n  # the function was called as:\n  #   mixAndPaste(c(\"apple\", \"pear\", \"lemon\", \"plum\"),c(\"RED\", \"GREEN\", \"YELLOW\", \"PURPLE\"))\n  #\n  # Therefore\n  #    x is c(\"apple\", \"pear\", \"lemon\", \"plum\") and\n  #    y is c(\"RED\", \"GREEN\", \"YELLOW\", \"PURPLE\")\n  #\n  # The goal in the code below is to get the vector named left to be \n  #      c(\"apple\", \"GREEN\", \"lemon\", \"PURPLE\")\n  #\n  # and to get the vector named right to be \n  #      c(\"RED\", \"pear\", \"YELLOW\", \"plum\")\n  #\n  # Then if we paste together the vectors left and right, we'll get the \n  # result we want, i.e. \n  #      c(\"appleRED\", \"GREENpear\", \"YELLOWlemon\", \"plumPURPLE\")\n\n  # set the local variable, left, to x, e.g. left = c(\"apple\", \"pear\", \"lemon\", \"plum\") \n  left = x   \n  \n  # replace the even positions in left with the even positions from y\n  # e.g. after this line runs, left will be c(\"apple\", \"GREEN\", \"lemon\", \"PURPLE\")\n  left[seq(2,length(x),by=2)] = y[seq(2,length(x),by=2)]   \n  \n  # Now set the local variable, right, to y, eg. right = c(\"RED\", \"GREEN\", \"YELLOW\", \"PURPLE\")\n  right = y\n\n  # replace the even positions in right with the even positions from x\n  # e.g. after this line runs, right will be c(\"RED\", \"pear\", \"YELLOW\", \"plum\")\n  right[seq(2,length(x),by=2)] = x[seq(2,length(x),by=2)]   \n  \n  return(paste0(left,right))\n}\n\nmixAndPaste( c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"), c(\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"))\n\n[1] \"au\" \"vb\" \"cw\" \"xd\" \"ey\" \"zf\"\n\nmixAndPaste(c(\"apple\", \"pear\", \"lemon\", \"plum\"),c(\"RED\", \"GREEN\", \"YELLOW\", \"PURPLE\"))\n\n[1] \"appleRED\"    \"GREENpear\"   \"lemonYELLOW\" \"PURPLEplum\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-36",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-36",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.36 QUESTION 36",
    "text": "41.36 QUESTION 36\n\n#-----------------------------------------------------------------------------------\n# QUESTION 36\n#\n# The built-in function, which, returns the positions in a logical vector that are TRUE.\n# For example\n#\n#    &gt; which ( c(FALSE, TRUE, FALSE, FALSE, TRUE)) # 2 5 because those positions are TRUE\n#    [1] 2 5   \n#\n#    &gt; nums = c(9999,3,950,222,-5)\n#    &gt; which(nums &gt; 100)    # 1 3 4   because the 1st, 3rd and 4th values are greater than 100\n#    [1] 1 3 4\n#\n#    &gt; which ( c(FALSE, FALSE) ) # integer(0) ... this means that no values are TRUE\n#    integer(0)\n#\n# Create a function named, myWhich, that does the same thing as the built-in, \"which\" function.\n# Your function should takee a single argument named x.\n# Do NOT use the which command in your code.\n#\n#  EXAMPLE1\n#    &gt; myWhich ( c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE)) # 1 2 5 because those positions are TRUE\n#    [1] 1 2 5   \n#\n#    &gt; nums = c(10,3,950,222,-5)\n#    &gt; myWhich(nums &gt; 100)    # 3 4   because the 3rd and 4th position values are greater than 100\n#    [1] 3 4\n#\n#    &gt; myWhich ( c(FALSE, FALSE) ) # integer(0) ... this means that no values are TRUE\n#    integer(0)\n#\n# HINTS\n#    - Create a local variable that contains the position numbers from 1 until the last\n#      position in x. Return some of the values from that local variable.\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nmyWhich = function(x){\n  nums = 1:length(x)\n  return ( nums[x])\n}\n\nmyWhich( c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE))\n\n[1] 1 2 5",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-37",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-37",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.37 QUESTION 37",
    "text": "41.37 QUESTION 37\n\n#-----------------------------------------------------------------------------------\n# QUESTION 37\n#\n# Create a function named nextValue that takes the following arguments:\n#\n# Arguments:\n#      vec   - expected to be a vector\n#      position  - is a position in the vector, expected to be between 1 and length(wordVec)\n#\n# There is obviously a value at the specified position in vec.\n# The function should return the value from vec that is alphabetically (if vec is character)\n# or numerically (if vec is numeric) right after the specified value. See the examples below.\n#\n# HINTS\n#       - you may create local variables in your function to help you \n#         work through the ideas\n#\n#       - use the sort function to help you\n#\n#       - realize that positions after the last value in a vector are NA\n#      \n#    \n#\n# EXAMPLE1\n#   &gt; # banana is in the 4th position, \"car\" is alphabetically after \"banana\"\n#   &gt; nextValue (vec = c(\"fox\", \"car\", \"apple\", \"banana\", \"deer\", \"ball\", \"elephant\"),\n#                position = 4)\n#   [1] \"car\"\n#\n# EXAMPLE2 (same words as example1)\n#   &gt; # \"deer\" is in the 5th position, \"elephant\" is alphabetically after \"deer\"\n#   &gt; nextValue (vec = c(\"fox\", \"car\", \"apple\", \"banana\", \"deer\", \"ball\", \"elephant\"),\n#                position = 5)\n#   [1] \"elephant\"\n#\n# EXAMPLE3 (same words as example1)\n#   &gt; # The 1st word is \"fox\" and it is the last word alphabetically, so return NA\n#   &gt; nextValue (vec = c(\"fox\", \"car\", \"apple\", \"banana\", \"deer\", \"ball\", \"elephant\"),\n#                position = 1)\n#   [1] NA\n#\n# EXAMPLE4 (this time with a numeric vector)\n#   &gt; # In this example, the value in the 2nd position is 425.\n#   &gt; # 690 is the next value numerically after 425.\n#   &gt; nextValue ( c(100, 425, 50, 400, 690, 800, 200), 2 )    # 690\n#   [1] 690\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nnextValue = function( vec, position ) {\n  sorted = sort(vec)\n  nums = 1:length(vec)\n  newPosition = nums [ sorted == vec[position] ]\n  return(sorted[newPosition+1])\n}\n\n# EXAMPLE1\nnextValue (vec = c(\"fox\", \"car\", \"apple\", \"banana\", \"deer\", \"ball\", \"elephant\"),\n           position = 4)\n\n[1] \"car\"\n\n#   [1] \"car\"\n\n# EXAMPLE2\nnextValue (vec = c(\"fox\", \"car\", \"apple\", \"banana\", \"deer\", \"ball\", \"elephant\"),\n                position = 5)\n\n[1] \"elephant\"\n\n#   [1] \"elephant\"\n\n# EXAMPLE3 (same words as example1)\nnextValue (vec = c(\"fox\", \"car\", \"apple\", \"banana\", \"deer\", \"ball\", \"elephant\"),\n                position = 1)\n\n[1] NA\n\n#   [1] NA\n\n# EXAMPLE4 (this time with a numeric vector)\nnextValue ( c(100, 425, 50, 400, 690, 800, 200), 2 )    # 690\n\n[1] 690\n\n#   [1] 690",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-38",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-38",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.38 QUESTION 38",
    "text": "41.38 QUESTION 38\n\n#-----------------------------------------------------------------------------------\n# QUESTION 38\n#\n# Create a function, wordsBetween\n# Arguments:\n#      wordVec   - expected to be a character vector of words (or any other character data)\n#      wordA     - a single word\n#      wordB     - another single word\n#\n# The function should return a vector of the words from wordVec that \n# appear in wordsBetween that are alphabetically between wordA and wordB.\n#\n#   EXAMPLE\n#     # DEFINE FUNCTION wordsBetween HERE\n#     &gt; words = c(\"car\", \"bicycle\", \"harley\", \"truck\", \"boat\", \"caravan\", \"minivan\", \"plane\")\n#     &gt; wordsBetween(words, \"cat\", \"monkey\")\n#     [1] \"harley\" \"minivan\" \n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\nwordsBetween = function(wordVec, wordA, wordB){\n  wordVec[ wordVec &gt;= wordA & wordVec &lt;= wordB]\n}\n\nwords = c(\"car\", \"bicycle\", \"harley\", \"truck\", \"boat\", \"caravan\", \"minivan\", \"plane\")\nwordsBetween(words, \"cat\", \"monkey\")\n\n[1] \"harley\"  \"minivan\"",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-39",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-39",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.39 QUESTION 39",
    "text": "41.39 QUESTION 39\n\n#-----------------------------------------------------------------------------------\n# QUESTION 39 \n#\n# Write the number 0.00031 in R's version of scientific notation.\n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n3.1e-4   # run this line to see that this is equal to 0.00031\n\n[1] 0.00031",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-40",
    "href": "000450-additionalPracticeProblems-WITH_ANSWERS-v005.html#question-40",
    "title": "41  Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.",
    "section": "41.40 QUESTION 40",
    "text": "41.40 QUESTION 40\n\n#-----------------------------------------------------------------------------------\n# QUESTION 40 \n#\n# After running an R command R responded with \n#    [1] 1.23e+12\n# Explain what that means. Write that number in a more familiar form? \n#-----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# ANSWER\n#\n# 1.23e+12 is simply a number written using R's version of \"scientific notation\". \n# 1.23e+12 means 1.23 times 10^12. \n#\n# You can read the letter \"e\" in 1.23e+12 as \"times 10 to the power of\" to get\n# 1.23 times 10 to the power of +12.\n#\n# R uses \"scientific notation\" to concisely write numbers that are very very large,\n# and numbers that are very very small.\n# eg. 9870000000000 is equivalent 9.87e+12\n# and 0.000000000987 is equivalent to 9.87e-10\n#\n# You can figure out the value of 1.23e+12 as a more familiar looking number by\n# moving the decimal point from 1.23 to the right 12 times.\n# Moving to the right twice gets 123, but then you need to move to the right 10 more times,\n# so simply add 10 more zeros to get 1230000000000.",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Practice Questions - TOPICS: Parallel Vectors, &, |, scientific notation, etc.</span>"
    ]
  },
  {
    "objectID": "000460-listQuestions-WITH_ANSWERS-v004.html",
    "href": "000460-listQuestions-WITH_ANSWERS-v004.html",
    "title": "42  Practice Questions - TOPIC: Lists and Dataframes.",
    "section": "",
    "text": "rm(list=ls())\n\n# The following list contains the data for a chain of hardware stores\n# From October 2021.\n#\n# The data for each store in the chain is stored in a separate list within\n# the list of stores. \n#\n# The first two items in the list are the year and month for the data.\n# The other items in the list are lists of information for each store in \n# the chain. For simplicity, the data below only shows three stores. However, \n# there could be many stores in the chain, each with similarly structured data.\n#\n# Each store is allowed to set their own prices and salePrices. \n# Each store is also allowed to carry a somewhat different selection of \n# products than the other stores.\n#\n# Answer the questions below by referring to this data. You should \n# write the code so that it will continue to work even if the actual \n# values in the data change. \n\nstores = list(\n  \n  year=2021,\n  \n  month=10,\n  \n  list(\n      address=\"123 main street\",\n      storeId=\"1000\",\n      manager=\"joe\",\n      products = data.frame(\n        product =          c(\"hammer\", \"screwdriver\", \"hand saw\", \"wrench\" ),\n        price=             c(10.99,    8.00,          15.00,      5.00),\n        salePrice=         c(8.99,     NA,            NA,         4.50),\n        amountSold=        c(100,      200,           50,         75),\n        amountInInventory= c(20,       12,            0,          5)\n      )\n  ),\n  \n  list(\n    address=\"99 hickory place\",\n    storeId=\"1111\",\n    manager=\"sue\",\n    products = data.frame (\n      product =          c(\"wrench\",\"screwdriver\", \"screws\", \"nails\",\"pliers\" ),\n      price=             c(11.99,    8.00,          3.50,    2.99,   4.99),\n      salePrice=         c(NA,       7.00,          NA,      2.50,   4.50),\n      amountSold=        c(80,       195,           200,     400,    80),\n      amountInInventory= c(20,       15,            40,      15,     0)\n    )\n  ),\n  \n  list(\n    address=\"450 broadway\",\n    storeId=\"2345\",\n    manager=\"carla\",\n    products = data.frame (\n      product =          c(\"wrench\",\"saw\",\"hammer\",\"screws\", \"nails\",\"drill\" ),\n      price=             c(11.99,    8.00, 11.00,  3.50,    2.99,   44.99),\n      salePrice=         c(NA,       7.00, 10.00,  2.50,    2.50,   NA),\n      amountSold=        c(40,       100,  3,      100,     200,    10),\n      amountInInventory= c(30,       5,    40,     0,       0,      3)\n    )\n  )\n  \n  # If there were more stores then the data for the other\n  # stores would appear as separate lists here.\n)\n\n# NOTE - the following command may help you to understand the data better\nstr(stores)\n\nList of 5\n $ year : num 2021\n $ month: num 10\n $      :List of 4\n  ..$ address : chr \"123 main street\"\n  ..$ storeId : chr \"1000\"\n  ..$ manager : chr \"joe\"\n  ..$ products:'data.frame':    4 obs. of  5 variables:\n  .. ..$ product          : chr [1:4] \"hammer\" \"screwdriver\" \"hand saw\" \"wrench\"\n  .. ..$ price            : num [1:4] 11 8 15 5\n  .. ..$ salePrice        : num [1:4] 8.99 NA NA 4.5\n  .. ..$ amountSold       : num [1:4] 100 200 50 75\n  .. ..$ amountInInventory: num [1:4] 20 12 0 5\n $      :List of 4\n  ..$ address : chr \"99 hickory place\"\n  ..$ storeId : chr \"1111\"\n  ..$ manager : chr \"sue\"\n  ..$ products:'data.frame':    5 obs. of  5 variables:\n  .. ..$ product          : chr [1:5] \"wrench\" \"screwdriver\" \"screws\" \"nails\" ...\n  .. ..$ price            : num [1:5] 11.99 8 3.5 2.99 4.99\n  .. ..$ salePrice        : num [1:5] NA 7 NA 2.5 4.5\n  .. ..$ amountSold       : num [1:5] 80 195 200 400 80\n  .. ..$ amountInInventory: num [1:5] 20 15 40 15 0\n $      :List of 4\n  ..$ address : chr \"450 broadway\"\n  ..$ storeId : chr \"2345\"\n  ..$ manager : chr \"carla\"\n  ..$ products:'data.frame':    6 obs. of  5 variables:\n  .. ..$ product          : chr [1:6] \"wrench\" \"saw\" \"hammer\" \"screws\" ...\n  .. ..$ price            : num [1:6] 11.99 8 11 3.5 2.99 ...\n  .. ..$ salePrice        : num [1:6] NA 7 10 2.5 2.5 NA\n  .. ..$ amountSold       : num [1:6] 40 100 3 100 200 10\n  .. ..$ amountInInventory: num [1:6] 30 5 40 0 0 3\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 1\n# TOPIC: lists, paste\n# \n# PART A\n#\n# Write a command to show the year and month of the data in the format\n# month/year. For example if the year is 2021 and the month is 11\n# then your command should show \"11/2021\". Remember that your command should\n# continue to work even if the value of the year or month in the data changes.\n#\n# Use the $dollar-sign-notation for this answer.\n#\n# PART B\n#\n# Create a new variable, stores2, that has all the same values as the stores\n# variable. However, instead of the first two values being year and month, \n# the first value in the stores2 variable should be a value named date that \n# contains the month and year in month/year format (as in part A). \n# The data for the first store should appear in the 2nd position in the \n# stores2 list.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\npart a - click here for answer\n\n\n\n\n\n\n###################.\n# Answer - part A\n###################.\n\npaste( stores$month , stores$year, sep=\"/\")\n\n[1] \"10/2021\"\n\n\n\n\n\n\n\n\n\n\n\npart b - click here for answer\n\n\n\n\n\n\n##################################.\n# Answer - part B - ONE ANSWER\n##################################.\n\n# copy the values from stores\nstores2 = stores             \n\n# set the first value in stores2 to be the month/year\nstores2[[1]] = paste( stores$month , stores$year, sep=\"/\")\n\n# change the name of the first value to \"date\"\nnames(stores2)[1] = \"date\"\n\n# remove the 2nd value (i.e. the month) from stores2\nstores2[[2]] = NULL            # remove the 2nd value from stores2\n\nstr(stores2)\n\nList of 4\n $ date: chr \"10/2021\"\n $     :List of 4\n  ..$ address : chr \"123 main street\"\n  ..$ storeId : chr \"1000\"\n  ..$ manager : chr \"joe\"\n  ..$ products:'data.frame':    4 obs. of  5 variables:\n  .. ..$ product          : chr [1:4] \"hammer\" \"screwdriver\" \"hand saw\" \"wrench\"\n  .. ..$ price            : num [1:4] 11 8 15 5\n  .. ..$ salePrice        : num [1:4] 8.99 NA NA 4.5\n  .. ..$ amountSold       : num [1:4] 100 200 50 75\n  .. ..$ amountInInventory: num [1:4] 20 12 0 5\n $     :List of 4\n  ..$ address : chr \"99 hickory place\"\n  ..$ storeId : chr \"1111\"\n  ..$ manager : chr \"sue\"\n  ..$ products:'data.frame':    5 obs. of  5 variables:\n  .. ..$ product          : chr [1:5] \"wrench\" \"screwdriver\" \"screws\" \"nails\" ...\n  .. ..$ price            : num [1:5] 11.99 8 3.5 2.99 4.99\n  .. ..$ salePrice        : num [1:5] NA 7 NA 2.5 4.5\n  .. ..$ amountSold       : num [1:5] 80 195 200 400 80\n  .. ..$ amountInInventory: num [1:5] 20 15 40 15 0\n $     :List of 4\n  ..$ address : chr \"450 broadway\"\n  ..$ storeId : chr \"2345\"\n  ..$ manager : chr \"carla\"\n  ..$ products:'data.frame':    6 obs. of  5 variables:\n  .. ..$ product          : chr [1:6] \"wrench\" \"saw\" \"hammer\" \"screws\" ...\n  .. ..$ price            : num [1:6] 11.99 8 11 3.5 2.99 ...\n  .. ..$ salePrice        : num [1:6] NA 7 10 2.5 2.5 NA\n  .. ..$ amountSold       : num [1:6] 40 100 3 100 200 10\n  .. ..$ amountInInventory: num [1:6] 30 5 40 0 0 3\n\n##################################.\n# Answer - part B - ANOTHER ANSWER\n##################################.\n\n# create an empty list\nstores2 = list()\n\n# set the date \nstores2$date = paste( stores$month , stores$year, sep=\"/\")\n\n# copy the data for all the stores from the stores variable\nstores2[2:(length(stores)-1)] = stores[3:length(stores)]\n\nstr(stores2)\n\nList of 4\n $ date: chr \"10/2021\"\n $     :List of 4\n  ..$ address : chr \"123 main street\"\n  ..$ storeId : chr \"1000\"\n  ..$ manager : chr \"joe\"\n  ..$ products:'data.frame':    4 obs. of  5 variables:\n  .. ..$ product          : chr [1:4] \"hammer\" \"screwdriver\" \"hand saw\" \"wrench\"\n  .. ..$ price            : num [1:4] 11 8 15 5\n  .. ..$ salePrice        : num [1:4] 8.99 NA NA 4.5\n  .. ..$ amountSold       : num [1:4] 100 200 50 75\n  .. ..$ amountInInventory: num [1:4] 20 12 0 5\n $     :List of 4\n  ..$ address : chr \"99 hickory place\"\n  ..$ storeId : chr \"1111\"\n  ..$ manager : chr \"sue\"\n  ..$ products:'data.frame':    5 obs. of  5 variables:\n  .. ..$ product          : chr [1:5] \"wrench\" \"screwdriver\" \"screws\" \"nails\" ...\n  .. ..$ price            : num [1:5] 11.99 8 3.5 2.99 4.99\n  .. ..$ salePrice        : num [1:5] NA 7 NA 2.5 4.5\n  .. ..$ amountSold       : num [1:5] 80 195 200 400 80\n  .. ..$ amountInInventory: num [1:5] 20 15 40 15 0\n $     :List of 4\n  ..$ address : chr \"450 broadway\"\n  ..$ storeId : chr \"2345\"\n  ..$ manager : chr \"carla\"\n  ..$ products:'data.frame':    6 obs. of  5 variables:\n  .. ..$ product          : chr [1:6] \"wrench\" \"saw\" \"hammer\" \"screws\" ...\n  .. ..$ price            : num [1:6] 11.99 8 11 3.5 2.99 ...\n  .. ..$ salePrice        : num [1:6] NA 7 10 2.5 2.5 NA\n  .. ..$ amountSold       : num [1:6] 40 100 3 100 200 10\n  .. ..$ amountInInventory: num [1:6] 30 5 40 0 0 3\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 2\n# TOPIC: lists, paste\n# \n# Same as the previous question but DO NOT use the $dollar-sign-notation\n# for accessing the list.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\n# The [[double-bracket]] notation is equivalent to the $dollar-sign notation.\n# NOTE - do NOT use the [single-bracket] notation.\n#\n# stores[[1]] in the data above is \"2021\"\n#\n# However, stores[1] in the data above is a LIST that contains \"2021\"\n\npaste( stores[[2]] , stores[[1]], sep=\"/\")\n\n[1] \"10/2021\"\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 3\n# TOPIC: lists, c\n# \n# Part A\n# Write a single command that returns a vector that contains\n# the addresses of the first and second stores.\n# The answer should look as follows: \n  #   [1] \"123 main street\"  \"99 hickory place\"\n#\n# Part B\n# Do this again, but this time use a different notation to access the list.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\npart a - click here for answer\n\n\n\n\n\n\n##################.\n# ANSWER - PART A\n##################.\n\n# Look at the answer carefully.\n# NOTE that stores[[3]] is the list for the first store\n# Therefore stores[[3]]$address is the address of the first store.\n#\n# HOWEVER - be careful\n# stores[3] is a LIST that contains the list for the first store.\n# Therefore stores[3]$address is wrong since the list stores[3] only \n# contains a single item, i.e. another list, and does NOT contain an $address item.\n# \n# You can see this more clearly if you use the str function. \n# Compare the output of the following 3 commands:\n# str(stores)\n# str(stores[[3]])\n# str(stores[3])\n\nc(stores[[3]]$address, stores[[4]]$address)\n\n[1] \"123 main street\"  \"99 hickory place\"\n\n\n\n\n\n\n\n\n\n\n\npart b - click here for answer\n\n\n\n\n\n\n##################.\n# ANSWER - PART B\n##################.\n\nc(stores[[3]][[1]], stores[[4]][[1]])\n\n[1] \"123 main street\"  \"99 hickory place\"\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 4\n# TOPIC: lists\n# \n# Write a command to display the number of different products\n# that are carried by the first store.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\nnrow(stores[[3]]$products)\n\n[1] 4\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 5\n# TOPIC: lists\n#\n# Write a command that calculates the number of stores in the chain.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\nlength( stores ) - 2\n\n[1] 3\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 6\n# TOPIC: lists\n#\n# Write a command to retrieve a list that contains \n# the year, month and just the data for the 2nd store.\n# Store this new list in a variable called store2.\n# The structure of the data should be exactly the same.\n#\n# Remember that the data above only contains three stores, but the command you write\n# should work even if there were more stores (e.g. 100 stores) in the data.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\nstore2 = stores[c(1,2,4)]\n\n# The following commands are NOT part of the answer but may help\n# you to understand the results.\nstore2   # see the answer\n\n$year\n[1] 2021\n\n$month\n[1] 10\n\n[[3]]\n[[3]]$address\n[1] \"99 hickory place\"\n\n[[3]]$storeId\n[1] \"1111\"\n\n[[3]]$manager\n[1] \"sue\"\n\n[[3]]$products\n      product price salePrice amountSold amountInInventory\n1      wrench 11.99        NA         80                20\n2 screwdriver  8.00       7.0        195                15\n3      screws  3.50        NA        200                40\n4       nails  2.99       2.5        400                15\n5      pliers  4.99       4.5         80                 0\n\nstr(store2) # understand the structure of the answer\n\nList of 3\n $ year : num 2021\n $ month: num 10\n $      :List of 4\n  ..$ address : chr \"99 hickory place\"\n  ..$ storeId : chr \"1111\"\n  ..$ manager : chr \"sue\"\n  ..$ products:'data.frame':    5 obs. of  5 variables:\n  .. ..$ product          : chr [1:5] \"wrench\" \"screwdriver\" \"screws\" \"nails\" ...\n  .. ..$ price            : num [1:5] 11.99 8 3.5 2.99 4.99\n  .. ..$ salePrice        : num [1:5] NA 7 NA 2.5 4.5\n  .. ..$ amountSold       : num [1:5] 80 195 200 400 80\n  .. ..$ amountInInventory: num [1:5] 20 15 40 15 0\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 7\n# TOPIC: lists\n#\n# The first store in the data actually went out of business in 9/2021\n# However, it was mistakenly left in the data for 10/2021.\n# Write a command to create a variable named updatedStores that contains\n# all of the data from the stores list but without the data for the first store.\n#\n# Remember that the data above only contains three stores, but the command you write\n# should work even if there were more stores (e.g. 100 stores) in the data.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\n# [single-brackets] since you are getting back a list of items\n# The index -3 means get back everything except for the third item\n# in the list, i.e. everything except for the data for the first store.\nupdatedStores = stores[-3] \n\n# The following commands are NOT part of the answer but may help\n# you to understand the results.\nupdatedStores   # see the answer\n\n$year\n[1] 2021\n\n$month\n[1] 10\n\n[[3]]\n[[3]]$address\n[1] \"99 hickory place\"\n\n[[3]]$storeId\n[1] \"1111\"\n\n[[3]]$manager\n[1] \"sue\"\n\n[[3]]$products\n      product price salePrice amountSold amountInInventory\n1      wrench 11.99        NA         80                20\n2 screwdriver  8.00       7.0        195                15\n3      screws  3.50        NA        200                40\n4       nails  2.99       2.5        400                15\n5      pliers  4.99       4.5         80                 0\n\n\n[[4]]\n[[4]]$address\n[1] \"450 broadway\"\n\n[[4]]$storeId\n[1] \"2345\"\n\n[[4]]$manager\n[1] \"carla\"\n\n[[4]]$products\n  product price salePrice amountSold amountInInventory\n1  wrench 11.99        NA         40                30\n2     saw  8.00       7.0        100                 5\n3  hammer 11.00      10.0          3                40\n4  screws  3.50       2.5        100                 0\n5   nails  2.99       2.5        200                 0\n6   drill 44.99        NA         10                 3\n\nstr(updatedStores) # understand the structure of the answer\n\nList of 4\n $ year : num 2021\n $ month: num 10\n $      :List of 4\n  ..$ address : chr \"99 hickory place\"\n  ..$ storeId : chr \"1111\"\n  ..$ manager : chr \"sue\"\n  ..$ products:'data.frame':    5 obs. of  5 variables:\n  .. ..$ product          : chr [1:5] \"wrench\" \"screwdriver\" \"screws\" \"nails\" ...\n  .. ..$ price            : num [1:5] 11.99 8 3.5 2.99 4.99\n  .. ..$ salePrice        : num [1:5] NA 7 NA 2.5 4.5\n  .. ..$ amountSold       : num [1:5] 80 195 200 400 80\n  .. ..$ amountInInventory: num [1:5] 20 15 40 15 0\n $      :List of 4\n  ..$ address : chr \"450 broadway\"\n  ..$ storeId : chr \"2345\"\n  ..$ manager : chr \"carla\"\n  ..$ products:'data.frame':    6 obs. of  5 variables:\n  .. ..$ product          : chr [1:6] \"wrench\" \"saw\" \"hammer\" \"screws\" ...\n  .. ..$ price            : num [1:6] 11.99 8 11 3.5 2.99 ...\n  .. ..$ salePrice        : num [1:6] NA 7 10 2.5 2.5 NA\n  .. ..$ amountSold       : num [1:6] 40 100 3 100 200 10\n  .. ..$ amountInInventory: num [1:6] 30 5 40 0 0 3\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 8\n# TOPIC: lists, %in%\n#\n# The stores are allowed to carry different product lines.\n# Write a command that shows those products that are carried by the \n# second store that are not carried by the first store.\n# \n# PART A - write this answer using the %in% operator\n# PART B - write this answer without using the %in% operator\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\n# PART A\nstores[[4]]$product [ ! ( stores[[4]]$product %in% stores[[3]]$product ) ]\n\n      product price salePrice amountSold amountInInventory\n1      wrench 11.99        NA         80                20\n2 screwdriver  8.00       7.0        195                15\n3      screws  3.50        NA        200                40\n4       nails  2.99       2.5        400                15\n5      pliers  4.99       4.5         80                 0\n\n# PART B\nsetdiff(stores[[4]]$product, stores[[3]]$product)\n\n$product\n[1] \"wrench\"      \"screwdriver\" \"screws\"      \"nails\"       \"pliers\"     \n\n$price\n[1] 11.99  8.00  3.50  2.99  4.99\n\n$salePrice\n[1]  NA 7.0  NA 2.5 4.5\n\n$amountSold\n[1]  80 195 200 400  80\n\n$amountInInventory\n[1] 20 15 40 15  0\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 9\n# TOPIC: lists, is.na\n#\n# The products that are on sale have a number for the sale price.\n# The products that are NOT on sale have NA for the sale price.\n# Write a command to return a VECTOR of the names of the products\n# that are on sale in the first store.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\nstores[[3]]$product [ !is.na(stores[[3]]$salePrice) ]\n\ndata frame with 0 columns and 4 rows\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 10\n# TOPIC: lists, is.na, parallel vectors\n#\n# See the previous question.\n#\n# For this question create a variable named saleProducts that\n# contains a dataframe with just those rows from the first store's products\n# which are on sale. (You may answer using several lines of code).\n#\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\nproducts = stores[[3]]$products\nsaleProducts = products[ !is.na(products$salePrice) , ]\n\n# The following commands are NOT part of the answer but may help\n# you to understand the results.\nproducts   \n\n      product price salePrice amountSold amountInInventory\n1      hammer 10.99      8.99        100                20\n2 screwdriver  8.00        NA        200                12\n3    hand saw 15.00        NA         50                 0\n4      wrench  5.00      4.50         75                 5\n\nsaleProducts\n\n  product price salePrice amountSold amountInInventory\n1  hammer 10.99      8.99        100                20\n4  wrench  5.00      4.50         75                 5\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 11\n# TOPIC: lists, names\n#\n# The list, stores, contains names for the year and month entries,\n# but does not contain names for the two stores. \n# \n# PART A\n#\n# Copy the data for stores into a variable named storesWithNames\n# i.e. storesWithNames = stores\n# Then modify storesWithNames so that\n#  - the list of data for the 1st store has the name \"store1\" in the main list\n#  - the list of data for the 2nd store has the name \"store2\" in the main list\n#  - etc ... for all of the stores (you code should work even if there were more stores)\n#\n#\n# PART B\n# Now use the storesWithNames variable to display just the product names and prices \n# in the 1st store, i.e. store1, whose prices are $10 or more.\n# Use the new names that you just created in PART A as part of your answer.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\npart a - click here for answer\n\n\n\n\n\n\n####################.\n# ANSWER - Part A\n####################.\n\nstoresWithNames = stores   # as directed to do in the question\nnames(storesWithNames)[3:length(storesWithNames)] = paste0(\"store\", 1:(length(storesWithNames)-2))\n\n# The following commands are NOT part of the answer but may help\n# you to understand the results.\nstoresWithNames   # see the answer\n\n$year\n[1] 2021\n\n$month\n[1] 10\n\n$store1\n$store1$address\n[1] \"123 main street\"\n\n$store1$storeId\n[1] \"1000\"\n\n$store1$manager\n[1] \"joe\"\n\n$store1$products\n      product price salePrice amountSold amountInInventory\n1      hammer 10.99      8.99        100                20\n2 screwdriver  8.00        NA        200                12\n3    hand saw 15.00        NA         50                 0\n4      wrench  5.00      4.50         75                 5\n\n\n$store2\n$store2$address\n[1] \"99 hickory place\"\n\n$store2$storeId\n[1] \"1111\"\n\n$store2$manager\n[1] \"sue\"\n\n$store2$products\n      product price salePrice amountSold amountInInventory\n1      wrench 11.99        NA         80                20\n2 screwdriver  8.00       7.0        195                15\n3      screws  3.50        NA        200                40\n4       nails  2.99       2.5        400                15\n5      pliers  4.99       4.5         80                 0\n\n\n$store3\n$store3$address\n[1] \"450 broadway\"\n\n$store3$storeId\n[1] \"2345\"\n\n$store3$manager\n[1] \"carla\"\n\n$store3$products\n  product price salePrice amountSold amountInInventory\n1  wrench 11.99        NA         40                30\n2     saw  8.00       7.0        100                 5\n3  hammer 11.00      10.0          3                40\n4  screws  3.50       2.5        100                 0\n5   nails  2.99       2.5        200                 0\n6   drill 44.99        NA         10                 3\n\nstr(storesWithNames) # understand the structure of the answer\n\nList of 5\n $ year  : num 2021\n $ month : num 10\n $ store1:List of 4\n  ..$ address : chr \"123 main street\"\n  ..$ storeId : chr \"1000\"\n  ..$ manager : chr \"joe\"\n  ..$ products:'data.frame':    4 obs. of  5 variables:\n  .. ..$ product          : chr [1:4] \"hammer\" \"screwdriver\" \"hand saw\" \"wrench\"\n  .. ..$ price            : num [1:4] 11 8 15 5\n  .. ..$ salePrice        : num [1:4] 8.99 NA NA 4.5\n  .. ..$ amountSold       : num [1:4] 100 200 50 75\n  .. ..$ amountInInventory: num [1:4] 20 12 0 5\n $ store2:List of 4\n  ..$ address : chr \"99 hickory place\"\n  ..$ storeId : chr \"1111\"\n  ..$ manager : chr \"sue\"\n  ..$ products:'data.frame':    5 obs. of  5 variables:\n  .. ..$ product          : chr [1:5] \"wrench\" \"screwdriver\" \"screws\" \"nails\" ...\n  .. ..$ price            : num [1:5] 11.99 8 3.5 2.99 4.99\n  .. ..$ salePrice        : num [1:5] NA 7 NA 2.5 4.5\n  .. ..$ amountSold       : num [1:5] 80 195 200 400 80\n  .. ..$ amountInInventory: num [1:5] 20 15 40 15 0\n $ store3:List of 4\n  ..$ address : chr \"450 broadway\"\n  ..$ storeId : chr \"2345\"\n  ..$ manager : chr \"carla\"\n  ..$ products:'data.frame':    6 obs. of  5 variables:\n  .. ..$ product          : chr [1:6] \"wrench\" \"saw\" \"hammer\" \"screws\" ...\n  .. ..$ price            : num [1:6] 11.99 8 11 3.5 2.99 ...\n  .. ..$ salePrice        : num [1:6] NA 7 10 2.5 2.5 NA\n  .. ..$ amountSold       : num [1:6] 40 100 3 100 200 10\n  .. ..$ amountInInventory: num [1:6] 30 5 40 0 0 3\n\n\n\n\n\n\n\n\n\n\n\npart b - click here for answer\n\n\n\n\n\n\n####################.\n# ANSWER - Part B\n####################.\n\n# Answer with one line of code\nstoresWithNames$store1$products [ storesWithNames$store1$products$price &gt;= 10 , c(\"product\",\"price\")]\n\n   product price\n1   hammer 10.99\n3 hand saw 15.00\n\n  # Alternative answer with more than one line of code\nstore1products = storesWithNames$store1$products\nstore1products[ store1products$price &gt;= 10, c(\"product\", \"price\")]\n\n   product price\n1   hammer 10.99\n3 hand saw 15.00\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 12\n# TOPIC: lists\n#\n# Write the following function: \n#    addStore(stores, address, storeId, manager, products)\n#\n# Arguments:\n#    stores - the complete stores list\n#    address - the address of the new store\n#    storeId - the id of the new store\n#    manager - the manager of the new store\n#    products - the products dataframe of the new store\n#\n# Returns:\n#    A new stores vector that includes an entry for the new store.\n#\n# Your code should add the new store as at the end of the list of stores.\n# Right now the stores list only contains 3 stores so your code should \n# add the new store as the 4th store - however, your code should work no\n# matter how many stores are in the list.\n#\n# Example: \n#    YOUR CODE TO DEFINE THE FUNCTION GOES HERE\n#\n#    stores = addStore(stores, \"4 apple drive\", \"4000\", \"dana\",\n#                      data.frame(product = c(\"hammer\",\"saw\"),\n#                                 price = c(10,15),\n#                                 salePrice=c(NA,NA),\n#                                 amountSold = c(100,200),\n#                                 amountInInventory = c(20,30)))\n#\n#    stores = addStore(stores, \"5 orange grove\", \"5000\", \"jan\",\n#                      data.frame(product = c(\"wrench\",\"hammer\"),\n#                                 price = c(12,9.50),\n#                                 salePrice=c(NA,NA),\n#                                 amountSold = c(90,80),\n#                                 amountInInventory = c(10,20)))\n#\n#    str(stores[c(6,7)])\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\naddStore = function(stores, address, storeId, manager, products){\n  stores[[length(stores)+1]] = list(address = address,\n                                    storeId = storeId,\n                                    manager = manager, \n                                    products=products)\n  return(stores)\n}\n\n# try it\n\nnewStores = stores\nnewStores = addStore(newStores, \"4 apple drive\", \"4000\", \"dana\",\n                  data.frame(product = c(\"hammer\",\"saw\"),\n                             price = c(10,15),\n                             salePrice=c(NA,NA),\n                             amountSold = c(100,200),\n                             amountInInventory = c(20,30)))\n\nnewStores = addStore(newStores, \"5 orange grove\", \"5000\", \"jan\",\n                  data.frame(product = c(\"wrench\",\"hammer\"),\n                             price = c(12,9.50),\n                             salePrice=c(NA,NA),\n                             amountSold = c(90,80),\n                             amountInInventory = c(10,20)))\n\nstr(newStores[c(6,7)])\n\nList of 2\n $ :List of 4\n  ..$ address : chr \"4 apple drive\"\n  ..$ storeId : chr \"4000\"\n  ..$ manager : chr \"dana\"\n  ..$ products:'data.frame':    2 obs. of  5 variables:\n  .. ..$ product          : chr [1:2] \"hammer\" \"saw\"\n  .. ..$ price            : num [1:2] 10 15\n  .. ..$ salePrice        : logi [1:2] NA NA\n  .. ..$ amountSold       : num [1:2] 100 200\n  .. ..$ amountInInventory: num [1:2] 20 30\n $ :List of 4\n  ..$ address : chr \"5 orange grove\"\n  ..$ storeId : chr \"5000\"\n  ..$ manager : chr \"jan\"\n  ..$ products:'data.frame':    2 obs. of  5 variables:\n  .. ..$ product          : chr [1:2] \"wrench\" \"hammer\"\n  .. ..$ price            : num [1:2] 12 9.5\n  .. ..$ salePrice        : logi [1:2] NA NA\n  .. ..$ amountSold       : num [1:2] 90 80\n  .. ..$ amountInInventory: num [1:2] 10 20\n\nstr(newStores)\n\nList of 7\n $ year : num 2021\n $ month: num 10\n $      :List of 4\n  ..$ address : chr \"123 main street\"\n  ..$ storeId : chr \"1000\"\n  ..$ manager : chr \"joe\"\n  ..$ products:'data.frame':    4 obs. of  5 variables:\n  .. ..$ product          : chr [1:4] \"hammer\" \"screwdriver\" \"hand saw\" \"wrench\"\n  .. ..$ price            : num [1:4] 11 8 15 5\n  .. ..$ salePrice        : num [1:4] 8.99 NA NA 4.5\n  .. ..$ amountSold       : num [1:4] 100 200 50 75\n  .. ..$ amountInInventory: num [1:4] 20 12 0 5\n $      :List of 4\n  ..$ address : chr \"99 hickory place\"\n  ..$ storeId : chr \"1111\"\n  ..$ manager : chr \"sue\"\n  ..$ products:'data.frame':    5 obs. of  5 variables:\n  .. ..$ product          : chr [1:5] \"wrench\" \"screwdriver\" \"screws\" \"nails\" ...\n  .. ..$ price            : num [1:5] 11.99 8 3.5 2.99 4.99\n  .. ..$ salePrice        : num [1:5] NA 7 NA 2.5 4.5\n  .. ..$ amountSold       : num [1:5] 80 195 200 400 80\n  .. ..$ amountInInventory: num [1:5] 20 15 40 15 0\n $      :List of 4\n  ..$ address : chr \"450 broadway\"\n  ..$ storeId : chr \"2345\"\n  ..$ manager : chr \"carla\"\n  ..$ products:'data.frame':    6 obs. of  5 variables:\n  .. ..$ product          : chr [1:6] \"wrench\" \"saw\" \"hammer\" \"screws\" ...\n  .. ..$ price            : num [1:6] 11.99 8 11 3.5 2.99 ...\n  .. ..$ salePrice        : num [1:6] NA 7 10 2.5 2.5 NA\n  .. ..$ amountSold       : num [1:6] 40 100 3 100 200 10\n  .. ..$ amountInInventory: num [1:6] 30 5 40 0 0 3\n $      :List of 4\n  ..$ address : chr \"4 apple drive\"\n  ..$ storeId : chr \"4000\"\n  ..$ manager : chr \"dana\"\n  ..$ products:'data.frame':    2 obs. of  5 variables:\n  .. ..$ product          : chr [1:2] \"hammer\" \"saw\"\n  .. ..$ price            : num [1:2] 10 15\n  .. ..$ salePrice        : logi [1:2] NA NA\n  .. ..$ amountSold       : num [1:2] 100 200\n  .. ..$ amountInInventory: num [1:2] 20 30\n $      :List of 4\n  ..$ address : chr \"5 orange grove\"\n  ..$ storeId : chr \"5000\"\n  ..$ manager : chr \"jan\"\n  ..$ products:'data.frame':    2 obs. of  5 variables:\n  .. ..$ product          : chr [1:2] \"wrench\" \"hammer\"\n  .. ..$ price            : num [1:2] 12 9.5\n  .. ..$ salePrice        : logi [1:2] NA NA\n  .. ..$ amountSold       : num [1:2] 90 80\n  .. ..$ amountInInventory: num [1:2] 10 20\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 13\n# TOPIC: lists\n#\n# PART A\n# Use lapply to retrieve a list of just addresses from all of the\n# stores in the stores list. Your code should work no matter how many\n# stores are in the list.\n#\n# PART B\n# Modify your answer to use sapply so that you get a vector instead\n# of a list.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\npart a - click here for answer\n\n\n\n\n\n\n##################.\n# ANSWER - PART A\n##################.\n\nlapply(stores[3:length(stores)],\n       function(store) store$address)\n\n[[1]]\n[1] \"123 main street\"\n\n[[2]]\n[1] \"99 hickory place\"\n\n[[3]]\n[1] \"450 broadway\"\n\n\n\n\n\n\n\n\n\n\n\npart b - click here for answer\n\n\n\n\n\n\n##################.\n# ANSWER - PART B\n##################.\n\nsapply(stores[3:length(stores)],\n       function(store) store$address)\n\n                                                         \n \"123 main street\" \"99 hickory place\"     \"450 broadway\" \n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 14\n# TOPIC: lists, dataframes, rbind\n#\n# Create a single products dataframe that combines the products\n# from the 1st and 2nd stores. Hint - use rbind.\n#\n# The combined dataframe should include a new column, location, that records\n# the address of the store from which the data in a particular row comes from.\n# Setup the new dataframe so that the location column is the first column.\n#\n# Store the new dataframe in a variable named, combinedProducts.\n#\n# You may use more than one line of code.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n###########.\n# ANSWER\n###########.\n\ndf1 = stores[[3]]$products\ndf1$location = stores[[3]]$address\n\ndf2 = stores[[4]]$products\ndf2$location = stores[[4]]$address\n\ncombinedProducts = rbind ( df1, df2 )\n\ncombinedProducts = combinedProducts[ , c(ncol(combinedProducts), 1:(ncol(combinedProducts) - 1))]\n\ncombinedProducts\n\n          location     product price salePrice amountSold amountInInventory\n1  123 main street      hammer 10.99      8.99        100                20\n2  123 main street screwdriver  8.00        NA        200                12\n3  123 main street    hand saw 15.00        NA         50                 0\n4  123 main street      wrench  5.00      4.50         75                 5\n5 99 hickory place      wrench 11.99        NA         80                20\n6 99 hickory place screwdriver  8.00      7.00        195                15\n7 99 hickory place      screws  3.50        NA        200                40\n8 99 hickory place       nails  2.99      2.50        400                15\n9 99 hickory place      pliers  4.99      4.50         80                 0\n\n\n\n\n\n\n#----------------------------------------------------------------------------------\n# QUESTION 15\n# TOPIC: lists\n#\n# PART A\n# \n# Use lapply to create a list that contains just the products dataframes from \n# all of the stores. Each dataframe in the list of dataframes should\n# include a location column that contains the address of the store\n# for the products. Name the list productDataframes.\n#\n# PART B\n# \n# Look up the documentation for the do.call function. \n# Use do.call to combine ALL of the product dataframes from PART A \n# into a single combined dataframe named allProducts.\n#----------------------------------------------------------------------------------\n\n\n\n\n\n\n\npart a - click here for answer\n\n\n\n\n\n\n##################.\n# ANSWER - PART A\n##################.\n\nproductsWithLocation = function(store) {\n  products = store$products\n  products$location = store$address\n  products = products[ c( ncol(products), 2:(ncol(products) - 1)) ]\n  return(products)\n}\n\nproductDataframes = lapply(stores[3:length(stores)], productsWithLocation)\n\n\n\n\n\n\n\n\n\n\npart b - click here for answer\n\n\n\n\n\n\n##################.\n# ANSWER - PART B\n##################.\n\nallProducts = do.call ( rbind, productDataframes )\nallProducts\n\n           location price salePrice amountSold amountInInventory\n1   123 main street 10.99      8.99        100                20\n2   123 main street  8.00        NA        200                12\n3   123 main street 15.00        NA         50                 0\n4   123 main street  5.00      4.50         75                 5\n5  99 hickory place 11.99        NA         80                20\n6  99 hickory place  8.00      7.00        195                15\n7  99 hickory place  3.50        NA        200                40\n8  99 hickory place  2.99      2.50        400                15\n9  99 hickory place  4.99      4.50         80                 0\n10     450 broadway 11.99        NA         40                30\n11     450 broadway  8.00      7.00        100                 5\n12     450 broadway 11.00     10.00          3                40\n13     450 broadway  3.50      2.50        100                 0\n14     450 broadway  2.99      2.50        200                 0\n15     450 broadway 44.99        NA         10                 3",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>Practice Questions - TOPIC: Lists and Dataframes.</span>"
    ]
  },
  {
    "objectID": "001100-assignment-loops-v001-SOLUTIONS-v002-ONLY_QUESTIONS_4-9.html",
    "href": "001100-assignment-loops-v001-SOLUTIONS-v002-ONLY_QUESTIONS_4-9.html",
    "title": "43  Practice Questions - TOPIC: loops (writing code)",
    "section": "",
    "text": "QUESTION 1 - TOPICS: generating random values\n\n# Write a function named, rollDice that simulates the rolling of one or\n# more dice. \n# \n# - The function should take a single argument, numberOfDice that indicates the\n#   number of dice being thrown.\n#\n# - numberOfDice is expected to be a positive whole number. \n#   If it is not then the function should stop and display an\n#   error message.\n#\n# - The function should return a vector of random whole numbers.\n#   The value of each number should be randomly chosen to be  1,2,3,4,5 or 6.\n#   There should be as many numbers in the vector as indicated by the\n#   argument numberOfDice.\n#\n# For example:\n#   &gt; rollDice(1)\n# [1] 3\n# \n# &gt; rollDice(1)\n# [1] 6\n# \n# &gt; rollDice(2)\n# [1] 2 4\n# \n# &gt; rollDice(2)\n# [1] 6 1\n# \n# &gt; rollDice(5)\n# [1] 6 3 3 4 6\n# \n# &gt; rollDice(5)\n# [1] 4 4 2 6 5\n# \n#\n# PART A \n#\n#   Use the sample function to write rollDice.\n#\n#\n# PART B\n#\n#   Instead of the sample function, use the runif function (see ?runif).\n#   Set the min and max arguments of runif to 1 and 7 respectively. \n#   Then use the trunc function to remove the decimal points from the\n#   values that runif returns. Using this approach it will be \n#   impossible for the code to result in anything other than\n#   1,2,3,4,5 or 6. runif will NOT generate a 7 since\n#   the documentation for runif says the following:\n#   \n#       runif will not generate either of the extreme values unless \n#       max = min or max-min is small compared to min, and in particular \n#       not for the default arguments.\n# \n#   Therefore once you truncate the result that you get from runif you\n#   will be left with numbers that are either 1,2,3,4,5 or 6.\n#\n#\n# PART C (THINKING DEEPER)\n#\n#   If you follow the hints above, for part B, the resulting rollDice function, \n#   is not 100% \"fair\". Note that according to the documentation mentioned above \n#   if you specify min as 1 and max as 7, then runif will never generate 7.0000 \n#   or 1.00000. Therefore, technically, the result of your rollDice function \n#   would be very slightly less likely to generate 1s than other numbers.  \n#   Think about how you could theoretically fix this - One way is that you could\n#   set min to 0 (zero) and max to 7 and then truncate the result with trunc. \n#   If you get a zero, you keep repeating this process until you got a \n#   number that wasn't 0. \n\n\n\n\n\n\n\nclick here for answer - part a\n\n\n\n\n\n\n############.\n# ANSWER\n############.\n\nrollDice &lt;- function(numberOfDice){\n  sample(1:6, numberOfDice)\n}\n\n# Examples\nrollDice(1)\n\n[1] 2\n\nrollDice(1)\n\n[1] 1\n\nrollDice(2)\n\n[1] 5 1\n\nrollDice(2)\n\n[1] 6 5\n\nrollDice(5)\n\n[1] 4 1 6 3 2\n\nrollDice(5)\n\n[1] 6 1 2 5 4\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer - part b\n\n\n\n\n\n\n############.\n# ANSWER\n############.\n\nrollDice &lt;- function(numberOfDice){\n  trunc(runif(numberOfDice, min=1, max=7))\n}\n\n# Examples\nrollDice(1)\n\n[1] 2\n\nrollDice(1)\n\n[1] 4\n\nrollDice(2)\n\n[1] 5 4\n\nrollDice(2)\n\n[1] 5 4\n\nrollDice(5)\n\n[1] 6 2 2 3 6\n\nrollDice(5)\n\n[1] 1 6 3 6 6\n\n\n\n\n\n\n\n\n\n\n\nclick here for answer - part c\n\n\n\n\n\n\n############.\n# ANSWER\n############.\n\nrollDice &lt;- function(numberOfDice){\n  answer = numeric(0)\n  \n  while(numberOfDice &gt; 0){\n    # add additional rolls to the answer\n    answer = c(answer, trunc(runif(numberOfDice, min=0, max=7)))\n    \n    # record how many dice were zeros (we will have to regenerate these) \n    numberOfDice = sum( answer == 0 )\n    \n    # remove the zeros \n    answer = answer [ answer &gt; 0 ]\n  }\n  \n  return(answer)\n}\n\n# Examples\nrollDice(1)\n\n[1] 6\n\nrollDice(1)\n\n[1] 4\n\nrollDice(2)\n\n[1] 4 2\n\nrollDice(2)\n\n[1] 4 5\n\nrollDice(5)\n\n[1] 2 1 5 2 2\n\nrollDice(5)\n\n[1] 5 5 2 6 2\n\n\n\n\n\n\n\nQUESTION 2 - TOPICS: loops, cat vs return\n\n# NOTE: You must answer the previous question before doing this one.\n#\n# Write a function named keepRollingUntilSnakeEyes. \n#\n# - The function should not take ANY parameters. \n#\n# - The function should keep calling rollDice(2) inside of a loop to \n#   simulate multiple rolls of two dice. \n#\n# - The loop should stop when the roll is two ones (i.e. \"snake eyes\"). \n#\n# - The function should display the values each roll as shown below. \n#\n# - The function should return the total number of rolls that were made. \n#\n# - See the examples below. \n#\n# HINTS: \n#   a.  Use the cat function to display the messages.\n#   b.  Use a variable to keep track of how many rolls took place\n#   c.  keep looping until you get a 1 and a 1\n# \n# EXAMPLES: \n# \n#   Note that in the first two examples below, the last value displayed is the \n#   value that is \"returned\".  \n#   In the third example below, the return value is captured in a variable \n#   and is displayed in a separate command.  (also see the next question). \n#\n#   &gt; keepRollingUntilSnakeEyes() # return value appears after all the messages\n#   roll #1 was: 2 and 1\n#   roll #2 was: 3 and 5\n#   roll #3 was: 6 and 5\n#   roll #4 was: 4 and 1\n#   roll #5 was: 5 and 5\n#   roll #6 was: 6 and 1\n#   roll #7 was: 2 and 3\n#   roll #8 was: 6 and 3\n#   roll #9 was: 5 and 4\n#   roll #10 was: 6 and 3\n#   roll #11 was: 6 and 3\n#   roll #12 was: 4 and 5\n#   roll #13 was: 4 and 1\n#   roll #14 was: 4 and 2\n#   roll #15 was: 1 and 1\n#   [1] 15\n#   \n#   &gt; keepRollingUntilSnakeEyes()  # return value appears after all messages\n#   roll #1 was: 1 and 1\n#   [1] 1\n#   \n#   &gt; numRolls &lt;- keepRollingUntilSnakeEyes() # return value captured in numRolls\n#   roll #1 was: 2 and 1\n#   roll #2 was: 4 and 3\n#   roll #3 was: 3 and 6\n#   roll #4 was: 3 and 6\n#   roll #5 was: 4 and 3\n#   roll #6 was: 6 and 4\n#   roll #7 was: 6 and 2\n#   roll #8 was: 3 and 2\n#   roll #9 was: 4 and 1\n#   roll #10 was: 1 and 1\n#   \n#   &gt; numRolls  # This is the value that was returned from the function\n#   [1] 10\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n############.\n# ANSWER\n############.\n\n# WHAT TYPE OF LOOP SHOULD I USE?\n#\n#   You can always use a while loop to solve a looping problem.\n#   However, sometimes a for loop makes the code easier to read and write.\n#\n#   Can I use a for loop in this case? NO\n#\n#   You should only use a for loop when it's possible to know before the loop\n#   even starts how many times it will iterate (i.e. how many times it will\n#   go around). \n#\n#   In this case, it's impossible to know in advance how many times it will\n#   take to get snake eyes. It could happen the 1st time, the 50th time,\n#   the 500th time, or never (but that's unlikely).\n\nkeepRollingUntilSnakeEyes &lt;- function(){\n  \n  roll &lt;- rollDice(2)\n  rollnum &lt;- 1\n  cat(\"roll #\", rollnum, \" was: \", roll[1], \" and \", roll[2], \"\\n\", sep=\"\")\n  \n  while (roll[1] != 1 || roll[2] != 1){\n    roll &lt;- rollDice(2)\n    rollnum &lt;- rollnum + 1\n    cat(\"roll #\", rollnum, \" was: \", roll[1], \" and \", roll[2], \"\\n\", sep=\"\")\n  }\n  \n  rollnum  \n}\n\nnumRolls &lt;- keepRollingUntilSnakeEyes()\n\nroll #1 was: 5 and 1\nroll #2 was: 6 and 2\nroll #3 was: 6 and 5\nroll #4 was: 1 and 3\nroll #5 was: 1 and 2\nroll #6 was: 4 and 5\nroll #7 was: 5 and 5\nroll #8 was: 3 and 1\nroll #9 was: 3 and 5\nroll #10 was: 5 and 1\nroll #11 was: 5 and 2\nroll #12 was: 2 and 3\nroll #13 was: 5 and 3\nroll #14 was: 6 and 5\nroll #15 was: 6 and 6\nroll #16 was: 1 and 4\nroll #17 was: 1 and 6\nroll #18 was: 1 and 5\nroll #19 was: 1 and 1\n\nnumRolls\n\n[1] 19\n\n\n\n\n\n\n\nQUESTION 3 - TOPICS: loops\n\n# Modify the function that you created in the previous question, \n# keepRollingUntilSnakeEyes. In this new version you should define a single \n# argument named, showOutput. The default value of showOutput should be FALSE. \n# If showOutput is TRUE then the messages should be displayed. \n# If showOutput is FALSE then the messages should NOT be displayed. \n# In either case, as with the last question, the function should return \n# total number of rolls.  For example:\n#\n# EXAMPLES: \n# \n# &gt; keepRollingUntilSnakeEyes()        # this will not show output\n# [1] 48\n#\n# &gt; keepRollingUntilSnakeEyes(showOutput = FALSE)  # nor will this\n# [1] 80\n#\n# &gt; keepRollingUntilSnakeEyes(FALSE)               # nor will this\n# [1] 1\n#\n# &gt; keepRollingUntilSnakeEyes(TRUE)    # this WILL show output\n# roll #1 was: 4 and 4\n# roll #2 was: 4 and 6\n# roll #3 was: 5 and 4\n# roll #4 was: 4 and 3\n# roll #5 was: 5 and 6\n# roll #6 was: 5 and 5\n# roll #7 was: 2 and 3\n# roll #8 was: 3 and 1\n# roll #9 was: 1 and 3\n# roll #10 was: 3 and 4\n# roll #11 was: 3 and 2\n# roll #12 was: 1 and 2\n# roll #13 was: 6 and 3\n# roll #14 was: 1 and 1\n# [1] 14\n#\n# &gt; keepRollingUntilSnakeEyes(showOutput = TRUE) # this WILL show output\n# roll #1 was: 2 and 4\n# roll #2 was: 6 and 1\n# roll #3 was: 4 and 2\n# roll #4 was: 5 and 4\n# roll #5 was: 5 and 6\n# roll #6 was: 1 and 1\n# [1] 6\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n############.\n# ANSWER\n############.\n\n# WHAT TYPE OF LOOP SHOULD I USE?\n#\n#   You can always use a while loop to solve a looping problem.\n#   However, sometimes a for loop makes the code easier to read and write.\n#\n#   Can I use a for loop in this case? NO\n#\n#   You should only use a for loop when it's possible to know before the loop\n#   even starts how many times it will iterate (i.e. how many times it will\n#   go around). \n#\n#   In this case, it's impossible to know in advance how many times it will\n#   take to get snake eyes. It could happen the 1st time, the 50th time,\n#   the 500th time, or never (but that's unlikely).\n\nkeepRollingUntilSnakeEyes &lt;- function(showOutput = FALSE){\n  \n  roll &lt;- rollDice(2)\n  rollnum &lt;- 1\n  if(showOutput){\n    cat(\"roll #\", rollnum, \" was: \", roll[1], \" and \", roll[2], \"\\n\", sep=\"\")\n  }\n  \n  while (roll[1] != 1 || roll[2] != 1){\n    roll &lt;- rollDice(2)\n    rollnum &lt;- rollnum + 1\n    if(showOutput){\n      cat(\"roll #\", rollnum, \" was: \", roll[1], \" and \", roll[2], \"\\n\", sep=\"\")\n    }\n  }\n  \n  rollnum\n}\n\n\nkeepRollingUntilSnakeEyes()        # this will not show output\n\n[1] 3\n\nkeepRollingUntilSnakeEyes(showOutput = FALSE)  # nor will this\n\n[1] 134\n\nkeepRollingUntilSnakeEyes(FALSE)               # nor will this\n\n[1] 11\n\nkeepRollingUntilSnakeEyes(TRUE)    # this WILL show output\n\nroll #1 was: 2 and 1\nroll #2 was: 3 and 1\nroll #3 was: 5 and 6\nroll #4 was: 5 and 5\nroll #5 was: 1 and 5\nroll #6 was: 5 and 1\nroll #7 was: 5 and 6\nroll #8 was: 4 and 3\nroll #9 was: 1 and 4\nroll #10 was: 6 and 1\nroll #11 was: 3 and 5\nroll #12 was: 1 and 3\nroll #13 was: 6 and 4\nroll #14 was: 1 and 3\nroll #15 was: 6 and 3\nroll #16 was: 2 and 2\nroll #17 was: 1 and 5\nroll #18 was: 6 and 3\nroll #19 was: 1 and 4\nroll #20 was: 5 and 4\nroll #21 was: 3 and 5\nroll #22 was: 2 and 1\nroll #23 was: 3 and 3\nroll #24 was: 2 and 6\nroll #25 was: 6 and 4\nroll #26 was: 1 and 6\nroll #27 was: 6 and 3\nroll #28 was: 6 and 4\nroll #29 was: 5 and 2\nroll #30 was: 3 and 1\nroll #31 was: 4 and 1\nroll #32 was: 1 and 5\nroll #33 was: 3 and 4\nroll #34 was: 1 and 2\nroll #35 was: 4 and 1\nroll #36 was: 3 and 3\nroll #37 was: 6 and 6\nroll #38 was: 3 and 6\nroll #39 was: 4 and 2\nroll #40 was: 2 and 1\nroll #41 was: 3 and 1\nroll #42 was: 1 and 1\n\n\n[1] 42\n\nkeepRollingUntilSnakeEyes(showOutput = TRUE) # this WILL show output\n\nroll #1 was: 5 and 5\nroll #2 was: 5 and 2\nroll #3 was: 4 and 1\nroll #4 was: 6 and 4\nroll #5 was: 4 and 4\nroll #6 was: 2 and 6\nroll #7 was: 6 and 5\nroll #8 was: 2 and 4\nroll #9 was: 6 and 6\nroll #10 was: 2 and 6\nroll #11 was: 1 and 2\nroll #12 was: 4 and 4\nroll #13 was: 3 and 6\nroll #14 was: 4 and 1\nroll #15 was: 5 and 3\nroll #16 was: 5 and 1\nroll #17 was: 6 and 2\nroll #18 was: 5 and 1\nroll #19 was: 5 and 5\nroll #20 was: 5 and 5\nroll #21 was: 5 and 1\nroll #22 was: 4 and 6\nroll #23 was: 6 and 3\nroll #24 was: 3 and 5\nroll #25 was: 2 and 5\nroll #26 was: 5 and 2\nroll #27 was: 4 and 2\nroll #28 was: 6 and 4\nroll #29 was: 2 and 6\nroll #30 was: 3 and 4\nroll #31 was: 2 and 6\nroll #32 was: 1 and 4\nroll #33 was: 2 and 2\nroll #34 was: 5 and 3\nroll #35 was: 6 and 6\nroll #36 was: 2 and 4\nroll #37 was: 5 and 2\nroll #38 was: 6 and 5\nroll #39 was: 5 and 4\nroll #40 was: 4 and 1\nroll #41 was: 1 and 4\nroll #42 was: 4 and 3\nroll #43 was: 6 and 4\nroll #44 was: 4 and 3\nroll #45 was: 1 and 1\n\n\n[1] 45\n\n\n\n\n\n\n\nQUESTION 4 - TOPICS - loops\n\n# NOTE: You must answer the previous questions before doing this one.\n#\n# Do all of the following steps:\n#\n# PART A\n# \n#   Write a function named playManyTimes that calls the function \n#   keepRollingUntilSnakeEyes in a loop.\n#   The function playManyTimes should take an argument, n, that indicates the\n#   number of times the game should be played. playManyTimes should return a\n#   vector that contains the number of rolls it took each time the\n#   keepRollingUntilSnakesEyes function was called. For example:\n#\n#   &gt; playManyTimes(3)\n#       [1] 66  1 22\n#\n#   &gt; playManyTimes(10)\n#   [1]   6  27  35 106  38  51 100   1   1  26\n#\n#\n# PART B\n# \n#   Run the command:     results &lt;- playManyTimes(10000)\n#   to capture the results of playing the game ten thousand times. \n#\n# PART C\n#\n#   Create a histogram of the results with the command:   h &lt;- hist(results)    \n#   The histogram should look similar to the example shown below. You can see\n#   from this histogram that the function keepRollingUntilSnakeEyes  \n#   is much more likely to return smaller numbers than to return larger \n#   numbers:\n#\n#\n# PART D\n#\n#   In the previous step the command:        h &lt;- hist(results) \n#   displayed a histogram. However, the function also returned an R \"list\"\n#   that was captured in the variable h. The value of the list wasn't \n#   displayed since hist returns an \"invisible\" value (see ?invisible)\n#   In any case, even though the return value is \"invisible\" you can still\n#   display the contents of this variable to examine details about \n#   the histogram (see the output below). \n#\n#   For example, the counts entry in h contains the number of values in the \n#   results variable that fell into each \"bar\" of the histogram. \n#   The sum of all these counts are 10,000,as should be expected.\n#\n#   Examine the value of the counts entry in the list.\n#   Then use the sum function to check to make sure that the\n#   counts sum to a total of 10,000 (as they should).\n\n\n\n\n\n\n\nclick here for answer - parts a and b\n\n\n\n\n\n\n############.\n# ANSWER\n############.\n\n##################.\n# PARTS A and B\n##################.\n\n# WHAT TYPE OF LOOP SHOULD I USE?\n#\n#   You can always use a while loop to solve a looping problem.\n#   However, sometimes a for loop makes the code easier to read and write.\n#\n#   Can I use a for loop in this case? YES\n#\n#   You should only use a for loop when it's possible to know before the loop\n#   even starts how many times it will iterate (i.e. how many times it will\n#   go around). \n#\n#   In this case, since the value of n (i.e. the number of times to loop)\n#   is known before we even start the loop, we can use a for loop (as well \n#   as a while loop).\n\n#------------------------------.\n# This version uses a for loop\n#------------------------------.\nplayManyTimes &lt;- function(n) {\n  answer &lt;- numeric()\n  \n  # From just the following line you can see that we will loop n times. \n  # Each time through the loop, one of the values in the vector 1:n is\n  # placed into the variable num. In this simple loop we don't need \n  # to use the variable num inside the body of the loop, however, we\n  # still need to specify a variable name in the first line of the for loop.\n  \n  for(num in 1:n){    \n    answer &lt;- c(answer, keepRollingUntilSnakeEyes())\n  }\n  answer\n}\n\nplayManyTimes(3)\n\n[1]  59 101  39\n\nplayManyTimes(10)\n\n [1] 73 16  3 40 26  1 72 11  5 20\n\n#--------------------------------.\n# This version uses a while loop\n#--------------------------------.\nplayManyTimes &lt;- function(n) {\n  answer &lt;- numeric()\n  \n  # With a while loop, it's not as easy to know how many times the loop\n  # will iterate (go around) as it is with a for loop. With a while loop\n  # to understand how many times the loop will iterate (go around)\n  # you must analyze all of the code for the loop and understand it.\n  \n  while(n &gt; 0){\n    answer &lt;- c(answer, keepRollingUntilSnakeEyes())\n    \n    # This line is only in the while loop version.\n    #\n    # You should NEVER change the value of the \"loop variable\"\n    # in the body of a for loop. That would defeat the whole purpose\n    # of a for loop.\n    \n    n = n-1  \n  }\n  answer\n}\n\nplayManyTimes(3)\n\n[1] 95 11  9\n\nplayManyTimes(10)\n\n [1]  84  86  27   1  30  13 119   1   4  42\n\n##########.\n# PART C\n##########.\nresults &lt;- playManyTimes(10000)\nh &lt;- hist(results)\n\n\n\n\n\n\n\n##########.\n# PART D\n##########.\n\n# show the structure of the h variable\nstr(h)\n\nList of 6\n $ breaks  : num [1:11] 0 50 100 150 200 250 300 350 400 450 ...\n $ counts  : int [1:10] 7642 1784 415 128 20 9 0 0 1 1\n $ density : num [1:10] 0.015284 0.003568 0.00083 0.000256 0.00004 ...\n $ mids    : num [1:10] 25 75 125 175 225 275 325 375 425 475\n $ xname   : chr \"results\"\n $ equidist: logi TRUE\n - attr(*, \"class\")= chr \"histogram\"\n\n# show the complete contents of h\nh\n\n$breaks\n [1]   0  50 100 150 200 250 300 350 400 450 500\n\n$counts\n [1] 7642 1784  415  128   20    9    0    0    1    1\n\n$density\n [1] 0.015284 0.003568 0.000830 0.000256 0.000040 0.000018 0.000000 0.000000\n [9] 0.000002 0.000002\n\n$mids\n [1]  25  75 125 175 225 275 325 375 425 475\n\n$xname\n[1] \"results\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\"\n\n# show the contents of just the counts entry in h\nh$counts\n\n [1] 7642 1784  415  128   20    9    0    0    1    1\n\n# make sure that the sum of the counts is in fact 10,000 as it should be\nsum(h$counts)\n\n[1] 10000\n\n\n\n\n\n\n\nQUESTION 5 - TOPICS: loops, if/elseif/else, cat vs return\n\n# The game of \"craps\" involves a player rolling a pair of dice repeatedly\n# according to the rules shown below. \n#\n#   a. The first roll:\n#     i.   If the player rolls 7 or 11 he/she wins\n#     ii.  If the player rolls 2, 3 or 12, he/she loses\n#     iii. if the player rolls any other number, that number becomes the \"point\"\n#\n#   b. All other rolls\n#     i.   If the player hasn't won or lost on the first roll, then the\n#          player keeps rolling until either he rolls a 7 or \n#          the \"point\" (i.e. the same value as the very first roll). \n#          If the player rolls a 7 he loses. \n#          If the player rolls the \"point\" he wins.\n#\n# Write a function named, playCraps, that simulates the computer \n# playing a single game of craps. The function should return TRUE if \n# the player wins the simulated game and FALSE if the player loses the game. \n#\n# Define a single argument named, showOutput. The default value of showOutput \n# should be FALSE. If showOutput is TRUE then the messages should be displayed. \n# If showOutput is FALSE then the messages should NOT be displayed. \n# In either case, the function, playCraps, should return TRUE if the player\n# wins and FALSE if the player loses. For example:\n#\n# EXAMPLE 1 (showOutput is FALSE): \n#\n#     &gt; playCraps(showOutput = FALSE)\n#     [1] FALSE\n#\n#     &gt; playCraps(showOutput = FALSE)\n#     [1] TRUE\n#\n#     &gt; playCraps(showOutput = FALSE)\n#     [1] FALSE\n#\n#     &gt; playCraps(showOutput = FALSE)\n#     [1] TRUE\n#\n# EXAMPLE 2 (showOutput is TRUE): \n#   \n#     &gt; playCraps(showOutput = TRUE)\n#     roll #1: 7\n#     WIN\n#     [1] TRUE\n#\n#     &gt; playCraps(showOutput = TRUE)\n#     roll #1: 12\n#     LOSE\n#     [1] FALSE\n#   \n#     &gt; playCraps(showOutput = TRUE)\n#     roll #1: 6\n#     roll #2: 11\n#     roll #3: 5\n#     roll #4: 5\n#     roll #5: 6\n#     WIN\n#     [1] TRUE\n#\n#     &gt; playCraps(showOutput = TRUE)\n#     roll #1: 6\n#     roll #2: 9\n#     roll #3: 5\n#     roll #4: 9\n#     roll #5: 4\n#     roll #6: 4\n#     roll #7: 9\n#     roll #8: 3\n#     roll #9: 3\n#     roll #10: 2\n#     roll #11: 4\n#     roll #12: 8\n#     roll #13: 10\n#     roll #14: 7\n#     LOSE\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# WHAT TYPE OF LOOP SHOULD I USE?\n#\n#   You can always use a while loop to solve a looping problem.\n#   However, sometimes a for loop makes the code easier to read and write.\n#\n#   Can I use a for loop in this case? NO\n#\n#   You should only use a for loop when it's possible to know before the loop\n#   even starts how many times it will iterate (i.e. how many times it will\n#   go around). \n#\n#   In this case, it's impossible to know in advance how many times the dice\n#   will need to be rolled before the game ends. The game could end on the \n#   first roll, the 50th roll, the 500th time, or never (but that's unlikely).\n\nplayCraps &lt;- function(showOutput = FALSE){\n  rollNumber &lt;- 1\n  point &lt;- sum(rollDice(2))\n  \n  if(showOutput){\n    cat(\"roll #\", rollNumber, \": \", point, \"\\n\", sep=\"\")\n  } \n  \n  if(point == 7 || point == 12){\n    if(showOutput)  cat(\"WIN\\n\\n\")\n    \n    return(TRUE)\n    \n  } else if (point %in% c(2,3,12)){\n    if(showOutput)  cat(\"LOSE\\n\\n\")\n    return(FALSE)\n    \n  } else {\n    \n    while(TRUE) {\n      roll &lt;- sum(rollDice(2))\n      rollNumber &lt;- rollNumber + 1\n      if(showOutput){\n        cat(\"roll #\", rollNumber, \": \", roll, \"\\n\", sep=\"\")\n      } \n      \n      if(roll == 7){\n      \n        if(showOutput){\n           cat(\"LOSE\\n\\n\")\n        } \n      \n        return(FALSE)\n      \n      } else if ( roll == point) {\n      \n        if(showOutput){\n          cat(\"WIN\\n\\n\")\n        }\n        return(TRUE)\n      }\n    }    \n  }\n}\n\nplayCraps(TRUE)\n\nroll #1: 4\nroll #2: 4\nWIN\n\n\n[1] TRUE\n\nplayCraps(TRUE)\n\nroll #1: 7\nWIN\n\n\n[1] TRUE\n\nplayCraps(TRUE)\n\nroll #1: 7\nWIN\n\n\n[1] TRUE\n\nplayCraps(TRUE)\n\nroll #1: 8\nroll #2: 9\nroll #3: 2\nroll #4: 7\nLOSE\n\n\n[1] FALSE\n\nplayCraps()\n\n[1] TRUE\n\n\n\n\n\n\n\nQUESTION 6 - TOPICS: loops\n\n###########.\n# PART A\n###########.\n# We can simulate playing craps many, many times. This can be done to \n# generate an estimate the probability of winning a game of craps.\n# \n# Do the following:\n#\n# a. Create a function, playCrapsManyTimes, that takes a single argument, n. \n#\n# b. The function should return a vector that contains the results of calling\n#    the playCraps command n times. \n#\n# c. Use the function to simulate playing craps ten thousand times\n#\n# d. Calculate the percent of times that the player won the game \n#    (i.e. total TRUEs divided by total number of games played). \n#    Since TRUE is treated as 1 and FALSE as zero, it is possible to use \n#    the mean function to calculate this.\n#\n# e. For example the following shows that there is only \n#    approximately a 47.9% chance of winning the game of craps.:\n#\n#      &gt; results &lt;- playCrapsManyTimes(10000)\n#      &gt; mean(results)\n#      [1] 0.47915\n#\n#    The more times we play, the more accurate our estimate of the\n#    probablily of winning will be.\n\n\n\n\n\n\n\nclick here for answer\n\n\n\n\n\n\n# WHAT TYPE OF LOOP SHOULD I USE?\n#\n#   You can always use a while loop to solve a looping problem.\n#   However, sometimes a for loop makes the code easier to read and write.\n#\n#   Can I use a for loop in this case? YES\n#\n#   You should only use a for loop when it's possible to know before the loop\n#   even starts how many times it will iterate (i.e. how many times it will\n#   go around). \n#\n#   In this case, since the value of n (i.e. the number of times to loop)\n#   is known before we even start the loop, we can use a for loop (as well \n#   as a while loop).\n\n#------------------------------.\n# This version uses a for loop\n#------------------------------.\n\nplayCrapsManyTimes &lt;- function(n) {\n  answer &lt;- logical()\n  for (num in 1:n){\n    answer &lt;- c(answer, playCraps(FALSE))\n  }\n  answer\n}\nresults &lt;- playCrapsManyTimes(100000)\nmean(results)\n\n[1] 0.47924\n\n#--------------------------------.\n# This version uses a while loop\n#--------------------------------.\n\nplayCrapsManyTimes &lt;- function(n) {\n  answer &lt;- logical()\n  while (n &gt; 0){\n    answer &lt;- c(answer, playCraps(FALSE))\n    n = n - 1\n  }\n  answer\n}\nresults &lt;- playCrapsManyTimes(100000)\nmean(results)\n\n[1] 0.47775",
    "crumbs": [
      "Practice Questions <span style=\"font-size: .75em\">*(also see \"More Practice Questions\" below)*</span>",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Practice Questions - TOPIC: loops (writing code)</span>"
    ]
  },
  {
    "objectID": "99975-quartoBook_part_questionsAddedRecently-v001.html",
    "href": "99975-quartoBook_part_questionsAddedRecently-v001.html",
    "title": "More Practice Questions (added recently)",
    "section": "",
    "text": "In addition to the questions in the “Practice Questions” section, this section contains additional practice questions that were added to the website recently to help you study for the final exam.",
    "crumbs": [
      "More Practice Questions (added recently)"
    ]
  },
  {
    "objectID": "99950-qstns-moreQuestions-v001.html",
    "href": "99950-qstns-moreQuestions-v001.html",
    "title": "44  Practice Questions - TOPICS: Dataframes, & | !",
    "section": "",
    "text": "Click  here  for the questions.\nClick  here  for the answers.",
    "crumbs": [
      "More Practice Questions (added recently)",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Practice Questions - TOPICS: Dataframes, & | !</span>"
    ]
  },
  {
    "objectID": "001035-qstns-loopsReadcode-v001.html",
    "href": "001035-qstns-loopsReadcode-v001.html",
    "title": "45  Practice Questions - TOPICS: cat, loops (reading code)",
    "section": "",
    "text": "45.1 TOPICS: return vs cat",
    "crumbs": [
      "More Practice Questions (added recently)",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Practice Questions - TOPICS: cat, loops (reading code)</span>"
    ]
  },
  {
    "objectID": "001035-qstns-loopsReadcode-v001.html#topics-return-vs-cat",
    "href": "001035-qstns-loopsReadcode-v001.html#topics-return-vs-cat",
    "title": "45  Practice Questions - TOPICS: cat, loops (reading code)",
    "section": "",
    "text": "QUESTION 1 - Topics: return value of a function\nWhat is displayed by the following code?\n\nf = function(n){\n  return(n*2)\n}\n\n# What does this display?\n#f(3) + 100\n\n# What does this display?\n#x = f(3)\n\n# What does this display?\n#3\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\n\n# What does this display?\nf(3) + 100\n\n[1] 106\n\n\n\n# What does this display?\nx = f(3)\n\n\n# What does this display?\nx\n\n[1] 6\n\n\n\n\n\n\n\nQUESTION 2 - Topics: cat\n\n# What is displayed by the following code?\n#cat(3)\n\n# What is displayed by the following code?\n#cat(3) * 2\n\n# What is displayed by the following code?\n#x = cat(3)\n\n# What is displayed by the following code?\n#x\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\nThe job of the cat function is simply to display information to the screen. You cannot capture the output of cat and use it. Similarly you cannot multiply the value that is displayed by cat or use the output of cat in any similar “larger context”.\nThis is very different from other functions, eg. seq. With most other functions you can capture the output in a variable or use the function in a larger context. The following examples show how the output of seq can be used in a larger context. You cannot do any of that with cat. The reason that you can use the output of most other functions in a larger context is that these other functions “return” values.\n\n#######################################################################.\n# Demonstrating the return value of seq being used in a larger context\n#######################################################################.\n\n# We can use the function by itself and the return value will be displayed to\n# the screen.\nseq(1,3)         \n\n[1] 1 2 3\n\n\n\n############################################################################.\n# The following commands use the value that is returned by seq in a\n# larger context\n############################################################################.\n\n\nsum(seq(1,3))    # sum the values\n\n[1] 6\n\nseq(1,3) * 100   # multiply the values\n\n[1] 100 200 300\n\nx = seq(1,3)     # save the values in a variable\nx                # now the variable has the value\n\n[1] 1 2 3\n\n\n\n###########################################################.\n# cat is different - it's return value is NULL\n###########################################################.\n\n# As we said, cat displays values to the screen but does not \"return\" those\n# values. That means that you cannot use those values in a \"larger context\".\n#\n# The actual return value of cat is the special value NULL. NULL basically\n# means \"there is NOTHING being returned\" (NA is different than NULL in that\n# NA stands for a value that technically exists, we just don't know the actual\n# value). One last source of confusion is that you don't normally see \n# the value NULL when you run cat since the NULL is returned as an \n# \"invisible\" value (see ?invisible).\n#\n# The following shows what happens when you try to use cat in a larger\n# context. \n\n\n# What is displayed by the following code?\n#\n# ANSWER: the info is displayed on the screen.\ncat(3) \n\n3\n\n\n\n# What is displayed by the following code?\n#\n# ANSWER: \n#   Step 1 - cat displays 3 on the screen.\n#   Step 2 - cat returns NULL\n#   Step 3 - NULL * 2 results in numeric(0). Basically, the idea is that you \n#            cannot use the output of cat in a meaningful way.\n\ncat(3) * 2\n\n3\n\n\nnumeric(0)\n\n\n\n# What is displayed by the following code?\n#\n# ANSWER: \n#   Step 1 - cat displays 3 on the screen.\n#   Step 2 - the NULL that is \"returned\" from cat is captured\n#            in the variable x\nx = cat(3)\n\n3\n\n\n\n# What is displayed by the following code?\n#\n# ANSWER: \n#   The value NULL that was assigned to x is displayed.\nx\n\nNULL\n\n\n\n\n\n\n\nQUESTION 3 - Topics: return vs cat\nWhat is displayed by the following code?\n\nf = function(n){\n  cat(n*2)\n  return(0)\n}\n\n\n# What does this display?\n#f(3) + 100\n\n\n# What does this display?\n#x = f(3)\n\n\n# What does this display?\n#x\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\nThere is a big difference between cat and return. Values that are returned can be used in a larger context when calling a function.\nValues that are displayed with cat appear on the screen, but they are NOT returned. This means that you cannot capture the values that are displayed with cat in a variable. Similarly the values that are displayed with cat CANNOT be used in a larger context.\nThe return value of f is 0. It is this 0 that is used in a larger context. The call to cat in the function simply displays info to the screen but that info cannot be used in any larger context.\n\n# What does this display?\n#\n# ANSWER: \n#   step 1 - n*2 is calculated to be 6\n#   step 2 - cat displays 6 on the screen\n#   step 3 - the function f \"returns\" 0\n#   step 4 - 0 + 100 is calculated to be 100 and is displayed to the screen.\n\nf(3) + 100\n\n6\n\n\n[1] 100\n\n\n\n# What does this display?\n#\n# ANSWER: \n#   step 1 - n*2 is calculated to be 6\n#   step 2 - cat displays 6 on the screen\n#   step 3 - the function f \"returns\" 0\n#   step 4 - x is assigned the return value of 0\nx = f(3)\n\n6\n\n\n\n# What does this display?\n#\n# ANSWER:\n#   The value 0 that was assigned to x is displayed\n\nx\n\n[1] 0\n\n\n\n\n\n\n\nQUESTION 4 - Topics: return vs cat\nWhat is displayed by the following code?\n\nf = function(n){\n  cat(n*2)\n}\n\n# What does this display?\n#f(3) + 100\n\n# What does this display?\n#x = f(3)\n\n# What does this display?\n#x\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\nThere is a big difference between cat and return. Values that are returned can be used in a larger context when calling a function.\nValues that are displayed with cat appear on the screen, but they are NOT returned. The actual “return value” of cat is NULL. Since cat is the last thing to be executed in the function, the return value of the function is also NULL.\n\n# What does this display?\n#\n# ANSWER: \n#   step 1 - n*2 is calculated to be 6\n#   step 2 - cat displays 6 on the screen\n#   step 3 - cat \"returns\" NULL\n#   step 4 - since cat is the last thing to be executed in the function,\n#            the function, f, returns NULL.\n#   step 5 - NULL + 100 results in numeric(0) and that is displayed\n\nf(3) + 100\n\n6\n\n\nnumeric(0)\n\n# What does this display?\n#\n# ANSWER: \n#   step 1 - n*2 is calculated to be 6\n#   step 2 - cat displays 6 on the screen\n#   step 3 - cat \"returns\" NULL\n#   step 4 - since cat is the last thing to be executed in the function,\n#            the function, f, returns NULL.\n#   step 5 - x is assigned the value NULL\n\nx = f(3)\n\n6\n\n# What does this display?\n#\n# ANSWER: \n#   step 1 - The value NULL that was assigned to x is displayed to the screen\nx\n\nNULL",
    "crumbs": [
      "More Practice Questions (added recently)",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Practice Questions - TOPICS: cat, loops (reading code)</span>"
    ]
  },
  {
    "objectID": "001035-qstns-loopsReadcode-v001.html#topics-loops-for-and-while",
    "href": "001035-qstns-loopsReadcode-v001.html#topics-loops-for-and-while",
    "title": "45  Practice Questions - TOPICS: cat, loops (reading code)",
    "section": "45.2 TOPICS: loops (for and while)",
    "text": "45.2 TOPICS: loops (for and while)\n\nQUESTION 5 - Topics: for loops\nWhat is displayed by the following code?\n\nf = function(n){\n  \n  for (x in 1:n){\n    cat(x * x, \" \")\n  }\n  \n  cat(\"\\n\")\n  \n  return(c(x, n))\n\n}\n\n# What does this display?\n#result = f(4)\n\n# What does this display?\n#result\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\n\n# What does this display?\nresult = f(4)\n\n1  4  9  16  \n\n# What does this display?\nresult\n\n[1] 4 4\n\n\n\n\n\n\n\nQUESTION 6 - Topics: while loops, cat vs return\nWhat is displayed by the following code?\n\nf = function(n){\n  \n  x = 1\n  while  (n &gt;= 1){\n    cat(x, \" \")\n    x = x * 2\n    n = n - 1\n  }\n  \n  cat(\"\\n\")\n  \n  return(c(x, n))\n\n}\n\n# What does this display?\n#x = f(4)\n\n# What does this display?\n#x\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\n\n# What does this display?\nx = f(4)\n\n1  2  4  8  \n\n# What does this display?\nx\n\n[1] 16  0\n\n\n\n\n\n\n\nQUESTION 7 - Topics: for loops\nWhat is displayed by the following code?\n\nf = function(n){\n  \n  for (x in 1:n){\n    cat(\"*** starting outer for loop again***\\n\")\n    for (y in x:n){\n      cat(\"x is \", x, \"    \")\n      cat(\"y is \", y, \"\\n\")\n    }\n  }\n  \n  return( c(x,y) )\n}\n\n# What does this display?\n#result = f(4)\n\n# What does this display?\n#result\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\n\n# What does this display?\nresult = f(4)\n\n*** starting outer for loop again***\nx is  1     y is  1 \nx is  1     y is  2 \nx is  1     y is  3 \nx is  1     y is  4 \n*** starting outer for loop again***\nx is  2     y is  2 \nx is  2     y is  3 \nx is  2     y is  4 \n*** starting outer for loop again***\nx is  3     y is  3 \nx is  3     y is  4 \n*** starting outer for loop again***\nx is  4     y is  4 \n\n# What does this display?\nresult\n\n[1] 4 4\n\n\n\n\n\n\n\nQUESTION 8 - Topics: for loops, nested loops, if\nWhat is displayed by the following code?\n\ndrawSomething = function(size){\n  \n  if (!is.numeric(size) || trunc(size) != size || size &lt; 0){\n    stop(\"size must be a non-negative whole number\")\n  }\n  \n  for (row in 1:size){\n    \n    for (col in 1:size){\n      \n      if (col == row || col == size - row + 1){\n        cat(\"@\")\n      } else {\n        cat(\".\")\n      }\n        \n    }\n    \n    cat(\"\\n\")\n  }\n  \n  cat(\"\\nHope you like the picture! :)\\n\")\n    \n\n}\n\n# What do these display?\n#drawSomething(3)\n#drawSomething(5)\n#drawSomething(1)\n#drawSomething(0)  # be careful! This is tricky. Probably not what you'd expect.\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\n\n# What do these display?\ndrawSomething(3)\n\n@.@\n.@.\n@.@\n\nHope you like the picture! :)\n\ndrawSomething(5)\n\n@...@\n.@.@.\n..@..\n.@.@.\n@...@\n\nHope you like the picture! :)\n\ndrawSomething(1)\n\n@\n\nHope you like the picture! :)\n\ndrawSomething(0)  # be careful! This is tricky. Probably not what you'd expect.\n\n@@\n@@\n\nHope you like the picture! :)\n\n\n\n\n\n\n\nQUESTION 9 - Topics: for loops, nested loops, if\nThe only thing that changed are the lines that are highlighted in the code with “# THIS CHANGED”.\nWhat will be displayed now?\n\ndrawSomething = function(size){\n  \n  if (!is.numeric(size) || trunc(size) != size || size &lt; 0){\n    stop(\"size must be a non-negative whole number\")\n  }\n  \n  for (row in 1:size){\n    \n    for (col in 1:size){\n      \n      if (col == row || col == size - row + 1){  # THIS CHANGED\n                                                 # THIS CHANGED\n        if ( row %% 2 == 0)                      # THIS CHANGED\n          cat(\"0\")                               # THIS CHANGED\n        else                                     # THIS CHANGED\n          cat(\"X\")                               # THIS CHANGED\n                                                 # THIS CHANGED\n      } else {\n        cat(\".\")\n        \n      }\n        \n    }\n    \n    cat(\"\\n\")\n  }\n  \n  cat(\"\\nHope you like the picture! :)\\n\")\n    \n\n}\n\n# What does this display?\n#drawSomething(5)\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\n\n# What does this display?\ndrawSomething(5)\n\nX...X\n.0.0.\n..X..\n.0.0.\nX...X\n\nHope you like the picture! :)\n\n\n\n\n\n\n\nQUESTION 10 - Topics: for loops, nested loops, if\nWhat is displayed by the following code?\n\ndrawSomething = function(size){\n  \n  if (!is.numeric(size) || trunc(size) != size || size &lt; 0){\n    stop(\"size must be a non-negative whole number\")\n  }\n  \n  for(row in 1:size){\n\n    if( row == 1 || row == size ){\n      for (x in 1:size){\n        cat(\"-\")\n      }\n      cat(\"\\n\")\n      \n    } else {\n      for (col in 1:size) {\n        if( row == 1 || row == size ){\n          for (x in 1:size){\n            cat(\"-\")\n          }\n          cat(\"\\n\")\n          \n        } else {\n          if (col == 1){\n            cat(\"|\")\n          } else if (col == size){\n            cat(\"|\\n\")\n          } else if (row == col) {\n            cat(\"x\")\n          } else {\n            cat(\".\")\n          }\n        }\n      }\n    }\n\n  }\n}\n\n# What does this display?\n#drawSomething(5)\n\n# What does this display?\n#drawSomething(10)\n\n\n\n\n\n\n\nClick here for answer\n\n\n\n\n\n\n# What does this display?\ndrawSomething(5)\n\n-----\n|x..|\n|.x.|\n|..x|\n-----\n\n# What does this display?\ndrawSomething(10)\n\n----------\n|x.......|\n|.x......|\n|..x.....|\n|...x....|\n|....x...|\n|.....x..|\n|......x.|\n|.......x|\n----------",
    "crumbs": [
      "More Practice Questions (added recently)",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Practice Questions - TOPICS: cat, loops (reading code)</span>"
    ]
  },
  {
    "objectID": "000110-RStudioHotkeys-v001.html",
    "href": "000110-RStudioHotkeys-v001.html",
    "title": "Appendix A — R Studio Hotkeys",
    "section": "",
    "text": "RStudio - some useful hotkeys\n\n\n\n\n\n\n\nHotkey\nPress in this window\nWhat it does\n\n\n\n\nctrl-L\nany window\nClear the “console” window.\n\n\nctrl-ENTER (win)\ncmd-ENTER (mac)\nscript window\nRun all code that is highlighted in the Script window.  The output will appear in the console window. (also see shift-arrow-keys below)\n\nIf no code is highlighted then this runs just the line of code where the cursor is in the script window.\n\n\nESC\nconsole window\nClears just the current line of code. Use this if you typed a long command and you want to erase it before pressing ENTER.\n\n\narrow-keys\nconsole window\nleft/right arrows move in the current line of code.\nup/down arrows move to commands that were typed earlier/later.\n\n\nshift-arrow-keys\nscript window\nExtend the highlight in the direction of the arrow key. This is a very quick way to highlight a few lines of code. Press shift while holding the down arrow (or up arrow) to highlight just a few lines of code.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>R Studio Hotkeys</span>"
    ]
  },
  {
    "objectID": "000350-n-doNotUseParenthesesWhenTheyAreClearlyNotNecessary-v060.html",
    "href": "000350-n-doNotUseParenthesesWhenTheyAreClearlyNotNecessary-v060.html",
    "title": "Appendix B — DO NOT use parentheses when they are clearly not necessary.",
    "section": "",
    "text": "#####################################################################.\n# In general, DO NOT use parentheses when they are clearly not necessary. ####\n# It shows poor knowledge of the R language. \n#####################################################################.\n\n# Don't do this! - you never need parentheses around a single value\nseq((1), (3))  \n\n[1] 1 2 3\n\n# Don't do this! - unnecessary parentheses\n(seq(1,3))   \n\n[1] 1 2 3\n\n# Don't do this! - you never need parentheses around a single argument\nx=2\nseq(1,(3+x))  # do not put parentheses around a single argument\n\n[1] 1 2 3 4 5\n\n# This is the way to do it.\nseq(1 , 3+x)  # better!\n\n[1] 1 2 3 4 5\n\n#####################################################################.\n# It is acceptable to use extra parentheses when they are used to \n# clarify the order of operations. Not everyone knows the order of \n# operations by heart and this can make your code more readable.\n#####################################################################.\n\n# For example:\n\n10-(2:10)\n\n[1] 8 7 6 5 4 3 2 1 0\n\n# is very different from \n\n(10-2):10\n\n[1]  8  9 10\n\n# The following (without the parentheses)\n10-2:10\n\n[1] 8 7 6 5 4 3 2 1 0\n\n# is the same as 10-(2:10) as the order of operations lists the\n# colon operator (:) before the subtraction operator (-)\n# ( see ?Syntax )\n#\n# Therefore, I'd accept 10-(2:10) even thought strictly speaking the \n# parentheses are not necessary as the parentheses help to clarify the\n# order of operations.\n\n\n############################################################################.\n# QUESTION: The vector, x, contains at lest 3 values.\n#           Write a command to show the last 3 values in the vector.\n#           Your code must work no matter how many values are in the vector.\n#\n# Example 1: \n#   &gt; x = c(\"anne\",\"bob\",\"carla\",\"dave\",\"ed\",\"fran\",\"george\",\"hugh\",\"ike\",\"jill\")\n#   YOUR CODE GOES HERE\n#   [1] \"hugh\" \"ike\" \"jill\"\n#\n# Example 2: \n#   &gt; x = seq(10,50,by=10)\n#   YOUR CODE GOES HERE\n#   [1] 30 40 50\n############################################################################.\n\n\n#------------.\n# Answer: \n#------------.\n\n# Example 1:\nx = c(\"anne\",\"bob\",\"carla\",\"dave\",\"ed\",\"fran\",\"george\",\"hugh\",\"ike\",\"jill\")\nx[ (length(x)-2):length(x) ]    # ANSWER\n\n[1] \"hugh\" \"ike\"  \"jill\"\n\n# Example 2: \nx = seq(10,50,by=10)\nx[ (length(x)-2):length(x) ]    # ANSWER\n\n[1] 30 40 50\n\n#####################################################################.\n# Don't use c(...) when it is not necessary  ####\n#####################################################################.\n\n# c() is only required to combine multiple vectors into a single vector.\n# Do not use c for a single vector.\n\nstudents = c(\"joe\", \"sue\")   # c is required\nc(students)     # c is not required - since there is only one vector - dont use c here\n\n[1] \"joe\" \"sue\"\n\nstudents\n\n[1] \"joe\" \"sue\"\n\nc(seq(1,10,by=2))  # c is not required because seq is already a vector! - don't use c here\n\n[1] 1 3 5 7 9\n\nseq(1,10,by=2)\n\n[1] 1 3 5 7 9\n\nc ( rep(10,3), rep(20, 2))  # c IS required because you're combining two different vectors\n\n[1] 10 10 10 20 20",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>DO NOT use parentheses when they are clearly not necessary.</span>"
    ]
  },
  {
    "objectID": "000365-matchingBraces_indentation-v001.html",
    "href": "000365-matchingBraces_indentation-v001.html",
    "title": "Appendix C — matching braces, indentation",
    "section": "",
    "text": "# Using RStudio to find matching (parentheses), [square brackets] and {curly braces} ####\n#\n#\n# Place your cursor immediately after an \"opening\" (, [ or [ and \n# RStudio will highlight the matching \"closing\" ), ] or } by shading it grey.\n# Similarly if you put your cursor immeately after a \"closing symbol\", RStudio\n# will highlight the corresponding \"opening\" symbol.\n#\n# If you try this and you don't see the matching symbol, chances are you're\n# missing either an \"opening\" or a \"closing\" symbol. \n\n\n# Indentation  ####\n#\n# You can make it a lot easier for yourself (and others) to understand your\n# code and to find missing (or extra) {curly braces} by using \"indentation\"\n# consistently and carefully.\n#\n# EVERY TIME you type an open curly brace\n# (whether for an \"if\", an \"if else\", an \"else\", a \"while loop\" or a \"for loop\"), \n# you should increase the level of indentation for the code inside the \n# {curly braces}.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>matching braces, indentation</span>"
    ]
  },
  {
    "objectID": "0200200-rstudioFolding-v033.html",
    "href": "0200200-rstudioFolding-v033.html",
    "title": "Appendix D — How to hide/show portions of code in RStudio (“code folding”)",
    "section": "",
    "text": "How to hide/show portions of code in RStudio (i.e. “code folding”)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Using RStudio’s editor, you can hide/show certain portions of code. # This makes it is easier to navigate through long code files. # Hiding code in the editor in this way is called “code folding”. # # To fold code you can # click on the triangles #### # that appear in RStudio’s margin, next to the line numbers. # These triangles appear in the following places: # # 1. Next to the first line of a function #### # 2. Next to the line that contains a opening “{” #### # 3. on a line with a comment that ends with 4 pound signs, i.e. #### # 4. on a line with a comment that ends with 4 equal signs, i.e. ==== # 5. on a line with a comment that ends with 4 dashes, i.e. —- # # # #### Hot Keys and Menu choices #### # # You can fold a particular section of code or all sections with the # menu choices found under “Edit | Folding” menu. These choices have the # following corresponding hotkeys. # # - collapse a single section (Windows: alt+L) #### # - expand a single section (Windows: alt+shift+L) #### # - collapse ALL sections (Windows: alt+O) #### # - expand ALL sections (Windows: alt+shift+O) #### # # See the following for more info about “code folding” within R Studio # # https://support.rstudio.com/hc/en-us/articles/200484568-Code-Folding-and-Sections-in-the-RStudio-IDE #### # # https://stackoverflow.com/questions/36992873/r-studio-organize-code-in-section-that-can-be-hidden #### # # # click the dropdown at the bottom left hand of the script window #### # to select the section of code that you’d like to jump to. #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>How to hide/show portions of code in RStudio (\"code folding\")</span>"
    ]
  }
]